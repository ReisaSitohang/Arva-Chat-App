!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], false, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function r(e,r){for(var n=e.split(".");n.length;)r=r[n.shift()];return r}function n(n){if("string"==typeof n)return r(n,e);if(!(n instanceof Array))throw new Error("Global exports must be a string or array.");for(var t={},o=!0,f=0;f<n.length;f++){var i=r(n[f],e);o&&(t["default"]=i,o=!1),t[n[f].split(".").pop()]=i}return t}function t(r){if(Object.keys)Object.keys(e).forEach(r);else for(var n in e)a.call(e,n)&&r(n)}function o(r){t(function(n){if(-1==l.call(s,n)){try{var t=e[n]}catch(o){s.push(n)}r(n,t)}})}var f,i=$__System,a=Object.prototype.hasOwnProperty,l=Array.prototype.indexOf||function(e){for(var r=0,n=this.length;n>r;r++)if(this[r]===e)return r;return-1},s=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];i.set("@@global-helpers",i.newModule({prepareGlobal:function(r,t,i){var a=e.define;e.define=void 0;var l;if(i){l={};for(var s in i)l[s]=e[s],e[s]=i[s]}return t||(f={},o(function(e,r){f[e]=r})),function(){var r;if(t)r=n(t);else{r={};var i,s;o(function(e,n){f[e]!==n&&"undefined"!=typeof n&&(r[e]=n,"undefined"!=typeof i?s||i===n||(s=!0):i=n)}),r=s?r:i}if(l)for(var u in l)e[u]=l[u];return e.define=a,r}}}))}("undefined"!=typeof self?self:global);
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
$__System.registerDynamic('2', ['3', '4', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var getKeys = $__require('3'),
      toIObject = $__require('4');
  module.exports = function (object, el) {
    var O = toIObject(object),
        keys = getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index) if (O[key = keys[index++]] === el) return key;
  };
  return module.exports;
});
$__System.registerDynamic('6', ['3', '7', '8', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // all enumerable object keys, includes symbols
  var getKeys = $__require('3'),
      gOPS = $__require('7'),
      pIE = $__require('8');
  module.exports = function (it) {
    var result = getKeys(it),
        getSymbols = gOPS.f;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = pIE.f,
          i = 0,
          key;
      while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }return result;
  };
  return module.exports;
});
$__System.registerDynamic('9', ['a', 'b', 'c', 'd', 'e', 'f', '10', '11', '12', '13', '14', '15', '16', '2', '6', '17', '18', '4', '19', '1a', '1b', '1c', '1d', '1e', '3', '1f', '8', '7', '20', '21', '5'], true, function ($__require, exports, module) {
  'use strict';
  // ECMAScript 6 symbols shim

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      has = $__require('b'),
      DESCRIPTORS = $__require('c'),
      $export = $__require('d'),
      redefine = $__require('e'),
      META = $__require('f').KEY,
      $fails = $__require('10'),
      shared = $__require('11'),
      setToStringTag = $__require('12'),
      uid = $__require('13'),
      wks = $__require('14'),
      wksExt = $__require('15'),
      wksDefine = $__require('16'),
      keyOf = $__require('2'),
      enumKeys = $__require('6'),
      isArray = $__require('17'),
      anObject = $__require('18'),
      toIObject = $__require('4'),
      toPrimitive = $__require('19'),
      createDesc = $__require('1a'),
      _create = $__require('1b'),
      gOPNExt = $__require('1c'),
      $GOPD = $__require('1d'),
      $DP = $__require('1e'),
      $keys = $__require('3'),
      gOPD = $GOPD.f,
      dP = $DP.f,
      gOPN = gOPNExt.f,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      PROTOTYPE = 'prototype',
      HIDDEN = wks('_hidden'),
      TO_PRIMITIVE = wks('toPrimitive'),
      isEnum = {}.propertyIsEnumerable,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      OPSymbols = shared('op-symbols'),
      ObjectProto = Object[PROTOTYPE],
      USE_NATIVE = typeof $Symbol == 'function',
      QObject = global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = DESCRIPTORS && $fails(function () {
    return _create(dP({}, 'a', {
      get: function () {
        return dP(this, 'a', { value: 7 }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function (tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create(D, { enumerable: createDesc(0, false) });
      }return setSymbolDesc(it, key, D);
    }return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto,
        names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }return result;
  };

  // 19.4.1.1 Symbol([description])
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function (value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    $__require('1f').f = gOPNExt.f = $getOwnPropertyNames;
    $__require('8').f = $propertyIsEnumerable;
    $__require('7').f = $getOwnPropertySymbols;

    if (DESCRIPTORS && !$__require('20')) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

  for (var symbols =
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) wks(symbols[i++]);

  for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]);

  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function (key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(key) {
      if (isSymbol(key)) return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function () {
      setter = true;
    },
    useSimple: function () {
      setter = false;
    }
  });

  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      var args = [it],
          i = 1,
          replacer,
          $replacer;
      while (arguments.length > i) args.push(arguments[i++]);
      replacer = args[1];
      if (typeof replacer == 'function') $replacer = replacer;
      if ($replacer || !isArray(replacer)) replacer = function (key, value) {
        if ($replacer) value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || $__require('21')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global.JSON, 'JSON', true);
  return module.exports;
});
$__System.registerDynamic('22', ['d', '1b', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d');
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  $export($export.S, 'Object', { create: $__require('1b') });
  return module.exports;
});
$__System.registerDynamic('23', ['d', 'c', '1e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d');
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  $export($export.S + $export.F * !$__require('c'), 'Object', { defineProperty: $__require('1e').f });
  return module.exports;
});
$__System.registerDynamic('24', ['d', 'c', '25', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d');
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  $export($export.S + $export.F * !$__require('c'), 'Object', { defineProperties: $__require('25') });
  return module.exports;
});
$__System.registerDynamic('26', ['4', '1d', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject = $__require('4'),
      $getOwnPropertyDescriptor = $__require('1d').f;

  $__require('27')('getOwnPropertyDescriptor', function () {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });
  return module.exports;
});
$__System.registerDynamic('28', ['29', '2a', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject = $__require('29'),
      $getPrototypeOf = $__require('2a');

  $__require('27')('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return $getPrototypeOf(toObject(it));
    };
  });
  return module.exports;
});
$__System.registerDynamic('2b', ['29', '3', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.14 Object.keys(O)
  var toObject = $__require('29'),
      $keys = $__require('3');

  $__require('27')('keys', function () {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
  return module.exports;
});
$__System.registerDynamic('1c', ['4', '1f', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = $__require('4'),
      gOPN = $__require('1f').f,
      toString = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
  return module.exports;
});
$__System.registerDynamic('2c', ['27', '1c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  $__require('27')('getOwnPropertyNames', function () {
    return $__require('1c').f;
  });
  return module.exports;
});
$__System.registerDynamic('2d', ['2e', 'f', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.5 Object.freeze(O)
  var isObject = $__require('2e'),
      meta = $__require('f').onFreeze;

  $__require('27')('freeze', function ($freeze) {
    return function freeze(it) {
      return $freeze && isObject(it) ? $freeze(meta(it)) : it;
    };
  });
  return module.exports;
});
$__System.registerDynamic('2f', ['2e', 'f', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.17 Object.seal(O)
  var isObject = $__require('2e'),
      meta = $__require('f').onFreeze;

  $__require('27')('seal', function ($seal) {
    return function seal(it) {
      return $seal && isObject(it) ? $seal(meta(it)) : it;
    };
  });
  return module.exports;
});
$__System.registerDynamic('30', ['2e', 'f', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.15 Object.preventExtensions(O)
  var isObject = $__require('2e'),
      meta = $__require('f').onFreeze;

  $__require('27')('preventExtensions', function ($preventExtensions) {
    return function preventExtensions(it) {
      return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
    };
  });
  return module.exports;
});
$__System.registerDynamic('31', ['2e', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.12 Object.isFrozen(O)
  var isObject = $__require('2e');

  $__require('27')('isFrozen', function ($isFrozen) {
    return function isFrozen(it) {
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });
  return module.exports;
});
$__System.registerDynamic('32', ['2e', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.13 Object.isSealed(O)
  var isObject = $__require('2e');

  $__require('27')('isSealed', function ($isSealed) {
    return function isSealed(it) {
      return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });
  return module.exports;
});
$__System.registerDynamic('27', ['d', '33', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // most Object methods by ES6 should accept primitives
  var $export = $__require('d'),
      core = $__require('33'),
      fails = $__require('10');
  module.exports = function (KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function () {
      fn(1);
    }), 'Object', exp);
  };
  return module.exports;
});
$__System.registerDynamic('34', ['2e', '27', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.11 Object.isExtensible(O)
  var isObject = $__require('2e');

  $__require('27')('isExtensible', function ($isExtensible) {
    return function isExtensible(it) {
      return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });
  return module.exports;
});
$__System.registerDynamic('35', ['d', '36', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.3.1 Object.assign(target, source)
  var $export = $__require('d');

  $export($export.S + $export.F, 'Object', { assign: $__require('36') });
  return module.exports;
});
$__System.registerDynamic('37', ['d', '38', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.3.10 Object.is(value1, value2)
  var $export = $__require('d');
  $export($export.S, 'Object', { is: $__require('38') });
  return module.exports;
});
$__System.registerDynamic('39', ['d', '3a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = $__require('d');
  $export($export.S, 'Object', { setPrototypeOf: $__require('3a').set });
  return module.exports;
});
$__System.registerDynamic('3b', ['3c', '14', 'e', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 19.1.3.6 Object.prototype.toString()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var classof = $__require('3c'),
      test = {};
  test[$__require('14')('toStringTag')] = 'z';
  if (test + '' != '[object z]') {
    $__require('e')(Object.prototype, 'toString', function toString() {
      return '[object ' + classof(this) + ']';
    }, true);
  }
  return module.exports;
});
$__System.registerDynamic('3d', ['d', '3e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
  var $export = $__require('d');

  $export($export.P, 'Function', { bind: $__require('3e') });
  return module.exports;
});
$__System.registerDynamic('3f', ['1e', '1a', 'b', 'c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var dP = $__require('1e').f,
      createDesc = $__require('1a'),
      has = $__require('b'),
      FProto = Function.prototype,
      nameRE = /^\s*function ([^ (]*)/,
      NAME = 'name';

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  // 19.2.4.2 name
  NAME in FProto || $__require('c') && dP(FProto, NAME, {
    configurable: true,
    get: function () {
      try {
        var that = this,
            name = ('' + that).match(nameRE)[1];
        has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
        return name;
      } catch (e) {
        return '';
      }
    }
  });
  return module.exports;
});
$__System.registerDynamic('40', ['2e', '2a', '14', '1e', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var isObject = $__require('2e'),
      getPrototypeOf = $__require('2a'),
      HAS_INSTANCE = $__require('14')('hasInstance'),
      FunctionProto = Function.prototype;
  // 19.2.3.6 Function.prototype[@@hasInstance](V)
  if (!(HAS_INSTANCE in FunctionProto)) $__require('1e').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
      if (typeof this != 'function' || !isObject(O)) return false;
      if (!isObject(this.prototype)) return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
      return false;
    } });
  return module.exports;
});
$__System.registerDynamic('41', ['d', '42', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $parseInt = $__require('42');
  // 18.2.5 parseInt(string, radix)
  $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
  return module.exports;
});
$__System.registerDynamic('43', ['d', '44', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $parseFloat = $__require('44');
  // 18.2.4 parseFloat(string)
  $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
  return module.exports;
});
$__System.registerDynamic('45', ['a', 'b', '46', '47', '19', '10', '1f', '1d', '1e', '48', '1b', 'c', 'e', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      has = $__require('b'),
      cof = $__require('46'),
      inheritIfRequired = $__require('47'),
      toPrimitive = $__require('19'),
      fails = $__require('10'),
      gOPN = $__require('1f').f,
      gOPD = $__require('1d').f,
      dP = $__require('1e').f,
      $trim = $__require('48').trim,
      NUMBER = 'Number',
      $Number = global[NUMBER],
      Base = $Number,
      proto = $Number.prototype
  // Opera ~12 has broken Object#toString
  ,
      BROKEN_COF = cof($__require('1b')(proto)) == NUMBER,
      TRIM = 'trim' in String.prototype;

  // 7.1.3 ToNumber(argument)
  var toNumber = function (argument) {
    var it = toPrimitive(argument, false);
    if (typeof it == 'string' && it.length > 2) {
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0),
          third,
          radix,
          maxCode;
      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66:case 98:
            radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
          case 79:case 111:
            radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
          default:
            return +it;
        }
        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
          code = digits.charCodeAt(i);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if (code < 48 || code > maxCode) return NaN;
        }return parseInt(digits, radix);
      }
    }return +it;
  };

  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
      var it = arguments.length < 1 ? 0 : value,
          that = this;
      return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () {
        proto.valueOf.call(that);
      }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };
    for (var keys = $__require('c') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
      if (has(Base, key = keys[j]) && !has($Number, key)) {
        dP($Number, key, gOPD(Base, key));
      }
    }
    $Number.prototype = proto;
    proto.constructor = $Number;
    $__require('e')(global, NUMBER, $Number);
  }
  return module.exports;
});
$__System.registerDynamic('49', ['d', '4a', '4b', '4c', '10', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toInteger = $__require('4a'),
      aNumberValue = $__require('4b'),
      repeat = $__require('4c'),
      $toFixed = 1..toFixed,
      floor = Math.floor,
      data = [0, 0, 0, 0, 0, 0],
      ERROR = 'Number.toFixed: incorrect invocation!',
      ZERO = '0';

  var multiply = function (n, c) {
    var i = -1,
        c2 = c;
    while (++i < 6) {
      c2 += n * data[i];
      data[i] = c2 % 1e7;
      c2 = floor(c2 / 1e7);
    }
  };
  var divide = function (n) {
    var i = 6,
        c = 0;
    while (--i >= 0) {
      c += data[i];
      data[i] = floor(c / n);
      c = c % n * 1e7;
    }
  };
  var numToString = function () {
    var i = 6,
        s = '';
    while (--i >= 0) {
      if (s !== '' || i === 0 || data[i] !== 0) {
        var t = String(data[i]);
        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
      }
    }return s;
  };
  var pow = function (x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };
  var log = function (x) {
    var n = 0,
        x2 = x;
    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }
    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    }return n;
  };

  $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128..toFixed(0) !== '1000000000000000128') || !$__require('10')(function () {
    // V8 ~ Android 4.3-
    $toFixed.call({});
  })), 'Number', {
    toFixed: function toFixed(fractionDigits) {
      var x = aNumberValue(this, ERROR),
          f = toInteger(fractionDigits),
          s = '',
          m = ZERO,
          e,
          z,
          j,
          k;
      if (f < 0 || f > 20) throw RangeError(ERROR);
      if (x != x) return 'NaN';
      if (x <= -1e21 || x >= 1e21) return String(x);
      if (x < 0) {
        s = '-';
        x = -x;
      }
      if (x > 1e-21) {
        e = log(x * pow(2, 69, 1)) - 69;
        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;
        if (e > 0) {
          multiply(0, z);
          j = f;
          while (j >= 7) {
            multiply(1e7, 0);
            j -= 7;
          }
          multiply(pow(10, j, 1), 0);
          j = e - 1;
          while (j >= 23) {
            divide(1 << 23);
            j -= 23;
          }
          divide(1 << j);
          multiply(1, 1);
          divide(2);
          m = numToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          m = numToString() + repeat.call(ZERO, f);
        }
      }
      if (f > 0) {
        k = m.length;
        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
      } else {
        m = s + m;
      }return m;
    }
  });
  return module.exports;
});
$__System.registerDynamic('4b', ['46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var cof = $__require('46');
  module.exports = function (it, msg) {
    if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
    return +it;
  };
  return module.exports;
});
$__System.registerDynamic('4d', ['d', '10', '4b', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $fails = $__require('10'),
      aNumberValue = $__require('4b'),
      $toPrecision = 1..toPrecision;

  $export($export.P + $export.F * ($fails(function () {
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
  }) || !$fails(function () {
    // V8 ~ Android 4.3-
    $toPrecision.call({});
  })), 'Number', {
    toPrecision: function toPrecision(precision) {
      var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
    }
  });
  return module.exports;
});
$__System.registerDynamic('4e', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.1 Number.EPSILON
  var $export = $__require('d');

  $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
  return module.exports;
});
$__System.registerDynamic('4f', ['d', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.2 Number.isFinite(number)
  var $export = $__require('d'),
      _isFinite = $__require('a').isFinite;

  $export($export.S, 'Number', {
    isFinite: function isFinite(it) {
      return typeof it == 'number' && _isFinite(it);
    }
  });
  return module.exports;
});
$__System.registerDynamic('50', ['d', '51', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.3 Number.isInteger(number)
  var $export = $__require('d');

  $export($export.S, 'Number', { isInteger: $__require('51') });
  return module.exports;
});
$__System.registerDynamic('52', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.4 Number.isNaN(number)
  var $export = $__require('d');

  $export($export.S, 'Number', {
    isNaN: function isNaN(number) {
      return number != number;
    }
  });
  return module.exports;
});
$__System.registerDynamic('51', ['2e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.3 Number.isInteger(number)
  var isObject = $__require('2e'),
      floor = Math.floor;
  module.exports = function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor(it) === it;
  };
  return module.exports;
});
$__System.registerDynamic('53', ['d', '51', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.5 Number.isSafeInteger(number)
  var $export = $__require('d'),
      isInteger = $__require('51'),
      abs = Math.abs;

  $export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number) {
      return isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });
  return module.exports;
});
$__System.registerDynamic('54', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = $__require('d');

  $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
  return module.exports;
});
$__System.registerDynamic('55', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  var $export = $__require('d');

  $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });
  return module.exports;
});
$__System.registerDynamic('44', ['a', '48', '56', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $parseFloat = $__require('a').parseFloat,
      $trim = $__require('48').trim;

  module.exports = 1 / $parseFloat($__require('56') + '-0') !== -Infinity ? function parseFloat(str) {
    var string = $trim(String(str), 3),
        result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : $parseFloat;
  return module.exports;
});
$__System.registerDynamic('57', ['d', '44', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $parseFloat = $__require('44');
  // 20.1.2.12 Number.parseFloat(string)
  $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });
  return module.exports;
});
$__System.registerDynamic('42', ['a', '48', '56', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $parseInt = $__require('a').parseInt,
      $trim = $__require('48').trim,
      ws = $__require('56'),
      hex = /^[\-+]?0[xX]/;

  module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
  } : $parseInt;
  return module.exports;
});
$__System.registerDynamic('58', ['d', '42', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $parseInt = $__require('42');
  // 20.1.2.13 Number.parseInt(string, radix)
  $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });
  return module.exports;
});
$__System.registerDynamic('59', ['d', '5a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.3 Math.acosh(x)
  var $export = $__require('d'),
      log1p = $__require('5a'),
      sqrt = Math.sqrt,
      $acosh = Math.acosh;

  $export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity), 'Math', {
    acosh: function acosh(x) {
      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });
  return module.exports;
});
$__System.registerDynamic('5b', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.5 Math.asinh(x)
  var $export = $__require('d'),
      $asinh = Math.asinh;

  function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  }

  // Tor Browser bug: Math.asinh(0) -> -0 
  $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });
  return module.exports;
});
$__System.registerDynamic('5c', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.7 Math.atanh(x)
  var $export = $__require('d'),
      $atanh = Math.atanh;

  // Tor Browser bug: Math.atanh(-0) -> 0 
  $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x) {
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });
  return module.exports;
});
$__System.registerDynamic('5d', ['d', '5e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.9 Math.cbrt(x)
  var $export = $__require('d'),
      sign = $__require('5e');

  $export($export.S, 'Math', {
    cbrt: function cbrt(x) {
      return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });
  return module.exports;
});
$__System.registerDynamic('5f', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.11 Math.clz32(x)
  var $export = $__require('d');

  $export($export.S, 'Math', {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });
  return module.exports;
});
$__System.registerDynamic('60', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.12 Math.cosh(x)
  var $export = $__require('d'),
      exp = Math.exp;

  $export($export.S, 'Math', {
    cosh: function cosh(x) {
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });
  return module.exports;
});
$__System.registerDynamic('61', ['d', '62', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.14 Math.expm1(x)
  var $export = $__require('d'),
      $expm1 = $__require('62');

  $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });
  return module.exports;
});
$__System.registerDynamic('63', ['d', '5e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.16 Math.fround(x)
  var $export = $__require('d'),
      sign = $__require('5e'),
      pow = Math.pow,
      EPSILON = pow(2, -52),
      EPSILON32 = pow(2, -23),
      MAX32 = pow(2, 127) * (2 - EPSILON32),
      MIN32 = pow(2, -126);

  var roundTiesToEven = function (n) {
    return n + 1 / EPSILON - 1 / EPSILON;
  };

  $export($export.S, 'Math', {
    fround: function fround(x) {
      var $abs = Math.abs(x),
          $sign = sign(x),
          a,
          result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    }
  });
  return module.exports;
});
$__System.registerDynamic('64', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  var $export = $__require('d'),
      abs = Math.abs;

  $export($export.S, 'Math', {
    hypot: function hypot(value1, value2) {
      // eslint-disable-line no-unused-vars
      var sum = 0,
          i = 0,
          aLen = arguments.length,
          larg = 0,
          arg,
          div;
      while (i < aLen) {
        arg = abs(arguments[i++]);
        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else sum += arg;
      }
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });
  return module.exports;
});
$__System.registerDynamic('65', ['d', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.18 Math.imul(x, y)
  var $export = $__require('d'),
      $imul = Math.imul;

  // some WebKit versions fails with big numbers, some has wrong arity
  $export($export.S + $export.F * $__require('10')(function () {
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y) {
      var UINT16 = 0xffff,
          xn = +x,
          yn = +y,
          xl = UINT16 & xn,
          yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });
  return module.exports;
});
$__System.registerDynamic('66', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.21 Math.log10(x)
  var $export = $__require('d');

  $export($export.S, 'Math', {
    log10: function log10(x) {
      return Math.log(x) / Math.LN10;
    }
  });
  return module.exports;
});
$__System.registerDynamic("5a", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.20 Math.log1p(x)
  module.exports = Math.log1p || function log1p(x) {
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };
  return module.exports;
});
$__System.registerDynamic('67', ['d', '5a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.20 Math.log1p(x)
  var $export = $__require('d');

  $export($export.S, 'Math', { log1p: $__require('5a') });
  return module.exports;
});
$__System.registerDynamic('68', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.22 Math.log2(x)
  var $export = $__require('d');

  $export($export.S, 'Math', {
    log2: function log2(x) {
      return Math.log(x) / Math.LN2;
    }
  });
  return module.exports;
});
$__System.registerDynamic("5e", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.28 Math.sign(x)
  module.exports = Math.sign || function sign(x) {
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };
  return module.exports;
});
$__System.registerDynamic('69', ['d', '5e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.28 Math.sign(x)
  var $export = $__require('d');

  $export($export.S, 'Math', { sign: $__require('5e') });
  return module.exports;
});
$__System.registerDynamic('6a', ['d', '62', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.30 Math.sinh(x)
  var $export = $__require('d'),
      expm1 = $__require('62'),
      exp = Math.exp;

  // V8 near Chromium 38 has a problem with very small numbers
  $export($export.S + $export.F * $__require('10')(function () {
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x) {
      return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
  });
  return module.exports;
});
$__System.registerDynamic("62", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.14 Math.expm1(x)
  var $expm1 = Math.expm1;
  module.exports = !$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  } : $expm1;
  return module.exports;
});
$__System.registerDynamic('6b', ['d', '62', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.33 Math.tanh(x)
  var $export = $__require('d'),
      expm1 = $__require('62'),
      exp = Math.exp;

  $export($export.S, 'Math', {
    tanh: function tanh(x) {
      var a = expm1(x = +x),
          b = expm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });
  return module.exports;
});
$__System.registerDynamic('6c', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.2.2.34 Math.trunc(x)
  var $export = $__require('d');

  $export($export.S, 'Math', {
    trunc: function trunc(it) {
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });
  return module.exports;
});
$__System.registerDynamic('6d', ['d', '6e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toIndex = $__require('6e'),
      fromCharCode = String.fromCharCode,
      $fromCodePoint = String.fromCodePoint;

  // length should be 1, old FF problem
  $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
      // eslint-disable-line no-unused-vars
      var res = [],
          aLen = arguments.length,
          i = 0,
          code;
      while (aLen > i) {
        code = +arguments[i++];
        if (toIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
      }return res.join('');
    }
  });
  return module.exports;
});
$__System.registerDynamic('6f', ['d', '4', '70', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toIObject = $__require('4'),
      toLength = $__require('70');

  $export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite) {
      var tpl = toIObject(callSite.raw),
          len = toLength(tpl.length),
          aLen = arguments.length,
          res = [],
          i = 0;
      while (len > i) {
        res.push(String(tpl[i++]));
        if (i < aLen) res.push(String(arguments[i]));
      }return res.join('');
    }
  });
  return module.exports;
});
$__System.registerDynamic('71', ['48', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 21.1.3.25 String.prototype.trim()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('48')('trim', function ($trim) {
    return function trim() {
      return $trim(this, 3);
    };
  });
  return module.exports;
});
$__System.registerDynamic('72', ['73', '74', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $at = $__require('73')(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  $__require('74')(String, 'String', function (iterated) {
    this._t = String(iterated); // target
    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at(O, index);
    this._i += point.length;
    return { value: point, done: false };
  });
  return module.exports;
});
$__System.registerDynamic('75', ['d', '73', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $at = $__require('73')(false);
  $export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
      return $at(this, pos);
    }
  });
  return module.exports;
});
$__System.registerDynamic('76', ['d', '70', '77', '78', '5'], true, function ($__require, exports, module) {
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toLength = $__require('70'),
      context = $__require('77'),
      ENDS_WITH = 'endsWith',
      $endsWith = ''[ENDS_WITH];

  $export($export.P + $export.F * $__require('78')(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString /*, endPosition = @length */) {
      var that = context(this, searchString, ENDS_WITH),
          endPosition = arguments.length > 1 ? arguments[1] : undefined,
          len = toLength(that.length),
          end = endPosition === undefined ? len : Math.min(toLength(endPosition), len),
          search = String(searchString);
      return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
  });
  return module.exports;
});
$__System.registerDynamic('79', ['d', '77', '78', '5'], true, function ($__require, exports, module) {
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      context = $__require('77'),
      INCLUDES = 'includes';

  $export($export.P + $export.F * $__require('78')(INCLUDES), 'String', {
    includes: function includes(searchString /*, position = 0 */) {
      return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  return module.exports;
});
$__System.registerDynamic('7a', ['d', '4c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d');

  $export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: $__require('4c')
  });
  return module.exports;
});
$__System.registerDynamic('77', ['7b', '7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // helper for String#{startsWith, endsWith, includes}
  var isRegExp = $__require('7b'),
      defined = $__require('7c');

  module.exports = function (that, searchString, NAME) {
    if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
  };
  return module.exports;
});
$__System.registerDynamic('78', ['14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var MATCH = $__require('14')('match');
  module.exports = function (KEY) {
    var re = /./;
    try {
      '/./'[KEY](re);
    } catch (e) {
      try {
        re[MATCH] = false;
        return !'/./'[KEY](re);
      } catch (f) {/* empty */}
    }return true;
  };
  return module.exports;
});
$__System.registerDynamic('7d', ['d', '70', '77', '78', '5'], true, function ($__require, exports, module) {
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toLength = $__require('70'),
      context = $__require('77'),
      STARTS_WITH = 'startsWith',
      $startsWith = ''[STARTS_WITH];

  $export($export.P + $export.F * $__require('78')(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString /*, position = 0 */) {
      var that = context(this, searchString, STARTS_WITH),
          index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length)),
          search = String(searchString);
      return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
  });
  return module.exports;
});
$__System.registerDynamic('7e', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.2 String.prototype.anchor(name)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('anchor', function (createHTML) {
    return function anchor(name) {
      return createHTML(this, 'a', 'name', name);
    };
  });
  return module.exports;
});
$__System.registerDynamic('80', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.3 String.prototype.big()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('big', function (createHTML) {
    return function big() {
      return createHTML(this, 'big', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('81', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.4 String.prototype.blink()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('blink', function (createHTML) {
    return function blink() {
      return createHTML(this, 'blink', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('82', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.5 String.prototype.bold()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('bold', function (createHTML) {
    return function bold() {
      return createHTML(this, 'b', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('83', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.6 String.prototype.fixed()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('fixed', function (createHTML) {
    return function fixed() {
      return createHTML(this, 'tt', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('84', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.7 String.prototype.fontcolor(color)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('fontcolor', function (createHTML) {
    return function fontcolor(color) {
      return createHTML(this, 'font', 'color', color);
    };
  });
  return module.exports;
});
$__System.registerDynamic('85', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.8 String.prototype.fontsize(size)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('fontsize', function (createHTML) {
    return function fontsize(size) {
      return createHTML(this, 'font', 'size', size);
    };
  });
  return module.exports;
});
$__System.registerDynamic('86', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.9 String.prototype.italics()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('italics', function (createHTML) {
    return function italics() {
      return createHTML(this, 'i', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('87', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.10 String.prototype.link(url)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('link', function (createHTML) {
    return function link(url) {
      return createHTML(this, 'a', 'href', url);
    };
  });
  return module.exports;
});
$__System.registerDynamic('88', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.11 String.prototype.small()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('small', function (createHTML) {
    return function small() {
      return createHTML(this, 'small', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('89', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.12 String.prototype.strike()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('strike', function (createHTML) {
    return function strike() {
      return createHTML(this, 'strike', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('8a', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.13 String.prototype.sub()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('sub', function (createHTML) {
    return function sub() {
      return createHTML(this, 'sub', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('7f', ['d', '10', '7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      fails = $__require('10'),
      defined = $__require('7c'),
      quot = /"/g;
  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  var createHTML = function (string, tag, attribute, value) {
    var S = String(defined(string)),
        p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };
  module.exports = function (NAME, exec) {
    var O = {};
    O[NAME] = exec(createHTML);
    $export($export.P + $export.F * fails(function () {
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };
  return module.exports;
});
$__System.registerDynamic('8b', ['7f', '5'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.14 String.prototype.sup()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('7f')('sup', function (createHTML) {
    return function sup() {
      return createHTML(this, 'sup', '', '');
    };
  });
  return module.exports;
});
$__System.registerDynamic('8c', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 20.3.3.1 / 15.9.4.4 Date.now()
  var $export = $__require('d');

  $export($export.S, 'Date', { now: function () {
      return new Date().getTime();
    } });
  return module.exports;
});
$__System.registerDynamic('8d', ['d', '29', '19', '10', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toObject = $__require('29'),
      toPrimitive = $__require('19');

  $export($export.P + $export.F * $__require('10')(function () {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function () {
        return 1;
      } }) !== 1;
  }), 'Date', {
    toJSON: function toJSON(key) {
      var O = toObject(this),
          pv = toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });
  return module.exports;
});
$__System.registerDynamic('8e', ['d', '10', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      fails = $__require('10'),
      getTime = Date.prototype.getTime;

  var lz = function (num) {
    return num > 9 ? num : '0' + num;
  };

  // PhantomJS / old WebKit has a broken implementations
  $export($export.P + $export.F * (fails(function () {
    return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
  }) || !fails(function () {
    new Date(NaN).toISOString();
  })), 'Date', {
    toISOString: function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var d = this,
          y = d.getUTCFullYear(),
          m = d.getUTCMilliseconds(),
          s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    }
  });
  return module.exports;
});
$__System.registerDynamic('8f', ['e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var DateProto = Date.prototype,
      INVALID_DATE = 'Invalid Date',
      TO_STRING = 'toString',
      $toString = DateProto[TO_STRING],
      getTime = DateProto.getTime;
  if (new Date(NaN) + '' != INVALID_DATE) {
    $__require('e')(DateProto, TO_STRING, function toString() {
      var value = getTime.call(this);
      return value === value ? $toString.call(this) : INVALID_DATE;
    });
  }
  return module.exports;
});
$__System.registerDynamic('90', ['18', '19', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var anObject = $__require('18'),
      toPrimitive = $__require('19'),
      NUMBER = 'number';

  module.exports = function (hint) {
    if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint != NUMBER);
  };
  return module.exports;
});
$__System.registerDynamic('91', ['14', '21', '90', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var TO_PRIMITIVE = $__require('14')('toPrimitive'),
      proto = Date.prototype;

  if (!(TO_PRIMITIVE in proto)) $__require('21')(proto, TO_PRIMITIVE, $__require('90'));
  return module.exports;
});
$__System.registerDynamic('92', ['d', '17', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
  var $export = $__require('d');

  $export($export.S, 'Array', { isArray: $__require('17') });
  return module.exports;
});
$__System.registerDynamic('93', ['94', 'd', '29', '95', '96', '70', '97', '98', '99', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var ctx = $__require('94'),
      $export = $__require('d'),
      toObject = $__require('29'),
      call = $__require('95'),
      isArrayIter = $__require('96'),
      toLength = $__require('70'),
      createProperty = $__require('97'),
      getIterFn = $__require('98');

  $export($export.S + $export.F * !$__require('99')(function (iter) {
    Array.from(iter);
  }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
      var O = toObject(arrayLike),
          C = typeof this == 'function' ? this : Array,
          aLen = arguments.length,
          mapfn = aLen > 1 ? arguments[1] : undefined,
          mapping = mapfn !== undefined,
          index = 0,
          iterFn = getIterFn(O),
          length,
          result,
          step,
          iterator;
      if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = toLength(O.length);
        for (result = new C(length); length > index; index++) {
          createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
      result.length = index;
      return result;
    }
  });
  return module.exports;
});
$__System.registerDynamic('9a', ['d', '97', '10', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      createProperty = $__require('97');

  // WebKit Array.of isn't generic
  $export($export.S + $export.F * $__require('10')(function () {
    function F() {}
    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of() /* ...args */{
      var index = 0,
          aLen = arguments.length,
          result = new (typeof this == 'function' ? this : Array)(aLen);
      while (aLen > index) createProperty(result, index, arguments[index++]);
      result.length = aLen;
      return result;
    }
  });
  return module.exports;
});
$__System.registerDynamic('9b', ['d', '4', '9c', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.13 Array.prototype.join(separator)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toIObject = $__require('4'),
      arrayJoin = [].join;

  // fallback for not array-like strings
  $export($export.P + $export.F * ($__require('9c') != Object || !$__require('9d')(arrayJoin)), 'Array', {
    join: function join(separator) {
      return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
    }
  });
  return module.exports;
});
$__System.registerDynamic('9e', ['d', '9f', '46', '6e', '70', '10', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      html = $__require('9f'),
      cof = $__require('46'),
      toIndex = $__require('6e'),
      toLength = $__require('70'),
      arraySlice = [].slice;

  // fallback for not array-like ES3 strings and DOM objects
  $export($export.P + $export.F * $__require('10')(function () {
    if (html) arraySlice.call(html);
  }), 'Array', {
    slice: function slice(begin, end) {
      var len = toLength(this.length),
          klass = cof(this);
      end = end === undefined ? len : end;
      if (klass == 'Array') return arraySlice.call(this, begin, end);
      var start = toIndex(begin, len),
          upTo = toIndex(end, len),
          size = toLength(upTo - start),
          cloned = Array(size),
          i = 0;
      for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
      return cloned;
    }
  });
  return module.exports;
});
$__System.registerDynamic('a0', ['d', 'a1', '29', '10', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      aFunction = $__require('a1'),
      toObject = $__require('29'),
      fails = $__require('10'),
      $sort = [].sort,
      test = [1, 2, 3];

  $export($export.P + $export.F * (fails(function () {
    // IE8-
    test.sort(undefined);
  }) || !fails(function () {
    // V8 bug
    test.sort(null);
    // Old WebKit
  }) || !$__require('9d')($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
      return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
    }
  });
  return module.exports;
});
$__System.registerDynamic('a2', ['d', 'a3', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $forEach = $__require('a3')(0),
      STRICT = $__require('9d')([].forEach, true);

  $export($export.P + $export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn /* , thisArg */) {
      return $forEach(this, callbackfn, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a4', ['d', 'a3', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $map = $__require('a3')(1);

  $export($export.P + $export.F * !$__require('9d')([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn /* , thisArg */) {
      return $map(this, callbackfn, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a5', ['d', 'a3', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $filter = $__require('a3')(2);

  $export($export.P + $export.F * !$__require('9d')([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn /* , thisArg */) {
      return $filter(this, callbackfn, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a6', ['d', 'a3', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $some = $__require('a3')(3);

  $export($export.P + $export.F * !$__require('9d')([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn /* , thisArg */) {
      return $some(this, callbackfn, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a7', ['d', 'a3', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $every = $__require('a3')(4);

  $export($export.P + $export.F * !$__require('9d')([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn /* , thisArg */) {
      return $every(this, callbackfn, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a8', ['d', 'a9', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $reduce = $__require('a9');

  $export($export.P + $export.F * !$__require('9d')([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn /* , initialValue */) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });
  return module.exports;
});
$__System.registerDynamic('a9', ['a1', '29', '9c', '70', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var aFunction = $__require('a1'),
      toObject = $__require('29'),
      IObject = $__require('9c'),
      toLength = $__require('70');

  module.exports = function (that, callbackfn, aLen, memo, isRight) {
    aFunction(callbackfn);
    var O = toObject(that),
        self = IObject(O),
        length = toLength(O.length),
        index = isRight ? length - 1 : 0,
        i = isRight ? -1 : 1;
    if (aLen < 2) for (;;) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (isRight ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
  return module.exports;
});
$__System.registerDynamic('aa', ['d', 'a9', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $reduce = $__require('a9');

  $export($export.P + $export.F * !$__require('9d')([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], true);
    }
  });
  return module.exports;
});
$__System.registerDynamic('ab', ['d', 'ac', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $indexOf = $__require('ac')(false),
      $native = [].indexOf,
      NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !$__require('9d')($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement /*, fromIndex = 0 */) {
      return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
    }
  });
  return module.exports;
});
$__System.registerDynamic('9d', ['10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var fails = $__require('10');

  module.exports = function (method, arg) {
    return !!method && fails(function () {
      arg ? method.call(null, function () {}, 1) : method.call(null);
    });
  };
  return module.exports;
});
$__System.registerDynamic('ad', ['d', '4', '4a', '70', '9d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toIObject = $__require('4'),
      toInteger = $__require('4a'),
      toLength = $__require('70'),
      $native = [].lastIndexOf,
      NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !$__require('9d')($native)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */) {
      // convert -0 to +0
      if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
      var O = toIObject(this),
          length = toLength(O.length),
          index = length - 1;
      if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
      if (index < 0) index = length + index;
      for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
      return -1;
    }
  });
  return module.exports;
});
$__System.registerDynamic('ae', ['d', 'af', 'b0', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  var $export = $__require('d');

  $export($export.P, 'Array', { copyWithin: $__require('af') });

  $__require('b0')('copyWithin');
  return module.exports;
});
$__System.registerDynamic('b1', ['d', 'b2', 'b0', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  var $export = $__require('d');

  $export($export.P, 'Array', { fill: $__require('b2') });

  $__require('b0')('fill');
  return module.exports;
});
$__System.registerDynamic('b3', ['d', 'a3', 'b0', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $find = $__require('a3')(5),
      KEY = 'find',
      forced = true;
  // Shouldn't skip holes
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn /*, that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  $__require('b0')(KEY);
  return module.exports;
});
$__System.registerDynamic('b4', ['d', 'a3', 'b0', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $find = $__require('a3')(6),
      KEY = 'findIndex',
      forced = true;
  // Shouldn't skip holes
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn /*, that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  $__require('b0')(KEY);
  return module.exports;
});
$__System.registerDynamic('b5', ['b6', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('b6')('Array');
  return module.exports;
});
$__System.registerDynamic('b7', ['a', '47', '1e', '1f', '7b', 'b8', 'c', '10', '14', 'e', 'b6', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      inheritIfRequired = $__require('47'),
      dP = $__require('1e').f,
      gOPN = $__require('1f').f,
      isRegExp = $__require('7b'),
      $flags = $__require('b8'),
      $RegExp = global.RegExp,
      Base = $RegExp,
      proto = $RegExp.prototype,
      re1 = /a/g,
      re2 = /a/g
  // "new" creates a new object, old webkit buggy here
  ,
      CORRECT_NEW = new $RegExp(re1) !== re1;

  if ($__require('c') && (!CORRECT_NEW || $__require('10')(function () {
    re2[$__require('14')('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))) {
    $RegExp = function RegExp(p, f) {
      var tiRE = this instanceof $RegExp,
          piRE = isRegExp(p),
          fiU = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
    };
    var proxy = function (key) {
      key in $RegExp || dP($RegExp, key, {
        configurable: true,
        get: function () {
          return Base[key];
        },
        set: function (it) {
          Base[key] = it;
        }
      });
    };
    for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    $__require('e')(global, 'RegExp', $RegExp);
  }

  $__require('b6')('RegExp');
  return module.exports;
});
$__System.registerDynamic('b9', ['ba', '18', 'b8', 'c', 'e', '10', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('ba');
  var anObject = $__require('18'),
      $flags = $__require('b8'),
      DESCRIPTORS = $__require('c'),
      TO_STRING = 'toString',
      $toString = /./[TO_STRING];

  var define = function (fn) {
    $__require('e')(RegExp.prototype, TO_STRING, fn, true);
  };

  // 21.2.5.14 RegExp.prototype.toString()
  if ($__require('10')(function () {
    return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
  })) {
    define(function toString() {
      var R = anObject(this);
      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
    });
    // FF44- RegExp#toString has a wrong name
  } else if ($toString.name != TO_STRING) {
    define(function toString() {
      return $toString.call(this);
    });
  }
  return module.exports;
});
$__System.registerDynamic('ba', ['c', '1e', 'b8', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 21.2.5.3 get RegExp.prototype.flags()
  if ($__require('c') && /./g.flags != 'g') $__require('1e').f(RegExp.prototype, 'flags', {
    configurable: true,
    get: $__require('b8')
  });
  return module.exports;
});
$__System.registerDynamic('bb', ['bc', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // @@match logic
  $__require('bc')('match', 1, function (defined, MATCH, $match) {
    // 21.1.3.11 String.prototype.match(regexp)
    return [function match(regexp) {
      'use strict';

      var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, $match];
  });
  return module.exports;
});
$__System.registerDynamic('bd', ['bc', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // @@replace logic
  $__require('bc')('replace', 2, function (defined, REPLACE, $replace) {
    // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
    return [function replace(searchValue, replaceValue) {
      'use strict';

      var O = defined(this),
          fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
    }, $replace];
  });
  return module.exports;
});
$__System.registerDynamic('be', ['bc', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // @@search logic
  $__require('bc')('search', 1, function (defined, SEARCH, $search) {
    // 21.1.3.15 String.prototype.search(regexp)
    return [function search(regexp) {
      'use strict';

      var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    }, $search];
  });
  return module.exports;
});
$__System.registerDynamic('bc', ['21', 'e', '10', '7c', '14', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var hide = $__require('21'),
      redefine = $__require('e'),
      fails = $__require('10'),
      defined = $__require('7c'),
      wks = $__require('14');

  module.exports = function (KEY, length, exec) {
    var SYMBOL = wks(KEY),
        fns = exec(defined, SYMBOL, ''[KEY]),
        strfn = fns[0],
        rxfn = fns[1];
    if (fails(function () {
      var O = {};
      O[SYMBOL] = function () {
        return 7;
      };
      return ''[KEY](O) != 7;
    })) {
      redefine(String.prototype, KEY, strfn);
      hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) {
        return rxfn.call(string, this, arg);
      }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) {
        return rxfn.call(string, this);
      });
    }
  };
  return module.exports;
});
$__System.registerDynamic('bf', ['bc', '7b', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // @@split logic
  $__require('bc')('split', 2, function (defined, SPLIT, $split) {
    'use strict';

    var isRegExp = $__require('7b'),
        _split = $split,
        $push = [].push,
        $SPLIT = 'split',
        LENGTH = 'length',
        LAST_INDEX = 'lastIndex';
    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
      var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
      // based on es5-shim implementation, need to rework it
      $split = function (separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return [];
        // If `separator` is not a regex, use native split
        if (!isRegExp(separator)) return _split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var separator2, match, lastIndex, lastLength, i;
        // Doesn't need flags gy, but they don't hurt
        if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
        while (match = separatorCopy.exec(string)) {
          // `separatorCopy.lastIndex` is not reliable cross-browser
          lastIndex = match.index + match[0][LENGTH];
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
            if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
              for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
            });
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }
          if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
        }
        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      };
      // Chakra, V8
    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      $split = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
      };
    }
    // 21.1.3.17 String.prototype.split(separator, limit)
    return [function split(separator, limit) {
      var O = defined(this),
          fn = separator == undefined ? undefined : separator[SPLIT];
      return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
    }, $split];
  });
  return module.exports;
});
$__System.registerDynamic('c0', ['20', 'a', '94', '3c', 'd', '2e', 'a1', 'c1', 'c2', 'c3', 'c4', 'c5', '14', 'c6', '12', 'b6', '33', '99', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var LIBRARY = $__require('20'),
      global = $__require('a'),
      ctx = $__require('94'),
      classof = $__require('3c'),
      $export = $__require('d'),
      isObject = $__require('2e'),
      aFunction = $__require('a1'),
      anInstance = $__require('c1'),
      forOf = $__require('c2'),
      speciesConstructor = $__require('c3'),
      task = $__require('c4').set,
      microtask = $__require('c5')(),
      PROMISE = 'Promise',
      TypeError = global.TypeError,
      process = global.process,
      $Promise = global[PROMISE],
      process = global.process,
      isNode = classof(process) == 'process',
      empty = function () {/* empty */},
      Internal,
      GenericPromiseCapability,
      Wrapper;

  var USE_NATIVE = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1),
          FakePromise = (promise.constructor = {})[$__require('14')('species')] = function (exec) {
        exec(empty, empty);
      };
      // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
    } catch (e) {/* empty */}
  }();

  // helpers
  var sameConstructor = function (a, b) {
    // with library wrapper special case
    return a === b || a === $Promise && b === Wrapper;
  };
  var isThenable = function (it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var newPromiseCapability = function (C) {
    return sameConstructor($Promise, C) ? new PromiseCapability(C) : new GenericPromiseCapability(C);
  };
  var PromiseCapability = GenericPromiseCapability = function (C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
  };
  var perform = function (exec) {
    try {
      exec();
    } catch (e) {
      return { error: e };
    }
  };
  var notify = function (promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v,
          ok = promise._s == 1,
          i = 0;
      var run = function (reaction) {
        var handler = ok ? reaction.ok : reaction.fail,
            resolve = reaction.resolve,
            reject = reaction.reject,
            domain = reaction.domain,
            result,
            then;
        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }
            if (handler === true) result = value;else {
              if (domain) domain.enter();
              result = handler(value);
              if (domain) domain.exit();
            }
            if (result === reaction.promise) {
              reject(TypeError('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          reject(e);
        }
      };
      while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };
  var onUnhandled = function (promise) {
    task.call(global, function () {
      var value = promise._v,
          abrupt,
          handler,
          console;
      if (isUnhandled(promise)) {
        abrupt = perform(function () {
          if (isNode) {
            process.emit('unhandledRejection', value, promise);
          } else if (handler = global.onunhandledrejection) {
            handler({ promise: promise, reason: value });
          } else if ((console = global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
      }promise._a = undefined;
      if (abrupt) throw abrupt.error;
    });
  };
  var isUnhandled = function (promise) {
    if (promise._h == 1) return false;
    var chain = promise._a || promise._c,
        i = 0,
        reaction;
    while (chain.length > i) {
      reaction = chain[i++];
      if (reaction.fail || !isUnhandled(reaction.promise)) return false;
    }return true;
  };
  var onHandleUnhandled = function (promise) {
    task.call(global, function () {
      var handler;
      if (isNode) {
        process.emit('rejectionHandled', promise);
      } else if (handler = global.onrejectionhandled) {
        handler({ promise: promise, reason: promise._v });
      }
    });
  };
  var $reject = function (value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };
  var $resolve = function (value) {
    var promise = this,
        then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
      if (promise === value) throw TypeError("Promise can't be resolved itself");
      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = { _w: promise, _d: false }; // wrap
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({ _w: promise, _d: false }, e); // wrap
    }
  };

  // constructor polyfill
  if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      anInstance(this, $Promise, PROMISE, '_h');
      aFunction(executor);
      Internal.call(this);
      try {
        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    };
    Internal = function Promise(executor) {
      this._c = []; // <- awaiting reactions
      this._a = undefined; // <- checked in isUnhandled reactions
      this._s = 0; // <- state
      this._d = false; // <- done
      this._v = undefined; // <- value
      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
      this._n = false; // <- notify
    };
    Internal.prototype = $__require('c6')($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode ? process.domain : undefined;
        this._c.push(reaction);
        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    PromiseCapability = function () {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = ctx($resolve, promise, 1);
      this.reject = ctx($reject, promise, 1);
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
  $__require('12')($Promise, PROMISE);
  $__require('b6')(PROMISE);
  Wrapper = $__require('33')[PROMISE];

  // statics
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this),
          $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      // instanceof instead of internal slot check because we should fix it without replacement native Promise core
      if (x instanceof $Promise && sameConstructor(x.constructor, this)) return x;
      var capability = newPromiseCapability(this),
          $$resolve = capability.resolve;
      $$resolve(x);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && $__require('99')(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this,
          capability = newPromiseCapability(C),
          resolve = capability.resolve,
          reject = capability.reject;
      var abrupt = perform(function () {
        var values = [],
            index = 0,
            remaining = 1;
        forOf(iterable, false, function (promise) {
          var $index = index++,
              alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (abrupt) reject(abrupt.error);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this,
          capability = newPromiseCapability(C),
          reject = capability.reject;
      var abrupt = perform(function () {
        forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (abrupt) reject(abrupt.error);
      return capability.promise;
    }
  });
  return module.exports;
});
$__System.registerDynamic('c7', ['c8', 'c9', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var weak = $__require('c8');

  // 23.4 WeakSet Objects
  $__require('c9')('WeakSet', function (get) {
    return function WeakSet() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value) {
      return weak.def(this, value, true);
    }
  }, weak, false, true);
  return module.exports;
});
$__System.registerDynamic('ca', ['d', 'cb', 'cc', '18', '6e', '70', '2e', 'a', 'c3', '10', 'b6', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $typed = $__require('cb'),
      buffer = $__require('cc'),
      anObject = $__require('18'),
      toIndex = $__require('6e'),
      toLength = $__require('70'),
      isObject = $__require('2e'),
      ArrayBuffer = $__require('a').ArrayBuffer,
      speciesConstructor = $__require('c3'),
      $ArrayBuffer = buffer.ArrayBuffer,
      $DataView = buffer.DataView,
      $isView = $typed.ABV && ArrayBuffer.isView,
      $slice = $ArrayBuffer.prototype.slice,
      VIEW = $typed.VIEW,
      ARRAY_BUFFER = 'ArrayBuffer';

  $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

  $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it) {
      return $isView && $isView(it) || isObject(it) && VIEW in it;
    }
  });

  $export($export.P + $export.U + $export.F * $__require('10')(function () {
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
  }), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end) {
      if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
      var len = anObject(this).byteLength,
          first = toIndex(start, len),
          final = toIndex(end === undefined ? len : end, len),
          result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first)),
          viewS = new $DataView(this),
          viewT = new $DataView(result),
          index = 0;
      while (first < final) {
        viewT.setUint8(index++, viewS.getUint8(first++));
      }return result;
    }
  });

  $__require('b6')(ARRAY_BUFFER);
  return module.exports;
});
$__System.registerDynamic('cd', ['d', 'cb', 'cc', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d');
  $export($export.G + $export.W + $export.F * !$__require('cb').ABV, {
    DataView: $__require('cc').DataView
  });
  return module.exports;
});
$__System.registerDynamic('ce', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Int8', 1, function (init) {
    return function Int8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d0', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Uint8', 1, function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d1', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Uint8', 1, function (init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  }, true);
  return module.exports;
});
$__System.registerDynamic('d2', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Int16', 2, function (init) {
    return function Int16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d3', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Uint16', 2, function (init) {
    return function Uint16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d4', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Int32', 4, function (init) {
    return function Int32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d5', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Uint32', 4, function (init) {
    return function Uint32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('d6', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Float32', 4, function (init) {
    return function Float32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('cb', ['a', '21', '13', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      hide = $__require('21'),
      uid = $__require('13'),
      TYPED = uid('typed_array'),
      VIEW = uid('view'),
      ABV = !!(global.ArrayBuffer && global.DataView),
      CONSTR = ABV,
      i = 0,
      l = 9,
      Typed;

  var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

  while (i < l) {
    if (Typed = global[TypedArrayConstructors[i++]]) {
      hide(Typed.prototype, TYPED, true);
      hide(Typed.prototype, VIEW, true);
    } else CONSTR = false;
  }

  module.exports = {
    ABV: ABV,
    CONSTR: CONSTR,
    TYPED: TYPED,
    VIEW: VIEW
  };
  return module.exports;
});
$__System.registerDynamic('cc', ['a', 'c', '20', 'cb', '21', 'c6', '10', 'c1', '4a', '70', '1f', '1e', 'b2', '12', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      DESCRIPTORS = $__require('c'),
      LIBRARY = $__require('20'),
      $typed = $__require('cb'),
      hide = $__require('21'),
      redefineAll = $__require('c6'),
      fails = $__require('10'),
      anInstance = $__require('c1'),
      toInteger = $__require('4a'),
      toLength = $__require('70'),
      gOPN = $__require('1f').f,
      dP = $__require('1e').f,
      arrayFill = $__require('b2'),
      setToStringTag = $__require('12'),
      ARRAY_BUFFER = 'ArrayBuffer',
      DATA_VIEW = 'DataView',
      PROTOTYPE = 'prototype',
      WRONG_LENGTH = 'Wrong length!',
      WRONG_INDEX = 'Wrong index!',
      $ArrayBuffer = global[ARRAY_BUFFER],
      $DataView = global[DATA_VIEW],
      Math = global.Math,
      RangeError = global.RangeError,
      Infinity = global.Infinity,
      BaseBuffer = $ArrayBuffer,
      abs = Math.abs,
      pow = Math.pow,
      floor = Math.floor,
      log = Math.log,
      LN2 = Math.LN2,
      BUFFER = 'buffer',
      BYTE_LENGTH = 'byteLength',
      BYTE_OFFSET = 'byteOffset',
      $BUFFER = DESCRIPTORS ? '_b' : BUFFER,
      $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH,
      $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

  // IEEE754 conversions based on https://github.com/feross/ieee754
  var packIEEE754 = function (value, mLen, nBytes) {
    var buffer = Array(nBytes),
        eLen = nBytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
        i = 0,
        s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0,
        e,
        m,
        c;
    value = abs(value);
    if (value != value || value === Infinity) {
      m = value != value ? 1 : 0;
      e = eMax;
    } else {
      e = floor(log(value) / LN2);
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
    buffer[--i] |= s * 128;
    return buffer;
  };
  var unpackIEEE754 = function (buffer, mLen, nBytes) {
    var eLen = nBytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        nBits = eLen - 7,
        i = nBytes - 1,
        s = buffer[i--],
        e = s & 127,
        m;
    s >>= 7;
    for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }return (s ? -1 : 1) * m * pow(2, e - mLen);
  };

  var unpackI32 = function (bytes) {
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
  };
  var packI8 = function (it) {
    return [it & 0xff];
  };
  var packI16 = function (it) {
    return [it & 0xff, it >> 8 & 0xff];
  };
  var packI32 = function (it) {
    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
  };
  var packF64 = function (it) {
    return packIEEE754(it, 52, 8);
  };
  var packF32 = function (it) {
    return packIEEE754(it, 23, 4);
  };

  var addGetter = function (C, key, internal) {
    dP(C[PROTOTYPE], key, { get: function () {
        return this[internal];
      } });
  };

  var get = function (view, bytes, index, isLittleEndian) {
    var numIndex = +index,
        intIndex = toInteger(numIndex);
    if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b,
        start = intIndex + view[$OFFSET],
        pack = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
  };
  var set = function (view, bytes, index, conversion, value, isLittleEndian) {
    var numIndex = +index,
        intIndex = toInteger(numIndex);
    if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b,
        start = intIndex + view[$OFFSET],
        pack = conversion(+value);
    for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  };

  var validateArrayBufferArguments = function (that, length) {
    anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
    var numberLength = +length,
        byteLength = toLength(numberLength);
    if (numberLength != byteLength) throw RangeError(WRONG_LENGTH);
    return byteLength;
  };

  if (!$typed.ABV) {
    $ArrayBuffer = function ArrayBuffer(length) {
      var byteLength = validateArrayBufferArguments(this, length);
      this._b = arrayFill.call(Array(byteLength), 0);
      this[$LENGTH] = byteLength;
    };

    $DataView = function DataView(buffer, byteOffset, byteLength) {
      anInstance(this, $DataView, DATA_VIEW);
      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = buffer[$LENGTH],
          offset = toInteger(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
      this[$BUFFER] = buffer;
      this[$OFFSET] = offset;
      this[$LENGTH] = byteLength;
    };

    if (DESCRIPTORS) {
      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
      addGetter($DataView, BUFFER, '_b');
      addGetter($DataView, BYTE_LENGTH, '_l');
      addGetter($DataView, BYTE_OFFSET, '_o');
    }

    redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset) {
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset /*, littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset /*, littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset /*, littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset /*, littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset /*, littleEndian */) {
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
      },
      getFloat64: function getFloat64(byteOffset /*, littleEndian */) {
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
      },
      setInt8: function setInt8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setInt16: function setInt16(byteOffset, value /*, littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value /*, littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packF32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value /*, littleEndian */) {
        set(this, 8, byteOffset, packF64, value, arguments[2]);
      }
    });
  } else {
    if (!fails(function () {
      new $ArrayBuffer(); // eslint-disable-line no-new
    }) || !fails(function () {
      new $ArrayBuffer(.5); // eslint-disable-line no-new
    })) {
      $ArrayBuffer = function ArrayBuffer(length) {
        return new BaseBuffer(validateArrayBufferArguments(this, length));
      };
      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
      for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
        if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
      };
      if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var view = new $DataView(new $ArrayBuffer(2)),
        $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, true);
  }
  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  setToStringTag($DataView, DATA_VIEW);
  hide($DataView[PROTOTYPE], $typed.VIEW, true);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;
  return module.exports;
});
$__System.registerDynamic("38", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y) {
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };
  return module.exports;
});
$__System.registerDynamic('c3', ['18', 'a1', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject = $__require('18'),
      aFunction = $__require('a1'),
      SPECIES = $__require('14')('species');
  module.exports = function (O, D) {
    var C = anObject(O).constructor,
        S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };
  return module.exports;
});
$__System.registerDynamic('b2', ['29', '6e', '70', '5'], true, function ($__require, exports, module) {
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toObject = $__require('29'),
      toIndex = $__require('6e'),
      toLength = $__require('70');
  module.exports = function fill(value /*, start = 0, end = @length */) {
    var O = toObject(this),
        length = toLength(O.length),
        aLen = arguments.length,
        index = toIndex(aLen > 1 ? arguments[1] : undefined, length),
        end = aLen > 2 ? arguments[2] : undefined,
        endPos = end === undefined ? length : toIndex(end, length);
    while (endPos > index) O[index++] = value;
    return O;
  };
  return module.exports;
});
$__System.registerDynamic('af', ['29', '6e', '70', '5'], true, function ($__require, exports, module) {
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toObject = $__require('29'),
      toIndex = $__require('6e'),
      toLength = $__require('70');

  module.exports = [].copyWithin || function copyWithin(target /*= 0*/, start /*= 0, end = @length*/) {
    var O = toObject(this),
        len = toLength(O.length),
        to = toIndex(target, len),
        from = toIndex(start, len),
        end = arguments.length > 2 ? arguments[2] : undefined,
        count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to),
        inc = 1;
    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }
    while (count-- > 0) {
      if (from in O) O[to] = O[from];else delete O[to];
      to += inc;
      from += inc;
    }return O;
  };
  return module.exports;
});
$__System.registerDynamic('cf', ['c', '20', 'a', '10', 'd', 'cb', 'cc', '94', 'c1', '1a', '21', 'c6', '4a', '70', '6e', '19', 'b', '38', '3c', '2e', '29', '96', '1b', '2a', '1f', '98', '13', '14', 'a3', 'ac', 'c3', 'd7', 'd8', '99', 'b6', 'b2', 'af', '1e', '1d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  if ($__require('c')) {
    var LIBRARY = $__require('20'),
        global = $__require('a'),
        fails = $__require('10'),
        $export = $__require('d'),
        $typed = $__require('cb'),
        $buffer = $__require('cc'),
        ctx = $__require('94'),
        anInstance = $__require('c1'),
        propertyDesc = $__require('1a'),
        hide = $__require('21'),
        redefineAll = $__require('c6'),
        toInteger = $__require('4a'),
        toLength = $__require('70'),
        toIndex = $__require('6e'),
        toPrimitive = $__require('19'),
        has = $__require('b'),
        same = $__require('38'),
        classof = $__require('3c'),
        isObject = $__require('2e'),
        toObject = $__require('29'),
        isArrayIter = $__require('96'),
        create = $__require('1b'),
        getPrototypeOf = $__require('2a'),
        gOPN = $__require('1f').f,
        getIterFn = $__require('98'),
        uid = $__require('13'),
        wks = $__require('14'),
        createArrayMethod = $__require('a3'),
        createArrayIncludes = $__require('ac'),
        speciesConstructor = $__require('c3'),
        ArrayIterators = $__require('d7'),
        Iterators = $__require('d8'),
        $iterDetect = $__require('99'),
        setSpecies = $__require('b6'),
        arrayFill = $__require('b2'),
        arrayCopyWithin = $__require('af'),
        $DP = $__require('1e'),
        $GOPD = $__require('1d'),
        dP = $DP.f,
        gOPD = $GOPD.f,
        RangeError = global.RangeError,
        TypeError = global.TypeError,
        Uint8Array = global.Uint8Array,
        ARRAY_BUFFER = 'ArrayBuffer',
        SHARED_BUFFER = 'Shared' + ARRAY_BUFFER,
        BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT',
        PROTOTYPE = 'prototype',
        ArrayProto = Array[PROTOTYPE],
        $ArrayBuffer = $buffer.ArrayBuffer,
        $DataView = $buffer.DataView,
        arrayForEach = createArrayMethod(0),
        arrayFilter = createArrayMethod(2),
        arraySome = createArrayMethod(3),
        arrayEvery = createArrayMethod(4),
        arrayFind = createArrayMethod(5),
        arrayFindIndex = createArrayMethod(6),
        arrayIncludes = createArrayIncludes(true),
        arrayIndexOf = createArrayIncludes(false),
        arrayValues = ArrayIterators.values,
        arrayKeys = ArrayIterators.keys,
        arrayEntries = ArrayIterators.entries,
        arrayLastIndexOf = ArrayProto.lastIndexOf,
        arrayReduce = ArrayProto.reduce,
        arrayReduceRight = ArrayProto.reduceRight,
        arrayJoin = ArrayProto.join,
        arraySort = ArrayProto.sort,
        arraySlice = ArrayProto.slice,
        arrayToString = ArrayProto.toString,
        arrayToLocaleString = ArrayProto.toLocaleString,
        ITERATOR = wks('iterator'),
        TAG = wks('toStringTag'),
        TYPED_CONSTRUCTOR = uid('typed_constructor'),
        DEF_CONSTRUCTOR = uid('def_constructor'),
        ALL_CONSTRUCTORS = $typed.CONSTR,
        TYPED_ARRAY = $typed.TYPED,
        VIEW = $typed.VIEW,
        WRONG_LENGTH = 'Wrong length!';

    var $map = createArrayMethod(1, function (O, length) {
      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });

    var LITTLE_ENDIAN = fails(function () {
      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
    });

    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
      new Uint8Array(1).set({});
    });

    var strictToLength = function (it, SAME) {
      if (it === undefined) throw TypeError(WRONG_LENGTH);
      var number = +it,
          length = toLength(it);
      if (SAME && !same(number, length)) throw RangeError(WRONG_LENGTH);
      return length;
    };

    var toOffset = function (it, BYTES) {
      var offset = toInteger(it);
      if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
      return offset;
    };

    var validate = function (it) {
      if (isObject(it) && TYPED_ARRAY in it) return it;
      throw TypeError(it + ' is not a typed array!');
    };

    var allocate = function (C, length) {
      if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
        throw TypeError('It is not a typed array constructor!');
      }return new C(length);
    };

    var speciesFromList = function (O, list) {
      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };

    var fromList = function (C, list) {
      var index = 0,
          length = list.length,
          result = allocate(C, length);
      while (length > index) result[index] = list[index++];
      return result;
    };

    var addGetter = function (it, key, internal) {
      dP(it, key, { get: function () {
          return this._d[internal];
        } });
    };

    var $from = function from(source /*, mapfn, thisArg */) {
      var O = toObject(source),
          aLen = arguments.length,
          mapfn = aLen > 1 ? arguments[1] : undefined,
          mapping = mapfn !== undefined,
          iterFn = getIterFn(O),
          i,
          length,
          values,
          result,
          step,
          iterator;
      if (iterFn != undefined && !isArrayIter(iterFn)) {
        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
          values.push(step.value);
        }O = values;
      }
      if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
      for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
      return result;
    };

    var $of = function of() /*...items*/{
      var index = 0,
          length = arguments.length,
          result = allocate(this, length);
      while (length > index) result[index] = arguments[index++];
      return result;
    };

    // iOS Safari 6.x fails here
    var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
      arrayToLocaleString.call(new Uint8Array(1));
    });

    var $toLocaleString = function toLocaleString() {
      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };

    var proto = {
      copyWithin: function copyWithin(target, start /*, end */) {
        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      },
      every: function every(callbackfn /*, thisArg */) {
        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      fill: function fill(value /*, start, end */) {
        // eslint-disable-line no-unused-vars
        return arrayFill.apply(validate(this), arguments);
      },
      filter: function filter(callbackfn /*, thisArg */) {
        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
      },
      find: function find(predicate /*, thisArg */) {
        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      findIndex: function findIndex(predicate /*, thisArg */) {
        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      forEach: function forEach(callbackfn /*, thisArg */) {
        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      indexOf: function indexOf(searchElement /*, fromIndex */) {
        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      includes: function includes(searchElement /*, fromIndex */) {
        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      join: function join(separator) {
        // eslint-disable-line no-unused-vars
        return arrayJoin.apply(validate(this), arguments);
      },
      lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */) {
        // eslint-disable-line no-unused-vars
        return arrayLastIndexOf.apply(validate(this), arguments);
      },
      map: function map(mapfn /*, thisArg */) {
        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      reduce: function reduce(callbackfn /*, initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduce.apply(validate(this), arguments);
      },
      reduceRight: function reduceRight(callbackfn /*, initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduceRight.apply(validate(this), arguments);
      },
      reverse: function reverse() {
        var that = this,
            length = validate(that).length,
            middle = Math.floor(length / 2),
            index = 0,
            value;
        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }return that;
      },
      some: function some(callbackfn /*, thisArg */) {
        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      sort: function sort(comparefn) {
        return arraySort.call(validate(this), comparefn);
      },
      subarray: function subarray(begin, end) {
        var O = validate(this),
            length = O.length,
            $begin = toIndex(begin, length);
        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toIndex(end, length)) - $begin));
      }
    };

    var $slice = function slice(start, end) {
      return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };

    var $set = function set(arrayLike /*, offset */) {
      validate(this);
      var offset = toOffset(arguments[1], 1),
          length = this.length,
          src = toObject(arrayLike),
          len = toLength(src.length),
          index = 0;
      if (len + offset > length) throw RangeError(WRONG_LENGTH);
      while (index < len) this[offset + index] = src[index++];
    };

    var $iterators = {
      entries: function entries() {
        return arrayEntries.call(validate(this));
      },
      keys: function keys() {
        return arrayKeys.call(validate(this));
      },
      values: function values() {
        return arrayValues.call(validate(this));
      }
    };

    var isTAIndex = function (target, key) {
      return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
    };
    var $getDesc = function getOwnPropertyDescriptor(target, key) {
      return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
    };
    var $setDesc = function defineProperty(target, key, desc) {
      if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
        target[key] = desc.value;
        return target;
      } else return dP(target, key, desc);
    };

    if (!ALL_CONSTRUCTORS) {
      $GOPD.f = $getDesc;
      $DP.f = $setDesc;
    }

    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
      getOwnPropertyDescriptor: $getDesc,
      defineProperty: $setDesc
    });

    if (fails(function () {
      arrayToString.call({});
    })) {
      arrayToString = arrayToLocaleString = function toString() {
        return arrayJoin.call(this);
      };
    }

    var $TypedArrayPrototype$ = redefineAll({}, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
      slice: $slice,
      set: $set,
      constructor: function () {/* noop */},
      toString: arrayToString,
      toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
      get: function () {
        return this[TYPED_ARRAY];
      }
    });

    module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
      CLAMPED = !!CLAMPED;
      var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array',
          ISNT_UINT8 = NAME != 'Uint8Array',
          GETTER = 'get' + KEY,
          SETTER = 'set' + KEY,
          TypedArray = global[NAME],
          Base = TypedArray || {},
          TAC = TypedArray && getPrototypeOf(TypedArray),
          FORCED = !TypedArray || !$typed.ABV,
          O = {},
          TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
      var getter = function (that, index) {
        var data = that._d;
        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
      };
      var setter = function (that, index, value) {
        var data = that._d;
        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
      };
      var addElement = function (that, index) {
        dP(that, index, {
          get: function () {
            return getter(this, index);
          },
          set: function (value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };
      if (FORCED) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME, '_d');
          var index = 0,
              offset = 0,
              buffer,
              byteLength,
              length,
              klass;
          if (!isObject(data)) {
            length = strictToLength(data, true);
            byteLength = length * BYTES;
            buffer = new $ArrayBuffer(byteLength);
          } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            buffer = data;
            offset = toOffset($offset, BYTES);
            var $len = data.byteLength;
            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - offset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
            }
            length = byteLength / BYTES;
          } else if (TYPED_ARRAY in data) {
            return fromList(TypedArray, data);
          } else {
            return $from.call(TypedArray, data);
          }
          hide(that, '_d', {
            b: buffer,
            o: offset,
            l: byteLength,
            e: length,
            v: new $DataView(buffer)
          });
          while (index < length) addElement(that, index++);
        });
        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
        hide(TypedArrayPrototype, 'constructor', TypedArray);
      } else if (!$iterDetect(function (iter) {
        // V8 works with iterators, but fails in many other cases
        // https://code.google.com/p/v8/issues/detail?id=4552
        new TypedArray(null); // eslint-disable-line no-new
        new TypedArray(iter); // eslint-disable-line no-new
      }, true)) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME);
          var klass;
          // `ws` module bug, temporarily remove validation length for Uint8Array
          // https://github.com/websockets/ws/pull/645
          if (!isObject(data)) return new Base(strictToLength(data, ISNT_UINT8));
          if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
          }
          if (TYPED_ARRAY in data) return fromList(TypedArray, data);
          return $from.call(TypedArray, data);
        });
        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
          if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
        });
        TypedArray[PROTOTYPE] = TypedArrayPrototype;
        if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
      }
      var $nativeIterator = TypedArrayPrototype[ITERATOR],
          CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined),
          $iterator = $iterators.values;
      hide(TypedArray, TYPED_CONSTRUCTOR, true);
      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
      hide(TypedArrayPrototype, VIEW, true);
      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

      if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
        dP(TypedArrayPrototype, TAG, {
          get: function () {
            return NAME;
          }
        });
      }

      O[NAME] = TypedArray;

      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

      $export($export.S, NAME, {
        BYTES_PER_ELEMENT: BYTES,
        from: $from,
        of: $of
      });

      if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

      $export($export.P, NAME, proto);

      setSpecies(NAME);

      $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

      $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, { toString: arrayToString });

      $export($export.P + $export.F * fails(function () {
        new TypedArray(1).slice();
      }), NAME, { slice: $slice });

      $export($export.P + $export.F * (fails(function () {
        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
      }) || !fails(function () {
        TypedArrayPrototype.toLocaleString.call([1, 2]);
      })), NAME, { toLocaleString: $toLocaleString });

      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
      if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
  } else module.exports = function () {/* empty */};
  return module.exports;
});
$__System.registerDynamic('d9', ['cf', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('cf')('Float64', 8, function (init) {
    return function Float64Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
  return module.exports;
});
$__System.registerDynamic('da', ['d', 'a1', '18', 'a', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  var $export = $__require('d'),
      aFunction = $__require('a1'),
      anObject = $__require('18'),
      rApply = ($__require('a').Reflect || {}).apply,
      fApply = Function.apply;
  // MS Edge argumentsList argument is optional
  $export($export.S + $export.F * !$__require('10')(function () {
    rApply(function () {});
  }), 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList) {
      var T = aFunction(target),
          L = anObject(argumentsList);
      return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
    }
  });
  return module.exports;
});
$__System.registerDynamic('3e', ['a1', '2e', 'db', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var aFunction = $__require('a1'),
      isObject = $__require('2e'),
      invoke = $__require('db'),
      arraySlice = [].slice,
      factories = {};

  var construct = function (F, len, args) {
    if (!(len in factories)) {
      for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }return factories[len](F, args);
  };

  module.exports = Function.bind || function bind(that /*, args... */) {
    var fn = aFunction(this),
        partArgs = arraySlice.call(arguments, 1);
    var bound = function () /* args... */{
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if (isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
  };
  return module.exports;
});
$__System.registerDynamic('dc', ['d', '1b', 'a1', '18', '2e', '10', '3e', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  var $export = $__require('d'),
      create = $__require('1b'),
      aFunction = $__require('a1'),
      anObject = $__require('18'),
      isObject = $__require('2e'),
      fails = $__require('10'),
      bind = $__require('3e'),
      rConstruct = ($__require('a').Reflect || {}).construct;

  // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it
  var NEW_TARGET_BUG = fails(function () {
    function F() {}
    return !(rConstruct(function () {}, [], F) instanceof F);
  });
  var ARGS_BUG = !fails(function () {
    rConstruct(function () {});
  });

  $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
    construct: function construct(Target, args /*, newTarget*/) {
      aFunction(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();
          case 1:
            return new Target(args[0]);
          case 2:
            return new Target(args[0], args[1]);
          case 3:
            return new Target(args[0], args[1], args[2]);
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        }
        // w/o altered newTarget, lot of arguments case
        var $args = [null];
        $args.push.apply($args, args);
        return new (bind.apply(Target, $args))();
      }
      // with altered newTarget, not support built-in constructors
      var proto = newTarget.prototype,
          instance = create(isObject(proto) ? proto : Object.prototype),
          result = Function.apply.call(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });
  return module.exports;
});
$__System.registerDynamic('dd', ['1e', 'd', '18', '19', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  var dP = $__require('1e'),
      $export = $__require('d'),
      anObject = $__require('18'),
      toPrimitive = $__require('19');

  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
  $export($export.S + $export.F * $__require('10')(function () {
    Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
      anObject(target);
      propertyKey = toPrimitive(propertyKey, true);
      anObject(attributes);
      try {
        dP.f(target, propertyKey, attributes);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  return module.exports;
});
$__System.registerDynamic('de', ['d', '1d', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  var $export = $__require('d'),
      gOPD = $__require('1d').f,
      anObject = $__require('18');

  $export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey) {
      var desc = gOPD(anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });
  return module.exports;
});
$__System.registerDynamic('df', ['d', '18', 'e0', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 26.1.5 Reflect.enumerate(target)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      anObject = $__require('18');
  var Enumerate = function (iterated) {
    this._t = anObject(iterated); // target
    this._i = 0; // next index
    var keys = this._k = [] // keys
    ,
        key;
    for (key in iterated) keys.push(key);
  };
  $__require('e0')(Enumerate, 'Object', function () {
    var that = this,
        keys = that._k,
        key;
    do {
      if (that._i >= keys.length) return { value: undefined, done: true };
    } while (!((key = keys[that._i++]) in that._t));
    return { value: key, done: false };
  });

  $export($export.S, 'Reflect', {
    enumerate: function enumerate(target) {
      return new Enumerate(target);
    }
  });
  return module.exports;
});
$__System.registerDynamic('e1', ['1d', '2a', 'b', 'd', '2e', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  var gOPD = $__require('1d'),
      getPrototypeOf = $__require('2a'),
      has = $__require('b'),
      $export = $__require('d'),
      isObject = $__require('2e'),
      anObject = $__require('18');

  function get(target, propertyKey /*, receiver*/) {
    var receiver = arguments.length < 3 ? target : arguments[2],
        desc,
        proto;
    if (anObject(target) === receiver) return target[propertyKey];
    if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
  }

  $export($export.S, 'Reflect', { get: get });
  return module.exports;
});
$__System.registerDynamic('e2', ['1d', 'd', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  var gOPD = $__require('1d'),
      $export = $__require('d'),
      anObject = $__require('18');

  $export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
      return gOPD.f(anObject(target), propertyKey);
    }
  });
  return module.exports;
});
$__System.registerDynamic('e3', ['d', '2a', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.8 Reflect.getPrototypeOf(target)
  var $export = $__require('d'),
      getProto = $__require('2a'),
      anObject = $__require('18');

  $export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target) {
      return getProto(anObject(target));
    }
  });
  return module.exports;
});
$__System.registerDynamic('e4', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.9 Reflect.has(target, propertyKey)
  var $export = $__require('d');

  $export($export.S, 'Reflect', {
    has: function has(target, propertyKey) {
      return propertyKey in target;
    }
  });
  return module.exports;
});
$__System.registerDynamic('e5', ['d', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.10 Reflect.isExtensible(target)
  var $export = $__require('d'),
      anObject = $__require('18'),
      $isExtensible = Object.isExtensible;

  $export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target) {
      anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });
  return module.exports;
});
$__System.registerDynamic('e6', ['d', 'e7', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.11 Reflect.ownKeys(target)
  var $export = $__require('d');

  $export($export.S, 'Reflect', { ownKeys: $__require('e7') });
  return module.exports;
});
$__System.registerDynamic('e8', ['d', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.12 Reflect.preventExtensions(target)
  var $export = $__require('d'),
      anObject = $__require('18'),
      $preventExtensions = Object.preventExtensions;

  $export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target) {
      anObject(target);
      try {
        if ($preventExtensions) $preventExtensions(target);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  return module.exports;
});
$__System.registerDynamic('e9', ['1e', '1d', '2a', 'b', 'd', '1a', '18', '2e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  var dP = $__require('1e'),
      gOPD = $__require('1d'),
      getPrototypeOf = $__require('2a'),
      has = $__require('b'),
      $export = $__require('d'),
      createDesc = $__require('1a'),
      anObject = $__require('18'),
      isObject = $__require('2e');

  function set(target, propertyKey, V /*, receiver*/) {
    var receiver = arguments.length < 4 ? target : arguments[3],
        ownDesc = gOPD.f(anObject(target), propertyKey),
        existingDescriptor,
        proto;
    if (!ownDesc) {
      if (isObject(proto = getPrototypeOf(target))) {
        return set(proto, propertyKey, V, receiver);
      }
      ownDesc = createDesc(0);
    }
    if (has(ownDesc, 'value')) {
      if (ownDesc.writable === false || !isObject(receiver)) return false;
      existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }

  $export($export.S, 'Reflect', { set: set });
  return module.exports;
});
$__System.registerDynamic('ea', ['d', '3a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 26.1.14 Reflect.setPrototypeOf(target, proto)
  var $export = $__require('d'),
      setProto = $__require('3a');

  if (setProto) $export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto) {
      setProto.check(target, proto);
      try {
        setProto.set(target, proto);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
  return module.exports;
});
$__System.registerDynamic('eb', ['d', 'ac', 'b0', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/Array.prototype.includes

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $includes = $__require('ac')(true);

  $export($export.P, 'Array', {
    includes: function includes(el /*, fromIndex = 0 */) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  $__require('b0')('includes');
  return module.exports;
});
$__System.registerDynamic('73', ['4a', '7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toInteger = $__require('4a'),
      defined = $__require('7c');
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
  return module.exports;
});
$__System.registerDynamic('ec', ['d', '73', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/mathiasbynens/String.prototype.at

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $at = $__require('73')(true);

  $export($export.P, 'String', {
    at: function at(pos) {
      return $at(this, pos);
    }
  });
  return module.exports;
});
$__System.registerDynamic('ed', ['d', 'ee', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $pad = $__require('ee');

  $export($export.P, 'String', {
    padStart: function padStart(maxLength /*, fillString = ' ' */) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });
  return module.exports;
});
$__System.registerDynamic('4c', ['4a', '7c', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toInteger = $__require('4a'),
      defined = $__require('7c');

  module.exports = function repeat(count) {
    var str = String(defined(this)),
        res = '',
        n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
    return res;
  };
  return module.exports;
});
$__System.registerDynamic('ee', ['70', '4c', '7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-string-pad-start-end
  var toLength = $__require('70'),
      repeat = $__require('4c'),
      defined = $__require('7c');

  module.exports = function (that, maxLength, fillString, left) {
    var S = String(defined(that)),
        stringLength = S.length,
        fillStr = fillString === undefined ? ' ' : String(fillString),
        intMaxLength = toLength(maxLength);
    if (intMaxLength <= stringLength || fillStr == '') return S;
    var fillLen = intMaxLength - stringLength,
        stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };
  return module.exports;
});
$__System.registerDynamic('ef', ['d', 'ee', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $pad = $__require('ee');

  $export($export.P, 'String', {
    padEnd: function padEnd(maxLength /*, fillString = ' ' */) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });
  return module.exports;
});
$__System.registerDynamic('f0', ['48', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('48')('trimLeft', function ($trim) {
    return function trimLeft() {
      return $trim(this, 1);
    };
  }, 'trimStart');
  return module.exports;
});
$__System.registerDynamic('56', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
  return module.exports;
});
$__System.registerDynamic('48', ['d', '7c', '10', '56', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      defined = $__require('7c'),
      fails = $__require('10'),
      spaces = $__require('56'),
      space = '[' + spaces + ']',
      non = '\u200b\u0085',
      ltrim = RegExp('^' + space + space + '*'),
      rtrim = RegExp(space + space + '*$');

  var exporter = function (KEY, exec, ALIAS) {
    var exp = {};
    var FORCE = fails(function () {
      return !!spaces[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    $export($export.P + $export.F * FORCE, 'String', exp);
  };

  // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim
  var trim = exporter.trim = function (string, TYPE) {
    string = String(defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  module.exports = exporter;
  return module.exports;
});
$__System.registerDynamic('f1', ['48', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('48')('trimRight', function ($trim) {
    return function trimRight() {
      return $trim(this, 2);
    };
  }, 'trimEnd');
  return module.exports;
});
$__System.registerDynamic('7b', ['2e', '46', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.2.8 IsRegExp(argument)
  var isObject = $__require('2e'),
      cof = $__require('46'),
      MATCH = $__require('14')('match');
  module.exports = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
  };
  return module.exports;
});
$__System.registerDynamic('b8', ['18', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 21.2.5.3 get RegExp.prototype.flags

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var anObject = $__require('18');
  module.exports = function () {
    var that = anObject(this),
        result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };
  return module.exports;
});
$__System.registerDynamic('f2', ['d', '7c', '70', '7b', 'b8', 'e0', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://tc39.github.io/String.prototype.matchAll/

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      defined = $__require('7c'),
      toLength = $__require('70'),
      isRegExp = $__require('7b'),
      getFlags = $__require('b8'),
      RegExpProto = RegExp.prototype;

  var $RegExpStringIterator = function (regexp, string) {
    this._r = regexp;
    this._s = string;
  };

  $__require('e0')($RegExpStringIterator, 'RegExp String', function next() {
    var match = this._r.exec(this._s);
    return { value: match, done: match === null };
  });

  $export($export.P, 'String', {
    matchAll: function matchAll(regexp) {
      defined(this);
      if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
      var S = String(this),
          flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp),
          rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
      rx.lastIndex = toLength(regexp.lastIndex);
      return new $RegExpStringIterator(rx, S);
    }
  });
  return module.exports;
});
$__System.registerDynamic('f3', ['16', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('16')('asyncIterator');
  return module.exports;
});
$__System.registerDynamic('15', ['14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  exports.f = $__require('14');
  return module.exports;
});
$__System.registerDynamic('16', ['a', '33', '20', '15', '1e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      core = $__require('33'),
      LIBRARY = $__require('20'),
      wksExt = $__require('15'),
      defineProperty = $__require('1e').f;
  module.exports = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
  };
  return module.exports;
});
$__System.registerDynamic('f4', ['16', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('16')('observable');
  return module.exports;
});
$__System.registerDynamic('1f', ['f5', 'f6', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys = $__require('f5'),
      hiddenKeys = $__require('f6').concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
  return module.exports;
});
$__System.registerDynamic('e7', ['1f', '7', '18', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // all object keys, includes non-enumerable and symbols
  var gOPN = $__require('1f'),
      gOPS = $__require('7'),
      anObject = $__require('18'),
      Reflect = $__require('a').Reflect;
  module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
    var keys = gOPN.f(anObject(it)),
        getSymbols = gOPS.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };
  return module.exports;
});
$__System.registerDynamic('97', ['1e', '1a', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $defineProperty = $__require('1e'),
      createDesc = $__require('1a');

  module.exports = function (object, index, value) {
    if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
  };
  return module.exports;
});
$__System.registerDynamic('f7', ['d', 'e7', '4', '1d', '97', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-getownpropertydescriptors
  var $export = $__require('d'),
      ownKeys = $__require('e7'),
      toIObject = $__require('4'),
      gOPD = $__require('1d'),
      createProperty = $__require('97');

  $export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIObject(object),
          getDesc = gOPD.f,
          keys = ownKeys(O),
          result = {},
          i = 0,
          key;
      while (keys.length > i) createProperty(result, key = keys[i++], getDesc(O, key));
      return result;
    }
  });
  return module.exports;
});
$__System.registerDynamic('f8', ['d', 'f9', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-values-entries
  var $export = $__require('d'),
      $values = $__require('f9')(false);

  $export($export.S, 'Object', {
    values: function values(it) {
      return $values(it);
    }
  });
  return module.exports;
});
$__System.registerDynamic('f9', ['3', '4', '8', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var getKeys = $__require('3'),
      toIObject = $__require('4'),
      isEnum = $__require('8').f;
  module.exports = function (isEntries) {
    return function (it) {
      var O = toIObject(it),
          keys = getKeys(O),
          length = keys.length,
          i = 0,
          result = [],
          key;
      while (length > i) if (isEnum.call(O, key = keys[i++])) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }return result;
    };
  };
  return module.exports;
});
$__System.registerDynamic('fa', ['d', 'f9', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-values-entries
  var $export = $__require('d'),
      $entries = $__require('f9')(true);

  $export($export.S, 'Object', {
    entries: function entries(it) {
      return $entries(it);
    }
  });
  return module.exports;
});
$__System.registerDynamic('fb', ['d', '29', 'a1', '1e', 'c', 'fc', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toObject = $__require('29'),
      aFunction = $__require('a1'),
      $defineProperty = $__require('1e');

  // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
  $__require('c') && $export($export.P + $__require('fc'), 'Object', {
    __defineGetter__: function __defineGetter__(P, getter) {
      $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
  return module.exports;
});
$__System.registerDynamic('fd', ['d', '29', 'a1', '1e', 'c', 'fc', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toObject = $__require('29'),
      aFunction = $__require('a1'),
      $defineProperty = $__require('1e');

  // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
  $__require('c') && $export($export.P + $__require('fc'), 'Object', {
    __defineSetter__: function __defineSetter__(P, setter) {
      $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
  return module.exports;
});
$__System.registerDynamic('fe', ['d', '29', '19', '2a', '1d', 'c', 'fc', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toObject = $__require('29'),
      toPrimitive = $__require('19'),
      getPrototypeOf = $__require('2a'),
      getOwnPropertyDescriptor = $__require('1d').f;

  // B.2.2.4 Object.prototype.__lookupGetter__(P)
  $__require('c') && $export($export.P + $__require('fc'), 'Object', {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this),
          K = toPrimitive(P, true),
          D;
      do {
        if (D = getOwnPropertyDescriptor(O, K)) return D.get;
      } while (O = getPrototypeOf(O));
    }
  });
  return module.exports;
});
$__System.registerDynamic('fc', ['20', '10', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // Forced replacement prototype accessors methods
  module.exports = $__require('20') || !$__require('10')(function () {
    var K = Math.random();
    // In FF throws only define methods
    __defineSetter__.call(null, K, function () {/* empty */});
    delete $__require('a')[K];
  });
  return module.exports;
});
$__System.registerDynamic('ff', ['d', '29', '19', '2a', '1d', 'c', 'fc', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      toObject = $__require('29'),
      toPrimitive = $__require('19'),
      getPrototypeOf = $__require('2a'),
      getOwnPropertyDescriptor = $__require('1d').f;

  // B.2.2.5 Object.prototype.__lookupSetter__(P)
  $__require('c') && $export($export.P + $__require('fc'), 'Object', {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this),
          K = toPrimitive(P, true),
          D;
      do {
        if (D = getOwnPropertyDescriptor(O, K)) return D.set;
      } while (O = getPrototypeOf(O));
    }
  });
  return module.exports;
});
$__System.registerDynamic('100', ['d', '101', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export = $__require('d');

  $export($export.P + $export.R, 'Map', { toJSON: $__require('101')('Map') });
  return module.exports;
});
$__System.registerDynamic('101', ['3c', '102', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var classof = $__require('3c'),
      from = $__require('102');
  module.exports = function (NAME) {
    return function toJSON() {
      if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };
  return module.exports;
});
$__System.registerDynamic('103', ['d', '101', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export = $__require('d');

  $export($export.P + $export.R, 'Set', { toJSON: $__require('101')('Set') });
  return module.exports;
});
$__System.registerDynamic('104', ['d', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/ljharb/proposal-global
  var $export = $__require('d');

  $export($export.S, 'System', { global: $__require('a') });
  return module.exports;
});
$__System.registerDynamic('105', ['d', '46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/ljharb/proposal-is-error
  var $export = $__require('d'),
      cof = $__require('46');

  $export($export.S, 'Error', {
    isError: function isError(it) {
      return cof(it) === 'Error';
    }
  });
  return module.exports;
});
$__System.registerDynamic('106', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('d');

  $export($export.S, 'Math', {
    iaddh: function iaddh(x0, x1, y0, y1) {
      var $x0 = x0 >>> 0,
          $x1 = x1 >>> 0,
          $y0 = y0 >>> 0;
      return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
    }
  });
  return module.exports;
});
$__System.registerDynamic('107', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('d');

  $export($export.S, 'Math', {
    isubh: function isubh(x0, x1, y0, y1) {
      var $x0 = x0 >>> 0,
          $x1 = x1 >>> 0,
          $y0 = y0 >>> 0;
      return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
    }
  });
  return module.exports;
});
$__System.registerDynamic('108', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('d');

  $export($export.S, 'Math', {
    imulh: function imulh(u, v) {
      var UINT16 = 0xffff,
          $u = +u,
          $v = +v,
          u0 = $u & UINT16,
          v0 = $v & UINT16,
          u1 = $u >> 16,
          v1 = $v >> 16,
          t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
    }
  });
  return module.exports;
});
$__System.registerDynamic('109', ['d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('d');

  $export($export.S, 'Math', {
    umulh: function umulh(u, v) {
      var UINT16 = 0xffff,
          $u = +u,
          $v = +v,
          u0 = $u & UINT16,
          v0 = $v & UINT16,
          u1 = $u >>> 16,
          v1 = $v >>> 16,
          t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
    }
  });
  return module.exports;
});
$__System.registerDynamic('10a', ['10b', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      toMetaKey = metadata.key,
      ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    } });
  return module.exports;
});
$__System.registerDynamic('10c', ['10b', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      toMetaKey = metadata.key,
      getOrCreateMetadataMap = metadata.map,
      store = metadata.store;

  metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */) {
      var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]),
          metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
      if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
      if (metadataMap.size) return true;
      var targetMetadata = store.get(target);
      targetMetadata['delete'](targetKey);
      return !!targetMetadata.size || store['delete'](target);
    } });
  return module.exports;
});
$__System.registerDynamic('10d', ['10b', '18', '2a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      getPrototypeOf = $__require('2a'),
      ordinaryHasOwnMetadata = metadata.has,
      ordinaryGetOwnMetadata = metadata.get,
      toMetaKey = metadata.key;

  var ordinaryGetMetadata = function (MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
  };

  metadata.exp({ getMetadata: function getMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
  return module.exports;
});
$__System.registerDynamic('10e', ['10f', 'c9', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var strong = $__require('10f');

  // 23.2 Set Objects
  module.exports = $__require('c9')('Set', function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
      return strong.def(this, value = value === 0 ? 0 : value, value);
    }
  }, strong);
  return module.exports;
});
$__System.registerDynamic('102', ['c2', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var forOf = $__require('c2');

  module.exports = function (iter, ITERATOR) {
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };
  return module.exports;
});
$__System.registerDynamic('110', ['10e', '102', '10b', '18', '2a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var Set = $__require('10e'),
      from = $__require('102'),
      metadata = $__require('10b'),
      anObject = $__require('18'),
      getPrototypeOf = $__require('2a'),
      ordinaryOwnMetadataKeys = metadata.keys,
      toMetaKey = metadata.key;

  var ordinaryMetadataKeys = function (O, P) {
    var oKeys = ordinaryOwnMetadataKeys(O, P),
        parent = getPrototypeOf(O);
    if (parent === null) return oKeys;
    var pKeys = ordinaryMetadataKeys(parent, P);
    return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
  };

  metadata.exp({ getMetadataKeys: function getMetadataKeys(target /*, targetKey */) {
      return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
  return module.exports;
});
$__System.registerDynamic('111', ['10b', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      ordinaryGetOwnMetadata = metadata.get,
      toMetaKey = metadata.key;

  metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
  return module.exports;
});
$__System.registerDynamic('112', ['10b', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      ordinaryOwnMetadataKeys = metadata.keys,
      toMetaKey = metadata.key;

  metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */) {
      return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
  return module.exports;
});
$__System.registerDynamic('113', ['10b', '18', '2a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      getPrototypeOf = $__require('2a'),
      ordinaryHasOwnMetadata = metadata.has,
      toMetaKey = metadata.key;

  var ordinaryHasMetadata = function (MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return true;
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
  };

  metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
  return module.exports;
});
$__System.registerDynamic('114', ['10b', '18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      ordinaryHasOwnMetadata = metadata.has,
      toMetaKey = metadata.key;

  metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
  return module.exports;
});
$__System.registerDynamic('10f', ['1e', '1b', 'c6', '94', 'c1', '7c', 'c2', '74', '115', 'b6', 'c', 'f', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var dP = $__require('1e').f,
      create = $__require('1b'),
      redefineAll = $__require('c6'),
      ctx = $__require('94'),
      anInstance = $__require('c1'),
      defined = $__require('7c'),
      forOf = $__require('c2'),
      $iterDefine = $__require('74'),
      step = $__require('115'),
      setSpecies = $__require('b6'),
      DESCRIPTORS = $__require('c'),
      fastKey = $__require('f').fastKey,
      SIZE = DESCRIPTORS ? '_s' : 'size';

  var getEntry = function (that, key) {
    // fast case
    var index = fastKey(key),
        entry;
    if (index !== 'F') return that._i[index];
    // frozen object case
    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };

  module.exports = {
    getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = create(null); // index
        that._f = undefined; // first entry
        that._l = undefined; // last entry
        that[SIZE] = 0; // size
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function (key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE]--;
          }return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /*, that = undefined */) {
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
              entry;
          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this);
            // revert to the last existing entry
            while (entry && entry.r) entry = entry.p;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if (DESCRIPTORS) dP(C.prototype, 'size', {
        get: function () {
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function (that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;
      // change existing entry
      if (entry) {
        entry.v = value;
        // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true), // <- index
          k: key, // <- key
          v: value, // <- value
          p: prev = that._l, // <- previous entry
          n: undefined, // <- next entry
          r: false // <- removed
        };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE]++;
        // add to index
        if (index !== 'F') that._i[index] = entry;
      }return that;
    },
    getEntry: getEntry,
    setStrong: function (C, NAME, IS_MAP) {
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function (iterated, kind) {
        this._t = iterated; // target
        this._k = kind; // kind
        this._l = undefined; // previous
      }, function () {
        var that = this,
            kind = that._k,
            entry = that._l;
        // revert to the last existing entry
        while (entry && entry.r) entry = entry.p;
        // get next entry
        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          // or finish the iteration
          that._t = undefined;
          return step(1);
        }
        // return step by kind
        if (kind == 'keys') return step(0, entry.k);
        if (kind == 'values') return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(NAME);
    }
  };
  return module.exports;
});
$__System.registerDynamic('116', ['10f', 'c9', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var strong = $__require('10f');

  // 23.1 Map Objects
  module.exports = $__require('c9')('Map', function (get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);
  return module.exports;
});
$__System.registerDynamic("7", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  exports.f = Object.getOwnPropertySymbols;
  return module.exports;
});
$__System.registerDynamic('36', ['3', '7', '8', '29', '9c', '10', '5'], true, function ($__require, exports, module) {
  'use strict';
  // 19.1.2.1 Object.assign(target, source, ...)

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var getKeys = $__require('3'),
      gOPS = $__require('7'),
      pIE = $__require('8'),
      toObject = $__require('29'),
      IObject = $__require('9c'),
      $assign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = !$assign || $__require('10')(function () {
    var A = {},
        B = {},
        S = Symbol(),
        K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars
    var T = toObject(target),
        aLen = arguments.length,
        index = 1,
        getSymbols = gOPS.f,
        isEnum = pIE.f;
    while (aLen > index) {
      var S = IObject(arguments[index++]),
          keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
          length = keys.length,
          j = 0,
          key;
      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    }return T;
  } : $assign;
  return module.exports;
});
$__System.registerDynamic('17', ['46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.2.2 IsArray(argument)
  var cof = $__require('46');
  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
  return module.exports;
});
$__System.registerDynamic('117', ['2e', '17', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var isObject = $__require('2e'),
      isArray = $__require('17'),
      SPECIES = $__require('14')('species');

  module.exports = function (original) {
    var C;
    if (isArray(original)) {
      C = original.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    }return C === undefined ? Array : C;
  };
  return module.exports;
});
$__System.registerDynamic('118', ['117', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var speciesConstructor = $__require('117');

  module.exports = function (original, length) {
    return new (speciesConstructor(original))(length);
  };
  return module.exports;
});
$__System.registerDynamic('a3', ['94', '9c', '29', '70', '118', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx = $__require('94'),
      IObject = $__require('9c'),
      toObject = $__require('29'),
      toLength = $__require('70'),
      asc = $__require('118');
  module.exports = function (TYPE, $create) {
    var IS_MAP = TYPE == 1,
        IS_FILTER = TYPE == 2,
        IS_SOME = TYPE == 3,
        IS_EVERY = TYPE == 4,
        IS_FIND_INDEX = TYPE == 6,
        NO_HOLES = TYPE == 5 || IS_FIND_INDEX,
        create = $create || asc;
    return function ($this, callbackfn, that) {
      var O = toObject($this),
          self = IObject(O),
          f = ctx(callbackfn, that, 3),
          length = toLength(self.length),
          index = 0,
          result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined,
          val,
          res;
      for (; length > index; index++) if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true; // some
              case 5:
                return val; // find
              case 6:
                return index; // findIndex
              case 2:
                result.push(val); // filter
            } else if (IS_EVERY) return false; // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };
  return module.exports;
});
$__System.registerDynamic('c8', ['c6', 'f', '18', '2e', 'c1', 'c2', 'a3', 'b', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var redefineAll = $__require('c6'),
      getWeak = $__require('f').getWeak,
      anObject = $__require('18'),
      isObject = $__require('2e'),
      anInstance = $__require('c1'),
      forOf = $__require('c2'),
      createArrayMethod = $__require('a3'),
      $has = $__require('b'),
      arrayFind = createArrayMethod(5),
      arrayFindIndex = createArrayMethod(6),
      id = 0;

  // fallback for uncaught frozen keys
  var uncaughtFrozenStore = function (that) {
    return that._l || (that._l = new UncaughtFrozenStore());
  };
  var UncaughtFrozenStore = function () {
    this.a = [];
  };
  var findUncaughtFrozen = function (store, key) {
    return arrayFind(store.a, function (it) {
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function (key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) return entry[1];
    },
    has: function (key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function (key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) entry[1] = value;else this.a.push([key, value]);
    },
    'delete': function (key) {
      var index = arrayFindIndex(this.a, function (it) {
        return it[0] === key;
      });
      if (~index) this.a.splice(index, 1);
      return !!~index;
    }
  };

  module.exports = {
    getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = id++; // collection id
        that._l = undefined; // leak store for uncaught frozen objects
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function (key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(this)['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(this).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function (that, key, value) {
      var data = getWeak(anObject(key), true);
      if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };
  return module.exports;
});
$__System.registerDynamic('f', ['13', '2e', 'b', '1e', '10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var META = $__require('13')('meta'),
      isObject = $__require('2e'),
      has = $__require('b'),
      setDesc = $__require('1e').f,
      id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !$__require('10')(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function (it) {
    setDesc(it, META, { value: {
        i: 'O' + ++id, // object ID
        w: {} // weak collections IDs
      } });
  };
  var fastKey = function (it, create) {
    // return primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
      // return object ID
    }return it[META].i;
  };
  var getWeak = function (it, create) {
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
      // return hash weak collections IDs
    }return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
  return module.exports;
});
$__System.registerDynamic('99', ['14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var ITERATOR = $__require('14')('iterator'),
      SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function () {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function () {
      throw 2;
    });
  } catch (e) {/* empty */}

  module.exports = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[ITERATOR]();
      iter.next = function () {
        return { done: safe = true };
      };
      arr[ITERATOR] = function () {
        return iter;
      };
      exec(arr);
    } catch (e) {/* empty */}
    return safe;
  };
  return module.exports;
});
$__System.registerDynamic("8", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  exports.f = {}.propertyIsEnumerable;
  return module.exports;
});
$__System.registerDynamic('1d', ['8', '1a', '4', '19', 'b', '119', 'c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var pIE = $__require('8'),
      createDesc = $__require('1a'),
      toIObject = $__require('4'),
      toPrimitive = $__require('19'),
      has = $__require('b'),
      IE8_DOM_DEFINE = $__require('119'),
      gOPD = Object.getOwnPropertyDescriptor;

  exports.f = $__require('c') ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
      return gOPD(O, P);
    } catch (e) {/* empty */}
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
  };
  return module.exports;
});
$__System.registerDynamic('3a', ['2e', '18', '94', '1d', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var isObject = $__require('2e'),
      anObject = $__require('18');
  var check = function (O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = $__require('94')(Function.call, $__require('1d').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
  return module.exports;
});
$__System.registerDynamic('47', ['2e', '3a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var isObject = $__require('2e'),
      setPrototypeOf = $__require('3a').set;
  module.exports = function (that, target, C) {
    var P,
        S = target.constructor;
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    }return that;
  };
  return module.exports;
});
$__System.registerDynamic('c9', ['a', 'd', 'e', 'c6', 'f', 'c2', 'c1', '2e', '10', '99', '12', '47', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      $export = $__require('d'),
      redefine = $__require('e'),
      redefineAll = $__require('c6'),
      meta = $__require('f'),
      forOf = $__require('c2'),
      anInstance = $__require('c1'),
      isObject = $__require('2e'),
      fails = $__require('10'),
      $iterDetect = $__require('99'),
      setToStringTag = $__require('12'),
      inheritIfRequired = $__require('47');

  module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    var fixMethod = function (KEY) {
      var fn = proto[KEY];
      redefine(proto, KEY, KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) {
        fn.call(this, a === 0 ? 0 : a);return this;
      } : function set(a, b) {
        fn.call(this, a === 0 ? 0 : a, b);return this;
      });
    };
    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
      new C().entries().next();
    }))) {
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      var instance = new C()
      // early implementations not supports chaining
      ,
          HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      ,
          THROWS_ON_PRIMITIVES = fails(function () {
        instance.has(1);
      })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      ,
          ACCEPT_ITERABLES = $iterDetect(function (iter) {
        new C(iter);
      }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      ,
          BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C(),
            index = 5;
        while (index--) $instance[ADDER](index, index);
        return !$instance.has(-0);
      });
      if (!ACCEPT_ITERABLES) {
        C = wrapper(function (target, iterable) {
          anInstance(target, C, NAME);
          var that = inheritIfRequired(new Base(), target, C);
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }
      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
      // weak collections should not contains .clear method
      if (IS_WEAK && proto.clear) delete proto.clear;
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);

    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

    return C;
  };
  return module.exports;
});
$__System.registerDynamic('11a', ['a3', 'e', 'f', '36', 'c8', '2e', 'c9', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var each = $__require('a3')(0),
      redefine = $__require('e'),
      meta = $__require('f'),
      assign = $__require('36'),
      weak = $__require('c8'),
      isObject = $__require('2e'),
      getWeak = meta.getWeak,
      isExtensible = Object.isExtensible,
      uncaughtFrozenStore = weak.ufstore,
      tmp = {},
      InternalMap;

  var wrapper = function (get) {
    return function WeakMap() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };

  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key) {
      if (isObject(key)) {
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(this).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value) {
      return weak.def(this, key, value);
    }
  };

  // 23.3 WeakMap Objects
  var $WeakMap = module.exports = $__require('c9')('WeakMap', wrapper, methods, weak, true, true);

  // IE11 WeakMap frozen keys fix
  if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
    InternalMap = weak.getConstructor(wrapper);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function (key) {
      var proto = $WeakMap.prototype,
          method = proto[key];
      redefine(proto, key, function (a, b) {
        // store frozen objects on internal weakmap shim
        if (isObject(a) && !isExtensible(a)) {
          if (!this._f) this._f = new InternalMap();
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
          // store all the rest on native weakmap
        }return method.call(this, a, b);
      });
    });
  }
  return module.exports;
});
$__System.registerDynamic('10b', ['116', 'd', '11', '11a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var Map = $__require('116'),
      $export = $__require('d'),
      shared = $__require('11')('metadata'),
      store = shared.store || (shared.store = new ($__require('11a'))());

  var getOrCreateMetadataMap = function (target, targetKey, create) {
    var targetMetadata = store.get(target);
    if (!targetMetadata) {
      if (!create) return undefined;
      store.set(target, targetMetadata = new Map());
    }
    var keyMetadata = targetMetadata.get(targetKey);
    if (!keyMetadata) {
      if (!create) return undefined;
      targetMetadata.set(targetKey, keyMetadata = new Map());
    }return keyMetadata;
  };
  var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
  };
  var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
  };
  var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
    getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
  };
  var ordinaryOwnMetadataKeys = function (target, targetKey) {
    var metadataMap = getOrCreateMetadataMap(target, targetKey, false),
        keys = [];
    if (metadataMap) metadataMap.forEach(function (_, key) {
      keys.push(key);
    });
    return keys;
  };
  var toMetaKey = function (it) {
    return it === undefined || typeof it == 'symbol' ? it : String(it);
  };
  var exp = function (O) {
    $export($export.S, 'Reflect', O);
  };

  module.exports = {
    store: store,
    map: getOrCreateMetadataMap,
    has: ordinaryHasOwnMetadata,
    get: ordinaryGetOwnMetadata,
    set: ordinaryDefineOwnMetadata,
    keys: ordinaryOwnMetadataKeys,
    key: toMetaKey,
    exp: exp
  };
  return module.exports;
});
$__System.registerDynamic('11b', ['10b', '18', 'a1', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var metadata = $__require('10b'),
      anObject = $__require('18'),
      aFunction = $__require('a1'),
      toMetaKey = metadata.key,
      ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
      return function decorator(target, targetKey) {
        ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
      };
    } });
  return module.exports;
});
$__System.registerDynamic('11c', ['d', 'c5', 'a', '46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
  var $export = $__require('d'),
      microtask = $__require('c5')(),
      process = $__require('a').process,
      isNode = $__require('46')(process) == 'process';

  $export($export.G, {
    asap: function asap(fn) {
      var domain = isNode && process.domain;
      microtask(domain ? domain.bind(fn) : fn);
    }
  });
  return module.exports;
});
$__System.registerDynamic('c5', ['a', 'c4', '46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      macrotask = $__require('c4').set,
      Observer = global.MutationObserver || global.WebKitMutationObserver,
      process = global.process,
      Promise = global.Promise,
      isNode = $__require('46')(process) == 'process';

  module.exports = function () {
    var head, last, notify;

    var flush = function () {
      var parent, fn;
      if (isNode && (parent = process.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (e) {
          if (head) notify();else last = undefined;
          throw e;
        }
      }last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (isNode) {
      notify = function () {
        process.nextTick(flush);
      };
      // browsers with MutationObserver
    } else if (Observer) {
      var toggle = true,
          node = document.createTextNode('');
      new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
      notify = function () {
        node.data = toggle = !toggle;
      };
      // environments with maybe non-completely correct, but existent Promise
    } else if (Promise && Promise.resolve) {
      var promise = Promise.resolve();
      notify = function () {
        promise.then(flush);
      };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
      };
    }

    return function (fn) {
      var task = { fn: fn, next: undefined };
      if (last) last.next = task;
      if (!head) {
        head = task;
        notify();
      }last = task;
    };
  };
  return module.exports;
});
$__System.registerDynamic('c1', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }return it;
  };
  return module.exports;
});
$__System.registerDynamic('c6', ['e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var redefine = $__require('e');
  module.exports = function (target, src, safe) {
    for (var key in src) redefine(target, key, src[key], safe);
    return target;
  };
  return module.exports;
});
$__System.registerDynamic('95', ['18', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // call something on iterator step with safe closing on error
  var anObject = $__require('18');
  module.exports = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) anObject(ret.call(iterator));
      throw e;
    }
  };
  return module.exports;
});
$__System.registerDynamic('96', ['d8', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // check on default Array iterator
  var Iterators = $__require('d8'),
      ITERATOR = $__require('14')('iterator'),
      ArrayProto = Array.prototype;

  module.exports = function (it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
  return module.exports;
});
$__System.registerDynamic('3c', ['46', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = $__require('46'),
      TAG = $__require('14')('toStringTag')
  // ES3 wrong here
  ,
      ARG = cof(function () {
    return arguments;
  }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) {/* empty */}
  };

  module.exports = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
  return module.exports;
});
$__System.registerDynamic('98', ['3c', '14', 'd8', '33', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var classof = $__require('3c'),
      ITERATOR = $__require('14')('iterator'),
      Iterators = $__require('d8');
  module.exports = $__require('33').getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
  return module.exports;
});
$__System.registerDynamic('c2', ['94', '95', '96', '18', '70', '98', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var ctx = $__require('94'),
      call = $__require('95'),
      isArrayIter = $__require('96'),
      anObject = $__require('18'),
      toLength = $__require('70'),
      getIterFn = $__require('98'),
      BREAK = {},
      RETURN = {};
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () {
      return iterable;
    } : getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator,
        result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = call(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
  return module.exports;
});
$__System.registerDynamic('b6', ['a', '1e', 'c', '14', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      dP = $__require('1e'),
      DESCRIPTORS = $__require('c'),
      SPECIES = $__require('14')('species');

  module.exports = function (KEY) {
    var C = global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
      configurable: true,
      get: function () {
        return this;
      }
    });
  };
  return module.exports;
});
$__System.registerDynamic('11d', ['d', 'a', '33', 'c5', '14', 'a1', '18', 'c1', 'c6', '21', 'c2', 'b6', '5'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/zenparsing/es-observable

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      global = $__require('a'),
      core = $__require('33'),
      microtask = $__require('c5')(),
      OBSERVABLE = $__require('14')('observable'),
      aFunction = $__require('a1'),
      anObject = $__require('18'),
      anInstance = $__require('c1'),
      redefineAll = $__require('c6'),
      hide = $__require('21'),
      forOf = $__require('c2'),
      RETURN = forOf.RETURN;

  var getMethod = function (fn) {
    return fn == null ? undefined : aFunction(fn);
  };

  var cleanupSubscription = function (subscription) {
    var cleanup = subscription._c;
    if (cleanup) {
      subscription._c = undefined;
      cleanup();
    }
  };

  var subscriptionClosed = function (subscription) {
    return subscription._o === undefined;
  };

  var closeSubscription = function (subscription) {
    if (!subscriptionClosed(subscription)) {
      subscription._o = undefined;
      cleanupSubscription(subscription);
    }
  };

  var Subscription = function (observer, subscriber) {
    anObject(observer);
    this._c = undefined;
    this._o = observer;
    observer = new SubscriptionObserver(this);
    try {
      var cleanup = subscriber(observer),
          subscription = cleanup;
      if (cleanup != null) {
        if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
          subscription.unsubscribe();
        };else aFunction(cleanup);
        this._c = cleanup;
      }
    } catch (e) {
      observer.error(e);
      return;
    }if (subscriptionClosed(this)) cleanupSubscription(this);
  };

  Subscription.prototype = redefineAll({}, {
    unsubscribe: function unsubscribe() {
      closeSubscription(this);
    }
  });

  var SubscriptionObserver = function (subscription) {
    this._s = subscription;
  };

  SubscriptionObserver.prototype = redefineAll({}, {
    next: function next(value) {
      var subscription = this._s;
      if (!subscriptionClosed(subscription)) {
        var observer = subscription._o;
        try {
          var m = getMethod(observer.next);
          if (m) return m.call(observer, value);
        } catch (e) {
          try {
            closeSubscription(subscription);
          } finally {
            throw e;
          }
        }
      }
    },
    error: function error(value) {
      var subscription = this._s;
      if (subscriptionClosed(subscription)) throw value;
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.error);
        if (!m) throw value;
        value = m.call(observer, value);
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }cleanupSubscription(subscription);
      return value;
    },
    complete: function complete(value) {
      var subscription = this._s;
      if (!subscriptionClosed(subscription)) {
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.complete);
          value = m ? m.call(observer, value) : undefined;
        } catch (e) {
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        }cleanupSubscription(subscription);
        return value;
      }
    }
  });

  var $Observable = function Observable(subscriber) {
    anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
  };

  redefineAll($Observable.prototype, {
    subscribe: function subscribe(observer) {
      return new Subscription(observer, this._f);
    },
    forEach: function forEach(fn) {
      var that = this;
      return new (core.Promise || global.Promise)(function (resolve, reject) {
        aFunction(fn);
        var subscription = that.subscribe({
          next: function (value) {
            try {
              return fn(value);
            } catch (e) {
              reject(e);
              subscription.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
      });
    }
  });

  redefineAll($Observable, {
    from: function from(x) {
      var C = typeof this === 'function' ? this : $Observable;
      var method = getMethod(anObject(x)[OBSERVABLE]);
      if (method) {
        var observable = anObject(method.call(x));
        return observable.constructor === C ? observable : new C(function (observer) {
          return observable.subscribe(observer);
        });
      }
      return new C(function (observer) {
        var done = false;
        microtask(function () {
          if (!done) {
            try {
              if (forOf(x, false, function (it) {
                observer.next(it);
                if (done) return RETURN;
              }) === RETURN) return;
            } catch (e) {
              if (done) throw e;
              observer.error(e);
              return;
            }observer.complete();
          }
        });
        return function () {
          done = true;
        };
      });
    },
    of: function of() {
      for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
      return new (typeof this === 'function' ? this : $Observable)(function (observer) {
        var done = false;
        microtask(function () {
          if (!done) {
            for (var i = 0; i < items.length; ++i) {
              observer.next(items[i]);
              if (done) return;
            }observer.complete();
          }
        });
        return function () {
          done = true;
        };
      });
    }
  });

  hide($Observable.prototype, OBSERVABLE, function () {
    return this;
  });

  $export($export.G, { Observable: $Observable });

  $__require('b6')('Observable');
  return module.exports;
});
$__System.registerDynamic('11e', ['a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('a');
  return module.exports;
});
$__System.registerDynamic('11f', ['11e', 'db', 'a1', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var path = $__require('11e'),
      invoke = $__require('db'),
      aFunction = $__require('a1');
  module.exports = function () /* ...pargs */{
    var fn = aFunction(this),
        length = arguments.length,
        pargs = Array(length),
        i = 0,
        _ = path._,
        holder = false;
    while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;
    return function () /* ...args */{
      var that = this,
          aLen = arguments.length,
          j = 0,
          k = 0,
          args;
      if (!holder && !aLen) return invoke(fn, pargs, that);
      args = pargs.slice();
      if (holder) for (; length > j; j++) if (args[j] === _) args[j] = arguments[k++];
      while (aLen > k) args.push(arguments[k++]);
      return invoke(fn, args, that);
    };
  };
  return module.exports;
});
$__System.registerDynamic('120', ['a', 'd', 'db', '11f', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // ie9- setTimeout & setInterval additional parameters fix
  var global = $__require('a'),
      $export = $__require('d'),
      invoke = $__require('db'),
      partial = $__require('11f'),
      navigator = global.navigator,
      MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
  var wrap = function (set) {
    return MSIE ? function (fn, time /*, ...args */) {
      return set(invoke(partial, [].slice.call(arguments, 2), typeof fn == 'function' ? fn : Function(fn)), time);
    } : set;
  };
  $export($export.G + $export.B + $export.F * MSIE, {
    setTimeout: wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
  });
  return module.exports;
});
$__System.registerDynamic("db", ["5"], true, function ($__require, exports, module) {
                  var process = $__require("5");
                  var define,
                      global = this || self,
                      GLOBAL = global;
                  // fast apply, http://jsperf.lnkit.com/fast-apply/5
                  module.exports = function (fn, args, that) {
                                    var un = that === undefined;
                                    switch (args.length) {
                                                      case 0:
                                                                        return un ? fn() : fn.call(that);
                                                      case 1:
                                                                        return un ? fn(args[0]) : fn.call(that, args[0]);
                                                      case 2:
                                                                        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                                      case 3:
                                                                        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                                      case 4:
                                                                        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                                    }return fn.apply(that, args);
                  };
                  return module.exports;
});
$__System.registerDynamic('c4', ['94', 'db', '9f', '121', 'a', '46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var ctx = $__require('94'),
      invoke = $__require('db'),
      html = $__require('9f'),
      cel = $__require('121'),
      global = $__require('a'),
      process = global.process,
      setTask = global.setImmediate,
      clearTask = global.clearImmediate,
      MessageChannel = global.MessageChannel,
      counter = 0,
      queue = {},
      ONREADYSTATECHANGE = 'onreadystatechange',
      defer,
      channel,
      port;
  var run = function () {
    var id = +this;
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listener = function (event) {
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [],
          i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if ($__require('46')(process) == 'process') {
      defer = function (id) {
        process.nextTick(ctx(run, id, 1));
      };
      // Browsers with MessageChannel, includes WebWorkers
    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
      defer = function (id) {
        global.postMessage(id + '', '*');
      };
      global.addEventListener('message', listener, false);
      // IE8-
    } else if (ONREADYSTATECHANGE in cel('script')) {
      defer = function (id) {
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run.call(id);
        };
      };
      // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  module.exports = {
    set: setTask,
    clear: clearTask
  };
  return module.exports;
});
$__System.registerDynamic('122', ['d', 'c4', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $export = $__require('d'),
      $task = $__require('c4');
  $export($export.G + $export.B, {
    setImmediate: $task.set,
    clearImmediate: $task.clear
  });
  return module.exports;
});
$__System.registerDynamic('b0', ['14', '21', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = $__require('14')('unscopables'),
      ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) $__require('21')(ArrayProto, UNSCOPABLES, {});
  module.exports = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };
  return module.exports;
});
$__System.registerDynamic("115", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (done, value) {
    return { value: value, done: !!done };
  };
  return module.exports;
});
$__System.registerDynamic("20", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = false;
  return module.exports;
});
$__System.registerDynamic("46", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  var toString = {}.toString;

  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
  return module.exports;
});
$__System.registerDynamic('9c', ['46', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = $__require('46');
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
  return module.exports;
});
$__System.registerDynamic('4', ['9c', '7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = $__require('9c'),
      defined = $__require('7c');
  module.exports = function (it) {
    return IObject(defined(it));
  };
  return module.exports;
});
$__System.registerDynamic('70', ['4a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.1.15 ToLength
  var toInteger = $__require('4a'),
      min = Math.min;
  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };
  return module.exports;
});
$__System.registerDynamic("4a", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.1.4 ToInteger
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
  return module.exports;
});
$__System.registerDynamic('6e', ['4a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toInteger = $__require('4a'),
      max = Math.max,
      min = Math.min;
  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
  return module.exports;
});
$__System.registerDynamic('ac', ['4', '70', '6e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = $__require('4'),
      toLength = $__require('70'),
      toIndex = $__require('6e');
  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this),
          length = toLength(O.length),
          index = toIndex(fromIndex, length),
          value;
      // Array#includes uses SameValueZero equality algorithm
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
        // Array#toIndex ignores holes, Array#includes - not
      } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }return !IS_INCLUDES && -1;
    };
  };
  return module.exports;
});
$__System.registerDynamic('f5', ['b', '4', 'ac', '123', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var has = $__require('b'),
      toIObject = $__require('4'),
      arrayIndexOf = $__require('ac')(false),
      IE_PROTO = $__require('123')('IE_PROTO');

  module.exports = function (object, names) {
    var O = toIObject(object),
        i = 0,
        result = [],
        key;
    for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };
  return module.exports;
});
$__System.registerDynamic('3', ['f5', 'f6', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys = $__require('f5'),
      enumBugKeys = $__require('f6');

  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
  return module.exports;
});
$__System.registerDynamic('25', ['1e', '18', '3', 'c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var dP = $__require('1e'),
      anObject = $__require('18'),
      getKeys = $__require('3');

  module.exports = $__require('c') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties),
        length = keys.length,
        i = 0,
        P;
    while (length > i) dP.f(O, P = keys[i++], Properties[P]);
    return O;
  };
  return module.exports;
});
$__System.registerDynamic('f6', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // IE 8- don't enum bug keys
  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
  return module.exports;
});
$__System.registerDynamic('9f', ['a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('a').document && document.documentElement;
  return module.exports;
});
$__System.registerDynamic('1b', ['18', '25', 'f6', '123', '121', '9f', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject = $__require('18'),
      dPs = $__require('25'),
      enumBugKeys = $__require('f6'),
      IE_PROTO = $__require('123')('IE_PROTO'),
      Empty = function () {/* empty */},
      PROTOTYPE = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = $__require('121')('iframe'),
        i = enumBugKeys.length,
        lt = '<',
        gt = '>',
        iframeDocument;
    iframe.style.display = 'none';
    $__require('9f').appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
  };

  module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };
  return module.exports;
});
$__System.registerDynamic('e0', ['1b', '1a', '12', '21', '14', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var create = $__require('1b'),
      descriptor = $__require('1a'),
      setToStringTag = $__require('12'),
      IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  $__require('21')(IteratorPrototype, $__require('14')('iterator'), function () {
    return this;
  });

  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
  return module.exports;
});
$__System.registerDynamic('12', ['1e', 'b', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var def = $__require('1e').f,
      has = $__require('b'),
      TAG = $__require('14')('toStringTag');

  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };
  return module.exports;
});
$__System.registerDynamic("7c", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
  return module.exports;
});
$__System.registerDynamic('29', ['7c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.1.13 ToObject(argument)
  var defined = $__require('7c');
  module.exports = function (it) {
    return Object(defined(it));
  };
  return module.exports;
});
$__System.registerDynamic('123', ['11', '13', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var shared = $__require('11')('keys'),
      uid = $__require('13');
  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
  return module.exports;
});
$__System.registerDynamic('2a', ['b', '29', '123', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has = $__require('b'),
      toObject = $__require('29'),
      IE_PROTO = $__require('123')('IE_PROTO'),
      ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }return O instanceof Object ? ObjectProto : null;
  };
  return module.exports;
});
$__System.registerDynamic('74', ['20', 'd', 'e', '21', 'b', 'd8', 'e0', '12', '2a', '14', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var LIBRARY = $__require('20'),
      $export = $__require('d'),
      redefine = $__require('e'),
      hide = $__require('21'),
      has = $__require('b'),
      Iterators = $__require('d8'),
      $iterCreate = $__require('e0'),
      setToStringTag = $__require('12'),
      getPrototypeOf = $__require('2a'),
      ITERATOR = $__require('14')('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  ,
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';

  var returnThis = function () {
    return this;
  };

  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
        $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
        methods,
        key,
        IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype) {
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() {
        return $native.call(this);
      };
    }
    // Define iterator
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
  return module.exports;
});
$__System.registerDynamic('d7', ['b0', '115', 'd8', '4', '74', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var addToUnscopables = $__require('b0'),
      step = $__require('115'),
      Iterators = $__require('d8'),
      toIObject = $__require('4');

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = $__require('74')(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated); // target
    this._i = 0; // next index
    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
  return module.exports;
});
$__System.registerDynamic("d8", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = {};
  return module.exports;
});
$__System.registerDynamic('11', ['a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function (key) {
    return store[key] || (store[key] = {});
  };
  return module.exports;
});
$__System.registerDynamic('14', ['11', '13', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var store = $__require('11')('wks'),
      uid = $__require('13'),
      Symbol = $__require('a').Symbol,
      USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;
  return module.exports;
});
$__System.registerDynamic('124', ['d7', 'e', 'a', '21', 'd8', '14', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var $iterators = $__require('d7'),
      redefine = $__require('e'),
      global = $__require('a'),
      hide = $__require('21'),
      Iterators = $__require('d8'),
      wks = $__require('14'),
      ITERATOR = wks('iterator'),
      TO_STRING_TAG = wks('toStringTag'),
      ArrayValues = Iterators.Array;

  for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
    var NAME = collections[i],
        Collection = global[NAME],
        proto = Collection && Collection.prototype,
        key;
    if (proto) {
      if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
      if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
      Iterators[NAME] = ArrayValues;
      for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
  return module.exports;
});
$__System.registerDynamic('125', ['9', '22', '23', '24', '26', '28', '2b', '2c', '2d', '2f', '30', '31', '32', '34', '35', '37', '39', '3b', '3d', '3f', '40', '41', '43', '45', '49', '4d', '4e', '4f', '50', '52', '53', '54', '55', '57', '58', '59', '5b', '5c', '5d', '5f', '60', '61', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6f', '71', '72', '75', '76', '79', '7a', '7d', '7e', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '91', '92', '93', '9a', '9b', '9e', 'a0', 'a2', 'a4', 'a5', 'a6', 'a7', 'a8', 'aa', 'ab', 'ad', 'ae', 'b1', 'b3', 'b4', 'b5', 'd7', 'b7', 'b9', 'ba', 'bb', 'bd', 'be', 'bf', 'c0', '116', '10e', '11a', 'c7', 'ca', 'cd', 'ce', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd9', 'da', 'dc', 'dd', 'de', 'df', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f7', 'f8', 'fa', 'fb', 'fd', 'fe', 'ff', '100', '103', '104', '105', '106', '107', '108', '109', '10a', '10c', '10d', '110', '111', '112', '113', '114', '11b', '11c', '11d', '120', '122', '124', '33', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('9');
  $__require('22');
  $__require('23');
  $__require('24');
  $__require('26');
  $__require('28');
  $__require('2b');
  $__require('2c');
  $__require('2d');
  $__require('2f');
  $__require('30');
  $__require('31');
  $__require('32');
  $__require('34');
  $__require('35');
  $__require('37');
  $__require('39');
  $__require('3b');
  $__require('3d');
  $__require('3f');
  $__require('40');
  $__require('41');
  $__require('43');
  $__require('45');
  $__require('49');
  $__require('4d');
  $__require('4e');
  $__require('4f');
  $__require('50');
  $__require('52');
  $__require('53');
  $__require('54');
  $__require('55');
  $__require('57');
  $__require('58');
  $__require('59');
  $__require('5b');
  $__require('5c');
  $__require('5d');
  $__require('5f');
  $__require('60');
  $__require('61');
  $__require('63');
  $__require('64');
  $__require('65');
  $__require('66');
  $__require('67');
  $__require('68');
  $__require('69');
  $__require('6a');
  $__require('6b');
  $__require('6c');
  $__require('6d');
  $__require('6f');
  $__require('71');
  $__require('72');
  $__require('75');
  $__require('76');
  $__require('79');
  $__require('7a');
  $__require('7d');
  $__require('7e');
  $__require('80');
  $__require('81');
  $__require('82');
  $__require('83');
  $__require('84');
  $__require('85');
  $__require('86');
  $__require('87');
  $__require('88');
  $__require('89');
  $__require('8a');
  $__require('8b');
  $__require('8c');
  $__require('8d');
  $__require('8e');
  $__require('8f');
  $__require('91');
  $__require('92');
  $__require('93');
  $__require('9a');
  $__require('9b');
  $__require('9e');
  $__require('a0');
  $__require('a2');
  $__require('a4');
  $__require('a5');
  $__require('a6');
  $__require('a7');
  $__require('a8');
  $__require('aa');
  $__require('ab');
  $__require('ad');
  $__require('ae');
  $__require('b1');
  $__require('b3');
  $__require('b4');
  $__require('b5');
  $__require('d7');
  $__require('b7');
  $__require('b9');
  $__require('ba');
  $__require('bb');
  $__require('bd');
  $__require('be');
  $__require('bf');
  $__require('c0');
  $__require('116');
  $__require('10e');
  $__require('11a');
  $__require('c7');
  $__require('ca');
  $__require('cd');
  $__require('ce');
  $__require('d0');
  $__require('d1');
  $__require('d2');
  $__require('d3');
  $__require('d4');
  $__require('d5');
  $__require('d6');
  $__require('d9');
  $__require('da');
  $__require('dc');
  $__require('dd');
  $__require('de');
  $__require('df');
  $__require('e1');
  $__require('e2');
  $__require('e3');
  $__require('e4');
  $__require('e5');
  $__require('e6');
  $__require('e8');
  $__require('e9');
  $__require('ea');
  $__require('eb');
  $__require('ec');
  $__require('ed');
  $__require('ef');
  $__require('f0');
  $__require('f1');
  $__require('f2');
  $__require('f3');
  $__require('f4');
  $__require('f7');
  $__require('f8');
  $__require('fa');
  $__require('fb');
  $__require('fd');
  $__require('fe');
  $__require('ff');
  $__require('100');
  $__require('103');
  $__require('104');
  $__require('105');
  $__require('106');
  $__require('107');
  $__require('108');
  $__require('109');
  $__require('10a');
  $__require('10c');
  $__require('10d');
  $__require('110');
  $__require('111');
  $__require('112');
  $__require('113');
  $__require('114');
  $__require('11b');
  $__require('11c');
  $__require('11d');
  $__require('120');
  $__require('122');
  $__require('124');
  module.exports = $__require('33');
  return module.exports;
});
$__System.registerDynamic("126", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  /**
   * Copyright (c) 2014, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
   * additional grant of patent rights can be found in the PATENTS file in
   * the same directory.
   */

  !function (global) {
    "use strict";

    var hasOwn = Object.prototype.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided, then outerFn.prototype instanceof Generator.
      var generator = Object.create((outerFn || Generator).prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `value instanceof AwaitArgument` to determine if the yielded value is
    // meant to be awaited. Some may consider the name of this method too
    // cutesy, but they are curmudgeons.
    runtime.awrap = function (arg) {
      return new AwaitArgument(arg);
    };

    function AwaitArgument(arg) {
      this.arg = arg;
    }

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value instanceof AwaitArgument) {
            return Promise.resolve(value.arg).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      if (typeof process === "object" && process.domain) {
        invoke = process.domain.bind(invoke);
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
              // A return or throw (when the delegate iterator has no throw
              // method) always terminates the yield* loop.
              context.delegate = null;

              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              var returnMethod = delegate.iterator["return"];
              if (returnMethod) {
                var record = tryCatch(returnMethod, delegate.iterator, arg);
                if (record.type === "throw") {
                  // If the return method threw an exception, let that
                  // exception prevail over the original return or throw.
                  method = "throw";
                  arg = record.arg;
                  continue;
                }
              }

              if (method === "return") {
                // Continue with the outer return, now that the delegate
                // iterator has been terminated.
                continue;
              }
            }

            var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

            if (record.type === "throw") {
              context.delegate = null;

              // Like returning generator.throw(uncaught), but without the
              // overhead of an extra function call.
              method = "throw";
              arg = record.arg;
              continue;
            }

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

            var info = record.arg;
            if (info.done) {
              context[delegate.resultName] = info.value;
              context.next = delegate.nextLoc;
            } else {
              state = GenStateSuspendedYield;
              return info;
            }

            context.delegate = null;
          }

          if (method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = arg;
          } else if (method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw arg;
            }

            if (context.dispatchException(arg)) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              method = "next";
              arg = undefined;
            }
          } else if (method === "return") {
            context.abrupt("return", arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            var info = {
              value: record.arg,
              done: context.done
            };

            if (record.arg === ContinueSentinel) {
              if (context.delegate && method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                arg = undefined;
              }
            } else {
              return info;
            }
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(arg) call above.
            method = "throw";
            arg = record.arg;
          }
        }
      };
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp[toStringTagSymbol] = "Generator";

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function () {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.next = finallyEntry.finallyLoc;
        } else {
          this.complete(record);
        }

        return ContinueSentinel;
      },

      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = record.arg;
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
      },

      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        return ContinueSentinel;
      }
    };
  }(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
  return module.exports;
});
$__System.registerDynamic('18', ['2e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var isObject = $__require('2e');
  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
  return module.exports;
});
$__System.registerDynamic('a', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

  return module.exports;
});
$__System.registerDynamic('121', ['2e', 'a', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var isObject = $__require('2e'),
      document = $__require('a').document
  // in old IE typeof document.createElement is 'object'
  ,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
  return module.exports;
});
$__System.registerDynamic('119', ['c', '10', '121', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = !$__require('c') && !$__require('10')(function () {
    return Object.defineProperty($__require('121')('div'), 'a', { get: function () {
        return 7;
      } }).a != 7;
  });
  return module.exports;
});
$__System.registerDynamic('2e', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
  return module.exports;
});
$__System.registerDynamic('19', ['2e', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = $__require('2e');
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
  return module.exports;
});
$__System.registerDynamic('1e', ['18', '119', '19', 'c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var anObject = $__require('18'),
      IE8_DOM_DEFINE = $__require('119'),
      toPrimitive = $__require('19'),
      dP = Object.defineProperty;

  exports.f = $__require('c') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {/* empty */}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  return module.exports;
});
$__System.registerDynamic("1a", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
  return module.exports;
});
$__System.registerDynamic("10", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
  return module.exports;
});
$__System.registerDynamic('c', ['10', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // Thank's IE8 for his funny defineProperty
  module.exports = !$__require('10')(function () {
    return Object.defineProperty({}, 'a', { get: function () {
        return 7;
      } }).a != 7;
  });
  return module.exports;
});
$__System.registerDynamic('21', ['1e', '1a', 'c', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var dP = $__require('1e'),
      createDesc = $__require('1a');
  module.exports = $__require('c') ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
  return module.exports;
});
$__System.registerDynamic("b", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
  return module.exports;
});
$__System.registerDynamic('13', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var id = 0,
      px = Math.random();
  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
  return module.exports;
});
$__System.registerDynamic('e', ['a', '21', 'b', '13', '33', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      hide = $__require('21'),
      has = $__require('b'),
      SRC = $__require('13')('src'),
      TO_STRING = 'toString',
      $toString = Function[TO_STRING],
      TPL = ('' + $toString).split(TO_STRING);

  $__require('33').inspectSource = function (it) {
    return $toString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) has(val, 'name') || hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === global) {
      O[key] = val;
    } else {
      if (!safe) {
        delete O[key];
        hide(O, key, val);
      } else {
        if (O[key]) O[key] = val;else hide(O, key, val);
      }
    }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
  return module.exports;
});
$__System.registerDynamic('a1', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
  return module.exports;
});
$__System.registerDynamic('94', ['a1', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // optional / simple context binding
  var aFunction = $__require('a1');
  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function () /* ...args */{
      return fn.apply(that, arguments);
    };
  };
  return module.exports;
});
$__System.registerDynamic('d', ['a', '33', '21', 'e', '94', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var global = $__require('a'),
      core = $__require('33'),
      hide = $__require('21'),
      redefine = $__require('e'),
      ctx = $__require('94'),
      PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
        key,
        own,
        out,
        exp;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      // extend global
      if (target) redefine(target, key, out, type & $export.U);
      // export
      if (exports[key] != out) hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  global.core = core;
  // type bitmap
  $export.F = 1; // forced
  $export.G = 2; // global
  $export.S = 4; // static
  $export.P = 8; // proto
  $export.B = 16; // bind
  $export.W = 32; // wrap
  $export.U = 64; // safe
  $export.R = 128; // real proto method for `library` 
  module.exports = $export;
  return module.exports;
});
$__System.registerDynamic("127", ["5"], true, function ($__require, exports, module) {
  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (regExp, replace) {
    var replacer = replace === Object(replace) ? function (part) {
      return replace[part];
    } : replace;
    return function (it) {
      return String(it).replace(regExp, replacer);
    };
  };
  return module.exports;
});
$__System.registerDynamic('128', ['d', '127', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  // https://github.com/benjamingr/RexExp.escape
  var $export = $__require('d'),
      $re = $__require('127')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

  $export($export.S, 'RegExp', { escape: function escape(it) {
      return $re(it);
    } });
  return module.exports;
});
$__System.registerDynamic('33', ['5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var core = module.exports = { version: '2.4.0' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

  return module.exports;
});
$__System.registerDynamic('129', ['128', '33', '5'], true, function ($__require, exports, module) {
  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  $__require('128');
  module.exports = $__require('33').RegExp.escape;
  return module.exports;
});
$__System.registerDynamic("12a", ["125", "126", "129", "5"], true, function ($__require, exports, module) {
  "use strict";

  var process = $__require("5");
  var define,
      global = this || self,
      GLOBAL = global;
  $__require("125");

  $__require("126");

  $__require("129");

  /* eslint max-len: 0 */

  if (global._babelPolyfill) {
    throw new Error("only one instance of babel-polyfill is allowed");
  }
  global._babelPolyfill = true;

  // Should be removed in the next major release:

  var DEFINE_PROPERTY = "defineProperty";
  function define(O, key, value) {
    O[key] || Object[DEFINE_PROPERTY](O, key, {
      writable: true,
      configurable: true,
      value: value
    });
  }

  define(String.prototype, "padLeft", "".padStart);
  define(String.prototype, "padRight", "".padEnd);

  "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
    [][key] && define(Array, key, Function.call.bind([][key]));
  });
  return module.exports;
});
$__System.registerDynamic("12b", [], false, function ($__require, $__exports, $__module) {
  var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, "firebase", null);

  (function ($__global) {
    var firebase = $__global["firebase"];
    /*! @license Firebase v3.4.0
        Build: 3.4.0-rc.3
        Terms: https://developers.google.com/terms */
    var firebase = null;(function () {
      var aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
        if (c.get || c.set) throw new TypeError("ES3 does not support getters and setters.");a != Array.prototype && a != Object.prototype && (a[b] = c.value);
      },
          h = "undefined" != typeof window && window === this ? this : "undefined" != typeof global ? global : this,
          k = function () {
        k = function () {};h.Symbol || (h.Symbol = ba);
      },
          ca = 0,
          ba = function (a) {
        return "jscomp_symbol_" + (a || "") + ca++;
      },
          n = function () {
        k();var a = h.Symbol.iterator;a || (a = h.Symbol.iterator = h.Symbol("iterator"));
        "function" != typeof Array.prototype[a] && aa(Array.prototype, a, { configurable: !0, writable: !0, value: function () {
            return m(this);
          } });n = function () {};
      },
          m = function (a) {
        var b = 0;return da(function () {
          return b < a.length ? { done: !1, value: a[b++] } : { done: !0 };
        });
      },
          da = function (a) {
        n();a = { next: a };a[h.Symbol.iterator] = function () {
          return this;
        };return a;
      },
          q = this,
          r = function () {},
          t = function (a) {
        var b = typeof a;if ("object" == b) {
          if (a) {
            if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);
            if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
          } else return "null";
        } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
      },
          v = function (a) {
        return "function" == t(a);
      },
          ea = function (a, b, c) {
        return a.call.apply(a.bind, arguments);
      },
          fa = function (a, b, c) {
        if (!a) throw Error();if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);return function () {
            var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
          };
        }return function () {
          return a.apply(b, arguments);
        };
      },
          w = function (a, b, c) {
        w = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ea : fa;return w.apply(null, arguments);
      },
          x = function (a, b) {
        var c = Array.prototype.slice.call(arguments, 1);return function () {
          var b = c.slice();b.push.apply(b, arguments);return a.apply(this, b);
        };
      },
          y = function (a, b) {
        function c() {}c.prototype = b.prototype;a.ga = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.fa = function (a, c, f) {
          for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];return b.prototype[c].apply(a, d);
        };
      };var z;z = "undefined" !== typeof window ? window : "undefined" !== typeof self ? self : global;function __extends(a, b) {
        function c() {
          this.constructor = a;
        }for (var d in b) b.hasOwnProperty(d) && (a[d] = b[d]);a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
      }
      function __decorate(a, b, c, d) {
        var e = arguments.length,
            f = 3 > e ? b : null === d ? d = Object.getOwnPropertyDescriptor(b, c) : d,
            g;g = z.Reflect;if ("object" === typeof g && "function" === typeof g.decorate) f = g.decorate(a, b, c, d);else for (var l = a.length - 1; 0 <= l; l--) if (g = a[l]) f = (3 > e ? g(f) : 3 < e ? g(b, c, f) : g(b, c)) || f;return 3 < e && f && Object.defineProperty(b, c, f), f;
      }function __metadata(a, b) {
        var c = z.Reflect;if ("object" === typeof c && "function" === typeof c.metadata) return c.metadata(a, b);
      }
      var __param = function (a, b) {
        return function (c, d) {
          b(c, d, a);
        };
      },
          __awaiter = function (a, b, c, d) {
        return new (c || (c = Promise))(function (e, f) {
          function g(a) {
            try {
              p(d.next(a));
            } catch (u) {
              f(u);
            }
          }function l(a) {
            try {
              p(d.throw(a));
            } catch (u) {
              f(u);
            }
          }function p(a) {
            a.done ? e(a.value) : new c(function (b) {
              b(a.value);
            }).then(g, l);
          }p((d = d.apply(a, b)).next());
        });
      };"undefined" !== typeof z.L && z.L || (z.ca = __extends, z.ba = __decorate, z.da = __metadata, z.ea = __param, z.aa = __awaiter);var A = function (a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, A);else {
          var b = Error().stack;b && (this.stack = b);
        }a && (this.message = String(a));
      };y(A, Error);A.prototype.name = "CustomError";var ga = function (a, b) {
        for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
      };var B = function (a, b) {
        b.unshift(a);A.call(this, ga.apply(null, b));b.shift();
      };y(B, A);B.prototype.name = "AssertionError";var ha = function (a, b, c, d) {
        var e = "Assertion failed";if (c) var e = e + (": " + c),
            f = d;else a && (e += ": " + a, f = b);throw new B("" + e, f || []);
      },
          C = function (a, b, c) {
        a || ha("", null, b, Array.prototype.slice.call(arguments, 2));
      },
          D = function (a, b, c) {
        v(a) || ha("Expected function but got %s: %s.", [t(a), a], b, Array.prototype.slice.call(arguments, 2));
      };var E = function (a, b, c) {
        this.S = c;this.M = a;this.U = b;this.s = 0;this.o = null;
      };E.prototype.get = function () {
        var a;0 < this.s ? (this.s--, a = this.o, this.o = a.next, a.next = null) : a = this.M();return a;
      };E.prototype.put = function (a) {
        this.U(a);this.s < this.S && (this.s++, a.next = this.o, this.o = a);
      };var F;a: {
        var ia = q.navigator;if (ia) {
          var ja = ia.userAgent;if (ja) {
            F = ja;break a;
          }
        }F = "";
      };var ka = function (a) {
        q.setTimeout(function () {
          throw a;
        }, 0);
      },
          G,
          la = function () {
        var a = q.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && -1 == F.indexOf("Presto") && (a = function () {
          var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
              a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
              d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
              a = w(function (a) {
            if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
          }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
              b.postMessage(c, d);
            } };
        });if ("undefined" !== typeof a && -1 == F.indexOf("Trident") && -1 == F.indexOf("MSIE")) {
          var b = new a(),
              c = {},
              d = c;b.port1.onmessage = function () {
            if (void 0 !== c.next) {
              c = c.next;var a = c.F;c.F = null;a();
            }
          };return function (a) {
            d.next = { F: a };d = d.next;b.port2.postMessage(0);
          };
        }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
          var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
            b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
          };document.documentElement.appendChild(b);
        } : function (a) {
          q.setTimeout(a, 0);
        };
      };var H = function () {
        this.v = this.f = null;
      },
          ma = new E(function () {
        return new I();
      }, function (a) {
        a.reset();
      }, 100);H.prototype.add = function (a, b) {
        var c = ma.get();c.set(a, b);this.v ? this.v.next = c : (C(!this.f), this.f = c);this.v = c;
      };H.prototype.remove = function () {
        var a = null;this.f && (a = this.f, this.f = this.f.next, this.f || (this.v = null), a.next = null);return a;
      };var I = function () {
        this.next = this.scope = this.B = null;
      };I.prototype.set = function (a, b) {
        this.B = a;this.scope = b;this.next = null;
      };
      I.prototype.reset = function () {
        this.next = this.scope = this.B = null;
      };var M = function (a, b) {
        J || na();L || (J(), L = !0);oa.add(a, b);
      },
          J,
          na = function () {
        if (q.Promise && q.Promise.resolve) {
          var a = q.Promise.resolve(void 0);J = function () {
            a.then(pa);
          };
        } else J = function () {
          var a = pa;!v(q.setImmediate) || q.Window && q.Window.prototype && -1 == F.indexOf("Edge") && q.Window.prototype.setImmediate == q.setImmediate ? (G || (G = la()), G(a)) : q.setImmediate(a);
        };
      },
          L = !1,
          oa = new H(),
          pa = function () {
        for (var a; a = oa.remove();) {
          try {
            a.B.call(a.scope);
          } catch (b) {
            ka(b);
          }ma.put(a);
        }L = !1;
      };var O = function (a, b) {
        this.b = 0;this.K = void 0;this.j = this.g = this.u = null;this.m = this.A = !1;if (a != r) try {
          var c = this;a.call(b, function (a) {
            N(c, 2, a);
          }, function (a) {
            try {
              if (a instanceof Error) throw a;throw Error("Promise rejected.");
            } catch (e) {}N(c, 3, a);
          });
        } catch (d) {
          N(this, 3, d);
        }
      },
          qa = function () {
        this.next = this.context = this.h = this.c = this.child = null;this.w = !1;
      };qa.prototype.reset = function () {
        this.context = this.h = this.c = this.child = null;this.w = !1;
      };
      var ra = new E(function () {
        return new qa();
      }, function (a) {
        a.reset();
      }, 100),
          sa = function (a, b, c) {
        var d = ra.get();d.c = a;d.h = b;d.context = c;return d;
      },
          ua = function (a, b, c) {
        ta(a, b, c, null) || M(x(b, a));
      };O.prototype.then = function (a, b, c) {
        null != a && D(a, "opt_onFulfilled should be a function.");null != b && D(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return va(this, v(a) ? a : null, v(b) ? b : null, c);
      };O.prototype.then = O.prototype.then;O.prototype.$goog_Thenable = !0;
      O.prototype.X = function (a, b) {
        return va(this, null, a, b);
      };var xa = function (a, b) {
        a.g || 2 != a.b && 3 != a.b || wa(a);C(null != b.c);a.j ? a.j.next = b : a.g = b;a.j = b;
      },
          va = function (a, b, c, d) {
        var e = sa(null, null, null);e.child = new O(function (a, g) {
          e.c = b ? function (c) {
            try {
              var e = b.call(d, c);a(e);
            } catch (K) {
              g(K);
            }
          } : a;e.h = c ? function (b) {
            try {
              var e = c.call(d, b);a(e);
            } catch (K) {
              g(K);
            }
          } : g;
        });e.child.u = a;xa(a, e);return e.child;
      };O.prototype.Y = function (a) {
        C(1 == this.b);this.b = 0;N(this, 2, a);
      };O.prototype.Z = function (a) {
        C(1 == this.b);this.b = 0;N(this, 3, a);
      };
      var N = function (a, b, c) {
        0 == a.b && (a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself")), a.b = 1, ta(c, a.Y, a.Z, a) || (a.K = c, a.b = b, a.u = null, wa(a), 3 != b || ya(a, c)));
      },
          ta = function (a, b, c, d) {
        if (a instanceof O) return null != b && D(b, "opt_onFulfilled should be a function."), null != c && D(c, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), xa(a, sa(b || r, c || null, d)), !0;var e;if (a) try {
          e = !!a.$goog_Thenable;
        } catch (g) {
          e = !1;
        } else e = !1;if (e) return a.then(b, c, d), !0;e = typeof a;if ("object" == e && null != a || "function" == e) try {
          var f = a.then;if (v(f)) return za(a, f, b, c, d), !0;
        } catch (g) {
          return c.call(d, g), !0;
        }return !1;
      },
          za = function (a, b, c, d, e) {
        var f = !1,
            g = function (a) {
          f || (f = !0, c.call(e, a));
        },
            l = function (a) {
          f || (f = !0, d.call(e, a));
        };try {
          b.call(a, g, l);
        } catch (p) {
          l(p);
        }
      },
          wa = function (a) {
        a.A || (a.A = !0, M(a.O, a));
      },
          Aa = function (a) {
        var b = null;a.g && (b = a.g, a.g = b.next, b.next = null);a.g || (a.j = null);null != b && C(null != b.c);return b;
      };
      O.prototype.O = function () {
        for (var a; a = Aa(this);) {
          var b = this.b,
              c = this.K;if (3 == b && a.h && !a.w) {
            var d;for (d = this; d && d.m; d = d.u) d.m = !1;
          }if (a.child) a.child.u = null, Ba(a, b, c);else try {
            a.w ? a.c.call(a.context) : Ba(a, b, c);
          } catch (e) {
            Ca.call(null, e);
          }ra.put(a);
        }this.A = !1;
      };var Ba = function (a, b, c) {
        2 == b ? a.c.call(a.context, c) : a.h && a.h.call(a.context, c);
      },
          ya = function (a, b) {
        a.m = !0;M(function () {
          a.m && Ca.call(null, b);
        });
      },
          Ca = ka;function P(a, b) {
        if (!(b instanceof Object)) return b;switch (b.constructor) {case Date:
            return new Date(b.getTime());case Object:
            void 0 === a && (a = {});break;case Array:
            a = [];break;default:
            return b;}for (var c in b) b.hasOwnProperty(c) && (a[c] = P(a[c], b[c]));return a;
      };var Da = Error.captureStackTrace,
          R = function (a, b) {
        this.code = a;this.message = b;if (Da) Da(this, Q.prototype.create);else {
          var c = Error.apply(this, arguments);this.name = "FirebaseError";Object.defineProperty(this, "stack", { get: function () {
              return c.stack;
            } });
        }
      };R.prototype = Object.create(Error.prototype);R.prototype.constructor = R;R.prototype.name = "FirebaseError";var Q = function (a, b, c) {
        this.V = a;this.W = b;this.N = c;this.pattern = /\{\$([^}]+)}/g;
      };
      Q.prototype.create = function (a, b) {
        void 0 === b && (b = {});var c = this.N[a];a = this.V + "/" + a;var c = void 0 === c ? "Error" : c.replace(this.pattern, function (a, c) {
          a = b[c];return void 0 !== a ? a.toString() : "<" + c + "?>";
        }),
            c = this.W + ": " + c + " (" + a + ").",
            c = new R(a, c),
            d;for (d in b) b.hasOwnProperty(d) && "_" !== d.slice(-1) && (c[d] = b[d]);return c;
      };O.all = function (a) {
        return new O(function (b, c) {
          var d = a.length,
              e = [];if (d) for (var f = function (a, c) {
            d--;e[a] = c;0 == d && b(e);
          }, g = function (a) {
            c(a);
          }, l = 0, p; l < a.length; l++) p = a[l], ua(p, x(f, l), g);else b(e);
        });
      };O.resolve = function (a) {
        if (a instanceof O) return a;var b = new O(r);N(b, 2, a);return b;
      };O.reject = function (a) {
        return new O(function (b, c) {
          c(a);
        });
      };O.prototype["catch"] = O.prototype.X;var S = O;"undefined" !== typeof Promise && (S = Promise);var Ea = S;function Fa(a, b) {
        a = new T(a, b);return a.subscribe.bind(a);
      }var T = function (a, b) {
        var c = this;this.a = [];this.J = 0;this.task = Ea.resolve();this.l = !1;this.D = b;this.task.then(function () {
          a(c);
        }).catch(function (a) {
          c.error(a);
        });
      };T.prototype.next = function (a) {
        U(this, function (b) {
          b.next(a);
        });
      };T.prototype.error = function (a) {
        U(this, function (b) {
          b.error(a);
        });this.close(a);
      };T.prototype.complete = function () {
        U(this, function (a) {
          a.complete();
        });this.close();
      };
      T.prototype.subscribe = function (a, b, c) {
        var d = this,
            e;if (void 0 === a && void 0 === b && void 0 === c) throw Error("Missing Observer.");e = Ga(a) ? a : { next: a, error: b, complete: c };void 0 === e.next && (e.next = V);void 0 === e.error && (e.error = V);void 0 === e.complete && (e.complete = V);a = this.$.bind(this, this.a.length);this.l && this.task.then(function () {
          try {
            d.G ? e.error(d.G) : e.complete();
          } catch (f) {}
        });this.a.push(e);return a;
      };
      T.prototype.$ = function (a) {
        void 0 !== this.a && void 0 !== this.a[a] && (delete this.a[a], --this.J, 0 === this.J && void 0 !== this.D && this.D(this));
      };var U = function (a, b) {
        if (!a.l) for (var c = 0; c < a.a.length; c++) Ha(a, c, b);
      },
          Ha = function (a, b, c) {
        a.task.then(function () {
          if (void 0 !== a.a && void 0 !== a.a[b]) try {
            c(a.a[b]);
          } catch (d) {}
        });
      };T.prototype.close = function (a) {
        var b = this;this.l || (this.l = !0, void 0 !== a && (this.G = a), this.task.then(function () {
          b.a = void 0;b.D = void 0;
        }));
      };
      function Ga(a) {
        if ("object" !== typeof a || null === a) return !1;var b;b = ["next", "error", "complete"];n();var c = b[Symbol.iterator];b = c ? c.call(b) : m(b);for (c = b.next(); !c.done; c = b.next()) if (c = c.value, c in a && "function" === typeof a[c]) return !0;return !1;
      }function V() {};var W = S,
          X = function (a, b, c) {
        var d = this;this.H = c;this.I = !1;this.i = {};this.C = b;this.T = P(void 0, a);Object.keys(c.INTERNAL.factories).forEach(function (a) {
          var b = c.INTERNAL.useAsService(d, a);null !== b && (d[a] = d.R.bind(d, b));
        });
      };X.prototype.delete = function () {
        var a = this;return new W(function (b) {
          Y(a);b();
        }).then(function () {
          a.H.INTERNAL.removeApp(a.C);return W.all(Object.keys(a.i).map(function (b) {
            return a.i[b].INTERNAL.delete();
          }));
        }).then(function () {
          a.I = !0;a.i = {};
        });
      };
      X.prototype.R = function (a) {
        Y(this);void 0 === this.i[a] && (this.i[a] = this.H.INTERNAL.factories[a](this, this.P.bind(this)));return this.i[a];
      };X.prototype.P = function (a) {
        P(this, a);
      };var Y = function (a) {
        a.I && Z(Ia("deleted", { name: a.C }));
      };h.Object.defineProperties(X.prototype, { name: { configurable: !0, enumerable: !0, get: function () {
            Y(this);return this.C;
          } }, options: { configurable: !0, enumerable: !0, get: function () {
            Y(this);return this.T;
          } } });X.prototype.name && X.prototype.options || X.prototype.delete || console.log("dc");
      function Ja() {
        function a(a) {
          a = a || "[DEFAULT]";var b = d[a];void 0 === b && Z("noApp", { name: a });return b;
        }function b(a, b) {
          Object.keys(e).forEach(function (d) {
            d = c(a, d);if (null !== d && f[d]) f[d](b, a);
          });
        }function c(a, b) {
          if ("serverAuth" === b) return null;var c = b;a = a.options;"auth" === b && (a.serviceAccount || a.credential) && (c = "serverAuth", "serverAuth" in e || Z("serverAuthMissing"));return c;
        }var d = {},
            e = {},
            f = {},
            g = { __esModule: !0, initializeApp: function (a, c) {
            void 0 === c ? c = "[DEFAULT]" : "string" === typeof c && "" !== c || Z("bad-app-name", { name: c + "" });void 0 !== d[c] && Z("dupApp", { name: c });a = new X(a, c, g);d[c] = a;b(a, "create");void 0 != a.INTERNAL && void 0 != a.INTERNAL.getToken || P(a, { INTERNAL: { getToken: function () {
                  return W.resolve(null);
                }, addAuthTokenListener: function () {}, removeAuthTokenListener: function () {} } });return a;
          }, app: a, apps: null, Promise: W, SDK_VERSION: "0.0.0", INTERNAL: { registerService: function (b, c, d, u) {
              e[b] && Z("dupService", { name: b });e[b] = c;u && (f[b] = u);c = function (c) {
                void 0 === c && (c = a());return c[b]();
              };void 0 !== d && P(c, d);return g[b] = c;
            }, createFirebaseNamespace: Ja,
            extendNamespace: function (a) {
              P(g, a);
            }, createSubscribe: Fa, ErrorFactory: Q, removeApp: function (a) {
              b(d[a], "delete");delete d[a];
            }, factories: e, useAsService: c, Promise: O, deepExtend: P } };g["default"] = g;Object.defineProperty(g, "apps", { get: function () {
            return Object.keys(d).map(function (a) {
              return d[a];
            });
          } });a.App = X;return g;
      }function Z(a, b) {
        throw Error(Ia(a, b));
      }
      function Ia(a, b) {
        b = b || {};b = { noApp: "No Firebase App '" + b.name + "' has been created - call Firebase App.initializeApp().", "bad-app-name": "Illegal App name: '" + b.name + "'.", dupApp: "Firebase App named '" + b.name + "' already exists.", deleted: "Firebase App named '" + b.name + "' already deleted.", dupService: "Firebase Service named '" + b.name + "' already registered.", serverAuthMissing: "Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain." }[a];
        return void 0 === b ? "Application Error: (" + a + ")" : b;
      };"undefined" !== typeof firebase && (firebase = Ja());
    })();
    firebase.SDK_VERSION = "3.4.0";
    (function () {
      var h,
          aa = aa || {},
          l = this,
          ba = function () {},
          ca = function () {
        throw Error("unimplemented abstract method");
      },
          m = function (a) {
        var b = typeof a;if ("object" == b) {
          if (a) {
            if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
          } else return "null";
        } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
      },
          da = function (a) {
        return null === a;
      },
          ea = function (a) {
        return "array" == m(a);
      },
          fa = function (a) {
        var b = m(a);return "array" == b || "object" == b && "number" == typeof a.length;
      },
          n = function (a) {
        return "string" == typeof a;
      },
          ga = function (a) {
        return "number" == typeof a;
      },
          p = function (a) {
        return "function" == m(a);
      },
          ha = function (a) {
        var b = typeof a;
        return "object" == b && null != a || "function" == b;
      },
          ia = function (a, b, c) {
        return a.call.apply(a.bind, arguments);
      },
          ja = function (a, b, c) {
        if (!a) throw Error();if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);return function () {
            var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
          };
        }return function () {
          return a.apply(b, arguments);
        };
      },
          r = function (a, b, c) {
        r = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia : ja;return r.apply(null, arguments);
      },
          ka = function (a, b) {
        var c = Array.prototype.slice.call(arguments, 1);return function () {
          var b = c.slice();b.push.apply(b, arguments);return a.apply(this, b);
        };
      },
          la = Date.now || function () {
        return +new Date();
      },
          t = function (a, b) {
        function c() {}c.prototype = b.prototype;a.Pc = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.Ne = function (a, c, f) {
          for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];return b.prototype[c].apply(a, d);
        };
      };var u = function (a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
          var b = Error().stack;b && (this.stack = b);
        }a && (this.message = String(a));
      };t(u, Error);u.prototype.name = "CustomError";var ma = function (a, b) {
        for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
      },
          na = String.prototype.trim ? function (a) {
        return a.trim();
      } : function (a) {
        return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
      },
          oa = /&/g,
          pa = /</g,
          qa = />/g,
          sa = /"/g,
          ta = /'/g,
          ua = /\x00/g,
          va = /[\x00&<>"']/,
          v = function (a, b) {
        return -1 != a.indexOf(b);
      },
          wa = function (a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      };var xa = function (a, b) {
        b.unshift(a);u.call(this, ma.apply(null, b));b.shift();
      };t(xa, u);xa.prototype.name = "AssertionError";
      var ya = function (a, b, c, d) {
        var e = "Assertion failed";if (c) var e = e + (": " + c),
            f = d;else a && (e += ": " + a, f = b);throw new xa("" + e, f || []);
      },
          w = function (a, b, c) {
        a || ya("", null, b, Array.prototype.slice.call(arguments, 2));
      },
          za = function (a, b) {
        throw new xa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
      },
          Aa = function (a, b, c) {
        ga(a) || ya("Expected number but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));return a;
      },
          Ba = function (a, b, c) {
        n(a) || ya("Expected string but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));
      },
          Ca = function (a, b, c) {
        p(a) || ya("Expected function but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));
      };var Da = Array.prototype.indexOf ? function (a, b, c) {
        w(null != a.length);return Array.prototype.indexOf.call(a, b, c);
      } : function (a, b, c) {
        c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (n(a)) return n(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) if (c in a && a[c] === b) return c;return -1;
      },
          x = Array.prototype.forEach ? function (a, b, c) {
        w(null != a.length);Array.prototype.forEach.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = n(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
      },
          Ea = function (a, b) {
        for (var c = n(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d) d in c && b.call(void 0, c[d], d, a);
      },
          Fa = Array.prototype.map ? function (a, b, c) {
        w(null != a.length);return Array.prototype.map.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = Array(d), f = n(a) ? a.split("") : a, g = 0; g < d; g++) g in f && (e[g] = b.call(c, f[g], g, a));return e;
      },
          Ga = Array.prototype.some ? function (a, b, c) {
        w(null != a.length);return Array.prototype.some.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = n(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return !0;return !1;
      },
          Ia = function (a) {
        var b;a: {
          b = Ha;for (var c = a.length, d = n(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;break a;
          }b = -1;
        }return 0 > b ? null : n(a) ? a.charAt(b) : a[b];
      },
          Ja = function (a, b) {
        return 0 <= Da(a, b);
      },
          La = function (a, b) {
        b = Da(a, b);var c;(c = 0 <= b) && Ka(a, b);return c;
      },
          Ka = function (a, b) {
        w(null != a.length);return 1 == Array.prototype.splice.call(a, b, 1).length;
      },
          Ma = function (a, b) {
        var c = 0;Ea(a, function (d, e) {
          b.call(void 0, d, e, a) && Ka(a, e) && c++;
        });
      },
          Na = function (a) {
        return Array.prototype.concat.apply(Array.prototype, arguments);
      },
          Oa = function (a) {
        return Array.prototype.concat.apply(Array.prototype, arguments);
      },
          Pa = function (a) {
        var b = a.length;if (0 < b) {
          for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];return c;
        }return [];
      },
          Qa = function (a, b) {
        for (var c = 1; c < arguments.length; c++) {
          var d = arguments[c];if (fa(d)) {
            var e = a.length || 0,
                f = d.length || 0;a.length = e + f;for (var g = 0; g < f; g++) a[e + g] = d[g];
          } else a.push(d);
        }
      };var Ra = function (a, b) {
        for (var c in a) b.call(void 0, a[c], c, a);
      },
          Sa = function (a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = a[d];return b;
      },
          Ta = function (a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = d;return b;
      },
          Ua = function (a) {
        for (var b in a) return !1;return !0;
      },
          Va = function (a, b) {
        for (var c in a) if (!(c in b) || a[c] !== b[c]) return !1;for (c in b) if (!(c in a)) return !1;return !0;
      },
          Wa = function (a) {
        var b = {},
            c;for (c in a) b[c] = a[c];return b;
      },
          Xa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
          Ya = function (a, b) {
        for (var c, d, e = 1; e < arguments.length; e++) {
          d = arguments[e];for (c in d) a[c] = d[c];for (var f = 0; f < Xa.length; f++) c = Xa[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      };var Za;a: {
        var $a = l.navigator;if ($a) {
          var ab = $a.userAgent;if (ab) {
            Za = ab;break a;
          }
        }Za = "";
      }var y = function (a) {
        return v(Za, a);
      };var bb = function (a) {
        bb[" "](a);return a;
      };bb[" "] = ba;var db = function (a, b) {
        var c = cb;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
      };var eb = y("Opera"),
          z = y("Trident") || y("MSIE"),
          fb = y("Edge"),
          gb = fb || z,
          hb = y("Gecko") && !(v(Za.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"),
          ib = v(Za.toLowerCase(), "webkit") && !y("Edge"),
          jb = function () {
        var a = l.document;return a ? a.documentMode : void 0;
      },
          kb;
      a: {
        var lb = "",
            mb = function () {
          var a = Za;if (hb) return (/rv\:([^\);]+)(\)|;)/.exec(a)
          );if (fb) return (/Edge\/([\d\.]+)/.exec(a)
          );if (z) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
          );if (ib) return (/WebKit\/(\S+)/.exec(a)
          );if (eb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
          );
        }();mb && (lb = mb ? mb[1] : "");if (z) {
          var nb = jb();if (null != nb && nb > parseFloat(lb)) {
            kb = String(nb);break a;
          }
        }kb = lb;
      }
      var ob = kb,
          cb = {},
          A = function (a) {
        return db(a, function () {
          for (var b = 0, c = na(String(ob)).split("."), d = na(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
            var g = c[f] || "",
                k = d[f] || "";do {
              g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];k = /(\d*)(\D*)(.*)/.exec(k) || ["", "", "", ""];if (0 == g[0].length && 0 == k[0].length) break;b = wa(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == k[1].length ? 0 : parseInt(k[1], 10)) || wa(0 == g[2].length, 0 == k[2].length) || wa(g[2], k[2]);g = g[3];k = k[3];
            } while (0 == b);
          }return 0 <= b;
        });
      },
          pb = l.document,
          qb = pb && z ? jb() || ("CSS1Compat" == pb.compatMode ? parseInt(ob, 10) : 5) : void 0;var rb = null,
          sb = null,
          ub = function (a) {
        var b = "";tb(a, function (a) {
          b += String.fromCharCode(a);
        });return b;
      },
          tb = function (a, b) {
        function c(b) {
          for (; d < a.length;) {
            var c = a.charAt(d++),
                e = sb[c];if (null != e) return e;if (!/^[\s\xa0]*$/.test(c)) throw Error("Unknown base64 encoding at char: " + c);
          }return b;
        }vb();for (var d = 0;;) {
          var e = c(-1),
              f = c(0),
              g = c(64),
              k = c(64);if (64 === k && -1 === e) break;b(e << 2 | f >> 4);64 != g && (b(f << 4 & 240 | g >> 2), 64 != k && b(g << 6 & 192 | k));
        }
      },
          vb = function () {
        if (!rb) {
          rb = {};sb = {};for (var a = 0; 65 > a; a++) rb[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), sb[rb[a]] = a, 62 <= a && (sb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
        }
      };var wb = !z || 9 <= Number(qb),
          xb = z && !A("9");!ib || A("528");hb && A("1.9b") || z && A("8") || eb && A("9.5") || ib && A("528");hb && !A("8") || z && A("9");var yb = function () {
        this.ya = this.ya;this.Tb = this.Tb;
      };yb.prototype.ya = !1;yb.prototype.isDisposed = function () {
        return this.ya;
      };yb.prototype.Oa = function () {
        if (this.Tb) for (; this.Tb.length;) this.Tb.shift()();
      };var zb = function (a, b) {
        this.type = a;this.currentTarget = this.target = b;this.defaultPrevented = this.Va = !1;this.ud = !0;
      };zb.prototype.preventDefault = function () {
        this.defaultPrevented = !0;this.ud = !1;
      };var Ab = function (a, b) {
        zb.call(this, a ? a.type : "");this.relatedTarget = this.currentTarget = this.target = null;this.charCode = this.keyCode = this.button = this.screenY = this.screenX = this.clientY = this.clientX = this.offsetY = this.offsetX = 0;this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;this.lb = this.state = null;a && this.init(a, b);
      };t(Ab, zb);
      Ab.prototype.init = function (a, b) {
        var c = this.type = a.type,
            d = a.changedTouches ? a.changedTouches[0] : null;this.target = a.target || a.srcElement;this.currentTarget = b;if (b = a.relatedTarget) {
          if (hb) {
            var e;a: {
              try {
                bb(b.nodeName);e = !0;break a;
              } catch (f) {}e = !1;
            }e || (b = null);
          }
        } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);this.relatedTarget = b;null === d ? (this.offsetX = ib || void 0 !== a.offsetX ? a.offsetX : a.layerX, this.offsetY = ib || void 0 !== a.offsetY ? a.offsetY : a.layerY, this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0) : (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0);this.button = a.button;this.keyCode = a.keyCode || 0;this.charCode = a.charCode || ("keypress" == c ? a.keyCode : 0);this.ctrlKey = a.ctrlKey;this.altKey = a.altKey;this.shiftKey = a.shiftKey;this.metaKey = a.metaKey;this.state = a.state;this.lb = a;a.defaultPrevented && this.preventDefault();
      };Ab.prototype.preventDefault = function () {
        Ab.Pc.preventDefault.call(this);var a = this.lb;if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, xb) try {
          if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
        } catch (b) {}
      };Ab.prototype.ce = function () {
        return this.lb;
      };var Bb = "closure_listenable_" + (1E6 * Math.random() | 0),
          Cb = 0;var Db = function (a, b, c, d, e) {
        this.listener = a;this.Xb = null;this.src = b;this.type = c;this.Cb = !!d;this.Kb = e;this.key = ++Cb;this.$a = this.Bb = !1;
      },
          Eb = function (a) {
        a.$a = !0;a.listener = null;a.Xb = null;a.src = null;a.Kb = null;
      };var Fb = function (a) {
        this.src = a;this.w = {};this.yb = 0;
      };Fb.prototype.add = function (a, b, c, d, e) {
        var f = a.toString();a = this.w[f];a || (a = this.w[f] = [], this.yb++);var g = Gb(a, b, d, e);-1 < g ? (b = a[g], c || (b.Bb = !1)) : (b = new Db(b, this.src, f, !!d, e), b.Bb = c, a.push(b));return b;
      };Fb.prototype.remove = function (a, b, c, d) {
        a = a.toString();if (!(a in this.w)) return !1;var e = this.w[a];b = Gb(e, b, c, d);return -1 < b ? (Eb(e[b]), Ka(e, b), 0 == e.length && (delete this.w[a], this.yb--), !0) : !1;
      };
      var Hb = function (a, b) {
        var c = b.type;c in a.w && La(a.w[c], b) && (Eb(b), 0 == a.w[c].length && (delete a.w[c], a.yb--));
      };Fb.prototype.uc = function (a, b, c, d) {
        a = this.w[a.toString()];var e = -1;a && (e = Gb(a, b, c, d));return -1 < e ? a[e] : null;
      };var Gb = function (a, b, c, d) {
        for (var e = 0; e < a.length; ++e) {
          var f = a[e];if (!f.$a && f.listener == b && f.Cb == !!c && f.Kb == d) return e;
        }return -1;
      };var Ib = "closure_lm_" + (1E6 * Math.random() | 0),
          Jb = {},
          Kb = 0,
          Lb = function (a, b, c, d, e) {
        if (ea(b)) for (var f = 0; f < b.length; f++) Lb(a, b[f], c, d, e);else c = Mb(c), a && a[Bb] ? a.listen(b, c, d, e) : Nb(a, b, c, !1, d, e);
      },
          Nb = function (a, b, c, d, e, f) {
        if (!b) throw Error("Invalid event type");var g = !!e,
            k = Ob(a);k || (a[Ib] = k = new Fb(a));c = k.add(b, c, d, e, f);if (c.Xb) return;d = Pb();c.Xb = d;d.src = a;d.listener = c;if (a.addEventListener) a.addEventListener(b.toString(), d, g);else if (a.attachEvent) a.attachEvent(Qb(b.toString()), d);else throw Error("addEventListener and attachEvent are unavailable.");
        Kb++;
      },
          Pb = function () {
        var a = Rb,
            b = wb ? function (c) {
          return a.call(b.src, b.listener, c);
        } : function (c) {
          c = a.call(b.src, b.listener, c);if (!c) return c;
        };return b;
      },
          Sb = function (a, b, c, d, e) {
        if (ea(b)) for (var f = 0; f < b.length; f++) Sb(a, b[f], c, d, e);else c = Mb(c), a && a[Bb] ? Tb(a, b, c, d, e) : Nb(a, b, c, !0, d, e);
      },
          Ub = function (a, b, c, d, e) {
        if (ea(b)) for (var f = 0; f < b.length; f++) Ub(a, b[f], c, d, e);else c = Mb(c), a && a[Bb] ? a.Y.remove(String(b), c, d, e) : a && (a = Ob(a)) && (b = a.uc(b, c, !!d, e)) && Vb(b);
      },
          Vb = function (a) {
        if (ga(a) || !a || a.$a) return;var b = a.src;if (b && b[Bb]) {
          Hb(b.Y, a);return;
        }var c = a.type,
            d = a.Xb;b.removeEventListener ? b.removeEventListener(c, d, a.Cb) : b.detachEvent && b.detachEvent(Qb(c), d);Kb--;(c = Ob(b)) ? (Hb(c, a), 0 == c.yb && (c.src = null, b[Ib] = null)) : Eb(a);
      },
          Qb = function (a) {
        return a in Jb ? Jb[a] : Jb[a] = "on" + a;
      },
          Xb = function (a, b, c, d) {
        var e = !0;if (a = Ob(a)) if (b = a.w[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
          var f = b[a];f && f.Cb == c && !f.$a && (f = Wb(f, d), e = e && !1 !== f);
        }return e;
      },
          Wb = function (a, b) {
        var c = a.listener,
            d = a.Kb || a.src;a.Bb && Vb(a);return c.call(d, b);
      },
          Rb = function (a, b) {
        if (a.$a) return !0;if (!wb) {
          if (!b) a: {
            b = ["window", "event"];for (var c = l, d; d = b.shift();) if (null != c[d]) c = c[d];else {
              b = null;break a;
            }b = c;
          }d = b;b = new Ab(d, this);c = !0;if (!(0 > d.keyCode || void 0 != d.returnValue)) {
            a: {
              var e = !1;if (0 == d.keyCode) try {
                d.keyCode = -1;break a;
              } catch (g) {
                e = !0;
              }if (e || void 0 == d.returnValue) d.returnValue = !0;
            }d = [];for (e = b.currentTarget; e; e = e.parentNode) d.push(e);a = a.type;for (e = d.length - 1; !b.Va && 0 <= e; e--) {
              b.currentTarget = d[e];var f = Xb(d[e], a, !0, b),
                  c = c && f;
            }for (e = 0; !b.Va && e < d.length; e++) b.currentTarget = d[e], f = Xb(d[e], a, !1, b), c = c && f;
          }return c;
        }return Wb(a, new Ab(b, this));
      },
          Ob = function (a) {
        a = a[Ib];return a instanceof Fb ? a : null;
      },
          Yb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0),
          Mb = function (a) {
        w(a, "Listener can not be null.");if (p(a)) return a;w(a.handleEvent, "An object listener must have handleEvent method.");a[Yb] || (a[Yb] = function (b) {
          return a.handleEvent(b);
        });return a[Yb];
      };var Zb = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;var ac = function () {
        this.fc = "";this.Md = $b;
      };ac.prototype.Nb = !0;ac.prototype.Ib = function () {
        return this.fc;
      };ac.prototype.toString = function () {
        return "Const{" + this.fc + "}";
      };var bc = function (a) {
        if (a instanceof ac && a.constructor === ac && a.Md === $b) return a.fc;za("expected object of type Const, got '" + a + "'");return "type_error:Const";
      },
          $b = {};var B = function () {
        this.ja = "";this.Ld = cc;
      };B.prototype.Nb = !0;B.prototype.Ib = function () {
        return this.ja;
      };B.prototype.toString = function () {
        return "SafeUrl{" + this.ja + "}";
      };
      var dc = function (a) {
        if (a instanceof B && a.constructor === B && a.Ld === cc) return a.ja;za("expected object of type SafeUrl, got '" + a + "' of type " + m(a));return "type_error:SafeUrl";
      },
          ec = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i,
          gc = function (a) {
        if (a instanceof B) return a;a = a.Nb ? a.Ib() : String(a);ec.test(a) || (a = "about:invalid#zClosurez");return fc(a);
      },
          cc = {},
          fc = function (a) {
        var b = new B();b.ja = a;return b;
      };fc("about:blank");var hc = function (a) {
        return (/^\s*$/.test(a) ? !1 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/(?:"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)[\s\u2028\u2029]*(?=:|,|]|}|$)/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))
        );
      },
          ic = function (a) {
        a = String(a);if (hc(a)) try {
          return eval("(" + a + ")");
        } catch (b) {}throw Error("Invalid JSON string: " + a);
      },
          lc = function (a) {
        var b = [];jc(new kc(), a, b);return b.join("");
      },
          kc = function () {
        this.ac = void 0;
      },
          jc = function (a, b, c) {
        if (null == b) c.push("null");else {
          if ("object" == typeof b) {
            if (ea(b)) {
              var d = b;b = d.length;c.push("[");for (var e = "", f = 0; f < b; f++) c.push(e), e = d[f], jc(a, a.ac ? a.ac.call(d, String(f), e) : e, c), e = ",";c.push("]");return;
            }if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
              c.push("{");f = "";for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (e = b[d], "function" != typeof e && (c.push(f), mc(d, c), c.push(":"), jc(a, a.ac ? a.ac.call(b, d, e) : e, c), f = ","));c.push("}");return;
            }
          }switch (typeof b) {case "string":
              mc(b, c);break;case "number":
              c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");break;case "boolean":
              c.push(String(b));break;case "function":
              c.push("null");break;default:
              throw Error("Unknown type: " + typeof b);}
        }
      },
          nc = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
          oc = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g,
          mc = function (a, b) {
        b.push('"', a.replace(oc, function (a) {
          var b = nc[a];b || (b = "\\u" + (a.charCodeAt(0) | 65536).toString(16).substr(1), nc[a] = b);return b;
        }), '"');
      };var pc = function () {};pc.prototype.Tc = null;pc.prototype.kb = ca;var qc = function (a) {
        return a.Tc || (a.Tc = a.Qb());
      };pc.prototype.Qb = ca;var rc,
          sc = function () {};t(sc, pc);sc.prototype.kb = function () {
        var a = tc(this);return a ? new ActiveXObject(a) : new XMLHttpRequest();
      };sc.prototype.Qb = function () {
        var a = {};tc(this) && (a[0] = !0, a[1] = !0);return a;
      };
      var tc = function (a) {
        if (!a.gd && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
          for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
            var d = b[c];try {
              return new ActiveXObject(d), a.gd = d;
            } catch (e) {}
          }throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
        }return a.gd;
      };rc = new sc();var uc = function () {};t(uc, pc);uc.prototype.kb = function () {
        var a = new XMLHttpRequest();if ("withCredentials" in a) return a;if ("undefined" != typeof XDomainRequest) return new vc();throw Error("Unsupported browser");
      };uc.prototype.Qb = function () {
        return {};
      };
      var vc = function () {
        this.oa = new XDomainRequest();this.readyState = 0;this.onreadystatechange = null;this.responseText = "";this.status = -1;this.statusText = this.responseXML = null;this.oa.onload = r(this.ee, this);this.oa.onerror = r(this.ed, this);this.oa.onprogress = r(this.fe, this);this.oa.ontimeout = r(this.ge, this);
      };h = vc.prototype;h.open = function (a, b, c) {
        if (null != c && !c) throw Error("Only async requests are supported.");this.oa.open(a, b);
      };
      h.send = function (a) {
        if (a) {
          if ("string" == typeof a) this.oa.send(a);else throw Error("Only string data is supported");
        } else this.oa.send();
      };h.abort = function () {
        this.oa.abort();
      };h.setRequestHeader = function () {};h.ee = function () {
        this.status = 200;this.responseText = this.oa.responseText;wc(this, 4);
      };h.ed = function () {
        this.status = 500;this.responseText = "";wc(this, 4);
      };h.ge = function () {
        this.ed();
      };h.fe = function () {
        this.status = 200;wc(this, 1);
      };var wc = function (a, b) {
        a.readyState = b;if (a.onreadystatechange) a.onreadystatechange();
      };var C = function (a, b) {
        this.h = [];this.g = b;for (var c = !0, d = a.length - 1; 0 <= d; d--) {
          var e = a[d] | 0;c && e == b || (this.h[d] = e, c = !1);
        }
      },
          xc = {},
          yc = function (a) {
        if (-128 <= a && 128 > a) {
          var b = xc[a];if (b) return b;
        }b = new C([a | 0], 0 > a ? -1 : 0);-128 <= a && 128 > a && (xc[a] = b);return b;
      },
          F = function (a) {
        if (isNaN(a) || !isFinite(a)) return D;if (0 > a) return E(F(-a));for (var b = [], c = 1, d = 0; a >= c; d++) b[d] = a / c | 0, c *= 4294967296;return new C(b, 0);
      },
          zc = function (a, b) {
        if (0 == a.length) throw Error("number format error: empty string");b = b || 10;if (2 > b || 36 < b) throw Error("radix out of range: " + b);if ("-" == a.charAt(0)) return E(zc(a.substring(1), b));if (0 <= a.indexOf("-")) throw Error('number format error: interior "-" character');for (var c = F(Math.pow(b, 8)), d = D, e = 0; e < a.length; e += 8) {
          var f = Math.min(8, a.length - e),
              g = parseInt(a.substring(e, e + f), b);8 > f ? (f = F(Math.pow(b, f)), d = d.multiply(f).add(F(g))) : (d = d.multiply(c), d = d.add(F(g)));
        }return d;
      },
          D = yc(0),
          Ac = yc(1),
          Bc = yc(16777216),
          Cc = function (a) {
        if (-1 == a.g) return -Cc(E(a));for (var b = 0, c = 1, d = 0; d < a.h.length; d++) b += Dc(a, d) * c, c *= 4294967296;return b;
      };
      C.prototype.toString = function (a) {
        a = a || 10;if (2 > a || 36 < a) throw Error("radix out of range: " + a);if (G(this)) return "0";if (-1 == this.g) return "-" + E(this).toString(a);for (var b = F(Math.pow(a, 6)), c = this, d = "";;) {
          var e = Ec(c, b),
              c = Fc(c, e.multiply(b)),
              f = ((0 < c.h.length ? c.h[0] : c.g) >>> 0).toString(a),
              c = e;if (G(c)) return f + d;for (; 6 > f.length;) f = "0" + f;d = "" + f + d;
        }
      };
      var H = function (a, b) {
        return 0 > b ? 0 : b < a.h.length ? a.h[b] : a.g;
      },
          Dc = function (a, b) {
        a = H(a, b);return 0 <= a ? a : 4294967296 + a;
      },
          G = function (a) {
        if (0 != a.g) return !1;for (var b = 0; b < a.h.length; b++) if (0 != a.h[b]) return !1;return !0;
      };C.prototype.Eb = function (a) {
        if (this.g != a.g) return !1;for (var b = Math.max(this.h.length, a.h.length), c = 0; c < b; c++) if (H(this, c) != H(a, c)) return !1;return !0;
      };C.prototype.compare = function (a) {
        a = Fc(this, a);return -1 == a.g ? -1 : G(a) ? 0 : 1;
      };
      var E = function (a) {
        for (var b = a.h.length, c = [], d = 0; d < b; d++) c[d] = ~a.h[d];return new C(c, ~a.g).add(Ac);
      };C.prototype.add = function (a) {
        for (var b = Math.max(this.h.length, a.h.length), c = [], d = 0, e = 0; e <= b; e++) {
          var f = d + (H(this, e) & 65535) + (H(a, e) & 65535),
              g = (f >>> 16) + (H(this, e) >>> 16) + (H(a, e) >>> 16),
              d = g >>> 16,
              f = f & 65535,
              g = g & 65535;c[e] = g << 16 | f;
        }return new C(c, c[c.length - 1] & -2147483648 ? -1 : 0);
      };var Fc = function (a, b) {
        return a.add(E(b));
      };
      C.prototype.multiply = function (a) {
        if (G(this) || G(a)) return D;if (-1 == this.g) return -1 == a.g ? E(this).multiply(E(a)) : E(E(this).multiply(a));if (-1 == a.g) return E(this.multiply(E(a)));if (0 > this.compare(Bc) && 0 > a.compare(Bc)) return F(Cc(this) * Cc(a));for (var b = this.h.length + a.h.length, c = [], d = 0; d < 2 * b; d++) c[d] = 0;for (d = 0; d < this.h.length; d++) for (var e = 0; e < a.h.length; e++) {
          var f = H(this, d) >>> 16,
              g = H(this, d) & 65535,
              k = H(a, e) >>> 16,
              q = H(a, e) & 65535;c[2 * d + 2 * e] += g * q;Gc(c, 2 * d + 2 * e);c[2 * d + 2 * e + 1] += f * q;Gc(c, 2 * d + 2 * e + 1);c[2 * d + 2 * e + 1] += g * k;Gc(c, 2 * d + 2 * e + 1);c[2 * d + 2 * e + 2] += f * k;Gc(c, 2 * d + 2 * e + 2);
        }for (d = 0; d < b; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];for (d = b; d < 2 * b; d++) c[d] = 0;return new C(c, 0);
      };
      var Gc = function (a, b) {
        for (; (a[b] & 65535) != a[b];) a[b + 1] += a[b] >>> 16, a[b] &= 65535, b++;
      },
          Ec = function (a, b) {
        if (G(b)) throw Error("division by zero");if (G(a)) return D;if (-1 == a.g) return -1 == b.g ? Ec(E(a), E(b)) : E(Ec(E(a), b));if (-1 == b.g) return E(Ec(a, E(b)));if (30 < a.h.length) {
          if (-1 == a.g || -1 == b.g) throw Error("slowDivide_ only works with positive integers.");for (var c = Ac; 0 >= b.compare(a);) c = c.shiftLeft(1), b = b.shiftLeft(1);var d = Hc(c, 1),
              e = Hc(b, 1),
              f;b = Hc(b, 2);for (c = Hc(c, 2); !G(b);) f = e.add(b), 0 >= f.compare(a) && (d = d.add(c), e = f), b = Hc(b, 1), c = Hc(c, 1);return d;
        }for (c = D; 0 <= a.compare(b);) {
          d = Math.max(1, Math.floor(Cc(a) / Cc(b)));e = Math.ceil(Math.log(d) / Math.LN2);e = 48 >= e ? 1 : Math.pow(2, e - 48);f = F(d);for (var g = f.multiply(b); -1 == g.g || 0 < g.compare(a);) d -= e, f = F(d), g = f.multiply(b);G(f) && (f = Ac);c = c.add(f);a = Fc(a, g);
        }return c;
      },
          Ic = function (a, b) {
        for (var c = Math.max(a.h.length, b.h.length), d = [], e = 0; e < c; e++) d[e] = H(a, e) | H(b, e);return new C(d, a.g | b.g);
      };
      C.prototype.shiftLeft = function (a) {
        var b = a >> 5;a %= 32;for (var c = this.h.length + b + (0 < a ? 1 : 0), d = [], e = 0; e < c; e++) d[e] = 0 < a ? H(this, e - b) << a | H(this, e - b - 1) >>> 32 - a : H(this, e - b);return new C(d, this.g);
      };var Hc = function (a, b) {
        var c = b >> 5;b %= 32;for (var d = a.h.length - c, e = [], f = 0; f < d; f++) e[f] = 0 < b ? H(a, f + c) >>> b | H(a, f + c + 1) << 32 - b : H(a, f + c);return new C(e, a.g);
      };var Jc = function (a, b) {
        this.pb = a;this.na = b;
      };Jc.prototype.Eb = function (a) {
        return this.na == a.na && this.pb.Eb(Wa(a.pb));
      };Jc.prototype.toString = ca;
      var Mc = function (a) {
        try {
          var b;if (b = 0 == a.lastIndexOf("[", 0)) {
            var c = a.length - 1;b = 0 <= c && a.indexOf("]", c) == c;
          }return b ? new Kc(a.substring(1, a.length - 1)) : new Lc(a);
        } catch (d) {
          return null;
        }
      },
          Lc = function (a) {
        var b = D;if (a instanceof C) {
          if (0 != a.g || 0 > a.compare(D) || 0 < a.compare(Nc)) throw Error("The address does not look like an IPv4.");b = Wa(a);
        } else {
          if (!Oc.test(a)) throw Error(a + " does not look like an IPv4 address.");var c = a.split(".");if (4 != c.length) throw Error(a + " does not look like an IPv4 address.");for (var d = 0; d < c.length; d++) {
            var e;e = c[d];var f = Number(e);e = 0 == f && /^[\s\xa0]*$/.test(e) ? NaN : f;if (isNaN(e) || 0 > e || 255 < e || 1 != c[d].length && 0 == c[d].lastIndexOf("0", 0)) throw Error("In " + a + ", octet " + d + " is not valid");e = F(e);b = Ic(b.shiftLeft(8), e);
          }
        }Jc.call(this, b, 4);
      };t(Lc, Jc);var Oc = /^[0-9.]*$/,
          Nc = Fc(Ac.shiftLeft(32), Ac);Lc.prototype.toString = function () {
        if (this.Ca) return this.Ca;for (var a = Dc(this.pb, 0), b = [], c = 3; 0 <= c; c--) b[c] = String(a & 255), a >>>= 8;return this.Ca = b.join(".");
      };
      var Kc = function (a) {
        var b = D;if (a instanceof C) {
          if (0 != a.g || 0 > a.compare(D) || 0 < a.compare(Pc)) throw Error("The address does not look like a valid IPv6.");b = Wa(a);
        } else {
          if (!Qc.test(a)) throw Error(a + " is not a valid IPv6 address.");var c = a.split(":");if (-1 != c[c.length - 1].indexOf(".")) {
            a = Dc(Wa(new Lc(c[c.length - 1]).pb), 0);var d = [];d.push((a >>> 16 & 65535).toString(16));d.push((a & 65535).toString(16));Ka(c, c.length - 1);Qa(c, d);a = c.join(":");
          }d = a.split("::");if (2 < d.length || 1 == d.length && 8 != c.length) throw Error(a + " is not a valid IPv6 address.");if (1 < d.length) {
            c = d[0].split(":");d = d[1].split(":");1 == c.length && "" == c[0] && (c = []);1 == d.length && "" == d[0] && (d = []);var e = 8 - (c.length + d.length);if (1 > e) c = [];else {
              for (var f = [], g = 0; g < e; g++) f[g] = "0";c = Oa(c, f, d);
            }
          }if (8 != c.length) throw Error(a + " is not a valid IPv6 address");for (d = 0; d < c.length; d++) {
            e = zc(c[d], 16);if (0 > e.compare(D) || 0 < e.compare(Rc)) throw Error(c[d] + " in " + a + " is not a valid hextet.");b = Ic(b.shiftLeft(16), e);
          }
        }Jc.call(this, b, 6);
      };t(Kc, Jc);
      var Qc = /^([a-fA-F0-9]*:){2}[a-fA-F0-9:.]*$/,
          Rc = yc(65535),
          Pc = Fc(Ac.shiftLeft(128), Ac);Kc.prototype.toString = function () {
        if (this.Ca) return this.Ca;for (var a = [], b = 3; 0 <= b; b--) {
          var c = Dc(this.pb, b),
              d = c & 65535;a.push((c >>> 16).toString(16));a.push(d.toString(16));
        }for (var c = b = -1, e = d = 0, f = 0; f < a.length; f++) "0" == a[f] ? (e++, -1 == c && (c = f), e > d && (d = e, b = c)) : (c = -1, e = 0);0 < d && (b + d == a.length && a.push(""), a.splice(b, d, ""), 0 == b && (a = [""].concat(a)));return this.Ca = a.join(":");
      };var Tc = function () {
        this.Wb = "";this.Nd = Sc;
      };Tc.prototype.Nb = !0;Tc.prototype.Ib = function () {
        return this.Wb;
      };Tc.prototype.toString = function () {
        return "TrustedResourceUrl{" + this.Wb + "}";
      };var Sc = {};var Vc = function () {
        this.ja = "";this.Kd = Uc;
      };Vc.prototype.Nb = !0;Vc.prototype.Ib = function () {
        return this.ja;
      };Vc.prototype.toString = function () {
        return "SafeHtml{" + this.ja + "}";
      };var Wc = function (a) {
        if (a instanceof Vc && a.constructor === Vc && a.Kd === Uc) return a.ja;za("expected object of type SafeHtml, got '" + a + "' of type " + m(a));return "type_error:SafeHtml";
      },
          Uc = {};Vc.prototype.ne = function (a) {
        this.ja = a;return this;
      };!hb && !z || z && 9 <= Number(qb) || hb && A("1.9.1");z && A("9");var Yc = function (a, b) {
        Ra(b, function (b, d) {
          "style" == d ? a.style.cssText = b : "class" == d ? a.className = b : "for" == d ? a.htmlFor = b : Xc.hasOwnProperty(d) ? a.setAttribute(Xc[d], b) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, b) : a[d] = b;
        });
      },
          Xc = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", frameborder: "frameBorder", height: "height", maxlength: "maxLength", nonce: "nonce", role: "role", rowspan: "rowSpan", type: "type", usemap: "useMap", valign: "vAlign", width: "width" };var Zc = function (a, b, c) {
        this.pe = c;this.Td = a;this.ye = b;this.Sb = 0;this.Lb = null;
      };Zc.prototype.get = function () {
        var a;0 < this.Sb ? (this.Sb--, a = this.Lb, this.Lb = a.next, a.next = null) : a = this.Td();return a;
      };Zc.prototype.put = function (a) {
        this.ye(a);this.Sb < this.pe && (this.Sb++, a.next = this.Lb, this.Lb = a);
      };var $c = function (a) {
        l.setTimeout(function () {
          throw a;
        }, 0);
      },
          ad,
          bd = function () {
        var a = l.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function () {
          var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
              a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
              d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
              a = r(function (a) {
            if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
          }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
              b.postMessage(c, d);
            } };
        });if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
          var b = new a(),
              c = {},
              d = c;b.port1.onmessage = function () {
            if (void 0 !== c.next) {
              c = c.next;var a = c.Xc;c.Xc = null;a();
            }
          };return function (a) {
            d.next = { Xc: a };d = d.next;b.port2.postMessage(0);
          };
        }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
          var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
            b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
          };document.documentElement.appendChild(b);
        } : function (a) {
          l.setTimeout(a, 0);
        };
      };var cd = function () {
        this.kc = this.Ja = null;
      },
          ed = new Zc(function () {
        return new dd();
      }, function (a) {
        a.reset();
      }, 100);cd.prototype.add = function (a, b) {
        var c = ed.get();c.set(a, b);this.kc ? this.kc.next = c : (w(!this.Ja), this.Ja = c);this.kc = c;
      };cd.prototype.remove = function () {
        var a = null;this.Ja && (a = this.Ja, this.Ja = this.Ja.next, this.Ja || (this.kc = null), a.next = null);return a;
      };var dd = function () {
        this.next = this.scope = this.tc = null;
      };dd.prototype.set = function (a, b) {
        this.tc = a;this.scope = b;this.next = null;
      };
      dd.prototype.reset = function () {
        this.next = this.scope = this.tc = null;
      };var jd = function (a, b) {
        fd || gd();hd || (fd(), hd = !0);id.add(a, b);
      },
          fd,
          gd = function () {
        if (l.Promise && l.Promise.resolve) {
          var a = l.Promise.resolve(void 0);fd = function () {
            a.then(kd);
          };
        } else fd = function () {
          var a = kd;!p(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (ad || (ad = bd()), ad(a)) : l.setImmediate(a);
        };
      },
          hd = !1,
          id = new cd(),
          kd = function () {
        for (var a; a = id.remove();) {
          try {
            a.tc.call(a.scope);
          } catch (b) {
            $c(b);
          }ed.put(a);
        }hd = !1;
      };var ld = function (a) {
        a.prototype.then = a.prototype.then;a.prototype.$goog_Thenable = !0;
      },
          md = function (a) {
        if (!a) return !1;try {
          return !!a.$goog_Thenable;
        } catch (b) {
          return !1;
        }
      };var I = function (a, b) {
        this.F = 0;this.ka = void 0;this.Ma = this.fa = this.o = null;this.Jb = this.sc = !1;if (a != ba) try {
          var c = this;a.call(b, function (a) {
            nd(c, 2, a);
          }, function (a) {
            if (!(a instanceof od)) try {
              if (a instanceof Error) throw a;throw Error("Promise rejected.");
            } catch (e) {}nd(c, 3, a);
          });
        } catch (d) {
          nd(this, 3, d);
        }
      },
          pd = function () {
        this.next = this.context = this.Sa = this.Ea = this.child = null;this.ib = !1;
      };pd.prototype.reset = function () {
        this.context = this.Sa = this.Ea = this.child = null;this.ib = !1;
      };
      var qd = new Zc(function () {
        return new pd();
      }, function (a) {
        a.reset();
      }, 100),
          rd = function (a, b, c) {
        var d = qd.get();d.Ea = a;d.Sa = b;d.context = c;return d;
      },
          J = function (a) {
        if (a instanceof I) return a;var b = new I(ba);nd(b, 2, a);return b;
      },
          K = function (a) {
        return new I(function (b, c) {
          c(a);
        });
      },
          td = function (a, b, c) {
        sd(a, b, c, null) || jd(ka(b, a));
      },
          ud = function (a) {
        return new I(function (b) {
          var c = a.length,
              d = [];if (c) for (var e = function (a, e, f) {
            c--;d[a] = e ? { be: !0, value: f } : { be: !1, reason: f };0 == c && b(d);
          }, f = 0, g; f < a.length; f++) g = a[f], td(g, ka(e, f, !0), ka(e, f, !1));else b(d);
        });
      };I.prototype.then = function (a, b, c) {
        null != a && Ca(a, "opt_onFulfilled should be a function.");null != b && Ca(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return vd(this, p(a) ? a : null, p(b) ? b : null, c);
      };ld(I);var xd = function (a, b) {
        b = rd(b, b, void 0);b.ib = !0;wd(a, b);return a;
      };I.prototype.l = function (a, b) {
        return vd(this, null, a, b);
      };I.prototype.cancel = function (a) {
        0 == this.F && jd(function () {
          var b = new od(a);yd(this, b);
        }, this);
      };
      var yd = function (a, b) {
        if (0 == a.F) if (a.o) {
          var c = a.o;if (c.fa) {
            for (var d = 0, e = null, f = null, g = c.fa; g && (g.ib || (d++, g.child == a && (e = g), !(e && 1 < d))); g = g.next) e || (f = g);e && (0 == c.F && 1 == d ? yd(c, b) : (f ? (d = f, w(c.fa), w(null != d), d.next == c.Ma && (c.Ma = d), d.next = d.next.next) : zd(c), Ad(c, e, 3, b)));
          }a.o = null;
        } else nd(a, 3, b);
      },
          wd = function (a, b) {
        a.fa || 2 != a.F && 3 != a.F || Bd(a);w(null != b.Ea);a.Ma ? a.Ma.next = b : a.fa = b;a.Ma = b;
      },
          vd = function (a, b, c, d) {
        var e = rd(null, null, null);e.child = new I(function (a, g) {
          e.Ea = b ? function (c) {
            try {
              var e = b.call(d, c);a(e);
            } catch (ra) {
              g(ra);
            }
          } : a;e.Sa = c ? function (b) {
            try {
              var e = c.call(d, b);void 0 === e && b instanceof od ? g(b) : a(e);
            } catch (ra) {
              g(ra);
            }
          } : g;
        });e.child.o = a;wd(a, e);return e.child;
      };I.prototype.He = function (a) {
        w(1 == this.F);this.F = 0;nd(this, 2, a);
      };I.prototype.Ie = function (a) {
        w(1 == this.F);this.F = 0;nd(this, 3, a);
      };
      var nd = function (a, b, c) {
        0 == a.F && (a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself")), a.F = 1, sd(c, a.He, a.Ie, a) || (a.ka = c, a.F = b, a.o = null, Bd(a), 3 != b || c instanceof od || Cd(a, c)));
      },
          sd = function (a, b, c, d) {
        if (a instanceof I) return null != b && Ca(b, "opt_onFulfilled should be a function."), null != c && Ca(c, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), wd(a, rd(b || ba, c || null, d)), !0;if (md(a)) return a.then(b, c, d), !0;if (ha(a)) try {
          var e = a.then;if (p(e)) return Dd(a, e, b, c, d), !0;
        } catch (f) {
          return c.call(d, f), !0;
        }return !1;
      },
          Dd = function (a, b, c, d, e) {
        var f = !1,
            g = function (a) {
          f || (f = !0, c.call(e, a));
        },
            k = function (a) {
          f || (f = !0, d.call(e, a));
        };try {
          b.call(a, g, k);
        } catch (q) {
          k(q);
        }
      },
          Bd = function (a) {
        a.sc || (a.sc = !0, jd(a.Xd, a));
      },
          zd = function (a) {
        var b = null;a.fa && (b = a.fa, a.fa = b.next, b.next = null);a.fa || (a.Ma = null);null != b && w(null != b.Ea);return b;
      };I.prototype.Xd = function () {
        for (var a; a = zd(this);) Ad(this, a, this.F, this.ka);this.sc = !1;
      };
      var Ad = function (a, b, c, d) {
        if (3 == c && b.Sa && !b.ib) for (; a && a.Jb; a = a.o) a.Jb = !1;if (b.child) b.child.o = null, Ed(b, c, d);else try {
          b.ib ? b.Ea.call(b.context) : Ed(b, c, d);
        } catch (e) {
          Fd.call(null, e);
        }qd.put(b);
      },
          Ed = function (a, b, c) {
        2 == b ? a.Ea.call(a.context, c) : a.Sa && a.Sa.call(a.context, c);
      },
          Cd = function (a, b) {
        a.Jb = !0;jd(function () {
          a.Jb && Fd.call(null, b);
        });
      },
          Fd = $c,
          od = function (a) {
        u.call(this, a);
      };t(od, u);od.prototype.name = "cancel"; /*
                                               Portions of this code are from MochiKit, received by
                                               The Closure Authors under the MIT license. All other code is Copyright
                                               2005-2009 The Closure Authors. All Rights Reserved.
                                               */
      var Gd = function (a, b) {
        this.bc = [];this.nd = a;this.Zc = b || null;this.nb = this.Qa = !1;this.ka = void 0;this.Nc = this.Sc = this.nc = !1;this.ic = 0;this.o = null;this.oc = 0;
      };Gd.prototype.cancel = function (a) {
        if (this.Qa) this.ka instanceof Gd && this.ka.cancel();else {
          if (this.o) {
            var b = this.o;delete this.o;a ? b.cancel(a) : (b.oc--, 0 >= b.oc && b.cancel());
          }this.nd ? this.nd.call(this.Zc, this) : this.Nc = !0;this.Qa || Hd(this, new Id());
        }
      };Gd.prototype.Yc = function (a, b) {
        this.nc = !1;Jd(this, a, b);
      };
      var Jd = function (a, b, c) {
        a.Qa = !0;a.ka = c;a.nb = !b;Kd(a);
      },
          Md = function (a) {
        if (a.Qa) {
          if (!a.Nc) throw new Ld();a.Nc = !1;
        }
      };Gd.prototype.callback = function (a) {
        Md(this);Nd(a);Jd(this, !0, a);
      };
      var Hd = function (a, b) {
        Md(a);Nd(b);Jd(a, !1, b);
      },
          Nd = function (a) {
        w(!(a instanceof Gd), "An execution sequence may not be initiated with a blocking Deferred.");
      },
          Rd = function (a) {
        var b = Od("https://apis.google.com/js/client.js?onload=" + Pd);Qd(b, null, a, void 0);
      },
          Qd = function (a, b, c, d) {
        w(!a.Sc, "Blocking Deferreds can not be re-used");a.bc.push([b, c, d]);a.Qa && Kd(a);
      };Gd.prototype.then = function (a, b, c) {
        var d,
            e,
            f = new I(function (a, b) {
          d = a;e = b;
        });Qd(this, d, function (a) {
          a instanceof Id ? f.cancel() : e(a);
        });return f.then(a, b, c);
      };
      ld(Gd);
      var Sd = function (a) {
        return Ga(a.bc, function (a) {
          return p(a[1]);
        });
      },
          Kd = function (a) {
        if (a.ic && a.Qa && Sd(a)) {
          var b = a.ic,
              c = Td[b];c && (l.clearTimeout(c.ob), delete Td[b]);a.ic = 0;
        }a.o && (a.o.oc--, delete a.o);for (var b = a.ka, d = c = !1; a.bc.length && !a.nc;) {
          var e = a.bc.shift(),
              f = e[0],
              g = e[1],
              e = e[2];if (f = a.nb ? g : f) try {
            var k = f.call(e || a.Zc, b);void 0 !== k && (a.nb = a.nb && (k == b || k instanceof Error), a.ka = b = k);if (md(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.nc = !0;
          } catch (q) {
            b = q, a.nb = !0, Sd(a) || (c = !0);
          }
        }a.ka = b;d && (k = r(a.Yc, a, !0), d = r(a.Yc, a, !1), b instanceof Gd ? (Qd(b, k, d), b.Sc = !0) : b.then(k, d));c && (b = new Ud(b), Td[b.ob] = b, a.ic = b.ob);
      },
          Ld = function () {
        u.call(this);
      };t(Ld, u);Ld.prototype.message = "Deferred has already fired";Ld.prototype.name = "AlreadyCalledError";var Id = function () {
        u.call(this);
      };t(Id, u);Id.prototype.message = "Deferred was canceled";Id.prototype.name = "CanceledError";var Ud = function (a) {
        this.ob = l.setTimeout(r(this.Ge, this), 0);this.J = a;
      };
      Ud.prototype.Ge = function () {
        w(Td[this.ob], "Cannot throw an error that is not scheduled.");delete Td[this.ob];throw this.J;
      };var Td = {};var Od = function (a) {
        var b = new Tc();b.Wb = a;return Vd(b);
      },
          Vd = function (a) {
        var b = {},
            c = b.document || document,
            d;a instanceof Tc && a.constructor === Tc && a.Nd === Sc ? d = a.Wb : (za("expected object of type TrustedResourceUrl, got '" + a + "' of type " + m(a)), d = "type_error:TrustedResourceUrl");var e = document.createElement("SCRIPT");a = { vd: e, xb: void 0 };var f = new Gd(Wd, a),
            g = null,
            k = null != b.timeout ? b.timeout : 5E3;0 < k && (g = window.setTimeout(function () {
          Xd(e, !0);Hd(f, new Yd(1, "Timeout reached for loading script " + d));
        }, k), a.xb = g);e.onload = e.onreadystatechange = function () {
          e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Xd(e, b.Oe || !1, g), f.callback(null));
        };e.onerror = function () {
          Xd(e, !0, g);Hd(f, new Yd(0, "Error while loading script " + d));
        };a = b.attributes || {};Ya(a, { type: "text/javascript", charset: "UTF-8", src: d });Yc(e, a);Zd(c).appendChild(e);return f;
      },
          Zd = function (a) {
        var b;return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
      },
          Wd = function () {
        if (this && this.vd) {
          var a = this.vd;a && "SCRIPT" == a.tagName && Xd(a, !0, this.xb);
        }
      },
          Xd = function (a, b, c) {
        null != c && l.clearTimeout(c);a.onload = ba;a.onerror = ba;a.onreadystatechange = ba;b && window.setTimeout(function () {
          a && a.parentNode && a.parentNode.removeChild(a);
        }, 0);
      },
          Yd = function (a, b) {
        var c = "Jsloader error (code #" + a + ")";b && (c += ": " + b);u.call(this, c);this.code = a;
      };t(Yd, u);var $d = function () {
        yb.call(this);this.Y = new Fb(this);this.Qd = this;this.Cc = null;
      };t($d, yb);$d.prototype[Bb] = !0;h = $d.prototype;h.addEventListener = function (a, b, c, d) {
        Lb(this, a, b, c, d);
      };h.removeEventListener = function (a, b, c, d) {
        Ub(this, a, b, c, d);
      };
      h.dispatchEvent = function (a) {
        ae(this);var b,
            c = this.Cc;if (c) {
          b = [];for (var d = 1; c; c = c.Cc) b.push(c), w(1E3 > ++d, "infinite loop");
        }c = this.Qd;d = a.type || a;if (n(a)) a = new zb(a, c);else if (a instanceof zb) a.target = a.target || c;else {
          var e = a;a = new zb(d, c);Ya(a, e);
        }var e = !0,
            f;if (b) for (var g = b.length - 1; !a.Va && 0 <= g; g--) f = a.currentTarget = b[g], e = be(f, d, !0, a) && e;a.Va || (f = a.currentTarget = c, e = be(f, d, !0, a) && e, a.Va || (e = be(f, d, !1, a) && e));if (b) for (g = 0; !a.Va && g < b.length; g++) f = a.currentTarget = b[g], e = be(f, d, !1, a) && e;return e;
      };
      h.Oa = function () {
        $d.Pc.Oa.call(this);if (this.Y) {
          var a = this.Y,
              b = 0,
              c;for (c in a.w) {
            for (var d = a.w[c], e = 0; e < d.length; e++) ++b, Eb(d[e]);delete a.w[c];a.yb--;
          }
        }this.Cc = null;
      };h.listen = function (a, b, c, d) {
        ae(this);return this.Y.add(String(a), b, !1, c, d);
      };
      var Tb = function (a, b, c, d, e) {
        a.Y.add(String(b), c, !0, d, e);
      },
          be = function (a, b, c, d) {
        b = a.Y.w[String(b)];if (!b) return !0;b = b.concat();for (var e = !0, f = 0; f < b.length; ++f) {
          var g = b[f];if (g && !g.$a && g.Cb == c) {
            var k = g.listener,
                q = g.Kb || g.src;g.Bb && Hb(a.Y, g);e = !1 !== k.call(q, d) && e;
          }
        }return e && 0 != d.ud;
      };$d.prototype.uc = function (a, b, c, d) {
        return this.Y.uc(String(a), b, c, d);
      };var ae = function (a) {
        w(a.Y, "Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?");
      };var ce = "StopIteration" in l ? l.StopIteration : { message: "StopIteration", stack: "" },
          de = function () {};de.prototype.next = function () {
        throw ce;
      };de.prototype.Pd = function () {
        return this;
      };var ee = function (a, b) {
        this.Z = {};this.s = [];this.na = this.i = 0;var c = arguments.length;if (1 < c) {
          if (c % 2) throw Error("Uneven number of arguments");for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
        } else a && this.addAll(a);
      };h = ee.prototype;h.dd = function () {
        return this.i;
      };h.T = function () {
        fe(this);for (var a = [], b = 0; b < this.s.length; b++) a.push(this.Z[this.s[b]]);return a;
      };h.ha = function () {
        fe(this);return this.s.concat();
      };h.jb = function (a) {
        return ge(this.Z, a);
      };
      h.Eb = function (a, b) {
        if (this === a) return !0;if (this.i != a.dd()) return !1;b = b || he;fe(this);for (var c, d = 0; c = this.s[d]; d++) if (!b(this.get(c), a.get(c))) return !1;return !0;
      };var he = function (a, b) {
        return a === b;
      };ee.prototype.remove = function (a) {
        return ge(this.Z, a) ? (delete this.Z[a], this.i--, this.na++, this.s.length > 2 * this.i && fe(this), !0) : !1;
      };
      var fe = function (a) {
        if (a.i != a.s.length) {
          for (var b = 0, c = 0; b < a.s.length;) {
            var d = a.s[b];ge(a.Z, d) && (a.s[c++] = d);b++;
          }a.s.length = c;
        }if (a.i != a.s.length) {
          for (var e = {}, c = b = 0; b < a.s.length;) d = a.s[b], ge(e, d) || (a.s[c++] = d, e[d] = 1), b++;a.s.length = c;
        }
      };h = ee.prototype;h.get = function (a, b) {
        return ge(this.Z, a) ? this.Z[a] : b;
      };h.set = function (a, b) {
        ge(this.Z, a) || (this.i++, this.s.push(a), this.na++);this.Z[a] = b;
      };
      h.addAll = function (a) {
        var b;a instanceof ee ? (b = a.ha(), a = a.T()) : (b = Ta(a), a = Sa(a));for (var c = 0; c < b.length; c++) this.set(b[c], a[c]);
      };h.forEach = function (a, b) {
        for (var c = this.ha(), d = 0; d < c.length; d++) {
          var e = c[d],
              f = this.get(e);a.call(b, f, e, this);
        }
      };h.clone = function () {
        return new ee(this);
      };h.Pd = function (a) {
        fe(this);var b = 0,
            c = this.na,
            d = this,
            e = new de();e.next = function () {
          if (c != d.na) throw Error("The map has changed since the iterator was created");if (b >= d.s.length) throw ce;var e = d.s[b++];return a ? e : d.Z[e];
        };return e;
      };
      var ge = function (a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      };var ie = function (a) {
        if (a.T && "function" == typeof a.T) return a.T();if (n(a)) return a.split("");if (fa(a)) {
          for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);return b;
        }return Sa(a);
      },
          je = function (a) {
        if (a.ha && "function" == typeof a.ha) return a.ha();if (!a.T || "function" != typeof a.T) {
          if (fa(a) || n(a)) {
            var b = [];a = a.length;for (var c = 0; c < a; c++) b.push(c);return b;
          }return Ta(a);
        }
      },
          ke = function (a, b) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (fa(a) || n(a)) x(a, b, void 0);else for (var c = je(a), d = ie(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
      };var le = function (a, b, c, d, e) {
        this.reset(a, b, c, d, e);
      };le.prototype.ad = null;var me = 0;le.prototype.reset = function (a, b, c, d, e) {
        "number" == typeof e || me++;d || la();this.rb = a;this.re = b;delete this.ad;
      };le.prototype.yd = function (a) {
        this.rb = a;
      };var ne = function (a) {
        this.se = a;this.fd = this.pc = this.rb = this.o = null;
      },
          oe = function (a, b) {
        this.name = a;this.value = b;
      };oe.prototype.toString = function () {
        return this.name;
      };var pe = new oe("SEVERE", 1E3),
          qe = new oe("CONFIG", 700),
          re = new oe("FINE", 500);ne.prototype.getParent = function () {
        return this.o;
      };ne.prototype.yd = function (a) {
        this.rb = a;
      };var se = function (a) {
        if (a.rb) return a.rb;if (a.o) return se(a.o);za("Root logger has no level set.");return null;
      };
      ne.prototype.log = function (a, b, c) {
        if (a.value >= se(this).value) for (p(b) && (b = b()), a = new le(a, String(b), this.se), c && (a.ad = c), c = "log:" + a.re, l.console && (l.console.timeStamp ? l.console.timeStamp(c) : l.console.markTimeline && l.console.markTimeline(c)), l.msWriteProfilerMark && l.msWriteProfilerMark(c), c = this; c;) {
          b = c;var d = a;if (b.fd) for (var e = 0, f; f = b.fd[e]; e++) f(d);c = c.getParent();
        }
      };
      var te = {},
          ue = null,
          ve = function (a) {
        ue || (ue = new ne(""), te[""] = ue, ue.yd(qe));var b;if (!(b = te[a])) {
          b = new ne(a);var c = a.lastIndexOf("."),
              d = a.substr(c + 1),
              c = ve(a.substr(0, c));c.pc || (c.pc = {});c.pc[d] = b;b.o = c;te[a] = b;
        }return b;
      };var L = function (a, b) {
        a && a.log(re, b, void 0);
      };var we = function (a, b, c) {
        if (p(a)) c && (a = r(a, c));else if (a && "function" == typeof a.handleEvent) a = r(a.handleEvent, a);else throw Error("Invalid listener argument");return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
      },
          xe = function (a) {
        var b = null;return new I(function (c, d) {
          b = we(function () {
            c(void 0);
          }, a);-1 == b && d(Error("Failed to schedule timer."));
        }).l(function (a) {
          l.clearTimeout(b);throw a;
        });
      };var ye = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/,
          ze = function (a, b) {
        if (a) {
          a = a.split("&");for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="),
                e,
                f = null;0 <= d ? (e = a[c].substring(0, d), f = a[c].substring(d + 1)) : e = a[c];b(e, f ? decodeURIComponent(f.replace(/\+/g, " ")) : "");
          }
        }
      };var M = function (a) {
        $d.call(this);this.headers = new ee();this.mc = a || null;this.pa = !1;this.lc = this.a = null;this.qb = this.ld = this.Rb = "";this.Ba = this.xc = this.Ob = this.rc = !1;this.fb = 0;this.hc = null;this.td = "";this.jc = this.xe = this.Gd = !1;
      };t(M, $d);var Ae = M.prototype,
          Be = ve("goog.net.XhrIo");Ae.P = Be;var Ce = /^https?$/i,
          De = ["POST", "PUT"];
      M.prototype.send = function (a, b, c, d) {
        if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.Rb + "; newUri=" + a);b = b ? b.toUpperCase() : "GET";this.Rb = a;this.qb = "";this.ld = b;this.rc = !1;this.pa = !0;this.a = this.mc ? this.mc.kb() : rc.kb();this.lc = this.mc ? qc(this.mc) : qc(rc);this.a.onreadystatechange = r(this.qd, this);this.xe && "onprogress" in this.a && (this.a.onprogress = r(function (a) {
          this.pd(a, !0);
        }, this), this.a.upload && (this.a.upload.onprogress = r(this.pd, this)));try {
          L(this.P, Ee(this, "Opening Xhr")), this.xc = !0, this.a.open(b, String(a), !0), this.xc = !1;
        } catch (f) {
          L(this.P, Ee(this, "Error opening Xhr: " + f.message));this.J(5, f);return;
        }a = c || "";var e = this.headers.clone();d && ke(d, function (a, b) {
          e.set(b, a);
        });d = Ia(e.ha());c = l.FormData && a instanceof l.FormData;!Ja(De, b) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");e.forEach(function (a, b) {
          this.a.setRequestHeader(b, a);
        }, this);this.td && (this.a.responseType = this.td);"withCredentials" in this.a && this.a.withCredentials !== this.Gd && (this.a.withCredentials = this.Gd);try {
          Fe(this), 0 < this.fb && (this.jc = Ge(this.a), L(this.P, Ee(this, "Will abort after " + this.fb + "ms if incomplete, xhr2 " + this.jc)), this.jc ? (this.a.timeout = this.fb, this.a.ontimeout = r(this.xb, this)) : this.hc = we(this.xb, this.fb, this)), L(this.P, Ee(this, "Sending request")), this.Ob = !0, this.a.send(a), this.Ob = !1;
        } catch (f) {
          L(this.P, Ee(this, "Send error: " + f.message)), this.J(5, f);
        }
      };var Ge = function (a) {
        return z && A(9) && ga(a.timeout) && void 0 !== a.ontimeout;
      },
          Ha = function (a) {
        return "content-type" == a.toLowerCase();
      };
      M.prototype.xb = function () {
        "undefined" != typeof aa && this.a && (this.qb = "Timed out after " + this.fb + "ms, aborting", L(this.P, Ee(this, this.qb)), this.dispatchEvent("timeout"), this.abort(8));
      };M.prototype.J = function (a, b) {
        this.pa = !1;this.a && (this.Ba = !0, this.a.abort(), this.Ba = !1);this.qb = b;He(this);Ie(this);
      };var He = function (a) {
        a.rc || (a.rc = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
      };
      M.prototype.abort = function () {
        this.a && this.pa && (L(this.P, Ee(this, "Aborting")), this.pa = !1, this.Ba = !0, this.a.abort(), this.Ba = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), Ie(this));
      };M.prototype.Oa = function () {
        this.a && (this.pa && (this.pa = !1, this.Ba = !0, this.a.abort(), this.Ba = !1), Ie(this, !0));M.Pc.Oa.call(this);
      };M.prototype.qd = function () {
        this.isDisposed() || (this.xc || this.Ob || this.Ba ? Je(this) : this.ve());
      };M.prototype.ve = function () {
        Je(this);
      };
      var Je = function (a) {
        if (a.pa && "undefined" != typeof aa) if (a.lc[1] && 4 == Ke(a) && 2 == Le(a)) L(a.P, Ee(a, "Local request error detected and ignored"));else if (a.Ob && 4 == Ke(a)) we(a.qd, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == Ke(a)) {
          L(a.P, Ee(a, "Request complete"));a.pa = !1;try {
            var b = Le(a),
                c;a: switch (b) {case 200:case 201:case 202:case 204:case 206:case 304:case 1223:
                c = !0;break a;default:
                c = !1;}var d;if (!(d = c)) {
              var e;if (e = 0 === b) {
                var f = String(a.Rb).match(ye)[1] || null;if (!f && l.self && l.self.location) var g = l.self.location.protocol,
                    f = g.substr(0, g.length - 1);e = !Ce.test(f ? f.toLowerCase() : "");
              }d = e;
            }if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
              var k;try {
                k = 2 < Ke(a) ? a.a.statusText : "";
              } catch (q) {
                L(a.P, "Can not get status: " + q.message), k = "";
              }a.qb = k + " [" + Le(a) + "]";He(a);
            }
          } finally {
            Ie(a);
          }
        }
      };M.prototype.pd = function (a, b) {
        w("progress" === a.type, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");this.dispatchEvent(Me(a, "progress"));this.dispatchEvent(Me(a, b ? "downloadprogress" : "uploadprogress"));
      };
      var Me = function (a, b) {
        return { type: b, lengthComputable: a.lengthComputable, loaded: a.loaded, total: a.total };
      },
          Ie = function (a, b) {
        if (a.a) {
          Fe(a);var c = a.a,
              d = a.lc[0] ? ba : null;a.a = null;a.lc = null;b || a.dispatchEvent("ready");try {
            c.onreadystatechange = d;
          } catch (e) {
            (a = a.P) && a.log(pe, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
          }
        }
      },
          Fe = function (a) {
        a.a && a.jc && (a.a.ontimeout = null);ga(a.hc) && (l.clearTimeout(a.hc), a.hc = null);
      },
          Ke = function (a) {
        return a.a ? a.a.readyState : 0;
      },
          Le = function (a) {
        try {
          return 2 < Ke(a) ? a.a.status : -1;
        } catch (b) {
          return -1;
        }
      },
          Ne = function (a) {
        try {
          return a.a ? a.a.responseText : "";
        } catch (b) {
          return L(a.P, "Can not get responseText: " + b.message), "";
        }
      },
          Ee = function (a, b) {
        return b + " [" + a.ld + " " + a.Rb + " " + Le(a) + "]";
      };var Oe = function (a, b) {
        this.ga = this.Ia = this.la = "";this.Ua = null;this.Aa = this.ra = "";this.M = this.oe = !1;var c;a instanceof Oe ? (this.M = void 0 !== b ? b : a.M, Pe(this, a.la), c = a.Ia, N(this), this.Ia = c, Qe(this, a.ga), Re(this, a.Ua), Se(this, a.ra), Te(this, a.aa.clone()), a = a.Aa, N(this), this.Aa = a) : a && (c = String(a).match(ye)) ? (this.M = !!b, Pe(this, c[1] || "", !0), a = c[2] || "", N(this), this.Ia = Ue(a), Qe(this, c[3] || "", !0), Re(this, c[4]), Se(this, c[5] || "", !0), Te(this, c[6] || "", !0), a = c[7] || "", N(this), this.Aa = Ue(a)) : (this.M = !!b, this.aa = new O(null, 0, this.M));
      };Oe.prototype.toString = function () {
        var a = [],
            b = this.la;b && a.push(Ve(b, We, !0), ":");var c = this.ga;if (c || "file" == b) a.push("//"), (b = this.Ia) && a.push(Ve(b, We, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.Ua, null != c && a.push(":", String(c));if (c = this.ra) this.ga && "/" != c.charAt(0) && a.push("/"), a.push(Ve(c, "/" == c.charAt(0) ? Xe : Ye, !0));(c = this.aa.toString()) && a.push("?", c);(c = this.Aa) && a.push("#", Ve(c, Ze));return a.join("");
      };
      Oe.prototype.resolve = function (a) {
        var b = this.clone(),
            c = !!a.la;c ? Pe(b, a.la) : c = !!a.Ia;if (c) {
          var d = a.Ia;N(b);b.Ia = d;
        } else c = !!a.ga;c ? Qe(b, a.ga) : c = null != a.Ua;d = a.ra;if (c) Re(b, a.Ua);else if (c = !!a.ra) {
          if ("/" != d.charAt(0)) if (this.ga && !this.ra) d = "/" + d;else {
            var e = b.ra.lastIndexOf("/");-1 != e && (d = b.ra.substr(0, e + 1) + d);
          }e = d;if (".." == e || "." == e) d = "";else if (v(e, "./") || v(e, "/.")) {
            for (var d = 0 == e.lastIndexOf("/", 0), e = e.split("/"), f = [], g = 0; g < e.length;) {
              var k = e[g++];"." == k ? d && g == e.length && f.push("") : ".." == k ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(k), d = !0);
            }d = f.join("/");
          } else d = e;
        }c ? Se(b, d) : c = "" !== a.aa.toString();c ? Te(b, Ue(a.aa.toString())) : c = !!a.Aa;c && (a = a.Aa, N(b), b.Aa = a);return b;
      };Oe.prototype.clone = function () {
        return new Oe(this);
      };
      var Pe = function (a, b, c) {
        N(a);a.la = c ? Ue(b, !0) : b;a.la && (a.la = a.la.replace(/:$/, ""));
      },
          Qe = function (a, b, c) {
        N(a);a.ga = c ? Ue(b, !0) : b;
      },
          Re = function (a, b) {
        N(a);if (b) {
          b = Number(b);if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);a.Ua = b;
        } else a.Ua = null;
      },
          Se = function (a, b, c) {
        N(a);a.ra = c ? Ue(b, !0) : b;
      },
          Te = function (a, b, c) {
        N(a);b instanceof O ? (a.aa = b, a.aa.Mc(a.M)) : (c || (b = Ve(b, $e)), a.aa = new O(b, 0, a.M));
      },
          P = function (a, b, c) {
        N(a);a.aa.set(b, c);
      },
          N = function (a) {
        if (a.oe) throw Error("Tried to modify a read-only Uri");
      };
      Oe.prototype.Mc = function (a) {
        this.M = a;this.aa && this.aa.Mc(a);return this;
      };
      var af = function (a) {
        return a instanceof Oe ? a.clone() : new Oe(a, void 0);
      },
          bf = function (a, b) {
        var c = new Oe(null, void 0);Pe(c, "https");a && Qe(c, a);b && Se(c, b);return c;
      },
          Ue = function (a, b) {
        return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
      },
          Ve = function (a, b, c) {
        return n(a) ? (a = encodeURI(a).replace(b, cf), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
      },
          cf = function (a) {
        a = a.charCodeAt(0);return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
      },
          We = /[#\/\?@]/g,
          Ye = /[\#\?:]/g,
          Xe = /[\#\?]/g,
          $e = /[\#\?@]/g,
          Ze = /#/g,
          O = function (a, b, c) {
        this.i = this.j = null;this.I = a || null;this.M = !!c;
      },
          df = function (a) {
        a.j || (a.j = new ee(), a.i = 0, a.I && ze(a.I, function (b, c) {
          a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
        }));
      },
          ff = function (a) {
        var b = je(a);if ("undefined" == typeof b) throw Error("Keys are undefined");var c = new O(null, 0, void 0);a = ie(a);for (var d = 0; d < b.length; d++) {
          var e = b[d],
              f = a[d];ea(f) ? ef(c, e, f) : c.add(e, f);
        }return c;
      };h = O.prototype;h.dd = function () {
        df(this);return this.i;
      };
      h.add = function (a, b) {
        df(this);this.I = null;a = this.K(a);var c = this.j.get(a);c || this.j.set(a, c = []);c.push(b);this.i = Aa(this.i) + 1;return this;
      };h.remove = function (a) {
        df(this);a = this.K(a);return this.j.jb(a) ? (this.I = null, this.i = Aa(this.i) - this.j.get(a).length, this.j.remove(a)) : !1;
      };h.jb = function (a) {
        df(this);a = this.K(a);return this.j.jb(a);
      };h.ha = function () {
        df(this);for (var a = this.j.T(), b = this.j.ha(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);return c;
      };
      h.T = function (a) {
        df(this);var b = [];if (n(a)) this.jb(a) && (b = Na(b, this.j.get(this.K(a))));else {
          a = this.j.T();for (var c = 0; c < a.length; c++) b = Na(b, a[c]);
        }return b;
      };h.set = function (a, b) {
        df(this);this.I = null;a = this.K(a);this.jb(a) && (this.i = Aa(this.i) - this.j.get(a).length);this.j.set(a, [b]);this.i = Aa(this.i) + 1;return this;
      };h.get = function (a, b) {
        a = a ? this.T(a) : [];return 0 < a.length ? String(a[0]) : b;
      };var ef = function (a, b, c) {
        a.remove(b);0 < c.length && (a.I = null, a.j.set(a.K(b), Pa(c)), a.i = Aa(a.i) + c.length);
      };
      O.prototype.toString = function () {
        if (this.I) return this.I;if (!this.j) return "";for (var a = [], b = this.j.ha(), c = 0; c < b.length; c++) for (var d = b[c], e = encodeURIComponent(String(d)), d = this.T(d), f = 0; f < d.length; f++) {
          var g = e;"" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));a.push(g);
        }return this.I = a.join("&");
      };O.prototype.clone = function () {
        var a = new O();a.I = this.I;this.j && (a.j = this.j.clone(), a.i = this.i);return a;
      };O.prototype.K = function (a) {
        a = String(a);this.M && (a = a.toLowerCase());return a;
      };
      O.prototype.Mc = function (a) {
        a && !this.M && (df(this), this.I = null, this.j.forEach(function (a, c) {
          var b = c.toLowerCase();c != b && (this.remove(c), ef(this, b, a));
        }, this));this.M = a;
      };var hf = function () {
        var a = gf();return z && !!qb && 11 == qb || /Edge\/\d+/.test(a);
      },
          jf = function () {
        return l.window && l.window.location.href || "";
      },
          kf = function (a, b) {
        var c = [],
            d;for (d in a) d in b ? typeof a[d] != typeof b[d] ? c.push(d) : ea(a[d]) ? Va(a[d], b[d]) || c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < kf(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);for (d in b) d in a || c.push(d);return c;
      },
          mf = function () {
        var a;a = gf();a = "Chrome" != lf(a) ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;return a && 30 > a ? !1 : !z || !qb || 9 < qb;
      },
          nf = function (a) {
        (a || l.window).close();
      },
          of = function (a, b, c) {
        var d = Math.floor(1E9 * Math.random()).toString();b = b || 500;c = c || 600;var e = (window.screen.availHeight - c) / 2,
            f = (window.screen.availWidth - b) / 2;b = { width: b, height: c, top: 0 < e ? e : 0, left: 0 < f ? f : 0, location: !0, resizable: !0, statusbar: !0, toolbar: !1 };d && (b.target = d);"Firefox" == lf(gf()) && (a = a || "http://localhost", b.scrollbars = !0);var g;c = a || "about:blank";(d = b) || (d = {});a = window;b = c instanceof B ? c : gc("undefined" != typeof c.href ? c.href : String(c));c = d.target || c.target;e = [];for (g in d) switch (g) {case "width":case "height":case "top":case "left":
            e.push(g + "=" + d[g]);break;case "target":case "noreferrer":
            break;default:
            e.push(g + "=" + (d[g] ? 1 : 0));}g = e.join(",");(y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && a.navigator && a.navigator.standalone && c && "_self" != c ? (g = a.document.createElement("A"), "undefined" != typeof HTMLAnchorElement && "undefined" != typeof Location && "undefined" != typeof Element && (e = g && (g instanceof HTMLAnchorElement || !(g instanceof Location || g instanceof Element)), f = ha(g) ? g.constructor.displayName || g.constructor.name || Object.prototype.toString.call(g) : void 0 === g ? "undefined" : null === g ? "null" : typeof g, w(e, "Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s", f)), b = b instanceof B ? b : gc(b), g.href = dc(b), g.setAttribute("target", c), d.noreferrer && g.setAttribute("rel", "noreferrer"), d = document.createEvent("MouseEvent"), d.initMouseEvent("click", !0, !0, a, 1), g.dispatchEvent(d), g = {}) : d.noreferrer ? (g = a.open("", c, g), d = dc(b), g && (gb && v(d, ";") && (d = "'" + d.replace(/'/g, "%27") + "'"), g.opener = null, a = new ac(), a.fc = "b/12014412, meta tag with sanitized URL", va.test(d) && (-1 != d.indexOf("&") && (d = d.replace(oa, "&amp;")), -1 != d.indexOf("<") && (d = d.replace(pa, "&lt;")), -1 != d.indexOf(">") && (d = d.replace(qa, "&gt;")), -1 != d.indexOf('"') && (d = d.replace(sa, "&quot;")), -1 != d.indexOf("'") && (d = d.replace(ta, "&#39;")), -1 != d.indexOf("\x00") && (d = d.replace(ua, "&#0;"))), d = '<META HTTP-EQUIV="refresh" content="0; url=' + d + '">', Ba(bc(a), "must provide justification"), w(!/^[\s\xa0]*$/.test(bc(a)), "must provide non-empty justification"), g.document.write(Wc(new Vc().ne(d))), g.document.close())) : g = a.open(dc(b), c, g);if (g) try {
          g.focus();
        } catch (k) {}return g;
      },
          pf = function (a) {
        return new I(function (b) {
          var c = function () {
            xe(2E3).then(function () {
              if (!a || a.closed) b();else return c();
            });
          };return c();
        });
      },
          qf = function () {
        var a = null;return new I(function (b) {
          "complete" == l.document.readyState ? b() : (a = function () {
            b();
          }, Sb(window, "load", a));
        }).l(function (b) {
          Ub(window, "load", a);throw b;
        });
      },
          rf = function (a) {
        switch (a || l.navigator && l.navigator.product || "") {case "ReactNative":
            return "ReactNative";default:
            return "undefined" !== typeof l.process ? "Node" : "Browser";}
      },
          sf = function () {
        var a = rf();return "ReactNative" === a || "Node" === a;
      },
          lf = function (a) {
        var b = a.toLowerCase();if (v(b, "opera/") || v(b, "opr/") || v(b, "opios/")) return "Opera";if (v(b, "iemobile")) return "IEMobile";if (v(b, "msie") || v(b, "trident/")) return "IE";if (v(b, "edge/")) return "Edge";if (v(b, "firefox/")) return "Firefox";if (v(b, "silk/")) return "Silk";if (v(b, "blackberry")) return "Blackberry";
        if (v(b, "webos")) return "Webos";if (!v(b, "safari/") || v(b, "chrome/") || v(b, "crios/") || v(b, "android")) {
          if (!v(b, "chrome/") && !v(b, "crios/") || v(b, "edge/")) {
            if (v(b, "android")) return "Android";if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
          } else return "Chrome";
        } else return "Safari";return "Other";
      },
          tf = function (a) {
        var b = rf(void 0);return ("Browser" === b ? lf(gf()) : b) + "/JsCore/" + a;
      },
          gf = function () {
        return l.navigator && l.navigator.userAgent || "";
      },
          uf = function (a) {
        a = a.split(".");for (var b = l, c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];c != a.length && (b = void 0);return b;
      },
          wf = function () {
        var a;if (!(a = !l.location || !l.location.protocol || "http:" != l.location.protocol && "https:" != l.location.protocol || sf())) {
          var b;a: {
            try {
              var c = l.localStorage,
                  d = vf();if (c) {
                c.setItem(d, "1");c.removeItem(d);b = hf() ? !!l.indexedDB : !0;break a;
              }
            } catch (e) {}b = !1;
          }a = !b;
        }return !a;
      },
          xf = function (a) {
        a = a || gf();var b = (a || gf()).toLowerCase();return b.match(/android/) || b.match(/webos/) || b.match(/iphone|ipad|ipod/) || b.match(/blackberry/) || b.match(/windows phone/) || b.match(/iemobile/) || "Firefox" == lf(a) ? !1 : !0;
      },
          yf = function (a) {
        return "undefined" === typeof a ? null : lc(a);
      },
          zf = function (a) {
        if (null !== a) {
          var b;try {
            b = ic(a);
          } catch (c) {
            try {
              b = JSON.parse(a);
            } catch (d) {
              throw c;
            }
          }return b;
        }
      },
          vf = function (a) {
        return a ? a : "" + Math.floor(1E9 * Math.random()).toString();
      },
          Af = function () {
        var a = l.___jsl;if (a && a.H) for (var b in a.H) if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;
      };var Bf;try {
        var Cf = {};Object.defineProperty(Cf, "abcd", { configurable: !0, enumerable: !0, value: 1 });Object.defineProperty(Cf, "abcd", { configurable: !0, enumerable: !0, value: 2 });Bf = 2 == Cf.abcd;
      } catch (a) {
        Bf = !1;
      }
      var Q = function (a, b, c) {
        Bf ? Object.defineProperty(a, b, { configurable: !0, enumerable: !0, value: c }) : a[b] = c;
      },
          Df = function (a, b) {
        if (b) for (var c in b) b.hasOwnProperty(c) && Q(a, c, b[c]);
      },
          Ef = function (a) {
        var b = {},
            c;for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);return b;
      },
          Ff = function (a, b) {
        if (!b || !b.length) return !0;if (!a) return !1;for (var c = 0; c < b.length; c++) {
          var d = a[b[c]];if (void 0 === d || null === d || "" === d) return !1;
        }return !0;
      };var Gf = { Hd: { ub: 500, tb: 600, providerId: "facebook.com" }, Id: { ub: 500, tb: 620, providerId: "github.com" }, Jd: { ub: 515, tb: 680, providerId: "google.com" }, Od: { ub: 485, tb: 705, providerId: "twitter.com" } },
          Hf = function (a) {
        for (var b in Gf) if (Gf[b].providerId == a) return Gf[b];return null;
      };var R = function (a, b) {
        this.code = "auth/" + a;this.message = b || If[a] || "";
      };t(R, Error);R.prototype.G = function () {
        return { name: this.code, code: this.code, message: this.message };
      };
      var If = { "argument-error": "", "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.", "cors-unsupported": "This browser is not supported.", "credential-already-in-use": "This credential is already associated with a different user account.", "custom-token-mismatch": "The custom token corresponds to a different audience.", "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        "email-already-in-use": "The email address is already in use by another account.", "expired-action-code": "The action code has expired. ", "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.", "internal-error": "An internal error has occurred.", "invalid-user-token": "The user's credential is no longer valid. The user must sign in again.", "invalid-auth-event": "An internal error has occurred.", "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
        "invalid-email": "The email address is badly formatted.", "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.", "invalid-credential": "The supplied auth credential is malformed or has expired.", "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.", "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.", "wrong-password": "The password is invalid or the user does not have a password.", "missing-iframe-start": "An internal error has occurred.", "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.", "app-deleted": "This instance of FirebaseApp has been deleted.", "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.", "no-auth-event": "An internal error has occurred.", "no-such-provider": "User was not linked to an account with the given provider.", "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.", "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http or https and web storage must be enabled.',
        "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.", "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.", "provider-already-linked": "User can only be linked to one identity for the given provider.", timeout: "The operation has timed out.", "user-token-expired": "The user's credential is no longer valid. The user must sign in again.", "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
        "user-cancelled": "User did not grant your application the permissions it requested.", "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.", "user-disabled": "The user account has been disabled by an administrator.", "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.", "user-signed-out": "", "weak-password": "The password must be 6 characters long or more.", "web-storage-unsupported": "This browser is not supported." };var Jf = function (a, b, c, d, e) {
        this.va = a;this.za = b || null;this.hb = c || null;this.cc = d || null;this.J = e || null;if (this.hb || this.J) {
          if (this.hb && this.J) throw new R("invalid-auth-event");if (this.hb && !this.cc) throw new R("invalid-auth-event");
        } else throw new R("invalid-auth-event");
      };Jf.prototype.getError = function () {
        return this.J;
      };Jf.prototype.G = function () {
        return { type: this.va, eventId: this.za, urlResponse: this.hb, sessionId: this.cc, error: this.J && this.J.G() };
      };var Kf = function (a) {
        var b = "unauthorized-domain",
            c = void 0,
            d = af(a);a = d.ga;d = d.la;"http" != d && "https" != d ? b = "operation-not-supported-in-this-environment" : c = ma("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a);R.call(this, b, c);
      };t(Kf, R);var Lf = function (a) {
        this.qe = a.sub;la();this.Db = a.email || null;
      };var Mf = function (a, b, c, d) {
        var e = {};ha(c) ? e = c : b && n(c) && n(d) ? e = { oauthToken: c, oauthTokenSecret: d } : !b && n(c) && (e = { accessToken: c });if (b || !e.idToken && !e.accessToken) {
          if (b && e.oauthToken && e.oauthTokenSecret) Q(this, "accessToken", e.oauthToken), Q(this, "secret", e.oauthTokenSecret);else {
            if (b) throw new R("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");throw new R("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
          }
        } else e.idToken && Q(this, "idToken", e.idToken), e.accessToken && Q(this, "accessToken", e.accessToken);Q(this, "provider", a);
      };Mf.prototype.Gb = function (a) {
        return Nf(a, Of(this));
      };Mf.prototype.md = function (a, b) {
        var c = Of(this);c.idToken = b;return Pf(a, c);
      };var Of = function (a) {
        var b = {};a.idToken && (b.id_token = a.idToken);a.accessToken && (b.access_token = a.accessToken);a.secret && (b.oauth_token_secret = a.secret);b.providerId = a.provider;return { postBody: ff(b).toString(), requestUri: wf() ? jf() : "http://localhost" };
      };
      Mf.prototype.G = function () {
        var a = { provider: this.provider };this.idToken && (a.oauthIdToken = this.idToken);this.accessToken && (a.oauthAccessToken = this.accessToken);this.secret && (a.oauthTokenSecret = this.secret);return a;
      };
      var Qf = function (a, b) {
        var c = !!b;b = function () {
          Df(this, { providerId: a, isOAuthProvider: !0 });this.Lc = [];"google.com" == a && this.addScope("profile");
        };c || (b.prototype.addScope = function (a) {
          Ja(this.Lc, a) || this.Lc.push(a);
        });b.prototype.Hb = function () {
          return Pa(this.Lc);
        };b.credential = function (b, e) {
          return new Mf(a, c, b, e);
        };Df(b, { PROVIDER_ID: a });return b;
      },
          Rf = Qf("facebook.com");Rf.prototype.addScope = Rf.prototype.addScope || void 0;var Sf = Qf("github.com");Sf.prototype.addScope = Sf.prototype.addScope || void 0;var Tf = Qf("google.com");
      Tf.prototype.addScope = Tf.prototype.addScope || void 0;Tf.credential = function (a, b) {
        if (!a && !b) throw new R("argument-error", "credential failed: must provide the ID token and/or the access token.");return new Mf("google.com", !1, ha(a) ? a : { idToken: a || null, accessToken: b || null });
      };var Uf = Qf("twitter.com", !0),
          Vf = function (a, b) {
        this.Db = a;this.Dc = b;Q(this, "provider", "password");
      };Vf.prototype.Gb = function (a) {
        return S(a, Wf, { email: this.Db, password: this.Dc });
      };
      Vf.prototype.md = function (a, b) {
        return S(a, Xf, { idToken: b, email: this.Db, password: this.Dc });
      };Vf.prototype.G = function () {
        return { email: this.Db, password: this.Dc };
      };var Yf = function () {
        Df(this, { providerId: "password", isOAuthProvider: !1 });
      };Df(Yf, { PROVIDER_ID: "password" });
      var Zf = { Me: Yf, Hd: Rf, Jd: Tf, Id: Sf, Od: Uf },
          $f = function (a) {
        var b = a && a.providerId;if (!b) return null;var c = a && a.oauthAccessToken,
            d = a && a.oauthTokenSecret;a = a && a.oauthIdToken;for (var e in Zf) if (Zf[e].PROVIDER_ID == b) try {
          return Zf[e].credential({ accessToken: c, idToken: a, oauthToken: c, oauthTokenSecret: d });
        } catch (f) {
          break;
        }return null;
      };var ag = function (a, b, c, d) {
        R.call(this, a, d);Q(this, "email", b);Q(this, "credential", c);
      };t(ag, R);ag.prototype.G = function () {
        var a = { code: this.code, message: this.message, email: this.email },
            b = this.credential && this.credential.G();b && (Ya(a, b), a.providerId = b.provider, delete a.provider);return a;
      };var bg = function (a) {
        if (a.code) {
          var b = a.code || "";0 == b.indexOf("auth/") && (b = b.substring(5));return a.email ? new ag(b, a.email, $f(a), a.message) : new R(b, a.message || void 0);
        }return null;
      };var cg = function (a) {
        this.Le = a;
      };t(cg, pc);cg.prototype.kb = function () {
        return new this.Le();
      };cg.prototype.Qb = function () {
        return {};
      };
      var T = function (a, b, c) {
        var d;d = "Node" == rf();d = l.XMLHttpRequest || d && firebase.INTERNAL.node && firebase.INTERNAL.node.XMLHttpRequest;if (!d) throw new R("internal-error", "The XMLHttpRequest compatibility library was not found.");this.v = a;a = b || {};this.Ae = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";this.Be = a.secureTokenTimeout || 1E4;this.wd = Wa(a.secureTokenHeaders || dg);this.$d = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.ae = a.firebaseTimeout || 1E4;this.cd = Wa(a.firebaseHeaders || eg);c && (this.cd["X-Client-Version"] = c, this.wd["X-Client-Version"] = c);this.Sd = new uc();this.Ke = new cg(d);
      },
          fg,
          dg = { "Content-Type": "application/x-www-form-urlencoded" },
          eg = { "Content-Type": "application/json" },
          hg = function (a, b, c, d, e, f, g) {
        mf() ? a = r(a.De, a) : (fg || (fg = new I(function (a, b) {
          gg(a, b);
        })), a = r(a.Ce, a));a(b, c, d, e, f, g);
      };
      T.prototype.De = function (a, b, c, d, e, f) {
        var g = "Node" == rf(),
            k = sf() ? g ? new M(this.Ke) : new M() : new M(this.Sd),
            q;f && (k.fb = Math.max(0, f), q = setTimeout(function () {
          k.dispatchEvent("timeout");
        }, f));k.listen("complete", function () {
          q && clearTimeout(q);var a = null;try {
            var c;c = this.a ? ic(this.a.responseText) : void 0;a = c || null;
          } catch (Pi) {
            try {
              a = JSON.parse(Ne(this)) || null;
            } catch (Qi) {
              a = null;
            }
          }b && b(a);
        });Tb(k, "ready", function () {
          q && clearTimeout(q);this.ya || (this.ya = !0, this.Oa());
        });Tb(k, "timeout", function () {
          q && clearTimeout(q);this.ya || (this.ya = !0, this.Oa());b && b(null);
        });k.send(a, c, d, e);
      };var Pd = "__fcb" + Math.floor(1E6 * Math.random()).toString(),
          gg = function (a, b) {
        ((window.gapi || {}).client || {}).request ? a() : (l[Pd] = function () {
          ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
        }, Rd(function () {
          b(Error("CORS_UNSUPPORTED"));
        }));
      };
      T.prototype.Ce = function (a, b, c, d, e) {
        var f = this;fg.then(function () {
          window.gapi.client.setApiKey(f.v);var g = window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({ path: a, method: c, body: d, headers: e, authType: "none", callback: function (a) {
              window.gapi.auth.setToken(g);b && b(a);
            } });
        }).l(function (a) {
          b && b({ error: { message: a && a.message || "CORS_UNSUPPORTED" } });
        });
      };
      var jg = function (a, b) {
        return new I(function (c, d) {
          "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? hg(a, a.Ae + "?key=" + encodeURIComponent(a.v), function (a) {
            a ? a.error ? d(ig(a)) : a.access_token && a.refresh_token ? c(a) : d(new R("internal-error")) : d(new R("network-request-failed"));
          }, "POST", ff(b).toString(), a.wd, a.Be) : d(new R("internal-error"));
        });
      },
          kg = function (a) {
        var b = {},
            c;for (c in a) null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);return lc(b);
      },
          lg = function (a, b, c, d, e) {
        var f = a.$d + b + "?key=" + encodeURIComponent(a.v);e && (f += "&cb=" + la().toString());return new I(function (b, e) {
          hg(a, f, function (a) {
            a ? a.error ? e(ig(a)) : b(a) : e(new R("network-request-failed"));
          }, c, kg(d), a.cd, a.ae);
        });
      },
          mg = function (a) {
        if (!Zb.test(a.email)) throw new R("invalid-email");
      },
          ng = function (a) {
        "email" in a && mg(a);
      },
          pg = function (a, b) {
        var c = wf() ? jf() : "http://localhost";return S(a, og, { identifier: b, continueUri: c }).then(function (a) {
          return a.allProviders || [];
        });
      },
          rg = function (a) {
        return S(a, qg, {}).then(function (a) {
          return a.authorizedDomains || [];
        });
      },
          sg = function (a) {
        if (!a.idToken) throw new R("internal-error");
      };T.prototype.signInAnonymously = function () {
        return S(this, tg, {});
      };T.prototype.updateEmail = function (a, b) {
        return S(this, ug, { idToken: a, email: b });
      };T.prototype.updatePassword = function (a, b) {
        return S(this, Xf, { idToken: a, password: b });
      };var vg = { displayName: "DISPLAY_NAME", photoUrl: "PHOTO_URL" };
      T.prototype.updateProfile = function (a, b) {
        var c = { idToken: a },
            d = [];Ra(vg, function (a, f) {
          var e = b[f];null === e ? d.push(a) : f in b && (c[f] = e);
        });d.length && (c.deleteAttribute = d);return S(this, ug, c);
      };T.prototype.sendPasswordResetEmail = function (a) {
        return S(this, wg, { requestType: "PASSWORD_RESET", email: a });
      };T.prototype.sendEmailVerification = function (a) {
        return S(this, xg, { requestType: "VERIFY_EMAIL", idToken: a });
      };
      var zg = function (a, b, c) {
        return S(a, yg, { idToken: b, deleteProvider: c });
      },
          Ag = function (a) {
        if (!a.requestUri || !a.sessionId && !a.postBody) throw new R("internal-error");
      },
          Bg = function (a) {
        var b = null;a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = bg(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = bg(a)) : "EMAIL_EXISTS" == a.errorMessage && (a.code = "email-already-in-use", b = bg(a));if (b) throw b;if (!a.idToken) throw new R("internal-error");
      },
          Nf = function (a, b) {
        b.returnIdpCredential = !0;return S(a, Cg, b);
      },
          Pf = function (a, b) {
        b.returnIdpCredential = !0;return S(a, Dg, b);
      },
          Eg = function (a) {
        if (!a.oobCode) throw new R("invalid-action-code");
      };T.prototype.confirmPasswordReset = function (a, b) {
        return S(this, Fg, { oobCode: a, newPassword: b });
      };T.prototype.checkActionCode = function (a) {
        return S(this, Gg, { oobCode: a });
      };T.prototype.applyActionCode = function (a) {
        return S(this, Hg, { oobCode: a });
      };
      var Hg = { endpoint: "setAccountInfo", D: Eg, cb: "email" },
          Gg = { endpoint: "resetPassword", D: Eg, ta: function (a) {
          if (!Zb.test(a.email)) throw new R("internal-error");
        } },
          Ig = { endpoint: "signupNewUser", D: function (a) {
          mg(a);if (!a.password) throw new R("weak-password");
        }, ta: sg, ua: !0 },
          og = { endpoint: "createAuthUri" },
          Jg = { endpoint: "deleteAccount", ab: ["idToken"] },
          yg = { endpoint: "setAccountInfo", ab: ["idToken", "deleteProvider"], D: function (a) {
          if (!ea(a.deleteProvider)) throw new R("internal-error");
        } },
          Kg = { endpoint: "getAccountInfo" },
          xg = { endpoint: "getOobConfirmationCode", ab: ["idToken", "requestType"], D: function (a) {
          if ("VERIFY_EMAIL" != a.requestType) throw new R("internal-error");
        }, cb: "email" },
          wg = { endpoint: "getOobConfirmationCode", ab: ["requestType"], D: function (a) {
          if ("PASSWORD_RESET" != a.requestType) throw new R("internal-error");mg(a);
        }, cb: "email" },
          qg = { Rd: !0, endpoint: "getProjectConfig", je: "GET" },
          Fg = { endpoint: "resetPassword", D: Eg, cb: "email" },
          ug = { endpoint: "setAccountInfo", ab: ["idToken"], D: ng, ua: !0 },
          Xf = { endpoint: "setAccountInfo", ab: ["idToken"],
        D: function (a) {
          ng(a);if (!a.password) throw new R("weak-password");
        }, ta: sg, ua: !0 },
          tg = { endpoint: "signupNewUser", ta: sg, ua: !0 },
          Cg = { endpoint: "verifyAssertion", D: Ag, ta: Bg, ua: !0 },
          Dg = { endpoint: "verifyAssertion", D: function (a) {
          Ag(a);if (!a.idToken) throw new R("internal-error");
        }, ta: Bg, ua: !0 },
          Lg = { endpoint: "verifyCustomToken", D: function (a) {
          if (!a.token) throw new R("invalid-custom-token");
        }, ta: sg, ua: !0 },
          Wf = { endpoint: "verifyPassword", D: function (a) {
          mg(a);if (!a.password) throw new R("wrong-password");
        }, ta: sg, ua: !0 },
          S = function (a, b, c) {
        if (!Ff(c, b.ab)) return K(new R("internal-error"));var d = b.je || "POST",
            e;return J(c).then(b.D).then(function () {
          b.ua && (c.returnSecureToken = !0);return lg(a, b.endpoint, d, c, b.Rd || !1);
        }).then(function (a) {
          return e = a;
        }).then(b.ta).then(function () {
          if (!b.cb) return e;if (!(b.cb in e)) throw new R("internal-error");return e[b.cb];
        });
      },
          ig = function (a) {
        var b, c;c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";var d = { keyInvalid: "invalid-api-key", ipRefererBlocked: "app-not-authorized" };if (c = d[c] ? new R(d[c]) : null) return c;c = a.error && a.error.message || "";d = { INVALID_CUSTOM_TOKEN: "invalid-custom-token", CREDENTIAL_MISMATCH: "custom-token-mismatch", MISSING_CUSTOM_TOKEN: "internal-error", INVALID_IDENTIFIER: "invalid-email", MISSING_CONTINUE_URI: "internal-error", INVALID_EMAIL: "invalid-email", INVALID_PASSWORD: "wrong-password", USER_DISABLED: "user-disabled", MISSING_PASSWORD: "internal-error", EMAIL_EXISTS: "email-already-in-use", PASSWORD_LOGIN_DISABLED: "operation-not-allowed", INVALID_IDP_RESPONSE: "invalid-credential",
          FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use", EMAIL_NOT_FOUND: "user-not-found", EXPIRED_OOB_CODE: "expired-action-code", INVALID_OOB_CODE: "invalid-action-code", MISSING_OOB_CODE: "internal-error", CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login", INVALID_ID_TOKEN: "invalid-user-token", TOKEN_EXPIRED: "user-token-expired", USER_NOT_FOUND: "user-token-expired", CORS_UNSUPPORTED: "cors-unsupported", TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests", WEAK_PASSWORD: "weak-password", OPERATION_NOT_ALLOWED: "operation-not-allowed",
          USER_CANCELLED: "user-cancelled" };b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;for (var e in d) if (0 === c.indexOf(e)) return new R(d[e], b);!b && a && (b = yf(a));return new R("internal-error", b);
      };var Mg = function (a) {
        this.R = a;
      };Mg.prototype.value = function () {
        return this.R;
      };Mg.prototype.zd = function (a) {
        this.R.style = a;return this;
      };var Ng = function (a) {
        this.R = a || {};
      };Ng.prototype.value = function () {
        return this.R;
      };Ng.prototype.zd = function (a) {
        this.R.style = a;return this;
      };var Pg = function (a) {
        this.Je = a;this.wc = null;this.od = Og(this);
      };Pg.prototype.Bc = function () {
        return this.od;
      };
      var Qg = function (a) {
        var b = new Ng();b.R.where = document.body;b.R.url = a.Je;b.R.messageHandlersFilter = uf("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER");b.R.attributes = b.R.attributes || {};new Mg(b.R.attributes).zd({ position: "absolute", top: "-100px", width: "1px", height: "1px" });b.R.dontclear = !0;return b;
      },
          Og = function (a) {
        return Rg().then(function () {
          return new I(function (b, c) {
            uf("gapi.iframes.getContext")().open(Qg(a).value(), function (d) {
              a.wc = d;a.wc.restyle({ setHideOnLeave: !1 });var e = setTimeout(function () {
                c(Error("Network Error"));
              }, 5E3),
                  f = function () {
                clearTimeout(e);b();
              };d.ping(f).then(f, function () {
                c(Error("Network Error"));
              });
            });
          });
        });
      },
          Sg = function (a, b) {
        a.od.then(function () {
          a.wc.register("authEvent", b, uf("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
        });
      },
          Tg = "__iframefcb" + Math.floor(1E6 * Math.random()).toString(),
          Rg = function () {
        return new I(function (a, b) {
          var c = function () {
            Af();uf("gapi.load")("gapi.iframes", { callback: a, ontimeout: function () {
                Af();b(Error("Network Error"));
              }, timeout: 3E3 });
          };uf("gapi.iframes.Iframe") ? a() : uf("gapi.load") ? c() : (l[Tg] = function () {
            uf("gapi.load") ? c() : b(Error("Network Error"));
          }, J(Od("https://apis.google.com/js/api.js?onload=" + Tg)).l(function () {
            b(Error("Network Error"));
          }));
        });
      };var Vg = function (a, b, c, d) {
        this.X = a;this.v = b;this.ea = c;d = this.xa = d || null;a = bf(a, "/__/auth/iframe");P(a, "apiKey", b);P(a, "appName", c);d && P(a, "v", d);this.ke = a.toString();this.hd = new Pg(this.ke);this.zb = [];Ug(this);
      };Vg.prototype.Bc = function () {
        return this.hd.Bc();
      };
      var Wg = function (a, b, c, d, e, f, g, k, q) {
        a = bf(a, "/__/auth/handler");P(a, "apiKey", b);P(a, "appName", c);P(a, "authType", d);P(a, "providerId", e);f && f.length && P(a, "scopes", f.join(","));g && P(a, "redirectUrl", g);k && P(a, "eventId", k);q && P(a, "v", q);return a.toString();
      },
          Ug = function (a) {
        Sg(a.hd, function (b) {
          var c = {};if (b && b.authEvent) {
            var d = !1;b = b.authEvent || {};if (b.type) {
              if (c = b.error) var e = (c = b.error) && (c.name || c.code),
                  c = e ? new R(e.substring(5), c.message) : null;b = new Jf(b.type, b.eventId, b.urlResponse, b.sessionId, c);
            } else b = null;for (c = 0; c < a.zb.length; c++) d = a.zb[c](b) || d;c = {};c.status = d ? "ACK" : "ERROR";return J(c);
          }c.status = "ERROR";return J(c);
        });
      },
          Xg = function (a, b) {
        Ma(a.zb, function (a) {
          return a == b;
        });
      };var Yg = function (a) {
        this.u = a || firebase.INTERNAL.reactNative && firebase.INTERNAL.reactNative.AsyncStorage;if (!this.u) throw new R("internal-error", "The React Native compatibility library was not found.");
      };h = Yg.prototype;h.get = function (a) {
        return J(this.u.getItem(a)).then(function (a) {
          return a && zf(a);
        });
      };h.set = function (a, b) {
        return J(this.u.setItem(a, yf(b)));
      };h.remove = function (a) {
        return J(this.u.removeItem(a));
      };h.Ka = function () {};h.Za = function () {};var Zg = function () {
        this.u = {};
      };h = Zg.prototype;h.get = function (a) {
        return J(this.u[a]);
      };h.set = function (a, b) {
        this.u[a] = b;return J();
      };h.remove = function (a) {
        delete this.u[a];return J();
      };h.Ka = function () {};h.Za = function () {};var ah = function () {
        if (!$g()) {
          if ("Node" == rf()) throw new R("internal-error", "The LocalStorage compatibility library was not found.");throw new R("web-storage-unsupported");
        }this.u = l.localStorage || firebase.INTERNAL.node.localStorage;
      },
          $g = function () {
        var a = "Node" == rf(),
            a = l.localStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.localStorage;if (!a) return !1;try {
          return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
        } catch (b) {
          return !1;
        }
      };h = ah.prototype;
      h.get = function (a) {
        var b = this;return J().then(function () {
          var c = b.u.getItem(a);return zf(c);
        });
      };h.set = function (a, b) {
        var c = this;return J().then(function () {
          var d = yf(b);null === d ? c.remove(a) : c.u.setItem(a, d);
        });
      };h.remove = function (a) {
        var b = this;return J().then(function () {
          b.u.removeItem(a);
        });
      };h.Ka = function (a) {
        l.window && Lb(l.window, "storage", a);
      };h.Za = function (a) {
        l.window && Ub(l.window, "storage", a);
      };var bh = function () {
        this.u = {};
      };h = bh.prototype;h.get = function () {
        return J(null);
      };h.set = function () {
        return J();
      };h.remove = function () {
        return J();
      };h.Ka = function () {};h.Za = function () {};var dh = function () {
        if (!ch()) {
          if ("Node" == rf()) throw new R("internal-error", "The SessionStorage compatibility library was not found.");throw new R("web-storage-unsupported");
        }this.u = l.sessionStorage || firebase.INTERNAL.node.sessionStorage;
      },
          ch = function () {
        var a = "Node" == rf(),
            a = l.sessionStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.sessionStorage;if (!a) return !1;try {
          return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
        } catch (b) {
          return !1;
        }
      };h = dh.prototype;
      h.get = function (a) {
        var b = this;return J().then(function () {
          var c = b.u.getItem(a);return zf(c);
        });
      };h.set = function (a, b) {
        var c = this;return J().then(function () {
          var d = yf(b);null === d ? c.remove(a) : c.u.setItem(a, d);
        });
      };h.remove = function (a) {
        var b = this;return J().then(function () {
          b.u.removeItem(a);
        });
      };h.Ka = function () {};h.Za = function () {};var eh = function (a, b, c, d, e, f) {
        if (!window.indexedDB) throw new R("web-storage-unsupported");this.Ud = a;this.Ac = b;this.qc = c;this.Fd = d;this.na = e;this.O = {};this.vb = [];this.sb = 0;this.le = f || l.indexedDB;
      },
          fh,
          gh = function (a) {
        return new I(function (b, c) {
          var d = a.le.open(a.Ud, a.na);d.onerror = function (a) {
            c(Error(a.target.errorCode));
          };d.onupgradeneeded = function (b) {
            b = b.target.result;try {
              b.createObjectStore(a.Ac, { keyPath: a.qc });
            } catch (f) {
              c(f);
            }
          };d.onsuccess = function (a) {
            b(a.target.result);
          };
        });
      },
          hh = function (a) {
        a.jd || (a.jd = gh(a));return a.jd;
      },
          ih = function (a, b) {
        return b.objectStore(a.Ac);
      },
          jh = function (a, b, c) {
        return b.transaction([a.Ac], c ? "readwrite" : "readonly");
      },
          kh = function (a) {
        return new I(function (b, c) {
          a.onsuccess = function (a) {
            a && a.target ? b(a.target.result) : b();
          };a.onerror = function (a) {
            c(Error(a.target.errorCode));
          };
        });
      };h = eh.prototype;
      h.set = function (a, b) {
        var c = !1,
            d,
            e = this;return xd(hh(this).then(function (b) {
          d = b;b = ih(e, jh(e, d, !0));return kh(b.get(a));
        }).then(function (f) {
          var g = ih(e, jh(e, d, !0));if (f) return f.value = b, kh(g.put(f));e.sb++;c = !0;f = {};f[e.qc] = a;f[e.Fd] = b;return kh(g.add(f));
        }).then(function () {
          e.O[a] = b;
        }), function () {
          c && e.sb--;
        });
      };h.get = function (a) {
        var b = this;return hh(this).then(function (c) {
          return kh(ih(b, jh(b, c, !1)).get(a));
        }).then(function (a) {
          return a && a.value;
        });
      };
      h.remove = function (a) {
        var b = !1,
            c = this;return xd(hh(this).then(function (d) {
          b = !0;c.sb++;return kh(ih(c, jh(c, d, !0))["delete"](a));
        }).then(function () {
          delete c.O[a];
        }), function () {
          b && c.sb--;
        });
      };
      h.Fe = function () {
        var a = this;return hh(this).then(function (b) {
          var c = ih(a, jh(a, b, !1));return c.getAll ? kh(c.getAll()) : new I(function (a, b) {
            var d = [],
                e = c.openCursor();e.onsuccess = function (b) {
              (b = b.target.result) ? (d.push(b.value), b["continue"]()) : a(d);
            };e.onerror = function (a) {
              b(Error(a.target.errorCode));
            };
          });
        }).then(function (b) {
          var c = {},
              d = [];if (0 == a.sb) {
            for (d = 0; d < b.length; d++) c[b[d][a.qc]] = b[d][a.Fd];d = kf(a.O, c);a.O = c;
          }return d;
        });
      };h.Ka = function (a) {
        0 == this.vb.length && this.Oc();this.vb.push(a);
      };
      h.Za = function (a) {
        Ma(this.vb, function (b) {
          return b == a;
        });0 == this.vb.length && this.ec();
      };h.Oc = function () {
        var a = this;this.ec();var b = function () {
          a.Fc = xe(800).then(r(a.Fe, a)).then(function (b) {
            0 < b.length && x(a.vb, function (a) {
              a(b);
            });
          }).then(b).l(function (a) {
            "STOP_EVENT" != a.message && b();
          });return a.Fc;
        };b();
      };h.ec = function () {
        this.Fc && this.Fc.cancel("STOP_EVENT");
      };var oh = function () {
        this.$c = { Browser: lh, Node: mh, ReactNative: nh }[rf()];
      },
          ph,
          lh = { V: ah, Qc: dh },
          mh = { V: ah, Qc: dh },
          nh = { V: Yg, Qc: bh };var qh = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" "),
          U = function (a, b) {
        return { name: a || "", ca: "a valid string", optional: !!b, da: n };
      },
          rh = function (a) {
        return { name: a || "", ca: "a valid object", optional: !1, da: ha };
      },
          sh = function (a, b) {
        return { name: a || "", ca: "a function", optional: !!b, da: p };
      },
          th = function () {
        return { name: "", ca: "null", optional: !1, da: da };
      },
          uh = function () {
        return { name: "credential", ca: "a valid credential", optional: !1, da: function (a) {
            return !(!a || !a.Gb);
          } };
      },
          vh = function () {
        return { name: "authProvider",
          ca: "a valid Auth provider", optional: !1, da: function (a) {
            return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
          } };
      },
          wh = function (a, b, c, d) {
        return { name: c || "", ca: a.ca + " or " + b.ca, optional: !!d, da: function (c) {
            return a.da(c) || b.da(c);
          } };
      };var yh = function (a, b) {
        for (var c in b) {
          var d = b[c].name;a[d] = xh(d, a[c], b[c].b);
        }
      },
          V = function (a, b, c, d) {
        a[b] = xh(b, c, d);
      },
          xh = function (a, b, c) {
        if (!c) return b;var d = zh(a);a = function () {
          var a = Array.prototype.slice.call(arguments),
              e;a: {
            e = Array.prototype.slice.call(a);var k;k = 0;for (var q = !1, ra = 0; ra < c.length; ra++) if (c[ra].optional) q = !0;else {
              if (q) throw new R("internal-error", "Argument validator encountered a required argument after an optional argument.");k++;
            }q = c.length;if (e.length < k || q < e.length) e = "Expected " + (k == q ? 1 == k ? "1 argument" : k + " arguments" : k + "-" + q + " arguments") + " but got " + e.length + ".";else {
              for (k = 0; k < e.length; k++) if (q = c[k].optional && void 0 === e[k], !c[k].da(e[k]) && !q) {
                e = c[k];if (0 > k || k >= qh.length) throw new R("internal-error", "Argument validator received an unsupported number of arguments.");e = qh[k] + " argument " + (e.name ? '"' + e.name + '" ' : "") + "must be " + e.ca + ".";break a;
              }e = null;
            }
          }if (e) throw new R("argument-error", d + " failed: " + e);return b.apply(this, a);
        };for (var e in b) a[e] = b[e];for (e in b.prototype) a.prototype[e] = b.prototype[e];return a;
      },
          zh = function (a) {
        a = a.split(".");return a[a.length - 1];
      };var Ah = function (a, b, c, d) {
        this.te = a;this.xd = b;this.ze = c;this.eb = d;this.N = {};ph || (ph = new oh());a = ph;try {
          var e;hf() ? (fh || (fh = new eh("firebaseLocalStorageDb", "firebaseLocalStorage", "fbase_key", "value", 1)), e = fh) : e = new a.$c.V();this.Ta = e;
        } catch (f) {
          this.Ta = new Zg(), this.eb = !0;
        }try {
          this.gc = new a.$c.Qc();
        } catch (f) {
          this.gc = new Zg();
        }this.Ad = r(this.Bd, this);this.O = {};
      },
          Bh,
          Ch = function () {
        Bh || (Bh = new Ah("firebase", ":", "Safari" == lf(gf()) && l.window && l.window != l.window.top ? !0 : !1, xf()));return Bh;
      };h = Ah.prototype;
      h.K = function (a, b) {
        return this.te + this.xd + a.name + (b ? this.xd + b : "");
      };h.get = function (a, b) {
        return (a.V ? this.Ta : this.gc).get(this.K(a, b));
      };h.remove = function (a, b) {
        b = this.K(a, b);a.V && !this.eb && (this.O[b] = null);return (a.V ? this.Ta : this.gc).remove(b);
      };h.set = function (a, b, c) {
        var d = this.K(a, c),
            e = this,
            f = a.V ? this.Ta : this.gc;return f.set(d, b).then(function () {
          return f.get(d);
        }).then(function (b) {
          a.V && !this.eb && (e.O[d] = b);
        });
      };
      h.addListener = function (a, b, c) {
        a = this.K(a, b);this.eb || (this.O[a] = l.localStorage.getItem(a));Ua(this.N) && this.Oc();this.N[a] || (this.N[a] = []);this.N[a].push(c);
      };h.removeListener = function (a, b, c) {
        a = this.K(a, b);this.N[a] && (Ma(this.N[a], function (a) {
          return a == c;
        }), 0 == this.N[a].length && delete this.N[a]);Ua(this.N) && this.ec();
      };h.Oc = function () {
        this.Ta.Ka(this.Ad);this.eb || Dh(this);
      };
      var Dh = function (a) {
        Eh(a);a.zc = setInterval(function () {
          for (var b in a.N) {
            var c = l.localStorage.getItem(b);c != a.O[b] && (a.O[b] = c, c = new Ab({ type: "storage", key: b, target: window, oldValue: a.O[b], newValue: c }), a.Bd(c));
          }
        }, 1E3);
      },
          Eh = function (a) {
        a.zc && (clearInterval(a.zc), a.zc = null);
      };Ah.prototype.ec = function () {
        this.Ta.Za(this.Ad);this.eb || Eh(this);
      };
      Ah.prototype.Bd = function (a) {
        if (a && a.ce) {
          var b = a.lb.key;if (this.ze) {
            var c = l.localStorage.getItem(b);a = a.lb.newValue;a != c && (a ? l.localStorage.setItem(b, a) : a || l.localStorage.removeItem(b));
          }this.O[b] = l.localStorage.getItem(b);this.Vc(b);
        } else x(a, r(this.Vc, this));
      };Ah.prototype.Vc = function (a) {
        this.N[a] && x(this.N[a], function (a) {
          a();
        });
      };var Fh = function (a) {
        this.B = a;this.A = Ch();
      },
          Gh = { name: "pendingRedirect", V: !1 },
          Hh = function (a) {
        return a.A.set(Gh, "pending", a.B);
      },
          Ih = function (a) {
        return a.A.remove(Gh, a.B);
      },
          Jh = function (a) {
        return a.A.get(Gh, a.B).then(function (a) {
          return "pending" == a;
        });
      };var Mh = function (a, b, c) {
        var d = this,
            e = (this.xa = firebase.SDK_VERSION || null) ? tf(this.xa) : null;this.f = new T(b, null, e);this.qa = null;this.X = a;this.v = b;this.ea = c;this.wb = [];this.Pb = !1;this.Rc = r(this.de, this);this.Wa = new Kh(this);this.rd = new Lh(this);this.Ec = new Fh(this.v + ":" + this.ea);this.gb = {};this.gb.unknown = this.Wa;this.gb.signInViaRedirect = this.Wa;this.gb.linkViaRedirect = this.Wa;this.gb.signInViaPopup = this.rd;this.gb.linkViaPopup = this.rd;this.$b = this.bb = null;this.Ub = new I(function (a, b) {
          d.bb = a;d.$b = b;
        });
      };
      Mh.prototype.reset = function () {
        var a = this;this.qa = null;this.Ub.cancel();this.Pb = !1;this.$b = this.bb = null;this.Mb && Xg(this.Mb, this.Rc);this.Ub = new I(function (b, c) {
          a.bb = b;a.$b = c;
        });
      };
      var Nh = function (a) {
        var b = jf();return rg(a).then(function (a) {
          a: {
            for (var c = af(b).ga, e = 0; e < a.length; e++) {
              var f;var g = a[e];f = c;var k = Mc(g);k ? f = (f = Mc(f)) ? k.Eb(f) : !1 : (k = g.split(".").join("\\."), f = new RegExp("^(.+\\." + k + "|" + k + ")$", "i").test(f));if (f) {
                a = !0;break a;
              }
            }a = !1;
          }if (!a) throw new Kf(jf());
        });
      },
          Oh = function (a) {
        a.Pb || (a.Pb = !0, qf().then(function () {
          a.Mb = new Vg(a.X, a.v, a.ea, a.xa);a.Mb.Bc().l(function () {
            a.$b(new R("network-request-failed"));a.reset();
          });a.Mb.zb.push(a.Rc);
        }));return a.Ub;
      };
      Mh.prototype.subscribe = function (a) {
        Ja(this.wb, a) || this.wb.push(a);if (!this.Pb) {
          var b = this,
              c = function () {
            var a = gf(),
                c;(c = xf(a)) || (a = a || gf(), c = "Safari" == lf(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0);c ? Ph(b.Wa) : Oh(b);
          };Jh(this.Ec).then(function (a) {
            a ? Ih(b.Ec).then(function () {
              Oh(b);
            }) : c();
          }).l(function () {
            c();
          });
        }
      };Mh.prototype.unsubscribe = function (a) {
        Ma(this.wb, function (b) {
          return b == a;
        });
      };
      Mh.prototype.de = function (a) {
        if (!a) throw new R("invalid-auth-event");this.bb && (this.bb(), this.bb = null);for (var b = !1, c = 0; c < this.wb.length; c++) {
          var d = this.wb[c];if (d.Wc(a.va, a.za)) {
            (b = this.gb[a.va]) && b.sd(a, d);b = !0;break;
          }
        }Ph(this.Wa);return b;
      };Mh.prototype.getRedirectResult = function () {
        return this.Wa.getRedirectResult();
      };
      var Rh = function (a, b, c, d, e, f) {
        if (!b) return K(new R("popup-blocked"));if (f) return Oh(a), J();a.qa || (a.qa = Nh(a.f));return a.qa.then(function () {
          return Oh(a);
        }).then(function () {
          Qh(d);var f = Wg(a.X, a.v, a.ea, c, d.providerId, d.Hb(), null, e, a.xa);(b || l.window).location.href = dc(gc(f));
        }).l(function (b) {
          "auth/network-request-failed" == b.code && (a.qa = null);throw b;
        });
      },
          Sh = function (a, b, c, d) {
        a.qa || (a.qa = Nh(a.f));return a.qa.then(function () {
          Qh(c);var e = Wg(a.X, a.v, a.ea, b, c.providerId, c.Hb(), jf(), d, a.xa);Hh(a.Ec).then(function () {
            l.window.location.href = dc(gc(e));
          });
        });
      },
          Th = function (a, b, c, d, e) {
        var f = new R("popup-closed-by-user");return a.Ub.l(function () {}).then(function () {
          return pf(d);
        }).then(function () {
          return xe(2E3).then(function () {
            b.Ha(c, null, f, e);
          });
        });
      },
          Qh = function (a) {
        if (!a.isOAuthProvider) throw new R("invalid-oauth-provider");
      },
          Uh = {},
          Vh = function (a, b, c) {
        var d = b + ":" + c;Uh[d] || (Uh[d] = new Mh(a, b, c));return Uh[d];
      },
          Kh = function (a) {
        this.A = a;this.Jc = this.Zb = this.Xa = this.W = null;this.Ic = !1;
      };
      Kh.prototype.sd = function (a, b) {
        if (!a) return K(new R("invalid-auth-event"));this.Ic = !0;var c = a.va,
            d = a.za;"unknown" == c ? (this.W || Wh(this, !1, null, null), a = J()) : a = a.J ? this.Gc(a, b) : b.mb(c, d) ? this.Hc(a, b) : K(new R("invalid-auth-event"));return a;
      };var Ph = function (a) {
        a.Ic || (a.Ic = !0, Wh(a, !1, null, null));
      };Kh.prototype.Gc = function (a) {
        this.W || Wh(this, !0, null, a.getError());return J();
      };
      Kh.prototype.Hc = function (a, b) {
        var c = this,
            d = a.va;b = b.mb(d, a.za);var e = a.hb;a = a.cc;var f = "signInViaRedirect" == d || "linkViaRedirect" == d;return this.W ? J() : b(e, a).then(function (a) {
          c.W || Wh(c, f, a, null);
        }).l(function (a) {
          c.W || Wh(c, f, null, a);
        });
      };var Wh = function (a, b, c, d) {
        b ? d ? (a.W = function () {
          return K(d);
        }, a.Zb && a.Zb(d)) : (a.W = function () {
          return J(c);
        }, a.Xa && a.Xa(c)) : (a.W = function () {
          return J({ user: null });
        }, a.Xa && a.Xa({ user: null }));a.Xa = null;a.Zb = null;
      };
      Kh.prototype.getRedirectResult = function () {
        var a = this;this.Uc || (this.Uc = new I(function (b, c) {
          a.W ? a.W().then(b, c) : (a.Xa = b, a.Zb = c, Xh(a));
        }));return this.Uc;
      };var Xh = function (a) {
        var b = new R("timeout");a.Jc && a.Jc.cancel();a.Jc = xe(1E4).then(function () {
          a.W || Wh(a, !0, null, b);
        });
      },
          Lh = function (a) {
        this.A = a;
      };Lh.prototype.sd = function (a, b) {
        if (!a) return K(new R("invalid-auth-event"));var c = a.va,
            d = a.za;return a.J ? this.Gc(a, b) : b.mb(c, d) ? this.Hc(a, b) : K(new R("invalid-auth-event"));
      };
      Lh.prototype.Gc = function (a, b) {
        b.Ha(a.va, null, a.getError(), a.za);return J();
      };Lh.prototype.Hc = function (a, b) {
        var c = a.za,
            d = a.va;return b.mb(d, c)(a.hb, a.cc).then(function (a) {
          b.Ha(d, a, null, c);
        }).l(function (a) {
          b.Ha(d, null, a, c);
        });
      };var Yh = function (a) {
        this.f = a;this.wa = this.S = null;this.Pa = 0;
      };Yh.prototype.G = function () {
        return { apiKey: this.f.v, refreshToken: this.S, accessToken: this.wa, expirationTime: this.Pa };
      };
      var $h = function (a, b) {
        var c = b.idToken,
            d = b.refreshToken;b = Zh(b.expiresIn);a.wa = c;a.Pa = b;a.S = d;
      },
          Zh = function (a) {
        return la() + 1E3 * parseInt(a, 10);
      },
          ai = function (a, b) {
        return jg(a.f, b).then(function (b) {
          a.wa = b.access_token;a.Pa = Zh(b.expires_in);a.S = b.refresh_token;return { accessToken: a.wa, expirationTime: a.Pa, refreshToken: a.S };
        }).l(function (b) {
          "auth/user-token-expired" == b.code && (a.S = null);throw b;
        });
      },
          bi = function (a) {
        return !(!a.wa || a.S);
      };
      Yh.prototype.getToken = function (a) {
        a = !!a;return bi(this) ? K(new R("user-token-expired")) : a || !this.wa || la() > this.Pa - 3E4 ? this.S ? ai(this, { grant_type: "refresh_token", refresh_token: this.S }) : J(null) : J({ accessToken: this.wa, expirationTime: this.Pa, refreshToken: this.S });
      };var ci = function (a, b, c, d, e) {
        Df(this, { uid: a, displayName: d || null, photoURL: e || null, email: c || null, providerId: b });
      },
          di = function (a, b) {
        zb.call(this, a);for (var c in b) this[c] = b[c];
      };t(di, zb);
      var W = function (a, b, c) {
        this.U = [];this.v = a.apiKey;this.ea = a.appName;this.X = a.authDomain || null;a = firebase.SDK_VERSION ? tf(firebase.SDK_VERSION) : null;this.f = new T(this.v, null, a);this.ba = new Yh(this.f);ei(this, b.idToken);$h(this.ba, b);Q(this, "refreshToken", this.ba.S);fi(this, c || {});$d.call(this);this.Vb = !1;this.X && wf() && (this.m = Vh(this.X, this.v, this.ea));this.dc = [];
      };t(W, $d);
      var ei = function (a, b) {
        a.kd = b;Q(a, "_lat", b);
      },
          gi = function (a, b) {
        Ma(a.dc, function (a) {
          return a == b;
        });
      },
          hi = function (a) {
        for (var b = [], c = 0; c < a.dc.length; c++) b.push(a.dc[c](a));return ud(b).then(function () {
          return a;
        });
      },
          ii = function (a) {
        a.m && !a.Vb && (a.Vb = !0, a.m.subscribe(a));
      },
          fi = function (a, b) {
        Df(a, { uid: b.uid, displayName: b.displayName || null, photoURL: b.photoURL || null, email: b.email || null, emailVerified: b.emailVerified || !1, isAnonymous: b.isAnonymous || !1, providerData: [] });
      };Q(W.prototype, "providerId", "firebase");
      var ji = function () {},
          ki = function (a) {
        return J().then(function () {
          if (a.Vd) throw new R("app-deleted");
        });
      },
          li = function (a) {
        return Fa(a.providerData, function (a) {
          return a.providerId;
        });
      },
          ni = function (a, b) {
        b && (mi(a, b.providerId), a.providerData.push(b));
      },
          mi = function (a, b) {
        Ma(a.providerData, function (a) {
          return a.providerId == b;
        });
      },
          oi = function (a, b, c) {
        ("uid" != b || c) && a.hasOwnProperty(b) && Q(a, b, c);
      };
      W.prototype.copy = function (a) {
        var b = this;b != a && (Df(this, { uid: a.uid, displayName: a.displayName, photoURL: a.photoURL, email: a.email, emailVerified: a.emailVerified, isAnonymous: a.isAnonymous, providerData: [] }), x(a.providerData, function (a) {
          ni(b, a);
        }), this.ba = a.ba, Q(this, "refreshToken", this.ba.S));
      };W.prototype.reload = function () {
        var a = this;return ki(this).then(function () {
          return pi(a).then(function () {
            return hi(a);
          }).then(ji);
        });
      };
      var pi = function (a) {
        return a.getToken().then(function (b) {
          var c = a.isAnonymous;return qi(a, b).then(function () {
            c || oi(a, "isAnonymous", !1);return b;
          }).l(function (b) {
            "auth/user-token-expired" == b.code && (a.dispatchEvent(new di("userDeleted")), ri(a));throw b;
          });
        });
      };
      W.prototype.getToken = function (a) {
        var b = this,
            c = bi(this.ba);return ki(this).then(function () {
          return b.ba.getToken(a);
        }).then(function (a) {
          if (!a) throw new R("internal-error");a.accessToken != b.kd && (ei(b, a.accessToken), b.Da());oi(b, "refreshToken", a.refreshToken);return a.accessToken;
        }).l(function (a) {
          if ("auth/user-token-expired" == a.code && !c) return hi(b).then(function () {
            oi(b, "refreshToken", null);throw a;
          });throw a;
        });
      };
      var si = function (a, b) {
        b.idToken && a.kd != b.idToken && ($h(a.ba, b), a.Da(), ei(a, b.idToken), oi(a, "refreshToken", a.ba.S));
      };W.prototype.Da = function () {
        this.dispatchEvent(new di("tokenChanged"));
      };var qi = function (a, b) {
        return S(a.f, Kg, { idToken: b }).then(r(a.we, a));
      };
      W.prototype.we = function (a) {
        a = a.users;if (!a || !a.length) throw new R("internal-error");a = a[0];fi(this, { uid: a.localId, displayName: a.displayName, photoURL: a.photoUrl, email: a.email, emailVerified: !!a.emailVerified });for (var b = ti(a), c = 0; c < b.length; c++) ni(this, b[c]);oi(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
      };
      var ti = function (a) {
        return (a = a.providerUserInfo) && a.length ? Fa(a, function (a) {
          return new ci(a.rawId, a.providerId, a.email, a.displayName, a.photoUrl);
        }) : [];
      };W.prototype.reauthenticate = function (a) {
        var b = this;return this.c(a.Gb(this.f).then(function (a) {
          var c;a: {
            var e = a.idToken.split(".");if (3 == e.length) {
              for (var e = e[1], f = (4 - e.length % 4) % 4, g = 0; g < f; g++) e += ".";try {
                var k = ic(ub(e));if (k.sub && k.iss && k.aud && k.exp) {
                  c = new Lf(k);break a;
                }
              } catch (q) {}
            }c = null;
          }if (!c || b.uid != c.qe) throw new R("user-mismatch");si(b, a);return b.reload();
        }));
      };
      var ui = function (a, b) {
        return pi(a).then(function () {
          if (Ja(li(a), b)) return hi(a).then(function () {
            throw new R("provider-already-linked");
          });
        });
      };h = W.prototype;h.link = function (a) {
        var b = this;return this.c(ui(this, a.provider).then(function () {
          return b.getToken();
        }).then(function (c) {
          return a.md(b.f, c);
        }).then(r(this.bd, this)));
      };h.bd = function (a) {
        si(this, a);var b = this;return this.reload().then(function () {
          return b;
        });
      };
      h.updateEmail = function (a) {
        var b = this;return this.c(this.getToken().then(function (c) {
          return b.f.updateEmail(c, a);
        }).then(function (a) {
          si(b, a);return b.reload();
        }));
      };h.updatePassword = function (a) {
        var b = this;return this.c(this.getToken().then(function (c) {
          return b.f.updatePassword(c, a);
        }).then(function (a) {
          si(b, a);return b.reload();
        }));
      };
      h.updateProfile = function (a) {
        if (void 0 === a.displayName && void 0 === a.photoURL) return ki(this);var b = this;return this.c(this.getToken().then(function (c) {
          return b.f.updateProfile(c, { displayName: a.displayName, photoUrl: a.photoURL });
        }).then(function (a) {
          si(b, a);oi(b, "displayName", a.displayName || null);oi(b, "photoURL", a.photoUrl || null);return hi(b);
        }).then(ji));
      };
      h.unlink = function (a) {
        var b = this;return this.c(pi(this).then(function (c) {
          return Ja(li(b), a) ? zg(b.f, c, [a]).then(function (a) {
            var c = {};x(a.providerUserInfo || [], function (a) {
              c[a.providerId] = !0;
            });x(li(b), function (a) {
              c[a] || mi(b, a);
            });return hi(b);
          }) : hi(b).then(function () {
            throw new R("no-such-provider");
          });
        }));
      };h.delete = function () {
        var a = this;return this.c(this.getToken().then(function (b) {
          return S(a.f, Jg, { idToken: b });
        }).then(function () {
          a.dispatchEvent(new di("userDeleted"));
        })).then(function () {
          ri(a);
        });
      };
      h.Wc = function (a, b) {
        return "linkViaPopup" == a && (this.ia || null) == b && this.$ || "linkViaRedirect" == a && (this.Yb || null) == b ? !0 : !1;
      };h.Ha = function (a, b, c, d) {
        "linkViaPopup" == a && d == (this.ia || null) && (c && this.Fa ? this.Fa(c) : b && !c && this.$ && this.$(b), this.C && (this.C.cancel(), this.C = null), delete this.$, delete this.Fa);
      };h.mb = function (a, b) {
        return "linkViaPopup" == a && b == (this.ia || null) || "linkViaRedirect" == a && (this.Yb || null) == b ? r(this.Yd, this) : null;
      };h.Fb = function () {
        return vf(this.uid + ":::");
      };
      h.linkWithPopup = function (a) {
        if (!wf()) return K(new R("operation-not-supported-in-this-environment"));var b = this,
            c = Hf(a.providerId),
            d = this.Fb(),
            e = null;!xf() && this.X && a.isOAuthProvider && (e = Wg(this.X, this.v, this.ea, "linkViaPopup", a.providerId, a.Hb(), null, d, firebase.SDK_VERSION || null));var f = of(e, c && c.ub, c && c.tb),
            c = ui(this, a.providerId).then(function () {
          return hi(b);
        }).then(function () {
          vi(b);return b.getToken();
        }).then(function () {
          return Rh(b.m, f, "linkViaPopup", a, d, !!e);
        }).then(function () {
          return new I(function (a, c) {
            b.Ha("linkViaPopup", null, new R("cancelled-popup-request"), b.ia || null);b.$ = a;b.Fa = c;b.ia = d;b.C = Th(b.m, b, "linkViaPopup", f, d);
          });
        }).then(function (a) {
          f && nf(f);return a;
        }).l(function (a) {
          f && nf(f);throw a;
        });return this.c(c);
      };
      h.linkWithRedirect = function (a) {
        if (!wf()) return K(new R("operation-not-supported-in-this-environment"));var b = this,
            c = null,
            d = this.Fb(),
            e = ui(this, a.providerId).then(function () {
          vi(b);return b.getToken();
        }).then(function () {
          b.Yb = d;return hi(b);
        }).then(function (a) {
          b.Ga && (a = b.Ga, a = a.A.set(wi, b.G(), a.B));return a;
        }).then(function () {
          return Sh(b.m, "linkViaRedirect", a, d);
        }).l(function (a) {
          c = a;if (b.Ga) return xi(b.Ga);throw c;
        }).then(function () {
          if (c) throw c;
        });return this.c(e);
      };
      var vi = function (a) {
        if (a.m && a.Vb) return;if (a.m && !a.Vb) throw new R("internal-error");throw new R("auth-domain-config-required");
      };W.prototype.Yd = function (a, b) {
        var c = this;this.C && (this.C.cancel(), this.C = null);var d = null,
            e = this.getToken().then(function (d) {
          return Pf(c.f, { requestUri: a, sessionId: b, idToken: d });
        }).then(function (a) {
          d = $f(a);return c.bd(a);
        }).then(function (a) {
          return { user: a, credential: d };
        });return this.c(e);
      };
      W.prototype.sendEmailVerification = function () {
        var a = this;return this.c(this.getToken().then(function (b) {
          return a.f.sendEmailVerification(b);
        }).then(function (b) {
          if (a.email != b) return a.reload();
        }).then(function () {}));
      };var ri = function (a) {
        for (var b = 0; b < a.U.length; b++) a.U[b].cancel("app-deleted");a.U = [];a.Vd = !0;Q(a, "refreshToken", null);a.m && a.m.unsubscribe(a);
      };W.prototype.c = function (a) {
        var b = this;this.U.push(a);xd(a, function () {
          La(b.U, a);
        });return a;
      };W.prototype.toJSON = function () {
        return this.G();
      };
      W.prototype.G = function () {
        var a = { uid: this.uid, displayName: this.displayName, photoURL: this.photoURL, email: this.email, emailVerified: this.emailVerified, isAnonymous: this.isAnonymous, providerData: [], apiKey: this.v, appName: this.ea, authDomain: this.X, stsTokenManager: this.ba.G(), redirectEventId: this.Yb || null };x(this.providerData, function (b) {
          a.providerData.push(Ef(b));
        });return a;
      };
      var yi = function (a) {
        if (!a.apiKey) return null;var b = { apiKey: a.apiKey, authDomain: a.authDomain, appName: a.appName },
            c = {};if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c.idToken = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - la()) / 1E3;else return null;var d = new W(b, c, a);a.providerData && x(a.providerData, function (a) {
          if (a) {
            var b = {};Df(b, a);ni(d, b);
          }
        });a.redirectEventId && (d.Yb = a.redirectEventId);
        return d;
      },
          zi = function (a, b, c) {
        var d = new W(a, b);c && (d.Ga = c);return d.reload().then(function () {
          return d;
        });
      };var Ai = function (a) {
        this.B = a;this.A = Ch();
      },
          wi = { name: "redirectUser", V: !1 },
          xi = function (a) {
        return a.A.remove(wi, a.B);
      },
          Bi = function (a, b) {
        return a.A.get(wi, a.B).then(function (a) {
          a && b && (a.authDomain = b);return yi(a || {});
        });
      };var Ci = function (a) {
        this.B = a;this.A = Ch();
      },
          Di = { name: "authUser", V: !0 },
          Ei = function (a, b) {
        return a.A.set(Di, b.G(), a.B);
      },
          Fi = function (a) {
        return a.A.remove(Di, a.B);
      },
          Gi = function (a, b) {
        return a.A.get(Di, a.B).then(function (a) {
          a && b && (a.authDomain = b);return yi(a || {});
        });
      };var Y = function (a) {
        this.Na = !1;Q(this, "app", a);if (X(this).options && X(this).options.apiKey) a = firebase.SDK_VERSION ? tf(firebase.SDK_VERSION) : null, this.f = new T(X(this).options && X(this).options.apiKey, null, a);else throw new R("invalid-api-key");this.U = [];this.La = [];this.ue = firebase.INTERNAL.createSubscribe(r(this.me, this));Hi(this, null);this.ma = new Ci(X(this).options.apiKey + ":" + X(this).name);this.Ya = new Ai(X(this).options.apiKey + ":" + X(this).name);this.Ab = this.c(Ii(this));this.sa = this.c(Ji(this));this.yc = !1;this.vc = r(this.Ee, this);this.Dd = r(this.Ra, this);this.Ed = r(this.ie, this);this.Cd = r(this.he, this);Ki(this);this.INTERNAL = {};this.INTERNAL.delete = r(this.delete, this);
      };Y.prototype.toJSON = function () {
        return { apiKey: X(this).options.apiKey, authDomain: X(this).options.authDomain, appName: X(this).name, currentUser: Z(this) && Z(this).G() };
      };
      var Li = function (a) {
        return a.Wd || K(new R("auth-domain-config-required"));
      },
          Ki = function (a) {
        var b = X(a).options.authDomain,
            c = X(a).options.apiKey;b && wf() && (a.Wd = a.Ab.then(function () {
          if (!a.Na) return a.m = Vh(b, c, X(a).name), a.m.subscribe(a), Z(a) && ii(Z(a)), a.Kc && (ii(a.Kc), a.Kc = null), a.m;
        }));
      };h = Y.prototype;h.Wc = function (a, b) {
        switch (a) {case "unknown":case "signInViaRedirect":
            return !0;case "signInViaPopup":
            return this.ia == b && !!this.$;default:
            return !1;}
      };
      h.Ha = function (a, b, c, d) {
        "signInViaPopup" == a && this.ia == d && (c && this.Fa ? this.Fa(c) : b && !c && this.$ && this.$(b), this.C && (this.C.cancel(), this.C = null), delete this.$, delete this.Fa);
      };h.mb = function (a, b) {
        return "signInViaRedirect" == a || "signInViaPopup" == a && this.ia == b && this.$ ? r(this.Zd, this) : null;
      };
      h.Zd = function (a, b) {
        var c = this;a = { requestUri: a, sessionId: b };this.C && (this.C.cancel(), this.C = null);var d = null,
            e = Nf(c.f, a).then(function (a) {
          d = $f(a);return a;
        });a = c.Ab.then(function () {
          return e;
        }).then(function (a) {
          return Mi(c, a);
        }).then(function () {
          return { user: Z(c), credential: d };
        });return this.c(a);
      };h.Fb = function () {
        return vf();
      };
      h.signInWithPopup = function (a) {
        if (!wf()) return K(new R("operation-not-supported-in-this-environment"));var b = this,
            c = Hf(a.providerId),
            d = this.Fb(),
            e = null;!xf() && X(this).options.authDomain && a.isOAuthProvider && (e = Wg(X(this).options.authDomain, X(this).options.apiKey, X(this).name, "signInViaPopup", a.providerId, a.Hb(), null, d, firebase.SDK_VERSION || null));var f = of(e, c && c.ub, c && c.tb),
            c = Li(this).then(function (b) {
          return Rh(b, f, "signInViaPopup", a, d, !!e);
        }).then(function () {
          return new I(function (a, c) {
            b.Ha("signInViaPopup", null, new R("cancelled-popup-request"), b.ia);b.$ = a;b.Fa = c;b.ia = d;b.C = Th(b.m, b, "signInViaPopup", f, d);
          });
        }).then(function (a) {
          f && nf(f);return a;
        }).l(function (a) {
          f && nf(f);throw a;
        });return this.c(c);
      };h.signInWithRedirect = function (a) {
        if (!wf()) return K(new R("operation-not-supported-in-this-environment"));var b = this,
            c = Li(this).then(function () {
          return Sh(b.m, "signInViaRedirect", a);
        });return this.c(c);
      };
      h.getRedirectResult = function () {
        if (!wf()) return K(new R("operation-not-supported-in-this-environment"));var a = this,
            b = Li(this).then(function () {
          return a.m.getRedirectResult();
        });return this.c(b);
      };
      var Mi = function (a, b) {
        var c = {};c.apiKey = X(a).options.apiKey;c.authDomain = X(a).options.authDomain;c.appName = X(a).name;return a.Ab.then(function () {
          return zi(c, b, a.Ya);
        }).then(function (b) {
          if (Z(a) && b.uid == Z(a).uid) return Z(a).copy(b), a.Ra(b);Hi(a, b);ii(b);return a.Ra(b);
        }).then(function () {
          a.Da();
        });
      },
          Hi = function (a, b) {
        Z(a) && (gi(Z(a), a.Dd), Ub(Z(a), "tokenChanged", a.Ed), Ub(Z(a), "userDeleted", a.Cd));b && (b.dc.push(a.Dd), Lb(b, "tokenChanged", a.Ed), Lb(b, "userDeleted", a.Cd));Q(a, "currentUser", b);
      };
      Y.prototype.signOut = function () {
        var a = this,
            b = this.sa.then(function () {
          if (!Z(a)) return J();Hi(a, null);return Fi(a.ma).then(function () {
            a.Da();
          });
        });return this.c(b);
      };
      var Ni = function (a) {
        var b = Bi(a.Ya, X(a).options.authDomain).then(function (b) {
          if (a.Kc = b) b.Ga = a.Ya;return xi(a.Ya);
        });return a.c(b);
      },
          Ii = function (a) {
        var b = X(a).options.authDomain,
            c = Ni(a).then(function () {
          return Gi(a.ma, b);
        }).then(function (b) {
          return b ? (b.Ga = a.Ya, b.reload().then(function () {
            return Ei(a.ma, b).then(function () {
              return b;
            });
          }).l(function (c) {
            return "auth/network-request-failed" == c.code ? b : Fi(a.ma);
          })) : null;
        }).then(function (b) {
          Hi(a, b || null);
        });return a.c(c);
      },
          Ji = function (a) {
        return a.Ab.then(function () {
          return a.getRedirectResult();
        }).l(function () {}).then(function () {
          return a.Na ? void 0 : a.vc();
        }).l(function () {}).then(function () {
          if (!a.Na) {
            a.yc = !0;var b = a.ma;b.A.addListener(Di, b.B, a.vc);
          }
        });
      };Y.prototype.Ee = function () {
        var a = this;return Gi(this.ma, X(this).options.authDomain).then(function (b) {
          if (!a.Na) {
            var c;if (c = Z(a) && b) {
              c = Z(a).uid;var d = b.uid;c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
            }if (c) return Z(a).copy(b), Z(a).getToken();if (Z(a) || b) Hi(a, b), b && (ii(b), b.Ga = a.Ya), a.m && a.m.subscribe(a), a.Da();
          }
        });
      };Y.prototype.Ra = function (a) {
        return Ei(this.ma, a);
      };
      Y.prototype.ie = function () {
        this.Da();this.Ra(Z(this));
      };Y.prototype.he = function () {
        this.signOut();
      };var Oi = function (a, b) {
        return a.c(b.then(function (b) {
          return Mi(a, b);
        }).then(function () {
          return Z(a);
        }));
      };h = Y.prototype;h.me = function (a) {
        var b = this;this.addAuthTokenListener(function () {
          a.next(Z(b));
        });
      };h.onAuthStateChanged = function (a, b, c) {
        var d = this;this.yc && firebase.Promise.resolve().then(function () {
          p(a) ? a(Z(d)) : p(a.next) && a.next(Z(d));
        });return this.ue(a, b, c);
      };
      h.getToken = function (a) {
        var b = this,
            c = this.sa.then(function () {
          return Z(b) ? Z(b).getToken(a).then(function (a) {
            return { accessToken: a };
          }) : null;
        });return this.c(c);
      };h.signInWithCustomToken = function (a) {
        var b = this;return this.sa.then(function () {
          return Oi(b, S(b.f, Lg, { token: a }));
        }).then(function (a) {
          oi(a, "isAnonymous", !1);return b.Ra(a);
        }).then(function () {
          return Z(b);
        });
      };h.signInWithEmailAndPassword = function (a, b) {
        var c = this;return this.sa.then(function () {
          return Oi(c, S(c.f, Wf, { email: a, password: b }));
        });
      };
      h.createUserWithEmailAndPassword = function (a, b) {
        var c = this;return this.sa.then(function () {
          return Oi(c, S(c.f, Ig, { email: a, password: b }));
        });
      };h.signInWithCredential = function (a) {
        var b = this;return this.sa.then(function () {
          return Oi(b, a.Gb(b.f));
        });
      };h.signInAnonymously = function () {
        var a = Z(this),
            b = this;return a && a.isAnonymous ? J(a) : this.sa.then(function () {
          return Oi(b, b.f.signInAnonymously());
        }).then(function (a) {
          oi(a, "isAnonymous", !0);return b.Ra(a);
        }).then(function () {
          return Z(b);
        });
      };
      var X = function (a) {
        return a.app;
      },
          Z = function (a) {
        return a.currentUser;
      };h = Y.prototype;h.Da = function () {
        if (this.yc) for (var a = 0; a < this.La.length; a++) if (this.La[a]) this.La[a](Z(this) && Z(this)._lat || null);
      };h.addAuthTokenListener = function (a) {
        var b = this;this.La.push(a);this.c(this.sa.then(function () {
          b.Na || Ja(b.La, a) && a(Z(b) && Z(b)._lat || null);
        }));
      };h.removeAuthTokenListener = function (a) {
        Ma(this.La, function (b) {
          return b == a;
        });
      };
      h.delete = function () {
        this.Na = !0;for (var a = 0; a < this.U.length; a++) this.U[a].cancel("app-deleted");this.U = [];this.ma && (a = this.ma, a.A.removeListener(Di, a.B, this.vc));this.m && this.m.unsubscribe(this);return firebase.Promise.resolve();
      };h.c = function (a) {
        var b = this;this.U.push(a);xd(a, function () {
          La(b.U, a);
        });return a;
      };h.fetchProvidersForEmail = function (a) {
        return this.c(pg(this.f, a));
      };h.verifyPasswordResetCode = function (a) {
        return this.checkActionCode(a).then(function (a) {
          return a.data.email;
        });
      };
      h.confirmPasswordReset = function (a, b) {
        return this.c(this.f.confirmPasswordReset(a, b).then(function () {}));
      };h.checkActionCode = function (a) {
        return this.c(this.f.checkActionCode(a).then(function (a) {
          return { data: { email: a.email } };
        }));
      };h.applyActionCode = function (a) {
        return this.c(this.f.applyActionCode(a).then(function () {}));
      };h.sendPasswordResetEmail = function (a) {
        return this.c(this.f.sendPasswordResetEmail(a).then(function () {}));
      };yh(Y.prototype, { applyActionCode: { name: "applyActionCode", b: [U("code")] }, checkActionCode: { name: "checkActionCode", b: [U("code")] }, confirmPasswordReset: { name: "confirmPasswordReset", b: [U("code"), U("newPassword")] }, createUserWithEmailAndPassword: { name: "createUserWithEmailAndPassword", b: [U("email"), U("password")] }, fetchProvidersForEmail: { name: "fetchProvidersForEmail", b: [U("email")] }, getRedirectResult: { name: "getRedirectResult", b: [] }, onAuthStateChanged: { name: "onAuthStateChanged", b: [wh(rh(), sh(), "nextOrObserver"), sh("opt_error", !0), sh("opt_completed", !0)] }, sendPasswordResetEmail: { name: "sendPasswordResetEmail", b: [U("email")] }, signInAnonymously: { name: "signInAnonymously", b: [] }, signInWithCredential: { name: "signInWithCredential", b: [uh()] }, signInWithCustomToken: { name: "signInWithCustomToken", b: [U("token")] }, signInWithEmailAndPassword: { name: "signInWithEmailAndPassword", b: [U("email"), U("password")] }, signInWithPopup: { name: "signInWithPopup", b: [vh()] }, signInWithRedirect: { name: "signInWithRedirect", b: [vh()] }, signOut: { name: "signOut",
          b: [] }, toJSON: { name: "toJSON", b: [U(null, !0)] }, verifyPasswordResetCode: { name: "verifyPasswordResetCode", b: [U("code")] } });
      yh(W.prototype, { "delete": { name: "delete", b: [] }, getToken: { name: "getToken", b: [{ name: "opt_forceRefresh", ca: "a boolean", optional: !0, da: function (a) {
              return "boolean" == typeof a;
            } }] }, link: { name: "link", b: [uh()] }, linkWithPopup: { name: "linkWithPopup", b: [vh()] }, linkWithRedirect: { name: "linkWithRedirect", b: [vh()] }, reauthenticate: { name: "reauthenticate", b: [uh()] }, reload: { name: "reload", b: [] }, sendEmailVerification: { name: "sendEmailVerification", b: [] }, toJSON: { name: "toJSON", b: [U(null, !0)] }, unlink: { name: "unlink", b: [U("provider")] },
        updateEmail: { name: "updateEmail", b: [U("email")] }, updatePassword: { name: "updatePassword", b: [U("password")] }, updateProfile: { name: "updateProfile", b: [rh("profile")] } });yh(I.prototype, { l: { name: "catch" }, then: { name: "then" } });V(Yf, "credential", function (a, b) {
        return new Vf(a, b);
      }, [U("email"), U("password")]);yh(Rf.prototype, { addScope: { name: "addScope", b: [U("scope")] } });V(Rf, "credential", Rf.credential, [wh(U(), rh(), "token")]);yh(Sf.prototype, { addScope: { name: "addScope", b: [U("scope")] } });
      V(Sf, "credential", Sf.credential, [wh(U(), rh(), "token")]);yh(Tf.prototype, { addScope: { name: "addScope", b: [U("scope")] } });V(Tf, "credential", Tf.credential, [wh(U(), wh(rh(), th()), "idToken"), wh(U(), th(), "accessToken", !0)]);V(Uf, "credential", Uf.credential, [wh(U(), rh(), "token"), U("secret", !0)]);
      (function () {
        if ("undefined" !== typeof firebase && firebase.INTERNAL && firebase.INTERNAL.registerService) {
          var a = { Auth: Y, Error: R };V(a, "EmailAuthProvider", Yf, []);V(a, "FacebookAuthProvider", Rf, []);V(a, "GithubAuthProvider", Sf, []);V(a, "GoogleAuthProvider", Tf, []);V(a, "TwitterAuthProvider", Uf, []);firebase.INTERNAL.registerService("auth", function (a, c) {
            a = new Y(a);c({ INTERNAL: { getToken: r(a.getToken, a), addAuthTokenListener: r(a.addAuthTokenListener, a), removeAuthTokenListener: r(a.removeAuthTokenListener, a) } });return a;
          }, a, function (a, c) {
            if ("create" === a) try {
              c.auth();
            } catch (d) {}
          });firebase.INTERNAL.extendNamespace({ User: W });
        } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
      })();
    })();
    (function () {
      var g,
          n = this;function p(a) {
        return void 0 !== a;
      }function aa() {}function ba(a) {
        a.Wb = function () {
          return a.bf ? a.bf : a.bf = new a();
        };
      }
      function ca(a) {
        var b = typeof a;if ("object" == b) {
          if (a) {
            if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
          } else return "null";
        } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
      }function da(a) {
        return "array" == ca(a);
      }function ea(a) {
        var b = ca(a);return "array" == b || "object" == b && "number" == typeof a.length;
      }function q(a) {
        return "string" == typeof a;
      }function fa(a) {
        return "number" == typeof a;
      }function ga(a) {
        return "function" == ca(a);
      }function ha(a) {
        var b = typeof a;return "object" == b && null != a || "function" == b;
      }function ia(a, b, c) {
        return a.call.apply(a.bind, arguments);
      }
      function ja(a, b, c) {
        if (!a) throw Error();if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);return function () {
            var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
          };
        }return function () {
          return a.apply(b, arguments);
        };
      }function r(a, b, c) {
        r = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ia : ja;return r.apply(null, arguments);
      }
      function ka(a, b) {
        function c() {}c.prototype = b.prototype;a.Ig = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.Eg = function (a, c, f) {
          for (var h = Array(arguments.length - 2), k = 2; k < arguments.length; k++) h[k - 2] = arguments[k];return b.prototype[c].apply(a, h);
        };
      };function t(a, b) {
        for (var c in a) b.call(void 0, a[c], c, a);
      }function la(a, b) {
        var c = {},
            d;for (d in a) c[d] = b.call(void 0, a[d], d, a);return c;
      }function ma(a, b) {
        for (var c in a) if (!b.call(void 0, a[c], c, a)) return !1;return !0;
      }function na(a) {
        var b = 0,
            c;for (c in a) b++;return b;
      }function oa(a) {
        for (var b in a) return b;
      }function pa(a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = a[d];return b;
      }function qa(a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = d;return b;
      }function ra(a, b) {
        for (var c in a) if (a[c] == b) return !0;return !1;
      }
      function sa(a, b, c) {
        for (var d in a) if (b.call(c, a[d], d, a)) return d;
      }function ta(a, b) {
        var c = sa(a, b, void 0);return c && a[c];
      }function ua(a) {
        for (var b in a) return !1;return !0;
      }function va(a) {
        var b = {},
            c;for (c in a) b[c] = a[c];return b;
      };function wa(a) {
        a = String(a);if (/^\s*$/.test(a) ? 0 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))) try {
          return eval("(" + a + ")");
        } catch (b) {}throw Error("Invalid JSON string: " + a);
      }function xa() {
        this.Fd = void 0;
      }
      function ya(a, b, c) {
        switch (typeof b) {case "string":
            za(b, c);break;case "number":
            c.push(isFinite(b) && !isNaN(b) ? b : "null");break;case "boolean":
            c.push(b);break;case "undefined":
            c.push("null");break;case "object":
            if (null == b) {
              c.push("null");break;
            }if (da(b)) {
              var d = b.length;c.push("[");for (var e = "", f = 0; f < d; f++) c.push(e), e = b[f], ya(a, a.Fd ? a.Fd.call(b, String(f), e) : e, c), e = ",";c.push("]");break;
            }c.push("{");d = "";for (f in b) Object.prototype.hasOwnProperty.call(b, f) && (e = b[f], "function" != typeof e && (c.push(d), za(f, c), c.push(":"), ya(a, a.Fd ? a.Fd.call(b, f, e) : e, c), d = ","));c.push("}");break;case "function":
            break;default:
            throw Error("Unknown type: " + typeof b);}
      }var Aa = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
          Ba = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
      function za(a, b) {
        b.push('"', a.replace(Ba, function (a) {
          if (a in Aa) return Aa[a];var b = a.charCodeAt(0),
              e = "\\u";16 > b ? e += "000" : 256 > b ? e += "00" : 4096 > b && (e += "0");return Aa[a] = e + b.toString(16);
        }), '"');
      };var v;a: {
        var Ca = n.navigator;if (Ca) {
          var Da = Ca.userAgent;if (Da) {
            v = Da;break a;
          }
        }v = "";
      };function Ea(a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, Ea);else {
          var b = Error().stack;b && (this.stack = b);
        }a && (this.message = String(a));
      }ka(Ea, Error);Ea.prototype.name = "CustomError";var w = Array.prototype,
          Fa = w.indexOf ? function (a, b, c) {
        return w.indexOf.call(a, b, c);
      } : function (a, b, c) {
        c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (q(a)) return q(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) if (c in a && a[c] === b) return c;return -1;
      },
          Ga = w.forEach ? function (a, b, c) {
        w.forEach.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
      },
          Ha = w.filter ? function (a, b, c) {
        return w.filter.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = [], f = 0, h = q(a) ? a.split("") : a, k = 0; k < d; k++) if (k in h) {
          var m = h[k];b.call(c, m, k, a) && (e[f++] = m);
        }return e;
      },
          Ia = w.map ? function (a, b, c) {
        return w.map.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = Array(d), f = q(a) ? a.split("") : a, h = 0; h < d; h++) h in f && (e[h] = b.call(c, f[h], h, a));return e;
      },
          Ja = w.reduce ? function (a, b, c, d) {
        for (var e = [], f = 1, h = arguments.length; f < h; f++) e.push(arguments[f]);d && (e[0] = r(b, d));return w.reduce.apply(a, e);
      } : function (a, b, c, d) {
        var e = c;Ga(a, function (c, h) {
          e = b.call(d, e, c, h, a);
        });return e;
      },
          Ka = w.every ? function (a, b, c) {
        return w.every.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && !b.call(c, e[f], f, a)) return !1;return !0;
      };function La(a, b) {
        var c = Ma(a, b, void 0);return 0 > c ? null : q(a) ? a.charAt(c) : a[c];
      }function Ma(a, b, c) {
        for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return f;return -1;
      }function Na(a, b) {
        var c = Fa(a, b);0 <= c && w.splice.call(a, c, 1);
      }function Oa(a, b, c) {
        return 2 >= arguments.length ? w.slice.call(a, b) : w.slice.call(a, b, c);
      }
      function Pa(a, b) {
        a.sort(b || Qa);
      }function Qa(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
      };var Ra = -1 != v.indexOf("Opera") || -1 != v.indexOf("OPR"),
          Sa = -1 != v.indexOf("Trident") || -1 != v.indexOf("MSIE"),
          Ta = -1 != v.indexOf("Gecko") && -1 == v.toLowerCase().indexOf("webkit") && !(-1 != v.indexOf("Trident") || -1 != v.indexOf("MSIE")),
          Ua = -1 != v.toLowerCase().indexOf("webkit");
      (function () {
        var a = "",
            b;if (Ra && n.opera) return a = n.opera.version, ga(a) ? a() : a;Ta ? b = /rv\:([^\);]+)(\)|;)/ : Sa ? b = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/ : Ua && (b = /WebKit\/(\S+)/);b && (a = (a = b.exec(v)) ? a[1] : "");return Sa && (b = (b = n.document) ? b.documentMode : void 0, b > parseFloat(a)) ? String(b) : a;
      })();function Va(a) {
        n.setTimeout(function () {
          throw a;
        }, 0);
      }var Wa;
      function Xa() {
        var a = n.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && -1 == v.indexOf("Presto") && (a = function () {
          var a = document.createElement("iframe");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
              a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
              d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
              a = r(function (a) {
            if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
          }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
              b.postMessage(c, d);
            } };
        });if ("undefined" !== typeof a && -1 == v.indexOf("Trident") && -1 == v.indexOf("MSIE")) {
          var b = new a(),
              c = {},
              d = c;b.port1.onmessage = function () {
            if (p(c.next)) {
              c = c.next;var a = c.Le;c.Le = null;a();
            }
          };return function (a) {
            d.next = { Le: a };d = d.next;b.port2.postMessage(0);
          };
        }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("script") ? function (a) {
          var b = document.createElement("script");b.onreadystatechange = function () {
            b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
          };document.documentElement.appendChild(b);
        } : function (a) {
          n.setTimeout(a, 0);
        };
      };function Ya(a, b) {
        Za || $a();ab || (Za(), ab = !0);bb.push(new cb(a, b));
      }var Za;function $a() {
        if (n.Promise && n.Promise.resolve) {
          var a = n.Promise.resolve();Za = function () {
            a.then(db);
          };
        } else Za = function () {
          var a = db;!ga(n.setImmediate) || n.Window && n.Window.prototype && n.Window.prototype.setImmediate == n.setImmediate ? (Wa || (Wa = Xa()), Wa(a)) : n.setImmediate(a);
        };
      }var ab = !1,
          bb = [];[].push(function () {
        ab = !1;bb = [];
      });
      function db() {
        for (; bb.length;) {
          var a = bb;bb = [];for (var b = 0; b < a.length; b++) {
            var c = a[b];try {
              c.Wf.call(c.scope);
            } catch (d) {
              Va(d);
            }
          }
        }ab = !1;
      }function cb(a, b) {
        this.Wf = a;this.scope = b;
      };function eb(a, b) {
        this.L = fb;this.uf = void 0;this.Ca = this.Ha = null;this.jd = this.be = !1;if (a == gb) hb(this, ib, b);else try {
          var c = this;a.call(b, function (a) {
            hb(c, ib, a);
          }, function (a) {
            if (!(a instanceof jb)) try {
              if (a instanceof Error) throw a;throw Error("Promise rejected.");
            } catch (b) {}hb(c, kb, a);
          });
        } catch (d) {
          hb(this, kb, d);
        }
      }var fb = 0,
          ib = 2,
          kb = 3;function gb() {}eb.prototype.then = function (a, b, c) {
        return lb(this, ga(a) ? a : null, ga(b) ? b : null, c);
      };eb.prototype.then = eb.prototype.then;eb.prototype.$goog_Thenable = !0;g = eb.prototype;
      g.Ag = function (a, b) {
        return lb(this, null, a, b);
      };g.cancel = function (a) {
        this.L == fb && Ya(function () {
          var b = new jb(a);mb(this, b);
        }, this);
      };function mb(a, b) {
        if (a.L == fb) if (a.Ha) {
          var c = a.Ha;if (c.Ca) {
            for (var d = 0, e = -1, f = 0, h; h = c.Ca[f]; f++) if (h = h.m) if (d++, h == a && (e = f), 0 <= e && 1 < d) break;0 <= e && (c.L == fb && 1 == d ? mb(c, b) : (d = c.Ca.splice(e, 1)[0], nb(c, d, kb, b)));
          }a.Ha = null;
        } else hb(a, kb, b);
      }function ob(a, b) {
        a.Ca && a.Ca.length || a.L != ib && a.L != kb || pb(a);a.Ca || (a.Ca = []);a.Ca.push(b);
      }
      function lb(a, b, c, d) {
        var e = { m: null, hf: null, kf: null };e.m = new eb(function (a, h) {
          e.hf = b ? function (c) {
            try {
              var e = b.call(d, c);a(e);
            } catch (l) {
              h(l);
            }
          } : a;e.kf = c ? function (b) {
            try {
              var e = c.call(d, b);!p(e) && b instanceof jb ? h(b) : a(e);
            } catch (l) {
              h(l);
            }
          } : h;
        });e.m.Ha = a;ob(a, e);return e.m;
      }g.Cf = function (a) {
        this.L = fb;hb(this, ib, a);
      };g.Df = function (a) {
        this.L = fb;hb(this, kb, a);
      };
      function hb(a, b, c) {
        if (a.L == fb) {
          if (a == c) b = kb, c = new TypeError("Promise cannot resolve to itself");else {
            var d;if (c) try {
              d = !!c.$goog_Thenable;
            } catch (e) {
              d = !1;
            } else d = !1;if (d) {
              a.L = 1;c.then(a.Cf, a.Df, a);return;
            }if (ha(c)) try {
              var f = c.then;if (ga(f)) {
                qb(a, c, f);return;
              }
            } catch (h) {
              b = kb, c = h;
            }
          }a.uf = c;a.L = b;a.Ha = null;pb(a);b != kb || c instanceof jb || rb(a, c);
        }
      }function qb(a, b, c) {
        function d(b) {
          f || (f = !0, a.Df(b));
        }function e(b) {
          f || (f = !0, a.Cf(b));
        }a.L = 1;var f = !1;try {
          c.call(b, e, d);
        } catch (h) {
          d(h);
        }
      }
      function pb(a) {
        a.be || (a.be = !0, Ya(a.Uf, a));
      }g.Uf = function () {
        for (; this.Ca && this.Ca.length;) {
          var a = this.Ca;this.Ca = null;for (var b = 0; b < a.length; b++) nb(this, a[b], this.L, this.uf);
        }this.be = !1;
      };function nb(a, b, c, d) {
        if (c == ib) b.hf(d);else {
          if (b.m) for (; a && a.jd; a = a.Ha) a.jd = !1;b.kf(d);
        }
      }function rb(a, b) {
        a.jd = !0;Ya(function () {
          a.jd && sb.call(null, b);
        });
      }var sb = Va;function jb(a) {
        Ea.call(this, a);
      }ka(jb, Ea);jb.prototype.name = "cancel";var tb = null,
          ub = null,
          vb = null;function wb(a, b) {
        if (!ea(a)) throw Error("encodeByteArray takes an array as a parameter");xb();for (var c = b ? ub : tb, d = [], e = 0; e < a.length; e += 3) {
          var f = a[e],
              h = e + 1 < a.length,
              k = h ? a[e + 1] : 0,
              m = e + 2 < a.length,
              l = m ? a[e + 2] : 0,
              u = f >> 2,
              f = (f & 3) << 4 | k >> 4,
              k = (k & 15) << 2 | l >> 6,
              l = l & 63;m || (l = 64, h || (k = 64));d.push(c[u], c[f], c[k], c[l]);
        }return d.join("");
      }
      function xb() {
        if (!tb) {
          tb = {};ub = {};vb = {};for (var a = 0; 65 > a; a++) tb[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), ub[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a), vb[ub[a]] = a, 62 <= a && (vb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)] = a);
        }
      };function yb() {
        this.Ya = -1;
      };function zb() {
        this.Ya = -1;this.Ya = 64;this.N = [];this.Wd = [];this.Jf = [];this.zd = [];this.zd[0] = 128;for (var a = 1; a < this.Ya; ++a) this.zd[a] = 0;this.Pd = this.ac = 0;this.reset();
      }ka(zb, yb);zb.prototype.reset = function () {
        this.N[0] = 1732584193;this.N[1] = 4023233417;this.N[2] = 2562383102;this.N[3] = 271733878;this.N[4] = 3285377520;this.Pd = this.ac = 0;
      };
      function Ab(a, b, c) {
        c || (c = 0);var d = a.Jf;if (q(b)) for (var e = 0; 16 > e; e++) d[e] = b.charCodeAt(c) << 24 | b.charCodeAt(c + 1) << 16 | b.charCodeAt(c + 2) << 8 | b.charCodeAt(c + 3), c += 4;else for (e = 0; 16 > e; e++) d[e] = b[c] << 24 | b[c + 1] << 16 | b[c + 2] << 8 | b[c + 3], c += 4;for (e = 16; 80 > e; e++) {
          var f = d[e - 3] ^ d[e - 8] ^ d[e - 14] ^ d[e - 16];d[e] = (f << 1 | f >>> 31) & 4294967295;
        }b = a.N[0];c = a.N[1];for (var h = a.N[2], k = a.N[3], m = a.N[4], l, e = 0; 80 > e; e++) 40 > e ? 20 > e ? (f = k ^ c & (h ^ k), l = 1518500249) : (f = c ^ h ^ k, l = 1859775393) : 60 > e ? (f = c & h | k & (c | h), l = 2400959708) : (f = c ^ h ^ k, l = 3395469782), f = (b << 5 | b >>> 27) + f + m + l + d[e] & 4294967295, m = k, k = h, h = (c << 30 | c >>> 2) & 4294967295, c = b, b = f;a.N[0] = a.N[0] + b & 4294967295;a.N[1] = a.N[1] + c & 4294967295;a.N[2] = a.N[2] + h & 4294967295;a.N[3] = a.N[3] + k & 4294967295;a.N[4] = a.N[4] + m & 4294967295;
      }
      zb.prototype.update = function (a, b) {
        if (null != a) {
          p(b) || (b = a.length);for (var c = b - this.Ya, d = 0, e = this.Wd, f = this.ac; d < b;) {
            if (0 == f) for (; d <= c;) Ab(this, a, d), d += this.Ya;if (q(a)) for (; d < b;) {
              if (e[f] = a.charCodeAt(d), ++f, ++d, f == this.Ya) {
                Ab(this, e);f = 0;break;
              }
            } else for (; d < b;) if (e[f] = a[d], ++f, ++d, f == this.Ya) {
              Ab(this, e);f = 0;break;
            }
          }this.ac = f;this.Pd += b;
        }
      };function x(a, b, c, d) {
        var e;d < b ? e = "at least " + b : d > c && (e = 0 === c ? "none" : "no more than " + c);if (e) throw Error(a + " failed: Was called with " + d + (1 === d ? " argument." : " arguments.") + " Expects " + e + ".");
      }function Bb(a, b, c) {
        var d = "";switch (b) {case 1:
            d = c ? "first" : "First";break;case 2:
            d = c ? "second" : "Second";break;case 3:
            d = c ? "third" : "Third";break;case 4:
            d = c ? "fourth" : "Fourth";break;default:
            throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a = a + " failed: " + (d + " argument ");
      }
      function y(a, b, c, d) {
        if ((!d || p(c)) && !ga(c)) throw Error(Bb(a, b, d) + "must be a valid function.");
      }function Cb(a, b, c) {
        if (p(c) && (!ha(c) || null === c)) throw Error(Bb(a, b, !0) + "must be a valid context object.");
      };var Db = n.Promise || eb;eb.prototype["catch"] = eb.prototype.Ag;function Eb() {
        var a = this;this.reject = this.resolve = null;this.sa = new Db(function (b, c) {
          a.resolve = b;a.reject = c;
        });
      }function Fb(a, b) {
        return function (c, d) {
          c ? a.reject(c) : a.resolve(d);ga(b) && (Gb(a.sa), 1 === b.length ? b(c) : b(c, d));
        };
      }function Gb(a) {
        a.then(void 0, aa);
      };function Hb(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }function A(a, b) {
        if (Object.prototype.hasOwnProperty.call(a, b)) return a[b];
      }function Ib(a, b) {
        for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
      };function Jb(a) {
        var b = [];Ib(a, function (a, d) {
          da(d) ? Ga(d, function (d) {
            b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
          }) : b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
        });return b.length ? "&" + b.join("&") : "";
      };function Kb(a) {
        return "undefined" !== typeof JSON && p(JSON.parse) ? JSON.parse(a) : wa(a);
      }function B(a) {
        if ("undefined" !== typeof JSON && p(JSON.stringify)) a = JSON.stringify(a);else {
          var b = [];ya(new xa(), a, b);a = b.join("");
        }return a;
      };function Lb(a, b) {
        if (!a) throw Mb(b);
      }function Mb(a) {
        return Error("Firebase Database (" + firebase.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + a);
      };function Nb(a) {
        for (var b = [], c = 0, d = 0; d < a.length; d++) {
          var e = a.charCodeAt(d);55296 <= e && 56319 >= e && (e -= 55296, d++, Lb(d < a.length, "Surrogate pair missing trail surrogate."), e = 65536 + (e << 10) + (a.charCodeAt(d) - 56320));128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (65536 > e ? b[c++] = e >> 12 | 224 : (b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128), b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
        }return b;
      }function Ob(a) {
        for (var b = 0, c = 0; c < a.length; c++) {
          var d = a.charCodeAt(c);128 > d ? b++ : 2048 > d ? b += 2 : 55296 <= d && 56319 >= d ? (b += 4, c++) : b += 3;
        }return b;
      };function Pb() {
        return "undefined" !== typeof window && !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined" !== typeof navigator && "string" === typeof navigator.userAgent ? navigator.userAgent : "");
      };function Qb(a) {
        this.te = a;this.Bd = [];this.Rb = 0;this.Yd = -1;this.Gb = null;
      }function Rb(a, b, c) {
        a.Yd = b;a.Gb = c;a.Yd < a.Rb && (a.Gb(), a.Gb = null);
      }function Sb(a, b, c) {
        for (a.Bd[b] = c; a.Bd[a.Rb];) {
          var d = a.Bd[a.Rb];delete a.Bd[a.Rb];for (var e = 0; e < d.length; ++e) if (d[e]) {
            var f = a;Tb(function () {
              f.te(d[e]);
            });
          }if (a.Rb === a.Yd) {
            a.Gb && (clearTimeout(a.Gb), a.Gb(), a.Gb = null);break;
          }a.Rb++;
        }
      };function Ub() {
        this.qc = {};
      }Ub.prototype.set = function (a, b) {
        null == b ? delete this.qc[a] : this.qc[a] = b;
      };Ub.prototype.get = function (a) {
        return Hb(this.qc, a) ? this.qc[a] : null;
      };Ub.prototype.remove = function (a) {
        delete this.qc[a];
      };Ub.prototype.cf = !0;function Vb(a) {
        this.vc = a;this.Cd = "firebase:";
      }g = Vb.prototype;g.set = function (a, b) {
        null == b ? this.vc.removeItem(this.Cd + a) : this.vc.setItem(this.Cd + a, B(b));
      };g.get = function (a) {
        a = this.vc.getItem(this.Cd + a);return null == a ? null : Kb(a);
      };g.remove = function (a) {
        this.vc.removeItem(this.Cd + a);
      };g.cf = !1;g.toString = function () {
        return this.vc.toString();
      };function Wb(a) {
        try {
          if ("undefined" !== typeof window && "undefined" !== typeof window[a]) {
            var b = window[a];b.setItem("firebase:sentinel", "cache");b.removeItem("firebase:sentinel");return new Vb(b);
          }
        } catch (c) {}return new Ub();
      }var Xb = Wb("localStorage"),
          Yb = Wb("sessionStorage");function Zb(a, b) {
        this.type = $b;this.source = a;this.path = b;
      }Zb.prototype.Nc = function () {
        return this.path.e() ? new Zb(this.source, C) : new Zb(this.source, D(this.path));
      };Zb.prototype.toString = function () {
        return "Operation(" + this.path + ": " + this.source.toString() + " listen_complete)";
      };function ac(a, b, c) {
        this.type = bc;this.source = a;this.path = b;this.Ja = c;
      }ac.prototype.Nc = function (a) {
        return this.path.e() ? new ac(this.source, C, this.Ja.R(a)) : new ac(this.source, D(this.path), this.Ja);
      };ac.prototype.toString = function () {
        return "Operation(" + this.path + ": " + this.source.toString() + " overwrite: " + this.Ja.toString() + ")";
      };function cc(a, b, c, d, e) {
        this.host = a.toLowerCase();this.domain = this.host.substr(this.host.indexOf(".") + 1);this.Sc = b;this.pe = c;this.Cg = d;this.nf = e || "";this.bb = Xb.get("host:" + a) || this.host;
      }function dc(a, b) {
        b !== a.bb && (a.bb = b, "s-" === a.bb.substr(0, 2) && Xb.set("host:" + a.host, a.bb));
      }
      function ec(a, b, c) {
        E("string" === typeof b, "typeof type must == string");E("object" === typeof c, "typeof params must == object");if ("websocket" === b) b = (a.Sc ? "wss://" : "ws://") + a.bb + "/.ws?";else if ("long_polling" === b) b = (a.Sc ? "https://" : "http://") + a.bb + "/.lp?";else throw Error("Unknown connection type: " + b);a.host !== a.bb && (c.ns = a.pe);var d = [];t(c, function (a, b) {
          d.push(b + "=" + a);
        });return b + d.join("&");
      }
      cc.prototype.toString = function () {
        var a = (this.Sc ? "https://" : "http://") + this.host;this.nf && (a += "<" + this.nf + ">");return a;
      };function fc() {
        this.Jd = F;
      }fc.prototype.j = function (a) {
        return this.Jd.Q(a);
      };fc.prototype.toString = function () {
        return this.Jd.toString();
      };function H(a, b, c, d) {
        this.type = a;this.Ma = b;this.Za = c;this.qe = d;this.Dd = void 0;
      }function gc(a) {
        return new H(hc, a);
      }var hc = "value";function ic(a, b, c, d) {
        this.ae = b;this.Md = c;this.Dd = d;this.gd = a;
      }ic.prototype.Zb = function () {
        var a = this.Md.xb();return "value" === this.gd ? a.path : a.getParent().path;
      };ic.prototype.ge = function () {
        return this.gd;
      };ic.prototype.Ub = function () {
        return this.ae.Ub(this);
      };ic.prototype.toString = function () {
        return this.Zb().toString() + ":" + this.gd + ":" + B(this.Md.Ue());
      };function jc(a, b, c) {
        this.ae = a;this.error = b;this.path = c;
      }jc.prototype.Zb = function () {
        return this.path;
      };jc.prototype.ge = function () {
        return "cancel";
      };
      jc.prototype.Ub = function () {
        return this.ae.Ub(this);
      };jc.prototype.toString = function () {
        return this.path.toString() + ":cancel";
      };function kc() {}kc.prototype.Xe = function () {
        return null;
      };kc.prototype.fe = function () {
        return null;
      };var lc = new kc();function mc(a, b, c) {
        this.Gf = a;this.Na = b;this.yd = c;
      }mc.prototype.Xe = function (a) {
        var b = this.Na.O;if (nc(b, a)) return b.j().R(a);b = null != this.yd ? new oc(this.yd, !0, !1) : this.Na.w();return this.Gf.rc(a, b);
      };mc.prototype.fe = function (a, b, c) {
        var d = null != this.yd ? this.yd : pc(this.Na);a = this.Gf.Xd(d, b, 1, c, a);return 0 === a.length ? null : a[0];
      };function qc() {
        this.wb = [];
      }function rc(a, b) {
        for (var c = null, d = 0; d < b.length; d++) {
          var e = b[d],
              f = e.Zb();null === c || f.$(c.Zb()) || (a.wb.push(c), c = null);null === c && (c = new sc(f));c.add(e);
        }c && a.wb.push(c);
      }function tc(a, b, c) {
        rc(a, c);uc(a, function (a) {
          return a.$(b);
        });
      }function vc(a, b, c) {
        rc(a, c);uc(a, function (a) {
          return a.contains(b) || b.contains(a);
        });
      }
      function uc(a, b) {
        for (var c = !0, d = 0; d < a.wb.length; d++) {
          var e = a.wb[d];if (e) if (e = e.Zb(), b(e)) {
            for (var e = a.wb[d], f = 0; f < e.hd.length; f++) {
              var h = e.hd[f];if (null !== h) {
                e.hd[f] = null;var k = h.Ub();wc && I("event: " + h.toString());Tb(k);
              }
            }a.wb[d] = null;
          } else c = !1;
        }c && (a.wb = []);
      }function sc(a) {
        this.ra = a;this.hd = [];
      }sc.prototype.add = function (a) {
        this.hd.push(a);
      };sc.prototype.Zb = function () {
        return this.ra;
      };function oc(a, b, c) {
        this.A = a;this.ea = b;this.Tb = c;
      }function xc(a) {
        return a.ea;
      }function yc(a) {
        return a.Tb;
      }function zc(a, b) {
        return b.e() ? a.ea && !a.Tb : nc(a, J(b));
      }function nc(a, b) {
        return a.ea && !a.Tb || a.A.Fa(b);
      }oc.prototype.j = function () {
        return this.A;
      };function Ac(a, b) {
        this.Oa = a;this.ca = b ? b : Bc;
      }g = Ac.prototype;g.Ra = function (a, b) {
        return new Ac(this.Oa, this.ca.Ra(a, b, this.Oa).Y(null, null, !1, null, null));
      };g.remove = function (a) {
        return new Ac(this.Oa, this.ca.remove(a, this.Oa).Y(null, null, !1, null, null));
      };g.get = function (a) {
        for (var b, c = this.ca; !c.e();) {
          b = this.Oa(a, c.key);if (0 === b) return c.value;0 > b ? c = c.left : 0 < b && (c = c.right);
        }return null;
      };
      function Cc(a, b) {
        for (var c, d = a.ca, e = null; !d.e();) {
          c = a.Oa(b, d.key);if (0 === c) {
            if (d.left.e()) return e ? e.key : null;for (d = d.left; !d.right.e();) d = d.right;return d.key;
          }0 > c ? d = d.left : 0 < c && (e = d, d = d.right);
        }throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
      }g.e = function () {
        return this.ca.e();
      };g.count = function () {
        return this.ca.count();
      };g.Hc = function () {
        return this.ca.Hc();
      };g.fc = function () {
        return this.ca.fc();
      };g.ia = function (a) {
        return this.ca.ia(a);
      };
      g.Xb = function (a) {
        return new Dc(this.ca, null, this.Oa, !1, a);
      };g.Yb = function (a, b) {
        return new Dc(this.ca, a, this.Oa, !1, b);
      };g.$b = function (a, b) {
        return new Dc(this.ca, a, this.Oa, !0, b);
      };g.$e = function (a) {
        return new Dc(this.ca, null, this.Oa, !0, a);
      };function Dc(a, b, c, d, e) {
        this.Hd = e || null;this.le = d;this.Sa = [];for (e = 1; !a.e();) if (e = b ? c(a.key, b) : 1, d && (e *= -1), 0 > e) a = this.le ? a.left : a.right;else if (0 === e) {
          this.Sa.push(a);break;
        } else this.Sa.push(a), a = this.le ? a.right : a.left;
      }
      function K(a) {
        if (0 === a.Sa.length) return null;var b = a.Sa.pop(),
            c;c = a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };if (a.le) for (b = b.left; !b.e();) a.Sa.push(b), b = b.right;else for (b = b.right; !b.e();) a.Sa.push(b), b = b.left;return c;
      }function Ec(a) {
        if (0 === a.Sa.length) return null;var b;b = a.Sa;b = b[b.length - 1];return a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };
      }function Fc(a, b, c, d, e) {
        this.key = a;this.value = b;this.color = null != c ? c : !0;this.left = null != d ? d : Bc;this.right = null != e ? e : Bc;
      }g = Fc.prototype;
      g.Y = function (a, b, c, d, e) {
        return new Fc(null != a ? a : this.key, null != b ? b : this.value, null != c ? c : this.color, null != d ? d : this.left, null != e ? e : this.right);
      };g.count = function () {
        return this.left.count() + 1 + this.right.count();
      };g.e = function () {
        return !1;
      };g.ia = function (a) {
        return this.left.ia(a) || a(this.key, this.value) || this.right.ia(a);
      };function Gc(a) {
        return a.left.e() ? a : Gc(a.left);
      }g.Hc = function () {
        return Gc(this).key;
      };g.fc = function () {
        return this.right.e() ? this.key : this.right.fc();
      };
      g.Ra = function (a, b, c) {
        var d, e;e = this;d = c(a, e.key);e = 0 > d ? e.Y(null, null, null, e.left.Ra(a, b, c), null) : 0 === d ? e.Y(null, b, null, null, null) : e.Y(null, null, null, null, e.right.Ra(a, b, c));return Hc(e);
      };function Ic(a) {
        if (a.left.e()) return Bc;a.left.fa() || a.left.left.fa() || (a = Jc(a));a = a.Y(null, null, null, Ic(a.left), null);return Hc(a);
      }
      g.remove = function (a, b) {
        var c, d;c = this;if (0 > b(a, c.key)) c.left.e() || c.left.fa() || c.left.left.fa() || (c = Jc(c)), c = c.Y(null, null, null, c.left.remove(a, b), null);else {
          c.left.fa() && (c = Kc(c));c.right.e() || c.right.fa() || c.right.left.fa() || (c = Lc(c), c.left.left.fa() && (c = Kc(c), c = Lc(c)));if (0 === b(a, c.key)) {
            if (c.right.e()) return Bc;d = Gc(c.right);c = c.Y(d.key, d.value, null, null, Ic(c.right));
          }c = c.Y(null, null, null, null, c.right.remove(a, b));
        }return Hc(c);
      };g.fa = function () {
        return this.color;
      };
      function Hc(a) {
        a.right.fa() && !a.left.fa() && (a = Mc(a));a.left.fa() && a.left.left.fa() && (a = Kc(a));a.left.fa() && a.right.fa() && (a = Lc(a));return a;
      }function Jc(a) {
        a = Lc(a);a.right.left.fa() && (a = a.Y(null, null, null, null, Kc(a.right)), a = Mc(a), a = Lc(a));return a;
      }function Mc(a) {
        return a.right.Y(null, null, a.color, a.Y(null, null, !0, null, a.right.left), null);
      }function Kc(a) {
        return a.left.Y(null, null, a.color, null, a.Y(null, null, !0, a.left.right, null));
      }
      function Lc(a) {
        return a.Y(null, null, !a.color, a.left.Y(null, null, !a.left.color, null, null), a.right.Y(null, null, !a.right.color, null, null));
      }function Nc() {}g = Nc.prototype;g.Y = function () {
        return this;
      };g.Ra = function (a, b) {
        return new Fc(a, b, null);
      };g.remove = function () {
        return this;
      };g.count = function () {
        return 0;
      };g.e = function () {
        return !0;
      };g.ia = function () {
        return !1;
      };g.Hc = function () {
        return null;
      };g.fc = function () {
        return null;
      };g.fa = function () {
        return !1;
      };var Bc = new Nc();var Oc = function () {
        var a = 1;return function () {
          return a++;
        };
      }(),
          E = Lb,
          Pc = Mb;
      function Qc(a) {
        try {
          var b;xb();for (var c = vb, d = [], e = 0; e < a.length;) {
            var f = c[a.charAt(e++)],
                h = e < a.length ? c[a.charAt(e)] : 0;++e;var k = e < a.length ? c[a.charAt(e)] : 64;++e;var m = e < a.length ? c[a.charAt(e)] : 64;++e;if (null == f || null == h || null == k || null == m) throw Error();d.push(f << 2 | h >> 4);64 != k && (d.push(h << 4 & 240 | k >> 2), 64 != m && d.push(k << 6 & 192 | m));
          }if (8192 > d.length) b = String.fromCharCode.apply(null, d);else {
            a = "";for (c = 0; c < d.length; c += 8192) a += String.fromCharCode.apply(null, Oa(d, c, c + 8192));b = a;
          }return b;
        } catch (l) {
          I("base64Decode failed: ", l);
        }return null;
      }function Rc(a) {
        var b = Nb(a);a = new zb();a.update(b);var b = [],
            c = 8 * a.Pd;56 > a.ac ? a.update(a.zd, 56 - a.ac) : a.update(a.zd, a.Ya - (a.ac - 56));for (var d = a.Ya - 1; 56 <= d; d--) a.Wd[d] = c & 255, c /= 256;Ab(a, a.Wd);for (d = c = 0; 5 > d; d++) for (var e = 24; 0 <= e; e -= 8) b[c] = a.N[d] >> e & 255, ++c;return wb(b);
      }function Sc(a) {
        for (var b = "", c = 0; c < arguments.length; c++) b = ea(arguments[c]) ? b + Sc.apply(null, arguments[c]) : "object" === typeof arguments[c] ? b + B(arguments[c]) : b + arguments[c], b += " ";return b;
      }var wc = null,
          Tc = !0;
      function Uc(a, b) {
        Lb(!b || !0 === a || !1 === a, "Can't turn on custom loggers persistently.");!0 === a ? ("undefined" !== typeof console && ("function" === typeof console.log ? wc = r(console.log, console) : "object" === typeof console.log && (wc = function (a) {
          console.log(a);
        })), b && Yb.set("logging_enabled", !0)) : ga(a) ? wc = a : (wc = null, Yb.remove("logging_enabled"));
      }function I(a) {
        !0 === Tc && (Tc = !1, null === wc && !0 === Yb.get("logging_enabled") && Uc(!0));if (wc) {
          var b = Sc.apply(null, arguments);wc(b);
        }
      }
      function Vc(a) {
        return function () {
          I(a, arguments);
        };
      }function Wc(a) {
        if ("undefined" !== typeof console) {
          var b = "FIREBASE INTERNAL ERROR: " + Sc.apply(null, arguments);"undefined" !== typeof console.error ? console.error(b) : console.log(b);
        }
      }function Xc(a) {
        var b = Sc.apply(null, arguments);throw Error("FIREBASE FATAL ERROR: " + b);
      }function L(a) {
        if ("undefined" !== typeof console) {
          var b = "FIREBASE WARNING: " + Sc.apply(null, arguments);"undefined" !== typeof console.warn ? console.warn(b) : console.log(b);
        }
      }
      function Yc(a) {
        var b,
            c,
            d,
            e,
            f,
            h = a;f = c = a = b = "";d = !0;e = "https";if (q(h)) {
          var k = h.indexOf("//");0 <= k && (e = h.substring(0, k - 1), h = h.substring(k + 2));k = h.indexOf("/");-1 === k && (k = h.length);b = h.substring(0, k);f = "";h = h.substring(k).split("/");for (k = 0; k < h.length; k++) if (0 < h[k].length) {
            var m = h[k];try {
              m = decodeURIComponent(m.replace(/\+/g, " "));
            } catch (l) {}f += "/" + m;
          }h = b.split(".");3 === h.length ? (a = h[1], c = h[0].toLowerCase()) : 2 === h.length && (a = h[0]);k = b.indexOf(":");0 <= k && (d = "https" === e || "wss" === e);
        }"firebase" === a && Xc(b + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
        c && "undefined" != c || Xc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d || "undefined" !== typeof window && window.location && window.location.protocol && -1 !== window.location.protocol.indexOf("https:") && L("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");return { kc: new cc(b, d, c, "ws" === e || "wss" === e), path: new M(f) };
      }function Zc(a) {
        return fa(a) && (a != a || a == Number.POSITIVE_INFINITY || a == Number.NEGATIVE_INFINITY);
      }
      function $c(a) {
        if ("complete" === document.readyState) a();else {
          var b = !1,
              c = function () {
            document.body ? b || (b = !0, a()) : setTimeout(c, Math.floor(10));
          };document.addEventListener ? (document.addEventListener("DOMContentLoaded", c, !1), window.addEventListener("load", c, !1)) : document.attachEvent && (document.attachEvent("onreadystatechange", function () {
            "complete" === document.readyState && c();
          }), window.attachEvent("onload", c));
        }
      }
      function ad(a, b) {
        if (a === b) return 0;if ("[MIN_NAME]" === a || "[MAX_NAME]" === b) return -1;if ("[MIN_NAME]" === b || "[MAX_NAME]" === a) return 1;var c = bd(a),
            d = bd(b);return null !== c ? null !== d ? 0 == c - d ? a.length - b.length : c - d : -1 : null !== d ? 1 : a < b ? -1 : 1;
      }function cd(a, b) {
        if (b && a in b) return b[a];throw Error("Missing required key (" + a + ") in object: " + B(b));
      }
      function dd(a) {
        if ("object" !== typeof a || null === a) return B(a);var b = [],
            c;for (c in a) b.push(c);b.sort();c = "{";for (var d = 0; d < b.length; d++) 0 !== d && (c += ","), c += B(b[d]), c += ":", c += dd(a[b[d]]);return c + "}";
      }function ed(a, b) {
        if (a.length <= b) return [a];for (var c = [], d = 0; d < a.length; d += b) d + b > a ? c.push(a.substring(d, a.length)) : c.push(a.substring(d, d + b));return c;
      }function fd(a, b) {
        if (da(a)) for (var c = 0; c < a.length; ++c) b(c, a[c]);else t(a, b);
      }
      function gd(a) {
        E(!Zc(a), "Invalid JSON number");var b, c, d, e;0 === a ? (d = c = 0, b = -Infinity === 1 / a ? 1 : 0) : (b = 0 > a, a = Math.abs(a), a >= Math.pow(2, -1022) ? (d = Math.min(Math.floor(Math.log(a) / Math.LN2), 1023), c = d + 1023, d = Math.round(a * Math.pow(2, 52 - d) - Math.pow(2, 52))) : (c = 0, d = Math.round(a / Math.pow(2, -1074))));e = [];for (a = 52; a; --a) e.push(d % 2 ? 1 : 0), d = Math.floor(d / 2);for (a = 11; a; --a) e.push(c % 2 ? 1 : 0), c = Math.floor(c / 2);e.push(b ? 1 : 0);e.reverse();b = e.join("");c = "";for (a = 0; 64 > a; a += 8) d = parseInt(b.substr(a, 8), 2).toString(16), 1 === d.length && (d = "0" + d), c += d;return c.toLowerCase();
      }var hd = /^-?\d{1,10}$/;function bd(a) {
        return hd.test(a) && (a = Number(a), -2147483648 <= a && 2147483647 >= a) ? a : null;
      }function Tb(a) {
        try {
          a();
        } catch (b) {
          setTimeout(function () {
            L("Exception was thrown by user callback.", b.stack || "");throw b;
          }, Math.floor(0));
        }
      }function id(a, b, c) {
        Object.defineProperty(a, b, { get: c });
      };function jd(a) {
        var b = {},
            c = {},
            d = {},
            e = "";try {
          var f = a.split("."),
              b = Kb(Qc(f[0]) || ""),
              c = Kb(Qc(f[1]) || ""),
              e = f[2],
              d = c.d || {};delete c.d;
        } catch (h) {}return { Fg: b, Me: c, data: d, xg: e };
      }function kd(a) {
        a = jd(a);var b = a.Me;return !!a.xg && !!b && "object" === typeof b && b.hasOwnProperty("iat");
      }function ld(a) {
        a = jd(a).Me;return "object" === typeof a && !0 === A(a, "admin");
      };function md(a, b, c) {
        this.type = nd;this.source = a;this.path = b;this.children = c;
      }md.prototype.Nc = function (a) {
        if (this.path.e()) return a = this.children.subtree(new M(a)), a.e() ? null : a.value ? new ac(this.source, C, a.value) : new md(this.source, C, a);E(J(this.path) === a, "Can't get a merge for a child not on the path of the operation");return new md(this.source, D(this.path), this.children);
      };md.prototype.toString = function () {
        return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
      };function od(a) {
        this.g = a;
      }g = od.prototype;g.F = function (a, b, c, d, e, f) {
        E(a.zc(this.g), "A node must be indexed if only a child is updated");e = a.R(b);if (e.Q(d).$(c.Q(d)) && e.e() == c.e()) return a;null != f && (c.e() ? a.Fa(b) ? pd(f, new H("child_removed", e, b)) : E(a.J(), "A child remove without an old child only makes sense on a leaf node") : e.e() ? pd(f, new H("child_added", c, b)) : pd(f, new H("child_changed", c, b, e)));return a.J() && c.e() ? a : a.U(b, c).ob(this.g);
      };
      g.za = function (a, b, c) {
        null != c && (a.J() || a.P(N, function (a, e) {
          b.Fa(a) || pd(c, new H("child_removed", e, a));
        }), b.J() || b.P(N, function (b, e) {
          if (a.Fa(b)) {
            var f = a.R(b);f.$(e) || pd(c, new H("child_changed", e, b, f));
          } else pd(c, new H("child_added", e, b));
        }));return b.ob(this.g);
      };g.ga = function (a, b) {
        return a.e() ? F : a.ga(b);
      };g.Qa = function () {
        return !1;
      };g.Vb = function () {
        return this;
      };function qd(a) {
        this.he = new od(a.g);this.g = a.g;var b;a.la ? (b = rd(a), b = a.g.Fc(sd(a), b)) : b = a.g.Ic();this.Uc = b;a.oa ? (b = td(a), a = a.g.Fc(ud(a), b)) : a = a.g.Gc();this.wc = a;
      }g = qd.prototype;g.matches = function (a) {
        return 0 >= this.g.compare(this.Uc, a) && 0 >= this.g.compare(a, this.wc);
      };g.F = function (a, b, c, d, e, f) {
        this.matches(new O(b, c)) || (c = F);return this.he.F(a, b, c, d, e, f);
      };
      g.za = function (a, b, c) {
        b.J() && (b = F);var d = b.ob(this.g),
            d = d.ga(F),
            e = this;b.P(N, function (a, b) {
          e.matches(new O(a, b)) || (d = d.U(a, F));
        });return this.he.za(a, d, c);
      };g.ga = function (a) {
        return a;
      };g.Qa = function () {
        return !0;
      };g.Vb = function () {
        return this.he;
      };function vd() {
        this.hb = {};
      }
      function pd(a, b) {
        var c = b.type,
            d = b.Za;E("child_added" == c || "child_changed" == c || "child_removed" == c, "Only child changes supported for tracking");E(".priority" !== d, "Only non-priority child changes can be tracked.");var e = A(a.hb, d);if (e) {
          var f = e.type;if ("child_added" == c && "child_removed" == f) a.hb[d] = new H("child_changed", b.Ma, d, e.Ma);else if ("child_removed" == c && "child_added" == f) delete a.hb[d];else if ("child_removed" == c && "child_changed" == f) a.hb[d] = new H("child_removed", e.qe, d);else if ("child_changed" == c && "child_added" == f) a.hb[d] = new H("child_added", b.Ma, d);else if ("child_changed" == c && "child_changed" == f) a.hb[d] = new H("child_changed", b.Ma, d, e.qe);else throw Pc("Illegal combination of changes: " + b + " occurred after " + e);
        } else a.hb[d] = b;
      };function wd(a, b) {
        this.Sd = a;this.Mf = b;
      }function xd(a) {
        this.V = a;
      }
      xd.prototype.gb = function (a, b, c, d) {
        var e = new vd(),
            f;if (b.type === bc) b.source.ee ? c = yd(this, a, b.path, b.Ja, c, d, e) : (E(b.source.We, "Unknown source."), f = b.source.Ee || yc(a.w()) && !b.path.e(), c = zd(this, a, b.path, b.Ja, c, d, f, e));else if (b.type === nd) b.source.ee ? c = Ad(this, a, b.path, b.children, c, d, e) : (E(b.source.We, "Unknown source."), f = b.source.Ee || yc(a.w()), c = Bd(this, a, b.path, b.children, c, d, f, e));else if (b.type === Dd) {
          if (b.Id) {
            if (b = b.path, null != c.mc(b)) c = a;else {
              f = new mc(c, a, d);d = a.O.j();if (b.e() || ".priority" === J(b)) xc(a.w()) ? b = c.Ba(pc(a)) : (b = a.w().j(), E(b instanceof P, "serverChildren would be complete if leaf node"), b = c.sc(b)), b = this.V.za(d, b, e);else {
                var h = J(b),
                    k = c.rc(h, a.w());null == k && nc(a.w(), h) && (k = d.R(h));b = null != k ? this.V.F(d, h, k, D(b), f, e) : a.O.j().Fa(h) ? this.V.F(d, h, F, D(b), f, e) : d;b.e() && xc(a.w()) && (d = c.Ba(pc(a)), d.J() && (b = this.V.za(b, d, e)));
              }d = xc(a.w()) || null != c.mc(C);c = Ed(a, b, d, this.V.Qa());
            }
          } else c = Fd(this, a, b.path, b.Pb, c, d, e);
        } else if (b.type === $b) d = b.path, b = a.w(), f = b.j(), h = b.ea || d.e(), c = Gd(this, new Hd(a.O, new oc(f, h, b.Tb)), d, c, lc, e);else throw Pc("Unknown operation type: " + b.type);e = pa(e.hb);d = c;b = d.O;b.ea && (f = b.j().J() || b.j().e(), h = Id(a), (0 < e.length || !a.O.ea || f && !b.j().$(h) || !b.j().C().$(h.C())) && e.push(gc(Id(d))));return new wd(c, e);
      };
      function Gd(a, b, c, d, e, f) {
        var h = b.O;if (null != d.mc(c)) return b;var k;if (c.e()) E(xc(b.w()), "If change path is empty, we must have complete server data"), yc(b.w()) ? (e = pc(b), d = d.sc(e instanceof P ? e : F)) : d = d.Ba(pc(b)), f = a.V.za(b.O.j(), d, f);else {
          var m = J(c);if (".priority" == m) E(1 == Jd(c), "Can't have a priority with additional path components"), f = h.j(), k = b.w().j(), d = d.$c(c, f, k), f = null != d ? a.V.ga(f, d) : h.j();else {
            var l = D(c);nc(h, m) ? (k = b.w().j(), d = d.$c(c, h.j(), k), d = null != d ? h.j().R(m).F(l, d) : h.j().R(m)) : d = d.rc(m, b.w());f = null != d ? a.V.F(h.j(), m, d, l, e, f) : h.j();
          }
        }return Ed(b, f, h.ea || c.e(), a.V.Qa());
      }function zd(a, b, c, d, e, f, h, k) {
        var m = b.w();h = h ? a.V : a.V.Vb();if (c.e()) d = h.za(m.j(), d, null);else if (h.Qa() && !m.Tb) d = m.j().F(c, d), d = h.za(m.j(), d, null);else {
          var l = J(c);if (!zc(m, c) && 1 < Jd(c)) return b;var u = D(c);d = m.j().R(l).F(u, d);d = ".priority" == l ? h.ga(m.j(), d) : h.F(m.j(), l, d, u, lc, null);
        }m = m.ea || c.e();b = new Hd(b.O, new oc(d, m, h.Qa()));return Gd(a, b, c, e, new mc(e, b, f), k);
      }
      function yd(a, b, c, d, e, f, h) {
        var k = b.O;e = new mc(e, b, f);if (c.e()) h = a.V.za(b.O.j(), d, h), a = Ed(b, h, !0, a.V.Qa());else if (f = J(c), ".priority" === f) h = a.V.ga(b.O.j(), d), a = Ed(b, h, k.ea, k.Tb);else {
          c = D(c);var m = k.j().R(f);if (!c.e()) {
            var l = e.Xe(f);d = null != l ? ".priority" === Kd(c) && l.Q(c.parent()).e() ? l : l.F(c, d) : F;
          }m.$(d) ? a = b : (h = a.V.F(k.j(), f, d, c, e, h), a = Ed(b, h, k.ea, a.V.Qa()));
        }return a;
      }
      function Ad(a, b, c, d, e, f, h) {
        var k = b;Ld(d, function (d, l) {
          var u = c.m(d);nc(b.O, J(u)) && (k = yd(a, k, u, l, e, f, h));
        });Ld(d, function (d, l) {
          var u = c.m(d);nc(b.O, J(u)) || (k = yd(a, k, u, l, e, f, h));
        });return k;
      }function Md(a, b) {
        Ld(b, function (b, d) {
          a = a.F(b, d);
        });return a;
      }
      function Bd(a, b, c, d, e, f, h, k) {
        if (b.w().j().e() && !xc(b.w())) return b;var m = b;c = c.e() ? d : Nd(Q, c, d);var l = b.w().j();c.children.ia(function (c, d) {
          if (l.Fa(c)) {
            var G = b.w().j().R(c),
                G = Md(G, d);m = zd(a, m, new M(c), G, e, f, h, k);
          }
        });c.children.ia(function (c, d) {
          var G = !nc(b.w(), c) && null == d.value;l.Fa(c) || G || (G = b.w().j().R(c), G = Md(G, d), m = zd(a, m, new M(c), G, e, f, h, k));
        });return m;
      }
      function Fd(a, b, c, d, e, f, h) {
        if (null != e.mc(c)) return b;var k = yc(b.w()),
            m = b.w();if (null != d.value) {
          if (c.e() && m.ea || zc(m, c)) return zd(a, b, c, m.j().Q(c), e, f, k, h);if (c.e()) {
            var l = Q;m.j().P(Od, function (a, b) {
              l = l.set(new M(a), b);
            });return Bd(a, b, c, l, e, f, k, h);
          }return b;
        }l = Q;Ld(d, function (a) {
          var b = c.m(a);zc(m, b) && (l = l.set(a, m.j().Q(b)));
        });return Bd(a, b, c, l, e, f, k, h);
      };var Pd = function () {
        var a = 0,
            b = [];return function (c) {
          var d = c === a;a = c;for (var e = Array(8), f = 7; 0 <= f; f--) e[f] = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c % 64), c = Math.floor(c / 64);E(0 === c, "Cannot push at time == 0");c = e.join("");if (d) {
            for (f = 11; 0 <= f && 63 === b[f]; f--) b[f] = 0;b[f]++;
          } else for (f = 0; 12 > f; f++) b[f] = Math.floor(64 * Math.random());for (f = 0; 12 > f; f++) c += "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);E(20 === c.length, "nextPushId: Length should be 20.");
          return c;
        };
      }();function M(a, b) {
        if (1 == arguments.length) {
          this.o = a.split("/");for (var c = 0, d = 0; d < this.o.length; d++) 0 < this.o[d].length && (this.o[c] = this.o[d], c++);this.o.length = c;this.Z = 0;
        } else this.o = a, this.Z = b;
      }function R(a, b) {
        var c = J(a);if (null === c) return b;if (c === J(b)) return R(D(a), D(b));throw Error("INTERNAL ERROR: innerPath (" + b + ") is not within outerPath (" + a + ")");
      }
      function Qd(a, b) {
        for (var c = a.slice(), d = b.slice(), e = 0; e < c.length && e < d.length; e++) {
          var f = ad(c[e], d[e]);if (0 !== f) return f;
        }return c.length === d.length ? 0 : c.length < d.length ? -1 : 1;
      }function J(a) {
        return a.Z >= a.o.length ? null : a.o[a.Z];
      }function Jd(a) {
        return a.o.length - a.Z;
      }function D(a) {
        var b = a.Z;b < a.o.length && b++;return new M(a.o, b);
      }function Kd(a) {
        return a.Z < a.o.length ? a.o[a.o.length - 1] : null;
      }g = M.prototype;
      g.toString = function () {
        for (var a = "", b = this.Z; b < this.o.length; b++) "" !== this.o[b] && (a += "/" + this.o[b]);return a || "/";
      };g.slice = function (a) {
        return this.o.slice(this.Z + (a || 0));
      };g.parent = function () {
        if (this.Z >= this.o.length) return null;for (var a = [], b = this.Z; b < this.o.length - 1; b++) a.push(this.o[b]);return new M(a, 0);
      };
      g.m = function (a) {
        for (var b = [], c = this.Z; c < this.o.length; c++) b.push(this.o[c]);if (a instanceof M) for (c = a.Z; c < a.o.length; c++) b.push(a.o[c]);else for (a = a.split("/"), c = 0; c < a.length; c++) 0 < a[c].length && b.push(a[c]);return new M(b, 0);
      };g.e = function () {
        return this.Z >= this.o.length;
      };g.$ = function (a) {
        if (Jd(this) !== Jd(a)) return !1;for (var b = this.Z, c = a.Z; b <= this.o.length; b++, c++) if (this.o[b] !== a.o[c]) return !1;return !0;
      };
      g.contains = function (a) {
        var b = this.Z,
            c = a.Z;if (Jd(this) > Jd(a)) return !1;for (; b < this.o.length;) {
          if (this.o[b] !== a.o[c]) return !1;++b;++c;
        }return !0;
      };var C = new M("");function Rd(a, b) {
        this.Ta = a.slice();this.Ka = Math.max(1, this.Ta.length);this.Te = b;for (var c = 0; c < this.Ta.length; c++) this.Ka += Ob(this.Ta[c]);Sd(this);
      }Rd.prototype.push = function (a) {
        0 < this.Ta.length && (this.Ka += 1);this.Ta.push(a);this.Ka += Ob(a);Sd(this);
      };Rd.prototype.pop = function () {
        var a = this.Ta.pop();this.Ka -= Ob(a);0 < this.Ta.length && --this.Ka;
      };
      function Sd(a) {
        if (768 < a.Ka) throw Error(a.Te + "has a key path longer than 768 bytes (" + a.Ka + ").");if (32 < a.Ta.length) throw Error(a.Te + "path specified exceeds the maximum depth that can be written (32) or object contains a cycle " + Td(a));
      }function Td(a) {
        return 0 == a.Ta.length ? "" : "in property '" + a.Ta.join(".") + "'";
      };var Ud = /[\[\].#$\/\u0000-\u001F\u007F]/,
          Vd = /[\[\].#$\u0000-\u001F\u007F]/;function Wd(a) {
        return q(a) && 0 !== a.length && !Ud.test(a);
      }function Xd(a) {
        return null === a || q(a) || fa(a) && !Zc(a) || ha(a) && Hb(a, ".sv");
      }function Yd(a, b, c, d) {
        d && !p(b) || Zd(Bb(a, 1, d), b, c);
      }
      function Zd(a, b, c) {
        c instanceof M && (c = new Rd(c, a));if (!p(b)) throw Error(a + "contains undefined " + Td(c));if (ga(b)) throw Error(a + "contains a function " + Td(c) + " with contents: " + b.toString());if (Zc(b)) throw Error(a + "contains " + b.toString() + " " + Td(c));if (q(b) && b.length > 10485760 / 3 && 10485760 < Ob(b)) throw Error(a + "contains a string greater than 10485760 utf8 bytes " + Td(c) + " ('" + b.substring(0, 50) + "...')");if (ha(b)) {
          var d = !1,
              e = !1;Ib(b, function (b, h) {
            if (".value" === b) d = !0;else if (".priority" !== b && ".sv" !== b && (e = !0, !Wd(b))) throw Error(a + " contains an invalid key (" + b + ") " + Td(c) + '.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);Zd(a, h, c);c.pop();
          });if (d && e) throw Error(a + ' contains ".value" child ' + Td(c) + " in addition to actual children.");
        }
      }
      function $d(a, b) {
        var c, d;for (c = 0; c < b.length; c++) {
          d = b[c];for (var e = d.slice(), f = 0; f < e.length; f++) if ((".priority" !== e[f] || f !== e.length - 1) && !Wd(e[f])) throw Error(a + "contains an invalid key (" + e[f] + ") in path " + d.toString() + '. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }b.sort(Qd);e = null;for (c = 0; c < b.length; c++) {
          d = b[c];if (null !== e && e.contains(d)) throw Error(a + "contains a path " + e.toString() + " that is ancestor of another path " + d.toString());e = d;
        }
      }
      function ae(a, b, c) {
        var d = Bb(a, 1, !1);if (!ha(b) || da(b)) throw Error(d + " must be an object containing the children to replace.");var e = [];Ib(b, function (a, b) {
          var k = new M(a);Zd(d, b, c.m(k));if (".priority" === Kd(k) && !Xd(b)) throw Error(d + "contains an invalid value for '" + k.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k);
        });$d(d, e);
      }
      function be(a, b, c) {
        if (Zc(c)) throw Error(Bb(a, b, !1) + "is " + c.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");if (!Xd(c)) throw Error(Bb(a, b, !1) + "must be a valid Firebase priority (a string, finite number, server value, or null).");
      }
      function ce(a, b, c) {
        if (!c || p(b)) switch (b) {case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":
            break;default:
            throw Error(Bb(a, 1, c) + 'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}
      }function de(a, b) {
        if (p(b) && !Wd(b)) throw Error(Bb(a, 2, !0) + 'was an invalid key: "' + b + '".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');
      }
      function ee(a, b) {
        if (!q(b) || 0 === b.length || Vd.test(b)) throw Error(Bb(a, 1, !1) + 'was an invalid path: "' + b + '". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');
      }function fe(a, b) {
        if (".info" === J(b)) throw Error(a + " failed: Can't modify data under /.info/");
      }
      function ge(a, b) {
        var c = b.path.toString(),
            d;!(d = !q(b.kc.host) || 0 === b.kc.host.length || !Wd(b.kc.pe)) && (d = 0 !== c.length) && (c && (c = c.replace(/^\/*\.info(\/|$)/, "/")), d = !(q(c) && 0 !== c.length && !Vd.test(c)));if (d) throw Error(Bb(a, 1, !1) + 'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');
      };function he() {
        this.children = {};this.ad = 0;this.value = null;
      }function ie(a, b, c) {
        this.ud = a ? a : "";this.Ha = b ? b : null;this.A = c ? c : new he();
      }function je(a, b) {
        for (var c = b instanceof M ? b : new M(b), d = a, e; null !== (e = J(c));) d = new ie(e, d, A(d.A.children, e) || new he()), c = D(c);return d;
      }g = ie.prototype;g.Ea = function () {
        return this.A.value;
      };function ke(a, b) {
        E("undefined" !== typeof b, "Cannot set value to undefined");a.A.value = b;le(a);
      }g.clear = function () {
        this.A.value = null;this.A.children = {};this.A.ad = 0;le(this);
      };
      g.kd = function () {
        return 0 < this.A.ad;
      };g.e = function () {
        return null === this.Ea() && !this.kd();
      };g.P = function (a) {
        var b = this;t(this.A.children, function (c, d) {
          a(new ie(d, b, c));
        });
      };function me(a, b, c, d) {
        c && !d && b(a);a.P(function (a) {
          me(a, b, !0, d);
        });c && d && b(a);
      }function ne(a, b) {
        for (var c = a.parent(); null !== c && !b(c);) c = c.parent();
      }g.path = function () {
        return new M(null === this.Ha ? this.ud : this.Ha.path() + "/" + this.ud);
      };g.name = function () {
        return this.ud;
      };g.parent = function () {
        return this.Ha;
      };
      function le(a) {
        if (null !== a.Ha) {
          var b = a.Ha,
              c = a.ud,
              d = a.e(),
              e = Hb(b.A.children, c);d && e ? (delete b.A.children[c], b.A.ad--, le(b)) : d || e || (b.A.children[c] = a.A, b.A.ad++, le(b));
        }
      };function oe(a) {
        E(da(a) && 0 < a.length, "Requires a non-empty array");this.Kf = a;this.Ec = {};
      }oe.prototype.Ge = function (a, b) {
        var c;c = this.Ec[a] || [];var d = c.length;if (0 < d) {
          for (var e = Array(d), f = 0; f < d; f++) e[f] = c[f];c = e;
        } else c = [];for (d = 0; d < c.length; d++) c[d].Ke.apply(c[d].Pa, Array.prototype.slice.call(arguments, 1));
      };oe.prototype.hc = function (a, b, c) {
        pe(this, a);this.Ec[a] = this.Ec[a] || [];this.Ec[a].push({ Ke: b, Pa: c });(a = this.Ye(a)) && b.apply(c, a);
      };
      oe.prototype.Jc = function (a, b, c) {
        pe(this, a);a = this.Ec[a] || [];for (var d = 0; d < a.length; d++) if (a[d].Ke === b && (!c || c === a[d].Pa)) {
          a.splice(d, 1);break;
        }
      };function pe(a, b) {
        E(La(a.Kf, function (a) {
          return a === b;
        }), "Unknown event: " + b);
      };function qe(a, b) {
        this.value = a;this.children = b || re;
      }var re = new Ac(function (a, b) {
        return a === b ? 0 : a < b ? -1 : 1;
      });function se(a) {
        var b = Q;t(a, function (a, d) {
          b = b.set(new M(d), a);
        });return b;
      }g = qe.prototype;g.e = function () {
        return null === this.value && this.children.e();
      };function te(a, b, c) {
        if (null != a.value && c(a.value)) return { path: C, value: a.value };if (b.e()) return null;var d = J(b);a = a.children.get(d);return null !== a ? (b = te(a, D(b), c), null != b ? { path: new M(d).m(b.path), value: b.value } : null) : null;
      }
      function ue(a, b) {
        return te(a, b, function () {
          return !0;
        });
      }g.subtree = function (a) {
        if (a.e()) return this;var b = this.children.get(J(a));return null !== b ? b.subtree(D(a)) : Q;
      };g.set = function (a, b) {
        if (a.e()) return new qe(b, this.children);var c = J(a),
            d = (this.children.get(c) || Q).set(D(a), b),
            c = this.children.Ra(c, d);return new qe(this.value, c);
      };
      g.remove = function (a) {
        if (a.e()) return this.children.e() ? Q : new qe(null, this.children);var b = J(a),
            c = this.children.get(b);return c ? (a = c.remove(D(a)), b = a.e() ? this.children.remove(b) : this.children.Ra(b, a), null === this.value && b.e() ? Q : new qe(this.value, b)) : this;
      };g.get = function (a) {
        if (a.e()) return this.value;var b = this.children.get(J(a));return b ? b.get(D(a)) : null;
      };
      function Nd(a, b, c) {
        if (b.e()) return c;var d = J(b);b = Nd(a.children.get(d) || Q, D(b), c);d = b.e() ? a.children.remove(d) : a.children.Ra(d, b);return new qe(a.value, d);
      }function ve(a, b) {
        return we(a, C, b);
      }function we(a, b, c) {
        var d = {};a.children.ia(function (a, f) {
          d[a] = we(f, b.m(a), c);
        });return c(b, a.value, d);
      }function xe(a, b, c) {
        return ye(a, b, C, c);
      }function ye(a, b, c, d) {
        var e = a.value ? d(c, a.value) : !1;if (e) return e;if (b.e()) return null;e = J(b);return (a = a.children.get(e)) ? ye(a, D(b), c.m(e), d) : null;
      }
      function ze(a, b, c) {
        Ae(a, b, C, c);
      }function Ae(a, b, c, d) {
        if (b.e()) return a;a.value && d(c, a.value);var e = J(b);return (a = a.children.get(e)) ? Ae(a, D(b), c.m(e), d) : Q;
      }function Ld(a, b) {
        Be(a, C, b);
      }function Be(a, b, c) {
        a.children.ia(function (a, e) {
          Be(e, b.m(a), c);
        });a.value && c(b, a.value);
      }function Ce(a, b) {
        a.children.ia(function (a, d) {
          d.value && b(a, d.value);
        });
      }var Q = new qe(null);qe.prototype.toString = function () {
        var a = {};Ld(this, function (b, c) {
          a[b.toString()] = c.toString();
        });return B(a);
      };function De(a, b, c) {
        this.type = Dd;this.source = Ee;this.path = a;this.Pb = b;this.Id = c;
      }De.prototype.Nc = function (a) {
        if (this.path.e()) {
          if (null != this.Pb.value) return E(this.Pb.children.e(), "affectedTree should not have overlapping affected paths."), this;a = this.Pb.subtree(new M(a));return new De(C, a, this.Id);
        }E(J(this.path) === a, "operationForChild called for unrelated child.");return new De(D(this.path), this.Pb, this.Id);
      };
      De.prototype.toString = function () {
        return "Operation(" + this.path + ": " + this.source.toString() + " ack write revert=" + this.Id + " affectedTree=" + this.Pb + ")";
      };var bc = 0,
          nd = 1,
          Dd = 2,
          $b = 3;function Fe(a, b, c, d) {
        this.ee = a;this.We = b;this.Ib = c;this.Ee = d;E(!d || b, "Tagged queries must be from server.");
      }var Ee = new Fe(!0, !1, null, !1),
          Ge = new Fe(!1, !0, null, !1);Fe.prototype.toString = function () {
        return this.ee ? "user" : this.Ee ? "server(queryID=" + this.Ib + ")" : "server";
      };function He() {
        oe.call(this, ["visible"]);var a, b;"undefined" !== typeof document && "undefined" !== typeof document.addEventListener && ("undefined" !== typeof document.hidden ? (b = "visibilitychange", a = "hidden") : "undefined" !== typeof document.mozHidden ? (b = "mozvisibilitychange", a = "mozHidden") : "undefined" !== typeof document.msHidden ? (b = "msvisibilitychange", a = "msHidden") : "undefined" !== typeof document.webkitHidden && (b = "webkitvisibilitychange", a = "webkitHidden"));this.Nb = !0;if (b) {
          var c = this;document.addEventListener(b, function () {
            var b = !document[a];b !== c.Nb && (c.Nb = b, c.Ge("visible", b));
          }, !1);
        }
      }ka(He, oe);He.prototype.Ye = function (a) {
        E("visible" === a, "Unknown event type: " + a);return [this.Nb];
      };ba(He);function Ie() {
        this.set = {};
      }g = Ie.prototype;g.add = function (a, b) {
        this.set[a] = null !== b ? b : !0;
      };g.contains = function (a) {
        return Hb(this.set, a);
      };g.get = function (a) {
        return this.contains(a) ? this.set[a] : void 0;
      };g.remove = function (a) {
        delete this.set[a];
      };g.clear = function () {
        this.set = {};
      };g.e = function () {
        return ua(this.set);
      };g.count = function () {
        return na(this.set);
      };function Je(a, b) {
        t(a.set, function (a, d) {
          b(d, a);
        });
      }g.keys = function () {
        var a = [];t(this.set, function (b, c) {
          a.push(c);
        });return a;
      };function Ke(a, b) {
        return a && "object" === typeof a ? (E(".sv" in a, "Unexpected leaf node or priority contents"), b[a[".sv"]]) : a;
      }function Le(a, b) {
        var c = new Me();Ne(a, new M(""), function (a, e) {
          Oe(c, a, Pe(e, b));
        });return c;
      }function Pe(a, b) {
        var c = a.C().H(),
            c = Ke(c, b),
            d;if (a.J()) {
          var e = Ke(a.Ea(), b);return e !== a.Ea() || c !== a.C().H() ? new Qe(e, S(c)) : a;
        }d = a;c !== a.C().H() && (d = d.ga(new Qe(c)));a.P(N, function (a, c) {
          var e = Pe(c, b);e !== c && (d = d.U(a, e));
        });return d;
      };function Re() {
        oe.call(this, ["online"]);this.ic = !0;if ("undefined" !== typeof window && "undefined" !== typeof window.addEventListener && !Pb()) {
          var a = this;window.addEventListener("online", function () {
            a.ic || (a.ic = !0, a.Ge("online", !0));
          }, !1);window.addEventListener("offline", function () {
            a.ic && (a.ic = !1, a.Ge("online", !1));
          }, !1);
        }
      }ka(Re, oe);Re.prototype.Ye = function (a) {
        E("online" === a, "Unknown event type: " + a);return [this.ic];
      };ba(Re);function Se() {}var Te = {};function Ue(a) {
        return r(a.compare, a);
      }Se.prototype.nd = function (a, b) {
        return 0 !== this.compare(new O("[MIN_NAME]", a), new O("[MIN_NAME]", b));
      };Se.prototype.Ic = function () {
        return Ve;
      };function We(a) {
        E(!a.e() && ".priority" !== J(a), "Can't create PathIndex with empty path or .priority key");this.cc = a;
      }ka(We, Se);g = We.prototype;g.yc = function (a) {
        return !a.Q(this.cc).e();
      };g.compare = function (a, b) {
        var c = a.S.Q(this.cc),
            d = b.S.Q(this.cc),
            c = c.tc(d);return 0 === c ? ad(a.name, b.name) : c;
      };
      g.Fc = function (a, b) {
        var c = S(a),
            c = F.F(this.cc, c);return new O(b, c);
      };g.Gc = function () {
        var a = F.F(this.cc, Xe);return new O("[MAX_NAME]", a);
      };g.toString = function () {
        return this.cc.slice().join("/");
      };function Ye() {}ka(Ye, Se);g = Ye.prototype;g.compare = function (a, b) {
        var c = a.S.C(),
            d = b.S.C(),
            c = c.tc(d);return 0 === c ? ad(a.name, b.name) : c;
      };g.yc = function (a) {
        return !a.C().e();
      };g.nd = function (a, b) {
        return !a.C().$(b.C());
      };g.Ic = function () {
        return Ve;
      };g.Gc = function () {
        return new O("[MAX_NAME]", new Qe("[PRIORITY-POST]", Xe));
      };
      g.Fc = function (a, b) {
        var c = S(a);return new O(b, new Qe("[PRIORITY-POST]", c));
      };g.toString = function () {
        return ".priority";
      };var N = new Ye();function Ze() {}ka(Ze, Se);g = Ze.prototype;g.compare = function (a, b) {
        return ad(a.name, b.name);
      };g.yc = function () {
        throw Pc("KeyIndex.isDefinedOn not expected to be called.");
      };g.nd = function () {
        return !1;
      };g.Ic = function () {
        return Ve;
      };g.Gc = function () {
        return new O("[MAX_NAME]", F);
      };g.Fc = function (a) {
        E(q(a), "KeyIndex indexValue must always be a string.");return new O(a, F);
      };g.toString = function () {
        return ".key";
      };
      var Od = new Ze();function $e() {}ka($e, Se);g = $e.prototype;g.compare = function (a, b) {
        var c = a.S.tc(b.S);return 0 === c ? ad(a.name, b.name) : c;
      };g.yc = function () {
        return !0;
      };g.nd = function (a, b) {
        return !a.$(b);
      };g.Ic = function () {
        return Ve;
      };g.Gc = function () {
        return af;
      };g.Fc = function (a, b) {
        var c = S(a);return new O(b, c);
      };g.toString = function () {
        return ".value";
      };var bf = new $e();function cf(a, b) {
        return ad(a.name, b.name);
      }function df(a, b) {
        return ad(a, b);
      };function ef(a, b) {
        this.od = a;this.dc = b;
      }ef.prototype.get = function (a) {
        var b = A(this.od, a);if (!b) throw Error("No index defined for " + a);return b === Te ? null : b;
      };function ff(a, b, c) {
        var d = la(a.od, function (d, f) {
          var h = A(a.dc, f);E(h, "Missing index implementation for " + f);if (d === Te) {
            if (h.yc(b.S)) {
              for (var k = [], m = c.Xb(gf), l = K(m); l;) l.name != b.name && k.push(l), l = K(m);k.push(b);return hf(k, Ue(h));
            }return Te;
          }h = c.get(b.name);k = d;h && (k = k.remove(new O(b.name, h)));return k.Ra(b, b.S);
        });return new ef(d, a.dc);
      }
      function jf(a, b, c) {
        var d = la(a.od, function (a) {
          if (a === Te) return a;var d = c.get(b.name);return d ? a.remove(new O(b.name, d)) : a;
        });return new ef(d, a.dc);
      }var kf = new ef({ ".priority": Te }, { ".priority": N });function O(a, b) {
        this.name = a;this.S = b;
      }function gf(a, b) {
        return new O(a, b);
      };function lf(a) {
        this.ta = new qd(a);this.g = a.g;E(a.ya, "Only valid if limit has been set");this.pa = a.pa;this.Jb = !mf(a);
      }g = lf.prototype;g.F = function (a, b, c, d, e, f) {
        this.ta.matches(new O(b, c)) || (c = F);return a.R(b).$(c) ? a : a.Fb() < this.pa ? this.ta.Vb().F(a, b, c, d, e, f) : nf(this, a, b, c, e, f);
      };
      g.za = function (a, b, c) {
        var d;if (b.J() || b.e()) d = F.ob(this.g);else if (2 * this.pa < b.Fb() && b.zc(this.g)) {
          d = F.ob(this.g);b = this.Jb ? b.$b(this.ta.wc, this.g) : b.Yb(this.ta.Uc, this.g);for (var e = 0; 0 < b.Sa.length && e < this.pa;) {
            var f = K(b),
                h;if (h = this.Jb ? 0 >= this.g.compare(this.ta.Uc, f) : 0 >= this.g.compare(f, this.ta.wc)) d = d.U(f.name, f.S), e++;else break;
          }
        } else {
          d = b.ob(this.g);d = d.ga(F);var k, m, l;if (this.Jb) {
            b = d.$e(this.g);k = this.ta.wc;m = this.ta.Uc;var u = Ue(this.g);l = function (a, b) {
              return u(b, a);
            };
          } else b = d.Xb(this.g), k = this.ta.Uc, m = this.ta.wc, l = Ue(this.g);for (var e = 0, z = !1; 0 < b.Sa.length;) f = K(b), !z && 0 >= l(k, f) && (z = !0), (h = z && e < this.pa && 0 >= l(f, m)) ? e++ : d = d.U(f.name, F);
        }return this.ta.Vb().za(a, d, c);
      };g.ga = function (a) {
        return a;
      };g.Qa = function () {
        return !0;
      };g.Vb = function () {
        return this.ta.Vb();
      };
      function nf(a, b, c, d, e, f) {
        var h;if (a.Jb) {
          var k = Ue(a.g);h = function (a, b) {
            return k(b, a);
          };
        } else h = Ue(a.g);E(b.Fb() == a.pa, "");var m = new O(c, d),
            l = a.Jb ? of(b, a.g) : pf(b, a.g),
            u = a.ta.matches(m);if (b.Fa(c)) {
          for (var z = b.R(c), l = e.fe(a.g, l, a.Jb); null != l && (l.name == c || b.Fa(l.name));) l = e.fe(a.g, l, a.Jb);e = null == l ? 1 : h(l, m);if (u && !d.e() && 0 <= e) return null != f && pd(f, new H("child_changed", d, c, z)), b.U(c, d);null != f && pd(f, new H("child_removed", z, c));b = b.U(c, F);return null != l && a.ta.matches(l) ? (null != f && pd(f, new H("child_added", l.S, l.name)), b.U(l.name, l.S)) : b;
        }return d.e() ? b : u && 0 <= h(l, m) ? (null != f && (pd(f, new H("child_removed", l.S, l.name)), pd(f, new H("child_added", d, c))), b.U(c, d).U(l.name, F)) : b;
      };function qf(a) {
        this.W = a;this.g = a.n.g;
      }function rf(a, b, c, d) {
        var e = [],
            f = [];Ga(b, function (b) {
          "child_changed" === b.type && a.g.nd(b.qe, b.Ma) && f.push(new H("child_moved", b.Ma, b.Za));
        });sf(a, e, "child_removed", b, d, c);sf(a, e, "child_added", b, d, c);sf(a, e, "child_moved", f, d, c);sf(a, e, "child_changed", b, d, c);sf(a, e, hc, b, d, c);return e;
      }function sf(a, b, c, d, e, f) {
        d = Ha(d, function (a) {
          return a.type === c;
        });Pa(d, r(a.Of, a));Ga(d, function (c) {
          var d = tf(a, c, f);Ga(e, function (e) {
            e.tf(c.type) && b.push(e.createEvent(d, a.W));
          });
        });
      }
      function tf(a, b, c) {
        "value" !== b.type && "child_removed" !== b.type && (b.Dd = c.Ze(b.Za, b.Ma, a.g));return b;
      }qf.prototype.Of = function (a, b) {
        if (null == a.Za || null == b.Za) throw Pc("Should only compare child_ events.");return this.g.compare(new O(a.Za, a.Ma), new O(b.Za, b.Ma));
      };function uf() {
        this.Sb = this.oa = this.Lb = this.la = this.ya = !1;this.pa = 0;this.oc = "";this.ec = null;this.Ab = "";this.bc = null;this.yb = "";this.g = N;
      }var vf = new uf();function mf(a) {
        return "" === a.oc ? a.la : "l" === a.oc;
      }function sd(a) {
        E(a.la, "Only valid if start has been set");return a.ec;
      }function rd(a) {
        E(a.la, "Only valid if start has been set");return a.Lb ? a.Ab : "[MIN_NAME]";
      }function ud(a) {
        E(a.oa, "Only valid if end has been set");return a.bc;
      }
      function td(a) {
        E(a.oa, "Only valid if end has been set");return a.Sb ? a.yb : "[MAX_NAME]";
      }function wf(a) {
        var b = new uf();b.ya = a.ya;b.pa = a.pa;b.la = a.la;b.ec = a.ec;b.Lb = a.Lb;b.Ab = a.Ab;b.oa = a.oa;b.bc = a.bc;b.Sb = a.Sb;b.yb = a.yb;b.g = a.g;return b;
      }g = uf.prototype;g.ne = function (a) {
        var b = wf(this);b.ya = !0;b.pa = a;b.oc = "l";return b;
      };g.oe = function (a) {
        var b = wf(this);b.ya = !0;b.pa = a;b.oc = "r";return b;
      };g.Nd = function (a, b) {
        var c = wf(this);c.la = !0;p(a) || (a = null);c.ec = a;null != b ? (c.Lb = !0, c.Ab = b) : (c.Lb = !1, c.Ab = "");return c;
      };
      g.fd = function (a, b) {
        var c = wf(this);c.oa = !0;p(a) || (a = null);c.bc = a;p(b) ? (c.Sb = !0, c.yb = b) : (c.Hg = !1, c.yb = "");return c;
      };function xf(a, b) {
        var c = wf(a);c.g = b;return c;
      }function yf(a) {
        var b = {};a.la && (b.sp = a.ec, a.Lb && (b.sn = a.Ab));a.oa && (b.ep = a.bc, a.Sb && (b.en = a.yb));if (a.ya) {
          b.l = a.pa;var c = a.oc;"" === c && (c = mf(a) ? "l" : "r");b.vf = c;
        }a.g !== N && (b.i = a.g.toString());return b;
      }function T(a) {
        return !(a.la || a.oa || a.ya);
      }function zf(a) {
        return T(a) && a.g == N;
      }
      function Af(a) {
        var b = {};if (zf(a)) return b;var c;a.g === N ? c = "$priority" : a.g === bf ? c = "$value" : a.g === Od ? c = "$key" : (E(a.g instanceof We, "Unrecognized index type!"), c = a.g.toString());b.orderBy = B(c);a.la && (b.startAt = B(a.ec), a.Lb && (b.startAt += "," + B(a.Ab)));a.oa && (b.endAt = B(a.bc), a.Sb && (b.endAt += "," + B(a.yb)));a.ya && (mf(a) ? b.limitToFirst = a.pa : b.limitToLast = a.pa);return b;
      }g.toString = function () {
        return B(yf(this));
      };function Qe(a, b) {
        this.B = a;E(p(this.B) && null !== this.B, "LeafNode shouldn't be created with null/undefined value.");this.ba = b || F;Bf(this.ba);this.Eb = null;
      }var Cf = ["object", "boolean", "number", "string"];g = Qe.prototype;g.J = function () {
        return !0;
      };g.C = function () {
        return this.ba;
      };g.ga = function (a) {
        return new Qe(this.B, a);
      };g.R = function (a) {
        return ".priority" === a ? this.ba : F;
      };g.Q = function (a) {
        return a.e() ? this : ".priority" === J(a) ? this.ba : F;
      };g.Fa = function () {
        return !1;
      };g.Ze = function () {
        return null;
      };
      g.U = function (a, b) {
        return ".priority" === a ? this.ga(b) : b.e() && ".priority" !== a ? this : F.U(a, b).ga(this.ba);
      };g.F = function (a, b) {
        var c = J(a);if (null === c) return b;if (b.e() && ".priority" !== c) return this;E(".priority" !== c || 1 === Jd(a), ".priority must be the last token in a path");return this.U(c, F.F(D(a), b));
      };g.e = function () {
        return !1;
      };g.Fb = function () {
        return 0;
      };g.P = function () {
        return !1;
      };g.H = function (a) {
        return a && !this.C().e() ? { ".value": this.Ea(), ".priority": this.C().H() } : this.Ea();
      };
      g.hash = function () {
        if (null === this.Eb) {
          var a = "";this.ba.e() || (a += "priority:" + Df(this.ba.H()) + ":");var b = typeof this.B,
              a = a + (b + ":"),
              a = "number" === b ? a + gd(this.B) : a + this.B;this.Eb = Rc(a);
        }return this.Eb;
      };g.Ea = function () {
        return this.B;
      };g.tc = function (a) {
        if (a === F) return 1;if (a instanceof P) return -1;E(a.J(), "Unknown node type");var b = typeof a.B,
            c = typeof this.B,
            d = Fa(Cf, b),
            e = Fa(Cf, c);E(0 <= d, "Unknown leaf type: " + b);E(0 <= e, "Unknown leaf type: " + c);return d === e ? "object" === c ? 0 : this.B < a.B ? -1 : this.B === a.B ? 0 : 1 : e - d;
      };
      g.ob = function () {
        return this;
      };g.zc = function () {
        return !0;
      };g.$ = function (a) {
        return a === this ? !0 : a.J() ? this.B === a.B && this.ba.$(a.ba) : !1;
      };g.toString = function () {
        return B(this.H(!0));
      };function P(a, b, c) {
        this.k = a;(this.ba = b) && Bf(this.ba);a.e() && E(!this.ba || this.ba.e(), "An empty node cannot have a priority");this.zb = c;this.Eb = null;
      }g = P.prototype;g.J = function () {
        return !1;
      };g.C = function () {
        return this.ba || F;
      };g.ga = function (a) {
        return this.k.e() ? this : new P(this.k, a, this.zb);
      };g.R = function (a) {
        if (".priority" === a) return this.C();a = this.k.get(a);return null === a ? F : a;
      };g.Q = function (a) {
        var b = J(a);return null === b ? this : this.R(b).Q(D(a));
      };g.Fa = function (a) {
        return null !== this.k.get(a);
      };
      g.U = function (a, b) {
        E(b, "We should always be passing snapshot nodes");if (".priority" === a) return this.ga(b);var c = new O(a, b),
            d,
            e;b.e() ? (d = this.k.remove(a), c = jf(this.zb, c, this.k)) : (d = this.k.Ra(a, b), c = ff(this.zb, c, this.k));e = d.e() ? F : this.ba;return new P(d, e, c);
      };g.F = function (a, b) {
        var c = J(a);if (null === c) return b;E(".priority" !== J(a) || 1 === Jd(a), ".priority must be the last token in a path");var d = this.R(c).F(D(a), b);return this.U(c, d);
      };g.e = function () {
        return this.k.e();
      };g.Fb = function () {
        return this.k.count();
      };
      var Ef = /^(0|[1-9]\d*)$/;g = P.prototype;g.H = function (a) {
        if (this.e()) return null;var b = {},
            c = 0,
            d = 0,
            e = !0;this.P(N, function (f, h) {
          b[f] = h.H(a);c++;e && Ef.test(f) ? d = Math.max(d, Number(f)) : e = !1;
        });if (!a && e && d < 2 * c) {
          var f = [],
              h;for (h in b) f[h] = b[h];return f;
        }a && !this.C().e() && (b[".priority"] = this.C().H());return b;
      };g.hash = function () {
        if (null === this.Eb) {
          var a = "";this.C().e() || (a += "priority:" + Df(this.C().H()) + ":");this.P(N, function (b, c) {
            var d = c.hash();"" !== d && (a += ":" + b + ":" + d);
          });this.Eb = "" === a ? "" : Rc(a);
        }return this.Eb;
      };
      g.Ze = function (a, b, c) {
        return (c = Ff(this, c)) ? (a = Cc(c, new O(a, b))) ? a.name : null : Cc(this.k, a);
      };function of(a, b) {
        var c;c = (c = Ff(a, b)) ? (c = c.Hc()) && c.name : a.k.Hc();return c ? new O(c, a.k.get(c)) : null;
      }function pf(a, b) {
        var c;c = (c = Ff(a, b)) ? (c = c.fc()) && c.name : a.k.fc();return c ? new O(c, a.k.get(c)) : null;
      }g.P = function (a, b) {
        var c = Ff(this, a);return c ? c.ia(function (a) {
          return b(a.name, a.S);
        }) : this.k.ia(b);
      };g.Xb = function (a) {
        return this.Yb(a.Ic(), a);
      };
      g.Yb = function (a, b) {
        var c = Ff(this, b);if (c) return c.Yb(a, function (a) {
          return a;
        });for (var c = this.k.Yb(a.name, gf), d = Ec(c); null != d && 0 > b.compare(d, a);) K(c), d = Ec(c);return c;
      };g.$e = function (a) {
        return this.$b(a.Gc(), a);
      };g.$b = function (a, b) {
        var c = Ff(this, b);if (c) return c.$b(a, function (a) {
          return a;
        });for (var c = this.k.$b(a.name, gf), d = Ec(c); null != d && 0 < b.compare(d, a);) K(c), d = Ec(c);return c;
      };g.tc = function (a) {
        return this.e() ? a.e() ? 0 : -1 : a.J() || a.e() ? 1 : a === Xe ? -1 : 0;
      };
      g.ob = function (a) {
        if (a === Od || ra(this.zb.dc, a.toString())) return this;var b = this.zb,
            c = this.k;E(a !== Od, "KeyIndex always exists and isn't meant to be added to the IndexMap.");for (var d = [], e = !1, c = c.Xb(gf), f = K(c); f;) e = e || a.yc(f.S), d.push(f), f = K(c);d = e ? hf(d, Ue(a)) : Te;e = a.toString();c = va(b.dc);c[e] = a;a = va(b.od);a[e] = d;return new P(this.k, this.ba, new ef(a, c));
      };g.zc = function (a) {
        return a === Od || ra(this.zb.dc, a.toString());
      };
      g.$ = function (a) {
        if (a === this) return !0;if (a.J()) return !1;if (this.C().$(a.C()) && this.k.count() === a.k.count()) {
          var b = this.Xb(N);a = a.Xb(N);for (var c = K(b), d = K(a); c && d;) {
            if (c.name !== d.name || !c.S.$(d.S)) return !1;c = K(b);d = K(a);
          }return null === c && null === d;
        }return !1;
      };function Ff(a, b) {
        return b === Od ? null : a.zb.get(b.toString());
      }g.toString = function () {
        return B(this.H(!0));
      };function S(a, b) {
        if (null === a) return F;var c = null;"object" === typeof a && ".priority" in a ? c = a[".priority"] : "undefined" !== typeof b && (c = b);E(null === c || "string" === typeof c || "number" === typeof c || "object" === typeof c && ".sv" in c, "Invalid priority type found: " + typeof c);"object" === typeof a && ".value" in a && null !== a[".value"] && (a = a[".value"]);if ("object" !== typeof a || ".sv" in a) return new Qe(a, S(c));if (a instanceof Array) {
          var d = F,
              e = a;t(e, function (a, b) {
            if (Hb(e, b) && "." !== b.substring(0, 1)) {
              var c = S(a);if (c.J() || !c.e()) d = d.U(b, c);
            }
          });return d.ga(S(c));
        }var f = [],
            h = !1,
            k = a;Ib(k, function (a) {
          if ("string" !== typeof a || "." !== a.substring(0, 1)) {
            var b = S(k[a]);b.e() || (h = h || !b.C().e(), f.push(new O(a, b)));
          }
        });if (0 == f.length) return F;var m = hf(f, cf, function (a) {
          return a.name;
        }, df);if (h) {
          var l = hf(f, Ue(N));return new P(m, S(c), new ef({ ".priority": l }, { ".priority": N }));
        }return new P(m, S(c), kf);
      }var Gf = Math.log(2);
      function Hf(a) {
        this.count = parseInt(Math.log(a + 1) / Gf, 10);this.Re = this.count - 1;this.Lf = a + 1 & parseInt(Array(this.count + 1).join("1"), 2);
      }function If(a) {
        var b = !(a.Lf & 1 << a.Re);a.Re--;return b;
      }
      function hf(a, b, c, d) {
        function e(b, d) {
          var f = d - b;if (0 == f) return null;if (1 == f) {
            var l = a[b],
                u = c ? c(l) : l;return new Fc(u, l.S, !1, null, null);
          }var l = parseInt(f / 2, 10) + b,
              f = e(b, l),
              z = e(l + 1, d),
              l = a[l],
              u = c ? c(l) : l;return new Fc(u, l.S, !1, f, z);
        }a.sort(b);var f = function (b) {
          function d(b, h) {
            var k = u - b,
                z = u;u -= b;var z = e(k + 1, z),
                k = a[k],
                G = c ? c(k) : k,
                z = new Fc(G, k.S, h, null, z);f ? f.left = z : l = z;f = z;
          }for (var f = null, l = null, u = a.length, z = 0; z < b.count; ++z) {
            var G = If(b),
                Cd = Math.pow(2, b.count - (z + 1));G ? d(Cd, !1) : (d(Cd, !1), d(Cd, !0));
          }return l;
        }(new Hf(a.length));
        return null !== f ? new Ac(d || b, f) : new Ac(d || b);
      }function Df(a) {
        return "number" === typeof a ? "number:" + gd(a) : "string:" + a;
      }function Bf(a) {
        if (a.J()) {
          var b = a.H();E("string" === typeof b || "number" === typeof b || "object" === typeof b && Hb(b, ".sv"), "Priority must be a string or number.");
        } else E(a === Xe || a.e(), "priority of unexpected type.");E(a === Xe || a.C().e(), "Priority nodes can't have a priority of their own.");
      }var F = new P(new Ac(df), null, kf);function Jf() {
        P.call(this, new Ac(df), F, kf);
      }ka(Jf, P);g = Jf.prototype;
      g.tc = function (a) {
        return a === this ? 0 : 1;
      };g.$ = function (a) {
        return a === this;
      };g.C = function () {
        return this;
      };g.R = function () {
        return F;
      };g.e = function () {
        return !1;
      };var Xe = new Jf(),
          Ve = new O("[MIN_NAME]", F),
          af = new O("[MAX_NAME]", Xe);function Hd(a, b) {
        this.O = a;this.Ld = b;
      }function Ed(a, b, c, d) {
        return new Hd(new oc(b, c, d), a.Ld);
      }function Id(a) {
        return a.O.ea ? a.O.j() : null;
      }Hd.prototype.w = function () {
        return this.Ld;
      };function pc(a) {
        return a.Ld.ea ? a.Ld.j() : null;
      };function Kf(a, b) {
        this.W = a;var c = a.n,
            d = new od(c.g),
            c = T(c) ? new od(c.g) : c.ya ? new lf(c) : new qd(c);this.of = new xd(c);var e = b.w(),
            f = b.O,
            h = d.za(F, e.j(), null),
            k = c.za(F, f.j(), null);this.Na = new Hd(new oc(k, f.ea, c.Qa()), new oc(h, e.ea, d.Qa()));this.ab = [];this.Sf = new qf(a);
      }function Lf(a) {
        return a.W;
      }g = Kf.prototype;g.w = function () {
        return this.Na.w().j();
      };g.jb = function (a) {
        var b = pc(this.Na);return b && (T(this.W.n) || !a.e() && !b.R(J(a)).e()) ? b.Q(a) : null;
      };g.e = function () {
        return 0 === this.ab.length;
      };g.Ob = function (a) {
        this.ab.push(a);
      };
      g.mb = function (a, b) {
        var c = [];if (b) {
          E(null == a, "A cancel should cancel all event registrations.");var d = this.W.path;Ga(this.ab, function (a) {
            (a = a.Pe(b, d)) && c.push(a);
          });
        }if (a) {
          for (var e = [], f = 0; f < this.ab.length; ++f) {
            var h = this.ab[f];if (!h.matches(a)) e.push(h);else if (a.af()) {
              e = e.concat(this.ab.slice(f + 1));break;
            }
          }this.ab = e;
        } else this.ab = [];return c;
      };
      g.gb = function (a, b, c) {
        a.type === nd && null !== a.source.Ib && (E(pc(this.Na), "We should always have a full cache before handling merges"), E(Id(this.Na), "Missing event cache, even though we have a server cache"));var d = this.Na;a = this.of.gb(d, a, b, c);b = this.of;c = a.Sd;E(c.O.j().zc(b.V.g), "Event snap not indexed");E(c.w().j().zc(b.V.g), "Server snap not indexed");E(xc(a.Sd.w()) || !xc(d.w()), "Once a server snap is complete, it should never go back");this.Na = a.Sd;return Mf(this, a.Mf, a.Sd.O.j(), null);
      };
      function Nf(a, b) {
        var c = a.Na.O,
            d = [];c.j().J() || c.j().P(N, function (a, b) {
          d.push(new H("child_added", b, a));
        });c.ea && d.push(gc(c.j()));return Mf(a, d, c.j(), b);
      }function Mf(a, b, c, d) {
        return rf(a.Sf, b, c, d ? [d] : a.ab);
      };function Of(a, b, c) {
        this.f = Vc("p:rest:");this.M = a;this.Hb = b;this.Vd = c;this.aa = {};
      }function Pf(a, b) {
        if (p(b)) return "tag$" + b;E(zf(a.n), "should have a tag if it's not a default query.");return a.path.toString();
      }g = Of.prototype;
      g.df = function (a, b, c, d) {
        var e = a.path.toString();this.f("Listen called for " + e + " " + a.ka());var f = Pf(a, c),
            h = {};this.aa[f] = h;a = Af(a.n);var k = this;Qf(this, e + ".json", a, function (a, b) {
          var u = b;404 === a && (a = u = null);null === a && k.Hb(e, u, !1, c);A(k.aa, f) === h && d(a ? 401 == a ? "permission_denied" : "rest_error:" + a : "ok", null);
        });
      };g.Ef = function (a, b) {
        var c = Pf(a, b);delete this.aa[c];
      };g.qf = function () {};g.re = function () {};g.gf = function () {};g.xd = function () {};g.put = function () {};g.ef = function () {};g.ye = function () {};
      function Qf(a, b, c, d) {
        c = c || {};c.format = "export";a.Vd.getToken(!1).then(function (e) {
          (e = e && e.accessToken) && (c.auth = e);var f = (a.M.Sc ? "https://" : "http://") + a.M.host + b + "?" + Jb(c);a.f("Sending REST request for " + f);var h = new XMLHttpRequest();h.onreadystatechange = function () {
            if (d && 4 === h.readyState) {
              a.f("REST Response for " + f + " received. status:", h.status, "response:", h.responseText);var b = null;if (200 <= h.status && 300 > h.status) {
                try {
                  b = Kb(h.responseText);
                } catch (c) {
                  L("Failed to parse JSON response for " + f + ": " + h.responseText);
                }d(null, b);
              } else 401 !== h.status && 404 !== h.status && L("Got unsuccessful REST response for " + f + " Status: " + h.status), d(h.status);d = null;
            }
          };h.open("GET", f, !0);h.send();
        });
      };function Rf(a) {
        this.He = a;
      }Rf.prototype.getToken = function (a) {
        return this.He.INTERNAL.getToken(a).then(null, function (a) {
          return a && "auth/token-not-initialized" === a.code ? (I("Got auth/token-not-initialized error.  Treating as null token."), null) : Promise.reject(a);
        });
      };function Sf(a, b) {
        a.He.INTERNAL.addAuthTokenListener(b);
      };function Tf(a) {
        this.Nf = a;this.rd = null;
      }Tf.prototype.get = function () {
        var a = this.Nf.get(),
            b = va(a);if (this.rd) for (var c in this.rd) b[c] -= this.rd[c];this.rd = a;return b;
      };function Uf() {
        this.uc = {};
      }function Vf(a, b, c) {
        p(c) || (c = 1);Hb(a.uc, b) || (a.uc[b] = 0);a.uc[b] += c;
      }Uf.prototype.get = function () {
        return va(this.uc);
      };function Wf(a, b) {
        this.zf = {};this.Vc = new Tf(a);this.wa = b;var c = 1E4 + 2E4 * Math.random();setTimeout(r(this.rf, this), Math.floor(c));
      }Wf.prototype.rf = function () {
        var a = this.Vc.get(),
            b = {},
            c = !1,
            d;for (d in a) 0 < a[d] && Hb(this.zf, d) && (b[d] = a[d], c = !0);c && this.wa.ye(b);setTimeout(r(this.rf, this), Math.floor(6E5 * Math.random()));
      };var Xf = {},
          Yf = {};function Zf(a) {
        a = a.toString();Xf[a] || (Xf[a] = new Uf());return Xf[a];
      }function $f(a, b) {
        var c = a.toString();Yf[c] || (Yf[c] = b());return Yf[c];
      };var ag = null;"undefined" !== typeof MozWebSocket ? ag = MozWebSocket : "undefined" !== typeof WebSocket && (ag = WebSocket);function bg(a, b, c, d) {
        this.Zd = a;this.f = Vc(this.Zd);this.frames = this.Ac = null;this.qb = this.rb = this.Fe = 0;this.Xa = Zf(b);a = { v: "5" };"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");c && (a.s = c);d && (a.ls = d);this.Ne = ec(b, "websocket", a);
      }var cg;
      bg.prototype.open = function (a, b) {
        this.kb = b;this.hg = a;this.f("Websocket connecting to " + this.Ne);this.xc = !1;Xb.set("previous_websocket_failure", !0);try {
          this.La = new ag(this.Ne);
        } catch (c) {
          this.f("Error instantiating WebSocket.");var d = c.message || c.data;d && this.f(d);this.fb();return;
        }var e = this;this.La.onopen = function () {
          e.f("Websocket connected.");e.xc = !0;
        };this.La.onclose = function () {
          e.f("Websocket connection was disconnected.");e.La = null;e.fb();
        };this.La.onmessage = function (a) {
          if (null !== e.La) if (a = a.data, e.qb += a.length, Vf(e.Xa, "bytes_received", a.length), dg(e), null !== e.frames) eg(e, a);else {
            a: {
              E(null === e.frames, "We already have a frame buffer");if (6 >= a.length) {
                var b = Number(a);if (!isNaN(b)) {
                  e.Fe = b;e.frames = [];a = null;break a;
                }
              }e.Fe = 1;e.frames = [];
            }null !== a && eg(e, a);
          }
        };this.La.onerror = function (a) {
          e.f("WebSocket error.  Closing connection.");(a = a.message || a.data) && e.f(a);e.fb();
        };
      };bg.prototype.start = function () {};
      bg.isAvailable = function () {
        var a = !1;if ("undefined" !== typeof navigator && navigator.userAgent) {
          var b = navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b && 1 < b.length && 4.4 > parseFloat(b[1]) && (a = !0);
        }return !a && null !== ag && !cg;
      };bg.responsesRequiredToBeHealthy = 2;bg.healthyTimeout = 3E4;g = bg.prototype;g.sd = function () {
        Xb.remove("previous_websocket_failure");
      };function eg(a, b) {
        a.frames.push(b);if (a.frames.length == a.Fe) {
          var c = a.frames.join("");a.frames = null;c = Kb(c);a.hg(c);
        }
      }
      g.send = function (a) {
        dg(this);a = B(a);this.rb += a.length;Vf(this.Xa, "bytes_sent", a.length);a = ed(a, 16384);1 < a.length && fg(this, String(a.length));for (var b = 0; b < a.length; b++) fg(this, a[b]);
      };g.Tc = function () {
        this.Bb = !0;this.Ac && (clearInterval(this.Ac), this.Ac = null);this.La && (this.La.close(), this.La = null);
      };g.fb = function () {
        this.Bb || (this.f("WebSocket is closing itself"), this.Tc(), this.kb && (this.kb(this.xc), this.kb = null));
      };g.close = function () {
        this.Bb || (this.f("WebSocket is being closed"), this.Tc());
      };
      function dg(a) {
        clearInterval(a.Ac);a.Ac = setInterval(function () {
          a.La && fg(a, "0");dg(a);
        }, Math.floor(45E3));
      }function fg(a, b) {
        try {
          a.La.send(b);
        } catch (c) {
          a.f("Exception thrown from WebSocket.send():", c.message || c.data, "Closing connection."), setTimeout(r(a.fb, a), 0);
        }
      };function gg(a, b, c, d) {
        this.Zd = a;this.f = Vc(a);this.kc = b;this.qb = this.rb = 0;this.Xa = Zf(b);this.Bf = c;this.xc = !1;this.Db = d;this.Yc = function (a) {
          return ec(b, "long_polling", a);
        };
      }var hg, ig;
      gg.prototype.open = function (a, b) {
        this.Qe = 0;this.ja = b;this.ff = new Qb(a);this.Bb = !1;var c = this;this.tb = setTimeout(function () {
          c.f("Timed out trying to connect.");c.fb();c.tb = null;
        }, Math.floor(3E4));$c(function () {
          if (!c.Bb) {
            c.Wa = new jg(function (a, b, d, k, m) {
              kg(c, arguments);if (c.Wa) if (c.tb && (clearTimeout(c.tb), c.tb = null), c.xc = !0, "start" == a) c.id = b, c.mf = d;else if ("close" === a) b ? (c.Wa.Kd = !1, Rb(c.ff, b, function () {
                c.fb();
              })) : c.fb();else throw Error("Unrecognized command received: " + a);
            }, function (a, b) {
              kg(c, arguments);
              Sb(c.ff, a, b);
            }, function () {
              c.fb();
            }, c.Yc);var a = { start: "t" };a.ser = Math.floor(1E8 * Math.random());c.Wa.Qd && (a.cb = c.Wa.Qd);a.v = "5";c.Bf && (a.s = c.Bf);c.Db && (a.ls = c.Db);"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");a = c.Yc(a);c.f("Connecting via long-poll to " + a);lg(c.Wa, a, function () {});
          }
        });
      };
      gg.prototype.start = function () {
        var a = this.Wa,
            b = this.mf;a.fg = this.id;a.gg = b;for (a.Ud = !0; mg(a););a = this.id;b = this.mf;this.gc = document.createElement("iframe");var c = { dframe: "t" };c.id = a;c.pw = b;this.gc.src = this.Yc(c);this.gc.style.display = "none";document.body.appendChild(this.gc);
      };
      gg.isAvailable = function () {
        return hg || !ig && "undefined" !== typeof document && null != document.createElement && !("object" === typeof window && window.chrome && window.chrome.extension && !/^chrome/.test(window.location.href)) && !("object" === typeof Windows && "object" === typeof Windows.Dg) && !0;
      };g = gg.prototype;g.sd = function () {};g.Tc = function () {
        this.Bb = !0;this.Wa && (this.Wa.close(), this.Wa = null);this.gc && (document.body.removeChild(this.gc), this.gc = null);this.tb && (clearTimeout(this.tb), this.tb = null);
      };
      g.fb = function () {
        this.Bb || (this.f("Longpoll is closing itself"), this.Tc(), this.ja && (this.ja(this.xc), this.ja = null));
      };g.close = function () {
        this.Bb || (this.f("Longpoll is being closed."), this.Tc());
      };g.send = function (a) {
        a = B(a);this.rb += a.length;Vf(this.Xa, "bytes_sent", a.length);a = Nb(a);a = wb(a, !0);a = ed(a, 1840);for (var b = 0; b < a.length; b++) {
          var c = this.Wa;c.Qc.push({ ug: this.Qe, Bg: a.length, Se: a[b] });c.Ud && mg(c);this.Qe++;
        }
      };function kg(a, b) {
        var c = B(b).length;a.qb += c;Vf(a.Xa, "bytes_received", c);
      }
      function jg(a, b, c, d) {
        this.Yc = d;this.kb = c;this.ve = new Ie();this.Qc = [];this.$d = Math.floor(1E8 * Math.random());this.Kd = !0;this.Qd = Oc();window["pLPCommand" + this.Qd] = a;window["pRTLPCB" + this.Qd] = b;a = document.createElement("iframe");a.style.display = "none";if (document.body) {
          document.body.appendChild(a);try {
            a.contentWindow.document || I("No IE domain setting required");
          } catch (e) {
            a.src = "javascript:void((function(){document.open();document.domain='" + document.domain + "';document.close();})())";
          }
        } else throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
        a.contentDocument ? a.ib = a.contentDocument : a.contentWindow ? a.ib = a.contentWindow.document : a.document && (a.ib = a.document);this.Ga = a;a = "";this.Ga.src && "javascript:" === this.Ga.src.substr(0, 11) && (a = '<script>document.domain="' + document.domain + '";\x3c/script>');a = "<html><body>" + a + "</body></html>";try {
          this.Ga.ib.open(), this.Ga.ib.write(a), this.Ga.ib.close();
        } catch (f) {
          I("frame writing exception"), f.stack && I(f.stack), I(f);
        }
      }
      jg.prototype.close = function () {
        this.Ud = !1;if (this.Ga) {
          this.Ga.ib.body.innerHTML = "";var a = this;setTimeout(function () {
            null !== a.Ga && (document.body.removeChild(a.Ga), a.Ga = null);
          }, Math.floor(0));
        }var b = this.kb;b && (this.kb = null, b());
      };
      function mg(a) {
        if (a.Ud && a.Kd && a.ve.count() < (0 < a.Qc.length ? 2 : 1)) {
          a.$d++;var b = {};b.id = a.fg;b.pw = a.gg;b.ser = a.$d;for (var b = a.Yc(b), c = "", d = 0; 0 < a.Qc.length;) if (1870 >= a.Qc[0].Se.length + 30 + c.length) {
            var e = a.Qc.shift(),
                c = c + "&seg" + d + "=" + e.ug + "&ts" + d + "=" + e.Bg + "&d" + d + "=" + e.Se;d++;
          } else break;ng(a, b + c, a.$d);return !0;
        }return !1;
      }function ng(a, b, c) {
        function d() {
          a.ve.remove(c);mg(a);
        }a.ve.add(c, 1);var e = setTimeout(d, Math.floor(25E3));lg(a, b, function () {
          clearTimeout(e);d();
        });
      }
      function lg(a, b, c) {
        setTimeout(function () {
          try {
            if (a.Kd) {
              var d = a.Ga.ib.createElement("script");d.type = "text/javascript";d.async = !0;d.src = b;d.onload = d.onreadystatechange = function () {
                var a = d.readyState;a && "loaded" !== a && "complete" !== a || (d.onload = d.onreadystatechange = null, d.parentNode && d.parentNode.removeChild(d), c());
              };d.onerror = function () {
                I("Long-poll script failed to load: " + b);a.Kd = !1;a.close();
              };a.Ga.ib.body.appendChild(d);
            }
          } catch (e) {}
        }, Math.floor(1));
      };function og(a) {
        pg(this, a);
      }var qg = [gg, bg];function pg(a, b) {
        var c = bg && bg.isAvailable(),
            d = c && !(Xb.cf || !0 === Xb.get("previous_websocket_failure"));b.Cg && (c || L("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."), d = !0);if (d) a.Wc = [bg];else {
          var e = a.Wc = [];fd(qg, function (a, b) {
            b && b.isAvailable() && e.push(b);
          });
        }
      }function rg(a) {
        if (0 < a.Wc.length) return a.Wc[0];throw Error("No transports available");
      };function sg(a, b, c, d, e, f, h) {
        this.id = a;this.f = Vc("c:" + this.id + ":");this.te = c;this.Mc = d;this.ja = e;this.se = f;this.M = b;this.Ad = [];this.Oe = 0;this.Af = new og(b);this.L = 0;this.Db = h;this.f("Connection created");tg(this);
      }
      function tg(a) {
        var b = rg(a.Af);a.I = new b("c:" + a.id + ":" + a.Oe++, a.M, void 0, a.Db);a.xe = b.responsesRequiredToBeHealthy || 0;var c = ug(a, a.I),
            d = vg(a, a.I);a.Xc = a.I;a.Rc = a.I;a.D = null;a.Cb = !1;setTimeout(function () {
          a.I && a.I.open(c, d);
        }, Math.floor(0));b = b.healthyTimeout || 0;0 < b && (a.md = setTimeout(function () {
          a.md = null;a.Cb || (a.I && 102400 < a.I.qb ? (a.f("Connection exceeded healthy timeout but has received " + a.I.qb + " bytes.  Marking connection healthy."), a.Cb = !0, a.I.sd()) : a.I && 10240 < a.I.rb ? a.f("Connection exceeded healthy timeout but has sent " + a.I.rb + " bytes.  Leaving connection alive.") : (a.f("Closing unhealthy connection after timeout."), a.close()));
        }, Math.floor(b)));
      }function vg(a, b) {
        return function (c) {
          b === a.I ? (a.I = null, c || 0 !== a.L ? 1 === a.L && a.f("Realtime connection lost.") : (a.f("Realtime connection failed."), "s-" === a.M.bb.substr(0, 2) && (Xb.remove("host:" + a.M.host), a.M.bb = a.M.host)), a.close()) : b === a.D ? (a.f("Secondary connection lost."), c = a.D, a.D = null, a.Xc !== c && a.Rc !== c || a.close()) : a.f("closing an old connection");
        };
      }
      function ug(a, b) {
        return function (c) {
          if (2 != a.L) if (b === a.Rc) {
            var d = cd("t", c);c = cd("d", c);if ("c" == d) {
              if (d = cd("t", c), "d" in c) if (c = c.d, "h" === d) {
                var d = c.ts,
                    e = c.v,
                    f = c.h;a.yf = c.s;dc(a.M, f);0 == a.L && (a.I.start(), wg(a, a.I, d), "5" !== e && L("Protocol version mismatch detected"), c = a.Af, (c = 1 < c.Wc.length ? c.Wc[1] : null) && xg(a, c));
              } else if ("n" === d) {
                a.f("recvd end transmission on primary");a.Rc = a.D;for (c = 0; c < a.Ad.length; ++c) a.wd(a.Ad[c]);a.Ad = [];yg(a);
              } else "s" === d ? (a.f("Connection shutdown command received. Shutting down..."), a.se && (a.se(c), a.se = null), a.ja = null, a.close()) : "r" === d ? (a.f("Reset packet received.  New host: " + c), dc(a.M, c), 1 === a.L ? a.close() : (zg(a), tg(a))) : "e" === d ? Wc("Server Error: " + c) : "o" === d ? (a.f("got pong on primary."), Ag(a), Bg(a)) : Wc("Unknown control packet command: " + d);
            } else "d" == d && a.wd(c);
          } else if (b === a.D) {
            if (d = cd("t", c), c = cd("d", c), "c" == d) "t" in c && (c = c.t, "a" === c ? Cg(a) : "r" === c ? (a.f("Got a reset on secondary, closing it"), a.D.close(), a.Xc !== a.D && a.Rc !== a.D || a.close()) : "o" === c && (a.f("got pong on secondary."), a.xf--, Cg(a)));else if ("d" == d) a.Ad.push(c);else throw Error("Unknown protocol layer: " + d);
          } else a.f("message on old connection");
        };
      }sg.prototype.va = function (a) {
        Dg(this, { t: "d", d: a });
      };function yg(a) {
        a.Xc === a.D && a.Rc === a.D && (a.f("cleaning up and promoting a connection: " + a.D.Zd), a.I = a.D, a.D = null);
      }
      function Cg(a) {
        0 >= a.xf ? (a.f("Secondary connection is healthy."), a.Cb = !0, a.D.sd(), a.D.start(), a.f("sending client ack on secondary"), a.D.send({ t: "c", d: { t: "a", d: {} } }), a.f("Ending transmission on primary"), a.I.send({ t: "c", d: { t: "n", d: {} } }), a.Xc = a.D, yg(a)) : (a.f("sending ping on secondary."), a.D.send({ t: "c", d: { t: "p", d: {} } }));
      }sg.prototype.wd = function (a) {
        Ag(this);this.te(a);
      };function Ag(a) {
        a.Cb || (a.xe--, 0 >= a.xe && (a.f("Primary connection is healthy."), a.Cb = !0, a.I.sd()));
      }
      function xg(a, b) {
        a.D = new b("c:" + a.id + ":" + a.Oe++, a.M, a.yf);a.xf = b.responsesRequiredToBeHealthy || 0;a.D.open(ug(a, a.D), vg(a, a.D));setTimeout(function () {
          a.D && (a.f("Timed out trying to upgrade."), a.D.close());
        }, Math.floor(6E4));
      }function wg(a, b, c) {
        a.f("Realtime connection established.");a.I = b;a.L = 1;a.Mc && (a.Mc(c, a.yf), a.Mc = null);0 === a.xe ? (a.f("Primary connection is healthy."), a.Cb = !0) : setTimeout(function () {
          Bg(a);
        }, Math.floor(5E3));
      }
      function Bg(a) {
        a.Cb || 1 !== a.L || (a.f("sending ping on primary."), Dg(a, { t: "c", d: { t: "p", d: {} } }));
      }function Dg(a, b) {
        if (1 !== a.L) throw "Connection is not connected";a.Xc.send(b);
      }sg.prototype.close = function () {
        2 !== this.L && (this.f("Closing realtime connection."), this.L = 2, zg(this), this.ja && (this.ja(), this.ja = null));
      };function zg(a) {
        a.f("Shutting down all connections");a.I && (a.I.close(), a.I = null);a.D && (a.D.close(), a.D = null);a.md && (clearTimeout(a.md), a.md = null);
      };function Eg(a, b, c, d, e, f) {
        this.id = Fg++;this.f = Vc("p:" + this.id + ":");this.qd = {};this.aa = {};this.qa = [];this.Pc = 0;this.Lc = [];this.na = !1;this.Va = 1E3;this.td = 3E5;this.Hb = b;this.Kc = c;this.ue = d;this.M = a;this.pb = this.Ia = this.Db = this.ze = null;this.Vd = e;this.de = !1;this.ke = 0;if (f) throw Error("Auth override specified in options, but not supported on non Node.js platforms");this.Je = f || null;this.vb = null;this.Nb = !1;this.Gd = {};this.tg = 0;this.Ve = !0;this.Bc = this.me = null;Gg(this, 0);He.Wb().hc("visible", this.jg, this);-1 === a.host.indexOf("fblocal") && Re.Wb().hc("online", this.ig, this);
      }var Fg = 0,
          Hg = 0;g = Eg.prototype;g.va = function (a, b, c) {
        var d = ++this.tg;a = { r: d, a: a, b: b };this.f(B(a));E(this.na, "sendRequest call when we're not connected not allowed.");this.Ia.va(a);c && (this.Gd[d] = c);
      };
      g.df = function (a, b, c, d) {
        var e = a.ka(),
            f = a.path.toString();this.f("Listen called for " + f + " " + e);this.aa[f] = this.aa[f] || {};E(zf(a.n) || !T(a.n), "listen() called for non-default but complete query");E(!this.aa[f][e], "listen() called twice for same path/queryId.");a = { G: d, ld: b, pg: a, tag: c };this.aa[f][e] = a;this.na && Ig(this, a);
      };
      function Ig(a, b) {
        var c = b.pg,
            d = c.path.toString(),
            e = c.ka();a.f("Listen on " + d + " for " + e);var f = { p: d };b.tag && (f.q = yf(c.n), f.t = b.tag);f.h = b.ld();a.va("q", f, function (f) {
          var k = f.d,
              m = f.s;if (k && "object" === typeof k && Hb(k, "w")) {
            var l = A(k, "w");da(l) && 0 <= Fa(l, "no_index") && L("Using an unspecified index. Consider adding " + ('".indexOn": "' + c.n.g.toString() + '"') + " at " + c.path.toString() + " to your security rules for better performance");
          }(a.aa[d] && a.aa[d][e]) === b && (a.f("listen response", f), "ok" !== m && Jg(a, d, e), b.G && b.G(m, k));
        });
      }g.qf = function (a) {
        this.pb = a;this.f("Auth token refreshed");this.pb ? Kg(this) : this.na && this.va("unauth", {}, function () {});if (a && 40 === a.length || ld(a)) this.f("Admin auth credential detected.  Reducing max reconnect time."), this.td = 3E4;
      };function Kg(a) {
        if (a.na && a.pb) {
          var b = a.pb,
              c = kd(b) ? "auth" : "gauth",
              d = { cred: b };a.Je && (d.authvar = a.Je);a.va(c, d, function (c) {
            var d = c.s;c = c.d || "error";a.pb === b && ("ok" === d ? this.ke = 0 : Lg(a, d, c));
          });
        }
      }
      g.Ef = function (a, b) {
        var c = a.path.toString(),
            d = a.ka();this.f("Unlisten called for " + c + " " + d);E(zf(a.n) || !T(a.n), "unlisten() called for non-default but complete query");if (Jg(this, c, d) && this.na) {
          var e = yf(a.n);this.f("Unlisten on " + c + " for " + d);c = { p: c };b && (c.q = e, c.t = b);this.va("n", c);
        }
      };g.re = function (a, b, c) {
        this.na ? Mg(this, "o", a, b, c) : this.Lc.push({ we: a, action: "o", data: b, G: c });
      };g.gf = function (a, b, c) {
        this.na ? Mg(this, "om", a, b, c) : this.Lc.push({ we: a, action: "om", data: b, G: c });
      };
      g.xd = function (a, b) {
        this.na ? Mg(this, "oc", a, null, b) : this.Lc.push({ we: a, action: "oc", data: null, G: b });
      };function Mg(a, b, c, d, e) {
        c = { p: c, d: d };a.f("onDisconnect " + b, c);a.va(b, c, function (a) {
          e && setTimeout(function () {
            e(a.s, a.d);
          }, Math.floor(0));
        });
      }g.put = function (a, b, c, d) {
        Ng(this, "p", a, b, c, d);
      };g.ef = function (a, b, c, d) {
        Ng(this, "m", a, b, c, d);
      };function Ng(a, b, c, d, e, f) {
        d = { p: c, d: d };p(f) && (d.h = f);a.qa.push({ action: b, sf: d, G: e });a.Pc++;b = a.qa.length - 1;a.na ? Og(a, b) : a.f("Buffering put: " + c);
      }
      function Og(a, b) {
        var c = a.qa[b].action,
            d = a.qa[b].sf,
            e = a.qa[b].G;a.qa[b].qg = a.na;a.va(c, d, function (d) {
          a.f(c + " response", d);delete a.qa[b];a.Pc--;0 === a.Pc && (a.qa = []);e && e(d.s, d.d);
        });
      }g.ye = function (a) {
        this.na && (a = { c: a }, this.f("reportStats", a), this.va("s", a, function (a) {
          "ok" !== a.s && this.f("reportStats", "Error sending stats: " + a.d);
        }));
      };
      g.wd = function (a) {
        if ("r" in a) {
          this.f("from server: " + B(a));var b = a.r,
              c = this.Gd[b];c && (delete this.Gd[b], c(a.b));
        } else {
          if ("error" in a) throw "A server-side error has occurred: " + a.error;"a" in a && (b = a.a, a = a.b, this.f("handleServerMessage", b, a), "d" === b ? this.Hb(a.p, a.d, !1, a.t) : "m" === b ? this.Hb(a.p, a.d, !0, a.t) : "c" === b ? Pg(this, a.p, a.q) : "ac" === b ? Lg(this, a.s, a.d) : "sd" === b ? this.ze ? this.ze(a) : "msg" in a && "undefined" !== typeof console && console.log("FIREBASE: " + a.msg.replace("\n", "\nFIREBASE: ")) : Wc("Unrecognized action received from server: " + B(b) + "\nAre you using the latest client?"));
        }
      };g.Mc = function (a, b) {
        this.f("connection ready");this.na = !0;this.Bc = new Date().getTime();this.ue({ serverTimeOffset: a - new Date().getTime() });this.Db = b;if (this.Ve) {
          var c = {};c["sdk.js." + firebase.SDK_VERSION.replace(/\./g, "-")] = 1;Pb() ? c["framework.cordova"] = 1 : "object" === typeof navigator && "ReactNative" === navigator.product && (c["framework.reactnative"] = 1);this.ye(c);
        }Qg(this);this.Ve = !1;this.Kc(!0);
      };
      function Gg(a, b) {
        E(!a.Ia, "Scheduling a connect when we're already connected/ing?");a.vb && clearTimeout(a.vb);a.vb = setTimeout(function () {
          a.vb = null;Rg(a);
        }, Math.floor(b));
      }g.jg = function (a) {
        a && !this.Nb && this.Va === this.td && (this.f("Window became visible.  Reducing delay."), this.Va = 1E3, this.Ia || Gg(this, 0));this.Nb = a;
      };g.ig = function (a) {
        a ? (this.f("Browser went online."), this.Va = 1E3, this.Ia || Gg(this, 0)) : (this.f("Browser went offline.  Killing connection."), this.Ia && this.Ia.close());
      };
      g.jf = function () {
        this.f("data client disconnected");this.na = !1;this.Ia = null;for (var a = 0; a < this.qa.length; a++) {
          var b = this.qa[a];b && "h" in b.sf && b.qg && (b.G && b.G("disconnect"), delete this.qa[a], this.Pc--);
        }0 === this.Pc && (this.qa = []);this.Gd = {};Sg(this) && (this.Nb ? this.Bc && (3E4 < new Date().getTime() - this.Bc && (this.Va = 1E3), this.Bc = null) : (this.f("Window isn't visible.  Delaying reconnect."), this.Va = this.td, this.me = new Date().getTime()), a = Math.max(0, this.Va - (new Date().getTime() - this.me)), a *= Math.random(), this.f("Trying to reconnect in " + a + "ms"), Gg(this, a), this.Va = Math.min(this.td, 1.3 * this.Va));this.Kc(!1);
      };
      function Rg(a) {
        if (Sg(a)) {
          a.f("Making a connection attempt");a.me = new Date().getTime();a.Bc = null;var b = r(a.wd, a),
              c = r(a.Mc, a),
              d = r(a.jf, a),
              e = a.id + ":" + Hg++,
              f = a.Db,
              h = !1,
              k = null,
              m = function () {
            k ? k.close() : (h = !0, d());
          };a.Ia = { close: m, va: function (a) {
              E(k, "sendRequest call when we're not connected not allowed.");k.va(a);
            } };var l = a.de;a.de = !1;a.Vd.getToken(l).then(function (l) {
            h ? I("getToken() completed but was canceled") : (I("getToken() completed. Creating connection."), a.pb = l && l.accessToken, k = new sg(e, a.M, b, c, d, function (b) {
              L(b + " (" + a.M.toString() + ")");a.eb("server_kill");
            }, f));
          }).then(null, function (b) {
            a.f("Failed to get token: " + b);h || m();
          });
        }
      }g.eb = function (a) {
        I("Interrupting connection for reason: " + a);this.qd[a] = !0;this.Ia ? this.Ia.close() : (this.vb && (clearTimeout(this.vb), this.vb = null), this.na && this.jf());
      };g.lc = function (a) {
        I("Resuming connection for reason: " + a);delete this.qd[a];ua(this.qd) && (this.Va = 1E3, this.Ia || Gg(this, 0));
      };
      function Pg(a, b, c) {
        c = c ? Ia(c, function (a) {
          return dd(a);
        }).join("$") : "default";(a = Jg(a, b, c)) && a.G && a.G("permission_denied");
      }function Jg(a, b, c) {
        b = new M(b).toString();var d;p(a.aa[b]) ? (d = a.aa[b][c], delete a.aa[b][c], 0 === na(a.aa[b]) && delete a.aa[b]) : d = void 0;return d;
      }
      function Lg(a, b, c) {
        I("Auth token revoked: " + b + "/" + c);a.pb = null;a.de = !0;a.Ia.close();"invalid_token" === b && (a.ke++, 3 <= a.ke && (a.Va = 3E4, L("Provided authentication credentials are invalid. This usually indicates your FirebaseApp instance was not initialized correctly. Make sure your apiKey and databaseURL match the values provided for your app at https://console.firebase.google.com/, or if you're using a service account, make sure it's authorized to access the specified databaseURL and is from the correct project.")));
      }
      function Qg(a) {
        Kg(a);t(a.aa, function (b) {
          t(b, function (b) {
            Ig(a, b);
          });
        });for (var b = 0; b < a.qa.length; b++) a.qa[b] && Og(a, b);for (; a.Lc.length;) b = a.Lc.shift(), Mg(a, b.action, b.we, b.data, b.G);
      }function Sg(a) {
        var b;b = Re.Wb().ic;return ua(a.qd) && b;
      };function Tg(a) {
        this.X = a;
      }var Ug = new Tg(new qe(null));function Vg(a, b, c) {
        if (b.e()) return new Tg(new qe(c));var d = ue(a.X, b);if (null != d) {
          var e = d.path,
              d = d.value;b = R(e, b);d = d.F(b, c);return new Tg(a.X.set(e, d));
        }a = Nd(a.X, b, new qe(c));return new Tg(a);
      }function Wg(a, b, c) {
        var d = a;Ib(c, function (a, c) {
          d = Vg(d, b.m(a), c);
        });return d;
      }Tg.prototype.Ed = function (a) {
        if (a.e()) return Ug;a = Nd(this.X, a, Q);return new Tg(a);
      };function Xg(a, b) {
        var c = ue(a.X, b);return null != c ? a.X.get(c.path).Q(R(c.path, b)) : null;
      }
      function Yg(a) {
        var b = [],
            c = a.X.value;null != c ? c.J() || c.P(N, function (a, c) {
          b.push(new O(a, c));
        }) : a.X.children.ia(function (a, c) {
          null != c.value && b.push(new O(a, c.value));
        });return b;
      }function Zg(a, b) {
        if (b.e()) return a;var c = Xg(a, b);return null != c ? new Tg(new qe(c)) : new Tg(a.X.subtree(b));
      }Tg.prototype.e = function () {
        return this.X.e();
      };Tg.prototype.apply = function (a) {
        return $g(C, this.X, a);
      };
      function $g(a, b, c) {
        if (null != b.value) return c.F(a, b.value);var d = null;b.children.ia(function (b, f) {
          ".priority" === b ? (E(null !== f.value, "Priority writes must always be leaf nodes"), d = f.value) : c = $g(a.m(b), f, c);
        });c.Q(a).e() || null === d || (c = c.F(a.m(".priority"), d));return c;
      };function ah() {
        this.T = Ug;this.ma = [];this.Cc = -1;
      }function bh(a, b) {
        for (var c = 0; c < a.ma.length; c++) {
          var d = a.ma[c];if (d.Zc === b) return d;
        }return null;
      }g = ah.prototype;
      g.Ed = function (a) {
        var b = Ma(this.ma, function (b) {
          return b.Zc === a;
        });E(0 <= b, "removeWrite called with nonexistent writeId.");var c = this.ma[b];this.ma.splice(b, 1);for (var d = c.visible, e = !1, f = this.ma.length - 1; d && 0 <= f;) {
          var h = this.ma[f];h.visible && (f >= b && ch(h, c.path) ? d = !1 : c.path.contains(h.path) && (e = !0));f--;
        }if (d) {
          if (e) this.T = dh(this.ma, eh, C), this.Cc = 0 < this.ma.length ? this.ma[this.ma.length - 1].Zc : -1;else if (c.Ja) this.T = this.T.Ed(c.path);else {
            var k = this;t(c.children, function (a, b) {
              k.T = k.T.Ed(c.path.m(b));
            });
          }return !0;
        }return !1;
      };
      g.Ba = function (a, b, c, d) {
        if (c || d) {
          var e = Zg(this.T, a);return !d && e.e() ? b : d || null != b || null != Xg(e, C) ? (e = dh(this.ma, function (b) {
            return (b.visible || d) && (!c || !(0 <= Fa(c, b.Zc))) && (b.path.contains(a) || a.contains(b.path));
          }, a), b = b || F, e.apply(b)) : null;
        }e = Xg(this.T, a);if (null != e) return e;e = Zg(this.T, a);return e.e() ? b : null != b || null != Xg(e, C) ? (b = b || F, e.apply(b)) : null;
      };
      g.sc = function (a, b) {
        var c = F,
            d = Xg(this.T, a);if (d) d.J() || d.P(N, function (a, b) {
          c = c.U(a, b);
        });else if (b) {
          var e = Zg(this.T, a);b.P(N, function (a, b) {
            var d = Zg(e, new M(a)).apply(b);c = c.U(a, d);
          });Ga(Yg(e), function (a) {
            c = c.U(a.name, a.S);
          });
        } else e = Zg(this.T, a), Ga(Yg(e), function (a) {
          c = c.U(a.name, a.S);
        });return c;
      };g.$c = function (a, b, c, d) {
        E(c || d, "Either existingEventSnap or existingServerSnap must exist");a = a.m(b);if (null != Xg(this.T, a)) return null;a = Zg(this.T, a);return a.e() ? d.Q(b) : a.apply(d.Q(b));
      };
      g.rc = function (a, b, c) {
        a = a.m(b);var d = Xg(this.T, a);return null != d ? d : nc(c, b) ? Zg(this.T, a).apply(c.j().R(b)) : null;
      };g.mc = function (a) {
        return Xg(this.T, a);
      };g.Xd = function (a, b, c, d, e, f) {
        var h;a = Zg(this.T, a);h = Xg(a, C);if (null == h) if (null != b) h = a.apply(b);else return [];h = h.ob(f);if (h.e() || h.J()) return [];b = [];a = Ue(f);e = e ? h.$b(c, f) : h.Yb(c, f);for (f = K(e); f && b.length < d;) 0 !== a(f, c) && b.push(f), f = K(e);return b;
      };
      function ch(a, b) {
        return a.Ja ? a.path.contains(b) : !!sa(a.children, function (c, d) {
          return a.path.m(d).contains(b);
        });
      }function eh(a) {
        return a.visible;
      }
      function dh(a, b, c) {
        for (var d = Ug, e = 0; e < a.length; ++e) {
          var f = a[e];if (b(f)) {
            var h = f.path;if (f.Ja) c.contains(h) ? (h = R(c, h), d = Vg(d, h, f.Ja)) : h.contains(c) && (h = R(h, c), d = Vg(d, C, f.Ja.Q(h)));else if (f.children) {
              if (c.contains(h)) h = R(c, h), d = Wg(d, h, f.children);else {
                if (h.contains(c)) if (h = R(h, c), h.e()) d = Wg(d, C, f.children);else if (f = A(f.children, J(h))) f = f.Q(D(h)), d = Vg(d, C, f);
              }
            } else throw Pc("WriteRecord should have .snap or .children");
          }
        }return d;
      }function fh(a, b) {
        this.Mb = a;this.X = b;
      }g = fh.prototype;
      g.Ba = function (a, b, c) {
        return this.X.Ba(this.Mb, a, b, c);
      };g.sc = function (a) {
        return this.X.sc(this.Mb, a);
      };g.$c = function (a, b, c) {
        return this.X.$c(this.Mb, a, b, c);
      };g.mc = function (a) {
        return this.X.mc(this.Mb.m(a));
      };g.Xd = function (a, b, c, d, e) {
        return this.X.Xd(this.Mb, a, b, c, d, e);
      };g.rc = function (a, b) {
        return this.X.rc(this.Mb, a, b);
      };g.m = function (a) {
        return new fh(this.Mb.m(a), this.X);
      };function Me() {
        this.k = this.B = null;
      }Me.prototype.find = function (a) {
        if (null != this.B) return this.B.Q(a);if (a.e() || null == this.k) return null;var b = J(a);a = D(a);return this.k.contains(b) ? this.k.get(b).find(a) : null;
      };function Oe(a, b, c) {
        if (b.e()) a.B = c, a.k = null;else if (null !== a.B) a.B = a.B.F(b, c);else {
          null == a.k && (a.k = new Ie());var d = J(b);a.k.contains(d) || a.k.add(d, new Me());a = a.k.get(d);b = D(b);Oe(a, b, c);
        }
      }
      function gh(a, b) {
        if (b.e()) return a.B = null, a.k = null, !0;if (null !== a.B) {
          if (a.B.J()) return !1;var c = a.B;a.B = null;c.P(N, function (b, c) {
            Oe(a, new M(b), c);
          });return gh(a, b);
        }return null !== a.k ? (c = J(b), b = D(b), a.k.contains(c) && gh(a.k.get(c), b) && a.k.remove(c), a.k.e() ? (a.k = null, !0) : !1) : !0;
      }function Ne(a, b, c) {
        null !== a.B ? c(b, a.B) : a.P(function (a, e) {
          var f = new M(b.toString() + "/" + a);Ne(e, f, c);
        });
      }Me.prototype.P = function (a) {
        null !== this.k && Je(this.k, function (b, c) {
          a(b, c);
        });
      };function U(a, b) {
        this.ua = a;this.ra = b;
      }U.prototype.cancel = function (a) {
        x("Firebase.onDisconnect().cancel", 0, 1, arguments.length);y("Firebase.onDisconnect().cancel", 1, a, !0);var b = new Eb();this.ua.xd(this.ra, Fb(b, a));return b.sa;
      };U.prototype.cancel = U.prototype.cancel;U.prototype.remove = function (a) {
        x("Firebase.onDisconnect().remove", 0, 1, arguments.length);fe("Firebase.onDisconnect().remove", this.ra);y("Firebase.onDisconnect().remove", 1, a, !0);var b = new Eb();hh(this.ua, this.ra, null, Fb(b, a));return b.sa;
      };
      U.prototype.remove = U.prototype.remove;U.prototype.set = function (a, b) {
        x("Firebase.onDisconnect().set", 1, 2, arguments.length);fe("Firebase.onDisconnect().set", this.ra);Yd("Firebase.onDisconnect().set", a, this.ra, !1);y("Firebase.onDisconnect().set", 2, b, !0);var c = new Eb();hh(this.ua, this.ra, a, Fb(c, b));return c.sa;
      };U.prototype.set = U.prototype.set;
      U.prototype.Kb = function (a, b, c) {
        x("Firebase.onDisconnect().setWithPriority", 2, 3, arguments.length);fe("Firebase.onDisconnect().setWithPriority", this.ra);Yd("Firebase.onDisconnect().setWithPriority", a, this.ra, !1);be("Firebase.onDisconnect().setWithPriority", 2, b);y("Firebase.onDisconnect().setWithPriority", 3, c, !0);var d = new Eb();ih(this.ua, this.ra, a, b, Fb(d, c));return d.sa;
      };U.prototype.setWithPriority = U.prototype.Kb;
      U.prototype.update = function (a, b) {
        x("Firebase.onDisconnect().update", 1, 2, arguments.length);fe("Firebase.onDisconnect().update", this.ra);if (da(a)) {
          for (var c = {}, d = 0; d < a.length; ++d) c["" + d] = a[d];a = c;L("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }ae("Firebase.onDisconnect().update", a, this.ra);y("Firebase.onDisconnect().update", 2, b, !0);
        c = new Eb();jh(this.ua, this.ra, a, Fb(c, b));return c.sa;
      };U.prototype.update = U.prototype.update;function V(a, b, c) {
        this.A = a;this.W = b;this.g = c;
      }V.prototype.H = function () {
        x("Firebase.DataSnapshot.val", 0, 0, arguments.length);return this.A.H();
      };V.prototype.val = V.prototype.H;V.prototype.Ue = function () {
        x("Firebase.DataSnapshot.exportVal", 0, 0, arguments.length);return this.A.H(!0);
      };V.prototype.exportVal = V.prototype.Ue;V.prototype.Vf = function () {
        x("Firebase.DataSnapshot.exists", 0, 0, arguments.length);return !this.A.e();
      };V.prototype.exists = V.prototype.Vf;
      V.prototype.m = function (a) {
        x("Firebase.DataSnapshot.child", 0, 1, arguments.length);fa(a) && (a = String(a));ee("Firebase.DataSnapshot.child", a);var b = new M(a),
            c = this.W.m(b);return new V(this.A.Q(b), c, N);
      };V.prototype.child = V.prototype.m;V.prototype.Fa = function (a) {
        x("Firebase.DataSnapshot.hasChild", 1, 1, arguments.length);ee("Firebase.DataSnapshot.hasChild", a);var b = new M(a);return !this.A.Q(b).e();
      };V.prototype.hasChild = V.prototype.Fa;
      V.prototype.C = function () {
        x("Firebase.DataSnapshot.getPriority", 0, 0, arguments.length);return this.A.C().H();
      };V.prototype.getPriority = V.prototype.C;V.prototype.forEach = function (a) {
        x("Firebase.DataSnapshot.forEach", 1, 1, arguments.length);y("Firebase.DataSnapshot.forEach", 1, a, !1);if (this.A.J()) return !1;var b = this;return !!this.A.P(this.g, function (c, d) {
          return a(new V(d, b.W.m(c), N));
        });
      };V.prototype.forEach = V.prototype.forEach;
      V.prototype.kd = function () {
        x("Firebase.DataSnapshot.hasChildren", 0, 0, arguments.length);return this.A.J() ? !1 : !this.A.e();
      };V.prototype.hasChildren = V.prototype.kd;V.prototype.getKey = function () {
        x("Firebase.DataSnapshot.key", 0, 0, arguments.length);return this.W.getKey();
      };id(V.prototype, "key", V.prototype.getKey);V.prototype.Fb = function () {
        x("Firebase.DataSnapshot.numChildren", 0, 0, arguments.length);return this.A.Fb();
      };V.prototype.numChildren = V.prototype.Fb;
      V.prototype.xb = function () {
        x("Firebase.DataSnapshot.ref", 0, 0, arguments.length);return this.W;
      };id(V.prototype, "ref", V.prototype.xb);function kh(a, b, c) {
        this.Qb = a;this.sb = b;this.ub = c || null;
      }g = kh.prototype;g.tf = function (a) {
        return "value" === a;
      };g.createEvent = function (a, b) {
        var c = b.n.g;return new ic("value", this, new V(a.Ma, b.xb(), c));
      };g.Ub = function (a) {
        var b = this.ub;if ("cancel" === a.ge()) {
          E(this.sb, "Raising a cancel event on a listener with no cancel callback");var c = this.sb;return function () {
            c.call(b, a.error);
          };
        }var d = this.Qb;return function () {
          d.call(b, a.Md);
        };
      };g.Pe = function (a, b) {
        return this.sb ? new jc(this, a, b) : null;
      };
      g.matches = function (a) {
        return a instanceof kh ? a.Qb && this.Qb ? a.Qb === this.Qb && a.ub === this.ub : !0 : !1;
      };g.af = function () {
        return null !== this.Qb;
      };function lh(a, b, c) {
        this.ha = a;this.sb = b;this.ub = c;
      }g = lh.prototype;g.tf = function (a) {
        a = "children_added" === a ? "child_added" : a;return ("children_removed" === a ? "child_removed" : a) in this.ha;
      };g.Pe = function (a, b) {
        return this.sb ? new jc(this, a, b) : null;
      };
      g.createEvent = function (a, b) {
        E(null != a.Za, "Child events should have a childName.");var c = b.xb().m(a.Za);return new ic(a.type, this, new V(a.Ma, c, b.n.g), a.Dd);
      };g.Ub = function (a) {
        var b = this.ub;if ("cancel" === a.ge()) {
          E(this.sb, "Raising a cancel event on a listener with no cancel callback");var c = this.sb;return function () {
            c.call(b, a.error);
          };
        }var d = this.ha[a.gd];return function () {
          d.call(b, a.Md, a.Dd);
        };
      };
      g.matches = function (a) {
        if (a instanceof lh) {
          if (!this.ha || !a.ha) return !0;if (this.ub === a.ub) {
            var b = na(a.ha);if (b === na(this.ha)) {
              if (1 === b) {
                var b = oa(a.ha),
                    c = oa(this.ha);return c === b && (!a.ha[b] || !this.ha[c] || a.ha[b] === this.ha[c]);
              }return ma(this.ha, function (b, c) {
                return a.ha[c] === b;
              });
            }
          }
        }return !1;
      };g.af = function () {
        return null !== this.ha;
      };function mh() {
        this.Aa = {};
      }g = mh.prototype;g.e = function () {
        return ua(this.Aa);
      };g.gb = function (a, b, c) {
        var d = a.source.Ib;if (null !== d) return d = A(this.Aa, d), E(null != d, "SyncTree gave us an op for an invalid query."), d.gb(a, b, c);var e = [];t(this.Aa, function (d) {
          e = e.concat(d.gb(a, b, c));
        });return e;
      };g.Ob = function (a, b, c, d, e) {
        var f = a.ka(),
            h = A(this.Aa, f);if (!h) {
          var h = c.Ba(e ? d : null),
              k = !1;h ? k = !0 : (h = d instanceof P ? c.sc(d) : F, k = !1);h = new Kf(a, new Hd(new oc(h, k, !1), new oc(d, e, !1)));this.Aa[f] = h;
        }h.Ob(b);return Nf(h, b);
      };
      g.mb = function (a, b, c) {
        var d = a.ka(),
            e = [],
            f = [],
            h = null != nh(this);if ("default" === d) {
          var k = this;t(this.Aa, function (a, d) {
            f = f.concat(a.mb(b, c));a.e() && (delete k.Aa[d], T(a.W.n) || e.push(a.W));
          });
        } else {
          var m = A(this.Aa, d);m && (f = f.concat(m.mb(b, c)), m.e() && (delete this.Aa[d], T(m.W.n) || e.push(m.W)));
        }h && null == nh(this) && e.push(new W(a.u, a.path));return { sg: e, Tf: f };
      };function oh(a) {
        return Ha(pa(a.Aa), function (a) {
          return !T(a.W.n);
        });
      }g.jb = function (a) {
        var b = null;t(this.Aa, function (c) {
          b = b || c.jb(a);
        });return b;
      };
      function ph(a, b) {
        if (T(b.n)) return nh(a);var c = b.ka();return A(a.Aa, c);
      }function nh(a) {
        return ta(a.Aa, function (a) {
          return T(a.W.n);
        }) || null;
      };function qh(a) {
        this.xa = Q;this.lb = new ah();this.De = {};this.jc = {};this.Dc = a;
      }function rh(a, b, c, d, e) {
        var f = a.lb,
            h = e;E(d > f.Cc, "Stacking an older write on top of newer ones");p(h) || (h = !0);f.ma.push({ path: b, Ja: c, Zc: d, visible: h });h && (f.T = Vg(f.T, b, c));f.Cc = d;return e ? sh(a, new ac(Ee, b, c)) : [];
      }function th(a, b, c, d) {
        var e = a.lb;E(d > e.Cc, "Stacking an older merge on top of newer ones");e.ma.push({ path: b, children: c, Zc: d, visible: !0 });e.T = Wg(e.T, b, c);e.Cc = d;c = se(c);return sh(a, new md(Ee, b, c));
      }
      function uh(a, b, c) {
        c = c || !1;var d = bh(a.lb, b);if (a.lb.Ed(b)) {
          var e = Q;null != d.Ja ? e = e.set(C, !0) : Ib(d.children, function (a, b) {
            e = e.set(new M(a), b);
          });return sh(a, new De(d.path, e, c));
        }return [];
      }function vh(a, b, c) {
        c = se(c);return sh(a, new md(Ge, b, c));
      }function wh(a, b, c, d) {
        d = xh(a, d);if (null != d) {
          var e = yh(d);d = e.path;e = e.Ib;b = R(d, b);c = new ac(new Fe(!1, !0, e, !0), b, c);return zh(a, d, c);
        }return [];
      }
      function Ah(a, b, c, d) {
        if (d = xh(a, d)) {
          var e = yh(d);d = e.path;e = e.Ib;b = R(d, b);c = se(c);c = new md(new Fe(!1, !0, e, !0), b, c);return zh(a, d, c);
        }return [];
      }
      qh.prototype.Ob = function (a, b) {
        var c = a.path,
            d = null,
            e = !1;ze(this.xa, c, function (a, b) {
          var f = R(a, c);d = d || b.jb(f);e = e || null != nh(b);
        });var f = this.xa.get(c);f ? (e = e || null != nh(f), d = d || f.jb(C)) : (f = new mh(), this.xa = this.xa.set(c, f));var h;null != d ? h = !0 : (h = !1, d = F, Ce(this.xa.subtree(c), function (a, b) {
          var c = b.jb(C);c && (d = d.U(a, c));
        }));var k = null != ph(f, a);if (!k && !T(a.n)) {
          var m = Bh(a);E(!(m in this.jc), "View does not exist, but we have a tag");var l = Ch++;this.jc[m] = l;this.De["_" + l] = m;
        }h = f.Ob(a, b, new fh(c, this.lb), d, h);k || e || (f = ph(f, a), h = h.concat(Dh(this, a, f)));return h;
      };
      qh.prototype.mb = function (a, b, c) {
        var d = a.path,
            e = this.xa.get(d),
            f = [];if (e && ("default" === a.ka() || null != ph(e, a))) {
          f = e.mb(a, b, c);e.e() && (this.xa = this.xa.remove(d));e = f.sg;f = f.Tf;b = -1 !== Ma(e, function (a) {
            return T(a.n);
          });var h = xe(this.xa, d, function (a, b) {
            return null != nh(b);
          });if (b && !h && (d = this.xa.subtree(d), !d.e())) for (var d = Eh(d), k = 0; k < d.length; ++k) {
            var m = d[k],
                l = m.W,
                m = Fh(this, m);this.Dc.Ae(Gh(l), Hh(this, l), m.ld, m.G);
          }if (!h && 0 < e.length && !c) if (b) this.Dc.Od(Gh(a), null);else {
            var u = this;Ga(e, function (a) {
              a.ka();
              var b = u.jc[Bh(a)];u.Dc.Od(Gh(a), b);
            });
          }Ih(this, e);
        }return f;
      };qh.prototype.Ba = function (a, b) {
        var c = this.lb,
            d = xe(this.xa, a, function (b, c) {
          var d = R(b, a);if (d = c.jb(d)) return d;
        });return c.Ba(a, d, b, !0);
      };function Eh(a) {
        return ve(a, function (a, c, d) {
          if (c && null != nh(c)) return [nh(c)];var e = [];c && (e = oh(c));t(d, function (a) {
            e = e.concat(a);
          });return e;
        });
      }function Ih(a, b) {
        for (var c = 0; c < b.length; ++c) {
          var d = b[c];if (!T(d.n)) {
            var d = Bh(d),
                e = a.jc[d];delete a.jc[d];delete a.De["_" + e];
          }
        }
      }
      function Gh(a) {
        return T(a.n) && !zf(a.n) ? a.xb() : a;
      }function Dh(a, b, c) {
        var d = b.path,
            e = Hh(a, b);c = Fh(a, c);b = a.Dc.Ae(Gh(b), e, c.ld, c.G);d = a.xa.subtree(d);if (e) E(null == nh(d.value), "If we're adding a query, it shouldn't be shadowed");else for (e = ve(d, function (a, b, c) {
          if (!a.e() && b && null != nh(b)) return [Lf(nh(b))];var d = [];b && (d = d.concat(Ia(oh(b), function (a) {
            return a.W;
          })));t(c, function (a) {
            d = d.concat(a);
          });return d;
        }), d = 0; d < e.length; ++d) c = e[d], a.Dc.Od(Gh(c), Hh(a, c));return b;
      }
      function Fh(a, b) {
        var c = b.W,
            d = Hh(a, c);return { ld: function () {
            return (b.w() || F).hash();
          }, G: function (b) {
            if ("ok" === b) {
              if (d) {
                var f = c.path;if (b = xh(a, d)) {
                  var h = yh(b);b = h.path;h = h.Ib;f = R(b, f);f = new Zb(new Fe(!1, !0, h, !0), f);b = zh(a, b, f);
                } else b = [];
              } else b = sh(a, new Zb(Ge, c.path));return b;
            }f = "Unknown Error";"too_big" === b ? f = "The data requested exceeds the maximum size that can be accessed with a single request." : "permission_denied" == b ? f = "Client doesn't have permission to access the desired data." : "unavailable" == b && (f = "The service is unavailable");f = Error(b + " at " + c.path.toString() + ": " + f);f.code = b.toUpperCase();return a.mb(c, null, f);
          } };
      }function Bh(a) {
        return a.path.toString() + "$" + a.ka();
      }function yh(a) {
        var b = a.indexOf("$");E(-1 !== b && b < a.length - 1, "Bad queryKey.");return { Ib: a.substr(b + 1), path: new M(a.substr(0, b)) };
      }function xh(a, b) {
        var c = a.De,
            d = "_" + b;return d in c ? c[d] : void 0;
      }function Hh(a, b) {
        var c = Bh(b);return A(a.jc, c);
      }var Ch = 1;
      function zh(a, b, c) {
        var d = a.xa.get(b);E(d, "Missing sync point for query tag that we're tracking");return d.gb(c, new fh(b, a.lb), null);
      }function sh(a, b) {
        return Jh(a, b, a.xa, null, new fh(C, a.lb));
      }function Jh(a, b, c, d, e) {
        if (b.path.e()) return Kh(a, b, c, d, e);var f = c.get(C);null == d && null != f && (d = f.jb(C));var h = [],
            k = J(b.path),
            m = b.Nc(k);if ((c = c.children.get(k)) && m) var l = d ? d.R(k) : null,
            k = e.m(k),
            h = h.concat(Jh(a, m, c, l, k));f && (h = h.concat(f.gb(b, e, d)));return h;
      }
      function Kh(a, b, c, d, e) {
        var f = c.get(C);null == d && null != f && (d = f.jb(C));var h = [];c.children.ia(function (c, f) {
          var l = d ? d.R(c) : null,
              u = e.m(c),
              z = b.Nc(c);z && (h = h.concat(Kh(a, z, f, l, u)));
        });f && (h = h.concat(f.gb(b, e, d)));return h;
      };function X(a, b, c, d) {
        this.u = a;this.path = b;this.n = c;this.Oc = d;
      }
      function Lh(a) {
        var b = null,
            c = null;a.la && (b = sd(a));a.oa && (c = ud(a));if (a.g === Od) {
          if (a.la) {
            if ("[MIN_NAME]" != rd(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof b) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
          }if (a.oa) {
            if ("[MAX_NAME]" != td(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof c) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
          }
        } else if (a.g === N) {
          if (null != b && !Xd(b) || null != c && !Xd(c)) throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");
        } else if (E(a.g instanceof We || a.g === bf, "unknown index type."), null != b && "object" === typeof b || null != c && "object" === typeof c) throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
      }function Mh(a) {
        if (a.la && a.oa && a.ya && (!a.ya || "" === a.oc)) throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
      }function Nh(a, b) {
        if (!0 === a.Oc) throw Error(b + ": You can't combine multiple orderBy calls.");
      }g = X.prototype;g.xb = function () {
        x("Query.ref", 0, 0, arguments.length);return new W(this.u, this.path);
      };
      g.hc = function (a, b, c, d) {
        x("Query.on", 2, 4, arguments.length);ce("Query.on", a, !1);y("Query.on", 2, b, !1);var e = Oh("Query.on", c, d);if ("value" === a) Ph(this.u, this, new kh(b, e.cancel || null, e.Pa || null));else {
          var f = {};f[a] = b;Ph(this.u, this, new lh(f, e.cancel, e.Pa));
        }return b;
      };
      g.Jc = function (a, b, c) {
        x("Query.off", 0, 3, arguments.length);ce("Query.off", a, !0);y("Query.off", 2, b, !0);Cb("Query.off", 3, c);var d = null,
            e = null;"value" === a ? d = new kh(b || null, null, c || null) : a && (b && (e = {}, e[a] = b), d = new lh(e, null, c || null));e = this.u;d = ".info" === J(this.path) ? e.pd.mb(this, d) : e.K.mb(this, d);tc(e.da, this.path, d);
      };
      g.kg = function (a, b) {
        function c(k) {
          f && (f = !1, e.Jc(a, c), b && b.call(d.Pa, k), h.resolve(k));
        }x("Query.once", 1, 4, arguments.length);ce("Query.once", a, !1);y("Query.once", 2, b, !0);var d = Oh("Query.once", arguments[2], arguments[3]),
            e = this,
            f = !0,
            h = new Eb();Gb(h.sa);this.hc(a, c, function (b) {
          e.Jc(a, c);d.cancel && d.cancel.call(d.Pa, b);h.reject(b);
        });return h.sa;
      };
      g.ne = function (a) {
        x("Query.limitToFirst", 1, 1, arguments.length);if (!fa(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToFirst: First argument must be a positive integer.");if (this.n.ya) throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.n.ne(a), this.Oc);
      };
      g.oe = function (a) {
        x("Query.limitToLast", 1, 1, arguments.length);if (!fa(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToLast: First argument must be a positive integer.");if (this.n.ya) throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.n.oe(a), this.Oc);
      };
      g.lg = function (a) {
        x("Query.orderByChild", 1, 1, arguments.length);if ("$key" === a) throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if ("$priority" === a) throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if ("$value" === a) throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ee("Query.orderByChild", a);Nh(this, "Query.orderByChild");var b = new M(a);if (b.e()) throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
        b = new We(b);b = xf(this.n, b);Lh(b);return new X(this.u, this.path, b, !0);
      };g.mg = function () {
        x("Query.orderByKey", 0, 0, arguments.length);Nh(this, "Query.orderByKey");var a = xf(this.n, Od);Lh(a);return new X(this.u, this.path, a, !0);
      };g.ng = function () {
        x("Query.orderByPriority", 0, 0, arguments.length);Nh(this, "Query.orderByPriority");var a = xf(this.n, N);Lh(a);return new X(this.u, this.path, a, !0);
      };
      g.og = function () {
        x("Query.orderByValue", 0, 0, arguments.length);Nh(this, "Query.orderByValue");var a = xf(this.n, bf);Lh(a);return new X(this.u, this.path, a, !0);
      };g.Nd = function (a, b) {
        x("Query.startAt", 0, 2, arguments.length);Yd("Query.startAt", a, this.path, !0);de("Query.startAt", b);var c = this.n.Nd(a, b);Mh(c);Lh(c);if (this.n.la) throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");p(a) || (b = a = null);return new X(this.u, this.path, c, this.Oc);
      };
      g.fd = function (a, b) {
        x("Query.endAt", 0, 2, arguments.length);Yd("Query.endAt", a, this.path, !0);de("Query.endAt", b);var c = this.n.fd(a, b);Mh(c);Lh(c);if (this.n.oa) throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new X(this.u, this.path, c, this.Oc);
      };
      g.Rf = function (a, b) {
        x("Query.equalTo", 1, 2, arguments.length);Yd("Query.equalTo", a, this.path, !1);de("Query.equalTo", b);if (this.n.la) throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if (this.n.oa) throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.Nd(a, b).fd(a, b);
      };
      g.toString = function () {
        x("Query.toString", 0, 0, arguments.length);for (var a = this.path, b = "", c = a.Z; c < a.o.length; c++) "" !== a.o[c] && (b += "/" + encodeURIComponent(String(a.o[c])));return this.u.toString() + (b || "/");
      };g.ka = function () {
        var a = dd(yf(this.n));return "{}" === a ? "default" : a;
      };
      g.isEqual = function (a) {
        x("Query.isEqual", 1, 1, arguments.length);if (!(a instanceof X)) throw Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.");var b = this.u === a.u,
            c = this.path.$(a.path),
            d = this.ka() === a.ka();return b && c && d;
      };
      function Oh(a, b, c) {
        var d = { cancel: null, Pa: null };if (b && c) d.cancel = b, y(a, 3, d.cancel, !0), d.Pa = c, Cb(a, 4, d.Pa);else if (b) if ("object" === typeof b && null !== b) d.Pa = b;else if ("function" === typeof b) d.cancel = b;else throw Error(Bb(a, 3, !0) + " must either be a cancel callback or a context object.");return d;
      }X.prototype.on = X.prototype.hc;X.prototype.off = X.prototype.Jc;X.prototype.once = X.prototype.kg;X.prototype.limitToFirst = X.prototype.ne;X.prototype.limitToLast = X.prototype.oe;X.prototype.orderByChild = X.prototype.lg;
      X.prototype.orderByKey = X.prototype.mg;X.prototype.orderByPriority = X.prototype.ng;X.prototype.orderByValue = X.prototype.og;X.prototype.startAt = X.prototype.Nd;X.prototype.endAt = X.prototype.fd;X.prototype.equalTo = X.prototype.Rf;X.prototype.toString = X.prototype.toString;X.prototype.isEqual = X.prototype.isEqual;id(X.prototype, "ref", X.prototype.xb);function Qh(a) {
        a instanceof Rh || Xc("Don't call new Database() directly - please use firebase.database().");this.ua = a;this.ca = new W(a, C);this.INTERNAL = new Sh(this);
      }var Th = { TIMESTAMP: { ".sv": "timestamp" } };g = Qh.prototype;g.app = null;g.pf = function (a) {
        Uh(this, "ref");x("database.ref", 0, 1, arguments.length);return p(a) ? this.ca.m(a) : this.ca;
      };
      g.rg = function (a) {
        Uh(this, "database.refFromURL");x("database.refFromURL", 1, 1, arguments.length);var b = Yc(a);ge("database.refFromURL", b);var c = b.kc;c.host !== this.ua.M.host && Xc("database.refFromURL: Host name does not match the current database: (found " + c.host + " but expected " + this.ua.M.host + ")");return this.pf(b.path.toString());
      };function Uh(a, b) {
        null === a.ua && Xc("Cannot call " + b + " on a deleted database.");
      }g.$f = function () {
        x("database.goOffline", 0, 0, arguments.length);Uh(this, "goOffline");this.ua.eb();
      };
      g.ag = function () {
        x("database.goOnline", 0, 0, arguments.length);Uh(this, "goOnline");this.ua.lc();
      };Object.defineProperty(Qh.prototype, "app", { get: function () {
          return this.ua.app;
        } });function Sh(a) {
        this.$a = a;
      }Sh.prototype.delete = function () {
        Uh(this.$a, "delete");var a = Vh.Wb(),
            b = this.$a.ua;A(a.nb, b.app.name) !== b && Xc("Database " + b.app.name + " has already been deleted.");b.eb();delete a.nb[b.app.name];this.$a.ua = null;this.$a.ca = null;this.$a = this.$a.INTERNAL = null;return firebase.Promise.resolve();
      };
      Qh.prototype.ref = Qh.prototype.pf;Qh.prototype.refFromURL = Qh.prototype.rg;Qh.prototype.goOnline = Qh.prototype.ag;Qh.prototype.goOffline = Qh.prototype.$f;Sh.prototype["delete"] = Sh.prototype.delete;function Rh(a, b, c) {
        this.app = c;var d = new Rf(c);this.M = a;this.Xa = Zf(a);this.Vc = null;this.da = new qc();this.vd = 1;this.Ua = null;if (b || 0 <= ("object" === typeof window && window.navigator && window.navigator.userAgent || "").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)) this.wa = new Of(this.M, r(this.Hb, this), d), setTimeout(r(this.Kc, this, !0), 0);else {
          b = c.options.databaseAuthVariableOverride || null;if (null !== b) {
            if ("object" !== ca(b)) throw Error("Only objects are supported for option databaseAuthVariableOverride");
            try {
              B(b);
            } catch (e) {
              throw Error("Invalid authOverride provided: " + e);
            }
          }this.wa = this.Ua = new Eg(this.M, r(this.Hb, this), r(this.Kc, this), r(this.ue, this), d, b);
        }var f = this;Sf(d, function (a) {
          f.wa.qf(a);
        });this.zg = $f(a, r(function () {
          return new Wf(this.Xa, this.wa);
        }, this));this.nc = new ie();this.ie = new fc();this.pd = new qh({ Ae: function (a, b, c, d) {
            b = [];c = f.ie.j(a.path);c.e() || (b = sh(f.pd, new ac(Ge, a.path, c)), setTimeout(function () {
              d("ok");
            }, 0));return b;
          }, Od: aa });Wh(this, "connected", !1);this.ja = new Me();this.$a = new Qh(this);this.ed = 0;this.je = null;this.K = new qh({ Ae: function (a, b, c, d) {
            f.wa.df(a, c, b, function (b, c) {
              var e = d(b, c);vc(f.da, a.path, e);
            });return [];
          }, Od: function (a, b) {
            f.wa.Ef(a, b);
          } });
      }g = Rh.prototype;g.toString = function () {
        return (this.M.Sc ? "https://" : "http://") + this.M.host;
      };g.name = function () {
        return this.M.pe;
      };function Xh(a) {
        a = a.ie.j(new M(".info/serverTimeOffset")).H() || 0;return new Date().getTime() + a;
      }function Yh(a) {
        a = a = { timestamp: Xh(a) };a.timestamp = a.timestamp || new Date().getTime();return a;
      }
      g.Hb = function (a, b, c, d) {
        this.ed++;var e = new M(a);b = this.je ? this.je(a, b) : b;a = [];d ? c ? (b = la(b, function (a) {
          return S(a);
        }), a = Ah(this.K, e, b, d)) : (b = S(b), a = wh(this.K, e, b, d)) : c ? (d = la(b, function (a) {
          return S(a);
        }), a = vh(this.K, e, d)) : (d = S(b), a = sh(this.K, new ac(Ge, e, d)));d = e;0 < a.length && (d = Zh(this, e));vc(this.da, d, a);
      };g.Kc = function (a) {
        Wh(this, "connected", a);!1 === a && $h(this);
      };g.ue = function (a) {
        var b = this;fd(a, function (a, d) {
          Wh(b, d, a);
        });
      };
      function Wh(a, b, c) {
        b = new M("/.info/" + b);c = S(c);var d = a.ie;d.Jd = d.Jd.F(b, c);c = sh(a.pd, new ac(Ge, b, c));vc(a.da, b, c);
      }g.Kb = function (a, b, c, d) {
        this.f("set", { path: a.toString(), value: b, Gg: c });var e = Yh(this);b = S(b, c);var e = Pe(b, e),
            f = this.vd++,
            e = rh(this.K, a, e, f, !0);rc(this.da, e);var h = this;this.wa.put(a.toString(), b.H(!0), function (b, c) {
          var e = "ok" === b;e || L("set at " + a + " failed: " + b);e = uh(h.K, f, !e);vc(h.da, a, e);ai(d, b, c);
        });e = bi(this, a);Zh(this, e);vc(this.da, e, []);
      };
      g.update = function (a, b, c) {
        this.f("update", { path: a.toString(), value: b });var d = !0,
            e = Yh(this),
            f = {};t(b, function (a, b) {
          d = !1;var c = S(a);f[b] = Pe(c, e);
        });if (d) I("update() called with empty data.  Don't do anything."), ai(c, "ok");else {
          var h = this.vd++,
              k = th(this.K, a, f, h);rc(this.da, k);var m = this;this.wa.ef(a.toString(), b, function (b, d) {
            var e = "ok" === b;e || L("update at " + a + " failed: " + b);var e = uh(m.K, h, !e),
                f = a;0 < e.length && (f = Zh(m, a));vc(m.da, f, e);ai(c, b, d);
          });b = bi(this, a);Zh(this, b);vc(this.da, a, []);
        }
      };
      function $h(a) {
        a.f("onDisconnectEvents");var b = Yh(a),
            c = [];Ne(Le(a.ja, b), C, function (b, e) {
          c = c.concat(sh(a.K, new ac(Ge, b, e)));var f = bi(a, b);Zh(a, f);
        });a.ja = new Me();vc(a.da, C, c);
      }g.xd = function (a, b) {
        var c = this;this.wa.xd(a.toString(), function (d, e) {
          "ok" === d && gh(c.ja, a);ai(b, d, e);
        });
      };function hh(a, b, c, d) {
        var e = S(c);a.wa.re(b.toString(), e.H(!0), function (c, h) {
          "ok" === c && Oe(a.ja, b, e);ai(d, c, h);
        });
      }function ih(a, b, c, d, e) {
        var f = S(c, d);a.wa.re(b.toString(), f.H(!0), function (c, d) {
          "ok" === c && Oe(a.ja, b, f);ai(e, c, d);
        });
      }
      function jh(a, b, c, d) {
        var e = !0,
            f;for (f in c) e = !1;e ? (I("onDisconnect().update() called with empty data.  Don't do anything."), ai(d, "ok")) : a.wa.gf(b.toString(), c, function (e, f) {
          if ("ok" === e) for (var m in c) {
            var l = S(c[m]);Oe(a.ja, b.m(m), l);
          }ai(d, e, f);
        });
      }function Ph(a, b, c) {
        c = ".info" === J(b.path) ? a.pd.Ob(b, c) : a.K.Ob(b, c);tc(a.da, b.path, c);
      }g.eb = function () {
        this.Ua && this.Ua.eb("repo_interrupt");
      };g.lc = function () {
        this.Ua && this.Ua.lc("repo_interrupt");
      };
      g.Be = function (a) {
        if ("undefined" !== typeof console) {
          a ? (this.Vc || (this.Vc = new Tf(this.Xa)), a = this.Vc.get()) : a = this.Xa.get();var b = Ja(qa(a), function (a, b) {
            return Math.max(b.length, a);
          }, 0),
              c;for (c in a) {
            for (var d = a[c], e = c.length; e < b + 2; e++) c += " ";console.log(c + d);
          }
        }
      };g.Ce = function (a) {
        Vf(this.Xa, a);this.zg.zf[a] = !0;
      };g.f = function (a) {
        var b = "";this.Ua && (b = this.Ua.id + ":");I(b, arguments);
      };
      function ai(a, b, c) {
        a && Tb(function () {
          if ("ok" == b) a(null);else {
            var d = (b || "error").toUpperCase(),
                e = d;c && (e += ": " + c);e = Error(e);e.code = d;a(e);
          }
        });
      };function ci(a, b, c, d, e) {
        function f() {}a.f("transaction on " + b);var h = new W(a, b);h.hc("value", f);c = { path: b, update: c, G: d, status: null, lf: Oc(), Ie: e, wf: 0, Rd: function () {
            h.Jc("value", f);
          }, Td: null, Da: null, bd: null, cd: null, dd: null };d = a.K.Ba(b, void 0) || F;c.bd = d;d = c.update(d.H());if (p(d)) {
          Zd("transaction failed: Data returned ", d, c.path);c.status = 1;e = je(a.nc, b);var k = e.Ea() || [];k.push(c);ke(e, k);"object" === typeof d && null !== d && Hb(d, ".priority") ? (k = A(d, ".priority"), E(Xd(k), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")) : k = (a.K.Ba(b) || F).C().H();e = Yh(a);d = S(d, k);e = Pe(d, e);c.cd = d;c.dd = e;c.Da = a.vd++;c = rh(a.K, b, e, c.Da, c.Ie);vc(a.da, b, c);di(a);
        } else c.Rd(), c.cd = null, c.dd = null, c.G && (a = new V(c.bd, new W(a, c.path), N), c.G(null, !1, a));
      }function di(a, b) {
        var c = b || a.nc;b || ei(a, c);if (null !== c.Ea()) {
          var d = fi(a, c);E(0 < d.length, "Sending zero length transaction queue");Ka(d, function (a) {
            return 1 === a.status;
          }) && gi(a, c.path(), d);
        } else c.kd() && c.P(function (b) {
          di(a, b);
        });
      }
      function gi(a, b, c) {
        for (var d = Ia(c, function (a) {
          return a.Da;
        }), e = a.K.Ba(b, d) || F, d = e, e = e.hash(), f = 0; f < c.length; f++) {
          var h = c[f];E(1 === h.status, "tryToSendTransactionQueue_: items in queue should all be run.");h.status = 2;h.wf++;var k = R(b, h.path),
              d = d.F(k, h.cd);
        }d = d.H(!0);a.wa.put(b.toString(), d, function (d) {
          a.f("transaction put response", { path: b.toString(), status: d });var e = [];if ("ok" === d) {
            d = [];for (f = 0; f < c.length; f++) {
              c[f].status = 3;e = e.concat(uh(a.K, c[f].Da));if (c[f].G) {
                var h = c[f].dd,
                    k = new W(a, c[f].path);d.push(r(c[f].G, null, null, !0, new V(h, k, N)));
              }c[f].Rd();
            }ei(a, je(a.nc, b));di(a);vc(a.da, b, e);for (f = 0; f < d.length; f++) Tb(d[f]);
          } else {
            if ("datastale" === d) for (f = 0; f < c.length; f++) c[f].status = 4 === c[f].status ? 5 : 1;else for (L("transaction at " + b.toString() + " failed: " + d), f = 0; f < c.length; f++) c[f].status = 5, c[f].Td = d;Zh(a, b);
          }
        }, e);
      }function Zh(a, b) {
        var c = hi(a, b),
            d = c.path(),
            c = fi(a, c);ii(a, c, d);return d;
      }
      function ii(a, b, c) {
        if (0 !== b.length) {
          for (var d = [], e = [], f = Ha(b, function (a) {
            return 1 === a.status;
          }), f = Ia(f, function (a) {
            return a.Da;
          }), h = 0; h < b.length; h++) {
            var k = b[h],
                m = R(c, k.path),
                l = !1,
                u;E(null !== m, "rerunTransactionsUnderNode_: relativePath should not be null.");if (5 === k.status) l = !0, u = k.Td, e = e.concat(uh(a.K, k.Da, !0));else if (1 === k.status) if (25 <= k.wf) l = !0, u = "maxretry", e = e.concat(uh(a.K, k.Da, !0));else {
              var z = a.K.Ba(k.path, f) || F;k.bd = z;var G = b[h].update(z.H());p(G) ? (Zd("transaction failed: Data returned ", G, k.path), m = S(G), "object" === typeof G && null != G && Hb(G, ".priority") || (m = m.ga(z.C())), z = k.Da, G = Yh(a), G = Pe(m, G), k.cd = m, k.dd = G, k.Da = a.vd++, Na(f, z), e = e.concat(rh(a.K, k.path, G, k.Da, k.Ie)), e = e.concat(uh(a.K, z, !0))) : (l = !0, u = "nodata", e = e.concat(uh(a.K, k.Da, !0)));
            }vc(a.da, c, e);e = [];l && (b[h].status = 3, setTimeout(b[h].Rd, Math.floor(0)), b[h].G && ("nodata" === u ? (k = new W(a, b[h].path), d.push(r(b[h].G, null, null, !1, new V(b[h].bd, k, N)))) : d.push(r(b[h].G, null, Error(u), !1, null))));
          }ei(a, a.nc);for (h = 0; h < d.length; h++) Tb(d[h]);di(a);
        }
      }
      function hi(a, b) {
        for (var c, d = a.nc; null !== (c = J(b)) && null === d.Ea();) d = je(d, c), b = D(b);return d;
      }function fi(a, b) {
        var c = [];ji(a, b, c);c.sort(function (a, b) {
          return a.lf - b.lf;
        });return c;
      }function ji(a, b, c) {
        var d = b.Ea();if (null !== d) for (var e = 0; e < d.length; e++) c.push(d[e]);b.P(function (b) {
          ji(a, b, c);
        });
      }function ei(a, b) {
        var c = b.Ea();if (c) {
          for (var d = 0, e = 0; e < c.length; e++) 3 !== c[e].status && (c[d] = c[e], d++);c.length = d;ke(b, 0 < c.length ? c : null);
        }b.P(function (b) {
          ei(a, b);
        });
      }
      function bi(a, b) {
        var c = hi(a, b).path(),
            d = je(a.nc, b);ne(d, function (b) {
          ki(a, b);
        });ki(a, d);me(d, function (b) {
          ki(a, b);
        });return c;
      }
      function ki(a, b) {
        var c = b.Ea();if (null !== c) {
          for (var d = [], e = [], f = -1, h = 0; h < c.length; h++) 4 !== c[h].status && (2 === c[h].status ? (E(f === h - 1, "All SENT items should be at beginning of queue."), f = h, c[h].status = 4, c[h].Td = "set") : (E(1 === c[h].status, "Unexpected transaction status in abort"), c[h].Rd(), e = e.concat(uh(a.K, c[h].Da, !0)), c[h].G && d.push(r(c[h].G, null, Error("set"), !1, null))));-1 === f ? ke(b, null) : c.length = f + 1;vc(a.da, b.path(), e);for (h = 0; h < d.length; h++) Tb(d[h]);
        }
      };function Vh() {
        this.nb = {};this.Ff = !1;
      }Vh.prototype.eb = function () {
        for (var a in this.nb) this.nb[a].eb();
      };Vh.prototype.lc = function () {
        for (var a in this.nb) this.nb[a].lc();
      };Vh.prototype.ce = function (a) {
        this.Ff = a;
      };ba(Vh);Vh.prototype.interrupt = Vh.prototype.eb;Vh.prototype.resume = Vh.prototype.lc;var Y = {};Y.pc = Eg;Y.DataConnection = Y.pc;Eg.prototype.yg = function (a, b) {
        this.va("q", { p: a }, b);
      };Y.pc.prototype.simpleListen = Y.pc.prototype.yg;Eg.prototype.Qf = function (a, b) {
        this.va("echo", { d: a }, b);
      };Y.pc.prototype.echo = Y.pc.prototype.Qf;Eg.prototype.interrupt = Eg.prototype.eb;Y.If = sg;Y.RealTimeConnection = Y.If;sg.prototype.sendRequest = sg.prototype.va;sg.prototype.close = sg.prototype.close;
      Y.bg = function (a) {
        var b = Eg.prototype.put;Eg.prototype.put = function (c, d, e, f) {
          p(f) && (f = a());b.call(this, c, d, e, f);
        };return function () {
          Eg.prototype.put = b;
        };
      };Y.hijackHash = Y.bg;Y.Hf = cc;Y.ConnectionTarget = Y.Hf;Y.ka = function (a) {
        return a.ka();
      };Y.queryIdentifier = Y.ka;Y.eg = function (a) {
        return a.u.Ua.aa;
      };Y.listens = Y.eg;Y.ce = function (a) {
        Vh.Wb().ce(a);
      };Y.forceRestClient = Y.ce;Y.Context = Vh;var Z = { Xf: function () {
          hg = cg = !0;
        } };Z.forceLongPolling = Z.Xf;Z.Yf = function () {
        ig = !0;
      };Z.forceWebSockets = Z.Yf;Z.dg = function () {
        return bg.isAvailable();
      };Z.isWebSocketsAvailable = Z.dg;Z.wg = function (a, b) {
        a.u.Ua.ze = b;
      };Z.setSecurityDebugCallback = Z.wg;Z.Be = function (a, b) {
        a.u.Be(b);
      };Z.stats = Z.Be;Z.Ce = function (a, b) {
        a.u.Ce(b);
      };Z.statsIncrementCounter = Z.Ce;Z.ed = function (a) {
        return a.u.ed;
      };Z.dataUpdateCount = Z.ed;Z.cg = function (a, b) {
        a.u.je = b;
      };Z.interceptServerData = Z.cg;function li(a, b) {
        this.committed = a;this.snapshot = b;
      };function W(a, b) {
        if (!(a instanceof Rh)) throw Error("new Firebase() no longer supported - use app.database().");X.call(this, a, b, vf, !1);this.then = void 0;this["catch"] = void 0;
      }ka(W, X);g = W.prototype;g.getKey = function () {
        x("Firebase.key", 0, 0, arguments.length);return this.path.e() ? null : Kd(this.path);
      };
      g.m = function (a) {
        x("Firebase.child", 1, 1, arguments.length);if (fa(a)) a = String(a);else if (!(a instanceof M)) if (null === J(this.path)) {
          var b = a;b && (b = b.replace(/^\/*\.info(\/|$)/, "/"));ee("Firebase.child", b);
        } else ee("Firebase.child", a);return new W(this.u, this.path.m(a));
      };g.getParent = function () {
        x("Firebase.parent", 0, 0, arguments.length);var a = this.path.parent();return null === a ? null : new W(this.u, a);
      };
      g.Zf = function () {
        x("Firebase.ref", 0, 0, arguments.length);for (var a = this; null !== a.getParent();) a = a.getParent();return a;
      };g.Pf = function () {
        return this.u.$a;
      };g.set = function (a, b) {
        x("Firebase.set", 1, 2, arguments.length);fe("Firebase.set", this.path);Yd("Firebase.set", a, this.path, !1);y("Firebase.set", 2, b, !0);var c = new Eb();this.u.Kb(this.path, a, null, Fb(c, b));return c.sa;
      };
      g.update = function (a, b) {
        x("Firebase.update", 1, 2, arguments.length);fe("Firebase.update", this.path);if (da(a)) {
          for (var c = {}, d = 0; d < a.length; ++d) c["" + d] = a[d];a = c;L("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
        }ae("Firebase.update", a, this.path);y("Firebase.update", 2, b, !0);c = new Eb();this.u.update(this.path, a, Fb(c, b));return c.sa;
      };
      g.Kb = function (a, b, c) {
        x("Firebase.setWithPriority", 2, 3, arguments.length);fe("Firebase.setWithPriority", this.path);Yd("Firebase.setWithPriority", a, this.path, !1);be("Firebase.setWithPriority", 2, b);y("Firebase.setWithPriority", 3, c, !0);if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.setWithPriority failed: " + this.getKey() + " is a read-only object.";var d = new Eb();this.u.Kb(this.path, a, b, Fb(d, c));return d.sa;
      };
      g.remove = function (a) {
        x("Firebase.remove", 0, 1, arguments.length);fe("Firebase.remove", this.path);y("Firebase.remove", 1, a, !0);return this.set(null, a);
      };
      g.transaction = function (a, b, c) {
        x("Firebase.transaction", 1, 3, arguments.length);fe("Firebase.transaction", this.path);y("Firebase.transaction", 1, a, !1);y("Firebase.transaction", 2, b, !0);if (p(c) && "boolean" != typeof c) throw Error(Bb("Firebase.transaction", 3, !0) + "must be a boolean.");if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.transaction failed: " + this.getKey() + " is a read-only object.";"undefined" === typeof c && (c = !0);var d = new Eb();ga(b) && Gb(d.sa);ci(this.u, this.path, a, function (a, c, h) {
          a ? d.reject(a) : d.resolve(new li(c, h));ga(b) && b(a, c, h);
        }, c);return d.sa;
      };g.vg = function (a, b) {
        x("Firebase.setPriority", 1, 2, arguments.length);fe("Firebase.setPriority", this.path);be("Firebase.setPriority", 1, a);y("Firebase.setPriority", 2, b, !0);var c = new Eb();this.u.Kb(this.path.m(".priority"), a, null, Fb(c, b));return c.sa;
      };
      g.push = function (a, b) {
        x("Firebase.push", 0, 2, arguments.length);fe("Firebase.push", this.path);Yd("Firebase.push", a, this.path, !0);y("Firebase.push", 2, b, !0);var c = Xh(this.u),
            d = Pd(c),
            c = this.m(d);if (null != a) {
          var e = this,
              f = c.set(a, b).then(function () {
            return e.m(d);
          });c.then = r(f.then, f);c["catch"] = r(f.then, f, void 0);ga(b) && Gb(f);
        }return c;
      };g.kb = function () {
        fe("Firebase.onDisconnect", this.path);return new U(this.u, this.path);
      };W.prototype.child = W.prototype.m;W.prototype.set = W.prototype.set;W.prototype.update = W.prototype.update;
      W.prototype.setWithPriority = W.prototype.Kb;W.prototype.remove = W.prototype.remove;W.prototype.transaction = W.prototype.transaction;W.prototype.setPriority = W.prototype.vg;W.prototype.push = W.prototype.push;W.prototype.onDisconnect = W.prototype.kb;id(W.prototype, "database", W.prototype.Pf);id(W.prototype, "key", W.prototype.getKey);id(W.prototype, "parent", W.prototype.getParent);id(W.prototype, "root", W.prototype.Zf);if ("undefined" === typeof firebase) throw Error("Cannot install Firebase Database - be sure to load firebase-app.js first.");
      try {
        firebase.INTERNAL.registerService("database", function (a) {
          var b = Vh.Wb(),
              c = a.options.databaseURL;p(c) || Xc("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.intializeApp().");var d = Yc(c),
              c = d.kc;ge("Invalid Firebase Database URL", d);d.path.e() || Xc("Database URL must point to the root of a Firebase Database (not including a child path).");(d = A(b.nb, a.name)) && Xc("FIREBASE INTERNAL ERROR: Database initialized multiple times.");d = new Rh(c, b.Ff, a);b.nb[a.name] = d;return d.$a;
        }, { Reference: W, Query: X, Database: Qh, enableLogging: Uc, INTERNAL: Z, TEST_ACCESS: Y, ServerValue: Th });
      } catch (mi) {
        Xc("Failed to register the Firebase Database Service (" + mi + ")");
      };
    })();
    (function () {
      var k,
          aa = aa || {},
          l = this,
          n = function (a) {
        return void 0 !== a;
      },
          ba = function () {},
          ca = function () {
        throw Error("unimplemented abstract method");
      },
          p = function (a) {
        var b = typeof a;if ("object" == b) {
          if (a) {
            if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
            if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
          } else return "null";
        } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
      },
          da = function (a) {
        var b = p(a);return "array" == b || "object" == b && "number" == typeof a.length;
      },
          q = function (a) {
        return "string" == typeof a;
      },
          r = function (a) {
        return "function" == p(a);
      },
          ea = function (a) {
        var b = typeof a;return "object" == b && null != a || "function" == b;
      },
          fa = "closure_uid_" + (1E9 * Math.random() >>> 0),
          ga = 0,
          ha = function (a, b, c) {
        return a.call.apply(a.bind, arguments);
      },
          ia = function (a, b, c) {
        if (!a) throw Error();if (2 < arguments.length) {
          var d = Array.prototype.slice.call(arguments, 2);return function () {
            var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
          };
        }return function () {
          return a.apply(b, arguments);
        };
      },
          t = function (a, b, c) {
        t = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ha : ia;return t.apply(null, arguments);
      },
          ja = Date.now || function () {
        return +new Date();
      },
          u = function (a, b) {
        function c() {}c.prototype = b.prototype;a.I = b.prototype;a.prototype = new c();a.Ka = function (a, c, f) {
          for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];return b.prototype[c].apply(a, d);
        };
      };var ka = function (a, b, c) {
        function d() {
          N || (N = !0, b.apply(null, arguments));
        }function e(b) {
          m = setTimeout(function () {
            m = null;a(f, 2 === O);
          }, b);
        }function f(a, b) {
          if (!N) if (a) d.apply(null, arguments);else if (2 === O || x) d.apply(null, arguments);else {
            64 > h && (h *= 2);var c;1 === O ? (O = 2, c = 0) : c = 1E3 * (h + Math.random());e(c);
          }
        }function g(a) {
          ec || (ec = !0, N || (null !== m ? (a || (O = 2), clearTimeout(m), e(0)) : a || (O = 1)));
        }var h = 1,
            m = null,
            x = !1,
            O = 0,
            N = !1,
            ec = !1;e(0);setTimeout(function () {
          x = !0;g(!0);
        }, c);return g;
      };var la = "https://firebasestorage.googleapis.com";var v = function (a, b) {
        this.code = "storage/" + a;this.message = "Firebase Storage: " + b;this.serverResponse = null;this.name = "FirebaseError";
      };u(v, Error);
      var ma = function () {
        return new v("unknown", "An unknown error occurred, please check the error payload for server response.");
      },
          na = function () {
        return new v("canceled", "User canceled the upload/download.");
      },
          oa = function () {
        return new v("cannot-slice-blob", "Cannot slice blob for upload. Please retry the upload.");
      },
          pa = function (a, b, c) {
        return new v("invalid-argument", "Invalid argument in `" + b + "` at index " + a + ": " + c);
      },
          qa = function () {
        return new v("app-deleted", "The Firebase app was deleted.");
      },
          ra = function (a, b) {
        return new v("invalid-format", "String does not match format '" + a + "': " + b);
      };var sa = function (a, b) {
        for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
      },
          ta = function (a) {
        var b = {};sa(a, function (a, d) {
          b[a] = d;
        });return b;
      };var w = function (a, b, c, d) {
        this.i = a;this.b = {};this.method = b;this.headers = {};this.body = "";this.N = c;this.c = this.a = null;this.f = [200];this.g = [];this.h = d;
      };var ua = { STATE_CHANGED: "state_changed" },
          va = { RUNNING: "running", PAUSED: "paused", SUCCESS: "success", CANCELED: "canceled", ERROR: "error" },
          wa = function (a) {
        switch (a) {case "running":case "pausing":case "canceling":
            return "running";case "paused":
            return "paused";case "success":
            return "success";case "canceled":
            return "canceled";case "error":
            return "error";default:
            return "error";}
      };var y = function (a) {
        return n(a) && null !== a;
      },
          xa = function (a) {
        return "string" === typeof a || a instanceof String;
      },
          ya = function () {
        return "undefined" !== typeof Blob;
      };var za = function (a, b, c) {
        this.f = c;this.c = a;this.g = b;this.b = 0;this.a = null;
      };za.prototype.get = function () {
        var a;0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c();return a;
      };var Aa = function (a, b) {
        a.g(b);a.b < a.f && (a.b++, b.next = a.a, a.a = b);
      };var Ba = function (a) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, Ba);else {
          var b = Error().stack;b && (this.stack = b);
        }a && (this.message = String(a));
      };u(Ba, Error);Ba.prototype.name = "CustomError";var Ca = function (a, b, c, d, e) {
        this.reset(a, b, c, d, e);
      };Ca.prototype.a = null;var Da = 0;Ca.prototype.reset = function (a, b, c, d, e) {
        "number" == typeof e || Da++;d || ja();this.b = b;delete this.a;
      };var Ea = function (a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = a[d];return b;
      },
          Fa = function (a) {
        var b = [],
            c = 0,
            d;for (d in a) b[c++] = d;return b;
      },
          Ga = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
          Ha = function (a, b) {
        for (var c, d, e = 1; e < arguments.length; e++) {
          d = arguments[e];for (c in d) a[c] = d[c];for (var f = 0; f < Ga.length; f++) c = Ga[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
        }
      };var Ia = function (a) {
        a.prototype.then = a.prototype.then;a.prototype.$goog_Thenable = !0;
      },
          Ja = function (a) {
        if (!a) return !1;try {
          return !!a.$goog_Thenable;
        } catch (b) {
          return !1;
        }
      };var Ka = function (a) {
        Ka[" "](a);return a;
      };Ka[" "] = ba;var Ma = function (a, b) {
        var c = La;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
      };var Na = function (a, b) {
        for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
      },
          Oa = String.prototype.trim ? function (a) {
        return a.trim();
      } : function (a) {
        return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
      },
          Pa = function (a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
      };var Qa = function (a, b) {
        this.a = a;this.b = b;
      };var z = function (a, b) {
        this.bucket = a;this.path = b;
      },
          Ra = function (a) {
        var b = encodeURIComponent;return "/b/" + b(a.bucket) + "/o/" + b(a.path);
      },
          Sa = function (a) {
        for (var b = null, c = [{ ia: /^gs:\/\/([A-Za-z0-9.\-]+)(\/(.*))?$/i, ba: { bucket: 1, path: 3 }, ha: function (a) {
            "/" === a.path.charAt(a.path.length - 1) && (a.path = a.path.slice(0, -1));
          } }, { ia: /^https?:\/\/firebasestorage\.googleapis\.com\/v[A-Za-z0-9_]+\/b\/([A-Za-z0-9.\-]+)\/o(\/([^?#]*).*)?$/i, ba: { bucket: 1, path: 3 }, ha: function (a) {
            a.path = decodeURIComponent(a.path);
          } }], d = 0; d < c.length; d++) {
          var e = c[d],
              f = e.ia.exec(a);if (f) {
            b = f[e.ba.bucket];(f = f[e.ba.path]) || (f = "");b = new z(b, f);e.ha(b);break;
          }
        }if (null == b) throw new v("invalid-url", "Invalid URL '" + a + "'.");return b;
      };var Ta = function (a, b, c) {
        r(a) || y(b) || y(c) ? (this.next = a, this.a = b || null, this.b = c || null) : (this.next = a.next || null, this.a = a.error || null, this.b = a.complete || null);
      };var Ua = { RAW: "raw", BASE64: "base64", BASE64URL: "base64url", DATA_URL: "data_url" },
          Va = function (a) {
        switch (a) {case "raw":case "base64":case "base64url":case "data_url":
            break;default:
            throw "Expected one of the event types: [raw, base64, base64url, data_url].";}
      },
          Wa = function (a, b) {
        this.data = a;this.a = b || null;
      },
          $a = function (a, b) {
        switch (a) {case "raw":
            return new Wa(Xa(b));case "base64":case "base64url":
            return new Wa(Ya(a, b));case "data_url":
            return a = new Za(b), a = a.a ? Ya("base64", a.c) : Xa(a.c), new Wa(a, new Za(b).b);}throw ma();
      },
          Xa = function (a) {
        for (var b = [], c = 0; c < a.length; c++) {
          var d = a.charCodeAt(c);if (127 >= d) b.push(d);else if (2047 >= d) b.push(192 | d >> 6, 128 | d & 63);else if (55296 == (d & 64512)) {
            if (c < a.length - 1 && 56320 == (a.charCodeAt(c + 1) & 64512)) {
              var e = a.charCodeAt(++c),
                  d = 65536 | (d & 1023) << 10 | e & 1023;b.push(240 | d >> 18, 128 | d >> 12 & 63, 128 | d >> 6 & 63, 128 | d & 63);
            } else b.push(239, 191, 189);
          } else 56320 == (d & 64512) ? b.push(239, 191, 189) : b.push(224 | d >> 12, 128 | d >> 6 & 63, 128 | d & 63);
        }return new Uint8Array(b);
      },
          Ya = function (a, b) {
        switch (a) {case "base64":
            var c = -1 !== b.indexOf("-"),
                d = -1 !== b.indexOf("_");if (c || d) throw ra(a, "Invalid character '" + (c ? "-" : "_") + "' found: is it base64url encoded?");break;case "base64url":
            c = -1 !== b.indexOf("+");d = -1 !== b.indexOf("/");if (c || d) throw ra(a, "Invalid character '" + (c ? "+" : "/") + "' found: is it base64 encoded?");b = b.replace(/-/g, "+").replace(/_/g, "/");}var e;try {
          e = atob(b);
        } catch (f) {
          throw ra(a, "Invalid character found");
        }a = new Uint8Array(e.length);for (b = 0; b < e.length; b++) a[b] = e.charCodeAt(b);return a;
      },
          Za = function (a) {
        var b = a.match(/^data:([^,]+)?,/);
        if (null === b) throw ra("data_url", "Must be formatted 'data:[<mediatype>][;base64],<data>");b = b[1] || null;this.a = !1;this.b = null;if (null != b) {
          var c = b.length - 7;this.b = (this.a = 0 <= c && b.indexOf(";base64", c) == c) ? b.substring(0, b.length - 7) : b;
        }this.c = a.substring(a.indexOf(",") + 1);
      };var ab = function (a) {
        var b = encodeURIComponent,
            c = "?";sa(a, function (a, e) {
          a = b(a) + "=" + b(e);c = c + a + "&";
        });return c = c.slice(0, -1);
      };var A = function (a, b, c, d, e, f) {
        this.b = a;this.h = b;this.f = c;this.a = d;this.g = e;this.c = f;
      };k = A.prototype;k.na = function () {
        return this.b;
      };k.Ja = function () {
        return this.h;
      };k.Ga = function () {
        return this.f;
      };k.Ba = function () {
        return this.a;
      };k.pa = function () {
        if (y(this.a)) {
          var a = this.a.downloadURLs;return y(a) && y(a[0]) ? a[0] : null;
        }return null;
      };k.Ia = function () {
        return this.g;
      };k.Ea = function () {
        return this.c;
      };var bb = function (a, b) {
        b.unshift(a);Ba.call(this, Na.apply(null, b));b.shift();
      };u(bb, Ba);bb.prototype.name = "AssertionError";
      var cb = function (a, b, c, d) {
        var e = "Assertion failed";if (c) var e = e + (": " + c),
            f = d;else a && (e += ": " + a, f = b);throw new bb("" + e, f || []);
      },
          B = function (a, b, c) {
        a || cb("", null, b, Array.prototype.slice.call(arguments, 2));
      },
          db = function (a, b) {
        throw new bb("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
      },
          eb = function (a, b, c) {
        r(a) || cb("Expected function but got %s: %s.", [p(a), a], b, Array.prototype.slice.call(arguments, 2));
      };var fb = function () {
        this.g = this.g;this.o = this.o;
      };fb.prototype.g = !1;fb.prototype.ea = function () {
        this.g || (this.g = !0, this.C());
      };fb.prototype.C = function () {
        if (this.o) for (; this.o.length;) this.o.shift()();
      };var gb = "closure_listenable_" + (1E6 * Math.random() | 0),
          hb = 0;var ib;a: {
        var jb = l.navigator;if (jb) {
          var kb = jb.userAgent;if (kb) {
            ib = kb;break a;
          }
        }ib = "";
      }var C = function (a) {
        return -1 != ib.indexOf(a);
      };var lb = function () {};lb.prototype.b = null;lb.prototype.a = ca;var mb = function (a) {
        return a.b || (a.b = a.f());
      };lb.prototype.f = ca;var nb = Array.prototype.indexOf ? function (a, b, c) {
        B(null != a.length);return Array.prototype.indexOf.call(a, b, c);
      } : function (a, b, c) {
        c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (q(a)) return q(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) if (c in a && a[c] === b) return c;return -1;
      },
          ob = Array.prototype.forEach ? function (a, b, c) {
        B(null != a.length);Array.prototype.forEach.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
      },
          pb = Array.prototype.filter ? function (a, b, c) {
        B(null != a.length);return Array.prototype.filter.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = [], f = 0, g = q(a) ? a.split("") : a, h = 0; h < d; h++) if (h in g) {
          var m = g[h];b.call(c, m, h, a) && (e[f++] = m);
        }return e;
      },
          qb = Array.prototype.map ? function (a, b, c) {
        B(null != a.length);return Array.prototype.map.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = Array(d), f = q(a) ? a.split("") : a, g = 0; g < d; g++) g in f && (e[g] = b.call(c, f[g], g, a));return e;
      },
          rb = Array.prototype.some ? function (a, b, c) {
        B(null != a.length);return Array.prototype.some.call(a, b, c);
      } : function (a, b, c) {
        for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return !0;return !1;
      },
          tb = function (a) {
        var b;a: {
          b = sb;for (var c = a.length, d = q(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;break a;
          }b = -1;
        }return 0 > b ? null : q(a) ? a.charAt(b) : a[b];
      },
          ub = function (a, b) {
        return 0 <= nb(a, b);
      },
          vb = function (a) {
        if ("array" != p(a)) for (var b = a.length - 1; 0 <= b; b--) delete a[b];a.length = 0;
      },
          wb = function (a, b) {
        b = nb(a, b);var c;if (c = 0 <= b) B(null != a.length), Array.prototype.splice.call(a, b, 1);return c;
      },
          xb = function (a) {
        var b = a.length;if (0 < b) {
          for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];return c;
        }return [];
      };var zb = new za(function () {
        return new yb();
      }, function (a) {
        a.reset();
      }, 100),
          Bb = function () {
        var a = Ab,
            b = null;a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);return b;
      },
          yb = function () {
        this.next = this.b = this.a = null;
      };yb.prototype.set = function (a, b) {
        this.a = a;this.b = b;this.next = null;
      };yb.prototype.reset = function () {
        this.next = this.b = this.a = null;
      };var Cb = function (a, b) {
        this.type = a;this.a = this.target = b;this.ja = !0;
      };Cb.prototype.b = function () {
        this.ja = !1;
      };var Db = function (a, b, c, d, e) {
        this.listener = a;this.a = null;this.src = b;this.type = c;this.U = !!d;this.N = e;++hb;this.O = this.T = !1;
      },
          Eb = function (a) {
        a.O = !0;a.listener = null;a.a = null;a.src = null;a.N = null;
      };var Fb = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;var Gb = function (a, b) {
        b = pb(b.split("/"), function (a) {
          return 0 < a.length;
        }).join("/");return 0 === a.length ? b : a + "/" + b;
      },
          Hb = function (a) {
        var b = a.lastIndexOf("/", a.length - 2);return -1 === b ? a : a.slice(b + 1);
      };var Ib = function (a) {
        this.src = a;this.a = {};this.b = 0;
      },
          Kb = function (a, b, c, d, e, f) {
        var g = b.toString();b = a.a[g];b || (b = a.a[g] = [], a.b++);var h = Jb(b, c, e, f);-1 < h ? (a = b[h], d || (a.T = !1)) : (a = new Db(c, a.src, g, !!e, f), a.T = d, b.push(a));return a;
      },
          Lb = function (a, b) {
        var c = b.type;c in a.a && wb(a.a[c], b) && (Eb(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
      },
          Jb = function (a, b, c, d) {
        for (var e = 0; e < a.length; ++e) {
          var f = a[e];if (!f.O && f.listener == b && f.U == !!c && f.N == d) return e;
        }return -1;
      };var Mb,
          Nb = function () {};u(Nb, lb);Nb.prototype.a = function () {
        var a = Ob(this);return a ? new ActiveXObject(a) : new XMLHttpRequest();
      };Nb.prototype.f = function () {
        var a = {};Ob(this) && (a[0] = !0, a[1] = !0);return a;
      };
      var Ob = function (a) {
        if (!a.c && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
          for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
            var d = b[c];try {
              return new ActiveXObject(d), a.c = d;
            } catch (e) {}
          }throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
        }return a.c;
      };Mb = new Nb();var Pb = function (a) {
        this.a = [];if (a) a: {
          var b;if (a instanceof Pb) {
            if (b = a.H(), a = a.A(), 0 >= this.b()) {
              for (var c = this.a, d = 0; d < b.length; d++) c.push(new Qa(b[d], a[d]));break a;
            }
          } else b = Fa(a), a = Ea(a);for (d = 0; d < b.length; d++) Qb(this, b[d], a[d]);
        }
      },
          Qb = function (a, b, c) {
        var d = a.a;d.push(new Qa(b, c));b = d.length - 1;a = a.a;for (c = a[b]; 0 < b;) if (d = b - 1 >> 1, a[d].a > c.a) a[b] = a[d], b = d;else break;a[b] = c;
      };Pb.prototype.A = function () {
        for (var a = this.a, b = [], c = a.length, d = 0; d < c; d++) b.push(a[d].b);return b;
      };
      Pb.prototype.H = function () {
        for (var a = this.a, b = [], c = a.length, d = 0; d < c; d++) b.push(a[d].a);return b;
      };Pb.prototype.b = function () {
        return this.a.length;
      };var Rb = function () {
        this.c = [];this.a = [];
      },
          Sb = function (a) {
        0 == a.c.length && (a.c = a.a, a.c.reverse(), a.a = []);return a.c.pop();
      };Rb.prototype.b = function () {
        return this.c.length + this.a.length;
      };Rb.prototype.A = function () {
        for (var a = [], b = this.c.length - 1; 0 <= b; --b) a.push(this.c[b]);for (var c = this.a.length, b = 0; b < c; ++b) a.push(this.a[b]);return a;
      };var Tb = function (a) {
        if (a.A && "function" == typeof a.A) return a.A();if (q(a)) return a.split("");if (da(a)) {
          for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);return b;
        }return Ea(a);
      },
          Ub = function (a, b) {
        if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (da(a) || q(a)) ob(a, b, void 0);else {
          var c;if (a.H && "function" == typeof a.H) c = a.H();else if (a.A && "function" == typeof a.A) c = void 0;else if (da(a) || q(a)) {
            c = [];for (var d = a.length, e = 0; e < d; e++) c.push(e);
          } else c = Fa(a);for (var d = Tb(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
        }
      };var Vb = function (a) {
        l.setTimeout(function () {
          throw a;
        }, 0);
      },
          Wb,
          Xb = function () {
        var a = l.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !C("Presto") && (a = function () {
          var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
              a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
              d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
              a = t(function (a) {
            if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
          }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
              b.postMessage(c, d);
            } };
        });if ("undefined" !== typeof a && !C("Trident") && !C("MSIE")) {
          var b = new a(),
              c = {},
              d = c;b.port1.onmessage = function () {
            if (n(c.next)) {
              c = c.next;var a = c.da;c.da = null;a();
            }
          };return function (a) {
            d.next = { da: a };d = d.next;b.port2.postMessage(0);
          };
        }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
          var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
            b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
          };document.documentElement.appendChild(b);
        } : function (a) {
          l.setTimeout(a, 0);
        };
      };var Yb = "StopIteration" in l ? l.StopIteration : { message: "StopIteration", stack: "" },
          Zb = function () {};Zb.prototype.next = function () {
        throw Yb;
      };Zb.prototype.h = function () {
        return this;
      };var $b = function () {
        Pb.call(this);
      };u($b, Pb);var ac = C("Opera"),
          D = C("Trident") || C("MSIE"),
          bc = C("Edge"),
          cc = C("Gecko") && !(-1 != ib.toLowerCase().indexOf("webkit") && !C("Edge")) && !(C("Trident") || C("MSIE")) && !C("Edge"),
          dc = -1 != ib.toLowerCase().indexOf("webkit") && !C("Edge"),
          fc = function () {
        var a = l.document;return a ? a.documentMode : void 0;
      },
          gc;
      a: {
        var hc = "",
            ic = function () {
          var a = ib;if (cc) return (/rv\:([^\);]+)(\)|;)/.exec(a)
          );if (bc) return (/Edge\/([\d\.]+)/.exec(a)
          );if (D) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
          );if (dc) return (/WebKit\/(\S+)/.exec(a)
          );if (ac) return (/(?:Version)[ \/]?(\S+)/.exec(a)
          );
        }();ic && (hc = ic ? ic[1] : "");if (D) {
          var jc = fc();if (null != jc && jc > parseFloat(hc)) {
            gc = String(jc);break a;
          }
        }gc = hc;
      }
      var kc = gc,
          La = {},
          E = function (a) {
        return Ma(a, function () {
          for (var b = 0, c = Oa(String(kc)).split("."), d = Oa(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
            var g = c[f] || "",
                h = d[f] || "";do {
              g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];if (0 == g[0].length && 0 == h[0].length) break;b = Pa(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || Pa(0 == g[2].length, 0 == h[2].length) || Pa(g[2], h[2]);g = g[3];h = h[3];
            } while (0 == b);
          }return 0 <= b;
        });
      },
          lc = l.document,
          mc = lc && D ? fc() || ("CSS1Compat" == lc.compatMode ? parseInt(kc, 10) : 5) : void 0;var qc = function (a, b) {
        nc || oc();pc || (nc(), pc = !0);var c = Ab,
            d = zb.get();d.set(a, b);c.b ? c.b.next = d : (B(!c.a), c.a = d);c.b = d;
      },
          nc,
          oc = function () {
        if (l.Promise && l.Promise.resolve) {
          var a = l.Promise.resolve(void 0);nc = function () {
            a.then(rc);
          };
        } else nc = function () {
          var a = rc;!r(l.setImmediate) || l.Window && l.Window.prototype && !C("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (Wb || (Wb = Xb()), Wb(a)) : l.setImmediate(a);
        };
      },
          pc = !1,
          Ab = new function () {
        this.b = this.a = null;
      }(),
          rc = function () {
        for (var a; a = Bb();) {
          try {
            a.a.call(a.b);
          } catch (b) {
            Vb(b);
          }Aa(zb, a);
        }pc = !1;
      };var sc;(sc = !D) || (sc = 9 <= Number(mc));var tc = sc,
          uc = D && !E("9");!dc || E("528");cc && E("1.9b") || D && E("8") || ac && E("9.5") || dc && E("528");cc && !E("8") || D && E("9");var F = function (a, b) {
        this.c = {};this.a = [];this.g = this.f = 0;var c = arguments.length;if (1 < c) {
          if (c % 2) throw Error("Uneven number of arguments");for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
        } else if (a) {
          a instanceof F ? (c = a.H(), d = a.A()) : (c = Fa(a), d = Ea(a));for (var e = 0; e < c.length; e++) this.set(c[e], d[e]);
        }
      };F.prototype.b = function () {
        return this.f;
      };F.prototype.A = function () {
        vc(this);for (var a = [], b = 0; b < this.a.length; b++) a.push(this.c[this.a[b]]);return a;
      };F.prototype.H = function () {
        vc(this);return this.a.concat();
      };
      var wc = function (a, b) {
        return Object.prototype.hasOwnProperty.call(a.c, b) ? (delete a.c[b], a.f--, a.g++, a.a.length > 2 * a.f && vc(a), !0) : !1;
      },
          vc = function (a) {
        if (a.f != a.a.length) {
          for (var b = 0, c = 0; b < a.a.length;) {
            var d = a.a[b];Object.prototype.hasOwnProperty.call(a.c, d) && (a.a[c++] = d);b++;
          }a.a.length = c;
        }if (a.f != a.a.length) {
          for (var e = {}, c = b = 0; b < a.a.length;) d = a.a[b], Object.prototype.hasOwnProperty.call(e, d) || (a.a[c++] = d, e[d] = 1), b++;a.a.length = c;
        }
      };
      F.prototype.get = function (a, b) {
        return Object.prototype.hasOwnProperty.call(this.c, a) ? this.c[a] : b;
      };F.prototype.set = function (a, b) {
        Object.prototype.hasOwnProperty.call(this.c, a) || (this.f++, this.a.push(a), this.g++);this.c[a] = b;
      };F.prototype.forEach = function (a, b) {
        for (var c = this.H(), d = 0; d < c.length; d++) {
          var e = c[d],
              f = this.get(e);a.call(b, f, e, this);
        }
      };
      F.prototype.h = function (a) {
        vc(this);var b = 0,
            c = this.g,
            d = this,
            e = new Zb();e.next = function () {
          if (c != d.g) throw Error("The map has changed since the iterator was created");if (b >= d.a.length) throw Yb;var e = d.a[b++];return a ? e : d.c[e];
        };return e;
      };var xc = function (a, b) {
        Cb.call(this, a ? a.type : "");this.c = this.a = this.target = null;if (a) {
          this.type = a.type;this.target = a.target || a.srcElement;this.a = b;if ((b = a.relatedTarget) && cc) try {
            Ka(b.nodeName);
          } catch (c) {}this.c = a;a.defaultPrevented && this.b();
        }
      };u(xc, Cb);xc.prototype.b = function () {
        xc.I.b.call(this);var a = this.c;if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, uc) try {
          if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
        } catch (b) {}
      };var G = function (a, b) {
        this.a = 0;this.i = void 0;this.c = this.b = this.f = null;this.g = this.h = !1;if (a != ba) try {
          var c = this;a.call(b, function (a) {
            yc(c, 2, a);
          }, function (a) {
            try {
              if (a instanceof Error) throw a;throw Error("Promise rejected.");
            } catch (e) {}yc(c, 3, a);
          });
        } catch (d) {
          yc(this, 3, d);
        }
      },
          zc = function () {
        this.next = this.f = this.c = this.a = this.b = null;this.g = !1;
      };zc.prototype.reset = function () {
        this.f = this.c = this.a = this.b = null;this.g = !1;
      };
      var Ac = new za(function () {
        return new zc();
      }, function (a) {
        a.reset();
      }, 100),
          Bc = function (a, b, c) {
        var d = Ac.get();d.a = a;d.c = b;d.f = c;return d;
      },
          Cc = function (a) {
        if (a instanceof G) return a;var b = new G(ba);yc(b, 2, a);return b;
      },
          Dc = function (a) {
        return new G(function (b, c) {
          c(a);
        });
      };
      G.prototype.then = function (a, b, c) {
        null != a && eb(a, "opt_onFulfilled should be a function.");null != b && eb(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return Ec(this, r(a) ? a : null, r(b) ? b : null, c);
      };Ia(G);G.prototype.l = function (a, b) {
        return Ec(this, null, a, b);
      };
      var Gc = function (a, b) {
        a.b || 2 != a.a && 3 != a.a || Fc(a);B(null != b.a);a.c ? a.c.next = b : a.b = b;a.c = b;
      },
          Ec = function (a, b, c, d) {
        var e = Bc(null, null, null);e.b = new G(function (a, g) {
          e.a = b ? function (c) {
            try {
              var e = b.call(d, c);a(e);
            } catch (x) {
              g(x);
            }
          } : a;e.c = c ? function (b) {
            try {
              var e = c.call(d, b);a(e);
            } catch (x) {
              g(x);
            }
          } : g;
        });e.b.f = a;Gc(a, e);return e.b;
      };G.prototype.o = function (a) {
        B(1 == this.a);this.a = 0;yc(this, 2, a);
      };G.prototype.m = function (a) {
        B(1 == this.a);this.a = 0;yc(this, 3, a);
      };
      var yc = function (a, b, c) {
        if (0 == a.a) {
          a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself"));a.a = 1;var d;a: {
            var e = c,
                f = a.o,
                g = a.m;if (e instanceof G) null != f && eb(f, "opt_onFulfilled should be a function."), null != g && eb(g, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), Gc(e, Bc(f || ba, g || null, a)), d = !0;else if (Ja(e)) e.then(f, g, a), d = !0;else {
              if (ea(e)) try {
                var h = e.then;if (r(h)) {
                  Hc(e, h, f, g, a);d = !0;break a;
                }
              } catch (m) {
                g.call(a, m);d = !0;break a;
              }d = !1;
            }
          }d || (a.i = c, a.a = b, a.f = null, Fc(a), 3 != b || Ic(a, c));
        }
      },
          Hc = function (a, b, c, d, e) {
        var f = !1,
            g = function (a) {
          f || (f = !0, c.call(e, a));
        },
            h = function (a) {
          f || (f = !0, d.call(e, a));
        };try {
          b.call(a, g, h);
        } catch (m) {
          h(m);
        }
      },
          Fc = function (a) {
        a.h || (a.h = !0, qc(a.j, a));
      },
          Jc = function (a) {
        var b = null;a.b && (b = a.b, a.b = b.next, b.next = null);a.b || (a.c = null);null != b && B(null != b.a);return b;
      };
      G.prototype.j = function () {
        for (var a; a = Jc(this);) {
          var b = this.a,
              c = this.i;if (3 == b && a.c && !a.g) {
            var d;for (d = this; d && d.g; d = d.f) d.g = !1;
          }if (a.b) a.b.f = null, Kc(a, b, c);else try {
            a.g ? a.a.call(a.f) : Kc(a, b, c);
          } catch (e) {
            Lc.call(null, e);
          }Aa(Ac, a);
        }this.h = !1;
      };var Kc = function (a, b, c) {
        2 == b ? a.a.call(a.f, c) : a.c && a.c.call(a.f, c);
      },
          Ic = function (a, b) {
        a.g = !0;qc(function () {
          a.g && Lc.call(null, b);
        });
      },
          Lc = Vb;var Nc = function (a) {
        this.a = new F();if (a) {
          a = Tb(a);for (var b = a.length, c = 0; c < b; c++) {
            var d = a[c];this.a.set(Mc(d), d);
          }
        }
      },
          Mc = function (a) {
        var b = typeof a;return "object" == b && a || "function" == b ? "o" + (a[fa] || (a[fa] = ++ga)) : b.substr(0, 1) + a;
      };Nc.prototype.b = function () {
        return this.a.b();
      };Nc.prototype.A = function () {
        return this.a.A();
      };Nc.prototype.h = function () {
        return this.a.h(!1);
      };var Oc = function (a) {
        return function () {
          var b = [];Array.prototype.push.apply(b, arguments);Cc(!0).then(function () {
            a.apply(null, b);
          });
        };
      };var Pc = "closure_lm_" + (1E6 * Math.random() | 0),
          Qc = {},
          Rc = 0,
          Sc = function (a, b, c, d, e) {
        if ("array" == p(b)) {
          for (var f = 0; f < b.length; f++) Sc(a, b[f], c, d, e);return null;
        }c = Tc(c);a && a[gb] ? (Uc(a), a = Kb(a.b, String(b), c, !1, d, e)) : a = Vc(a, b, c, !1, d, e);return a;
      },
          Vc = function (a, b, c, d, e, f) {
        if (!b) throw Error("Invalid event type");var g = !!e,
            h = Wc(a);h || (a[Pc] = h = new Ib(a));c = Kb(h, b, c, d, e, f);if (c.a) return c;d = Xc();c.a = d;d.src = a;d.listener = c;if (a.addEventListener) a.addEventListener(b.toString(), d, g);else if (a.attachEvent) a.attachEvent(Yc(b.toString()), d);else throw Error("addEventListener and attachEvent are unavailable.");Rc++;return c;
      },
          Xc = function () {
        var a = Zc,
            b = tc ? function (c) {
          return a.call(b.src, b.listener, c);
        } : function (c) {
          c = a.call(b.src, b.listener, c);if (!c) return c;
        };return b;
      },
          $c = function (a, b, c, d, e) {
        if ("array" == p(b)) for (var f = 0; f < b.length; f++) $c(a, b[f], c, d, e);else c = Tc(c), a && a[gb] ? Kb(a.b, String(b), c, !0, d, e) : Vc(a, b, c, !0, d, e);
      },
          ad = function (a, b, c, d, e) {
        if ("array" == p(b)) for (var f = 0; f < b.length; f++) ad(a, b[f], c, d, e);else (c = Tc(c), a && a[gb]) ? (a = a.b, b = String(b).toString(), b in a.a && (f = a.a[b], c = Jb(f, c, d, e), -1 < c && (Eb(f[c]), B(null != f.length), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = Wc(a)) && (b = a.a[b.toString()], a = -1, b && (a = Jb(b, c, !!d, e)), (c = -1 < a ? b[a] : null) && bd(c));
      },
          bd = function (a) {
        if ("number" == typeof a || !a || a.O) return;var b = a.src;if (b && b[gb]) {
          Lb(b.b, a);return;
        }var c = a.type,
            d = a.a;b.removeEventListener ? b.removeEventListener(c, d, a.U) : b.detachEvent && b.detachEvent(Yc(c), d);Rc--;(c = Wc(b)) ? (Lb(c, a), 0 == c.b && (c.src = null, b[Pc] = null)) : Eb(a);
      },
          Yc = function (a) {
        return a in Qc ? Qc[a] : Qc[a] = "on" + a;
      },
          dd = function (a, b, c, d) {
        var e = !0;if (a = Wc(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
          var f = b[a];f && f.U == c && !f.O && (f = cd(f, d), e = e && !1 !== f);
        }return e;
      },
          cd = function (a, b) {
        var c = a.listener,
            d = a.N || a.src;a.T && bd(a);return c.call(d, b);
      },
          Zc = function (a, b) {
        if (a.O) return !0;if (!tc) {
          if (!b) a: {
            b = ["window", "event"];for (var c = l, d; d = b.shift();) if (null != c[d]) c = c[d];else {
              b = null;break a;
            }b = c;
          }d = b;b = new xc(d, this);c = !0;if (!(0 > d.keyCode || void 0 != d.returnValue)) {
            a: {
              var e = !1;if (0 == d.keyCode) try {
                d.keyCode = -1;break a;
              } catch (g) {
                e = !0;
              }if (e || void 0 == d.returnValue) d.returnValue = !0;
            }d = [];for (e = b.a; e; e = e.parentNode) d.push(e);a = a.type;for (e = d.length - 1; 0 <= e; e--) {
              b.a = d[e];var f = dd(d[e], a, !0, b),
                  c = c && f;
            }for (e = 0; e < d.length; e++) b.a = d[e], f = dd(d[e], a, !1, b), c = c && f;
          }return c;
        }return cd(a, new xc(b, this));
      },
          Wc = function (a) {
        a = a[Pc];return a instanceof Ib ? a : null;
      },
          ed = "__closure_events_fn_" + (1E9 * Math.random() >>> 0),
          Tc = function (a) {
        B(a, "Listener can not be null.");if (r(a)) return a;B(a.handleEvent, "An object listener must have handleEvent method.");
        a[ed] || (a[ed] = function (b) {
          return a.handleEvent(b);
        });return a[ed];
      };var H = function (a, b) {
        fb.call(this);this.m = a || 0;this.f = b || 10;if (this.m > this.f) throw Error("[goog.structs.Pool] Min can not be greater than max");this.a = new Rb();this.c = new Nc();this.j = null;this.S();
      };u(H, fb);H.prototype.W = function () {
        var a = ja();if (!(null != this.j && 0 > a - this.j)) {
          for (var b; 0 < this.a.b() && (b = Sb(this.a), !this.l(b));) this.S();!b && this.b() < this.f && (b = this.i());b && (this.j = a, this.c.a.set(Mc(b), b));return b;
        }
      };var gd = function (a) {
        var b = fd;wc(b.c.a, Mc(a)) && b.$(a);
      };
      H.prototype.$ = function (a) {
        wc(this.c.a, Mc(a));this.l(a) && this.b() < this.f ? this.a.a.push(a) : hd(a);
      };H.prototype.S = function () {
        for (var a = this.a; this.b() < this.m;) {
          var b = this.i();a.a.push(b);
        }for (; this.b() > this.f && 0 < this.a.b();) hd(Sb(a));
      };H.prototype.i = function () {
        return {};
      };var hd = function (a) {
        if ("function" == typeof a.ea) a.ea();else for (var b in a) a[b] = null;
      };H.prototype.l = function (a) {
        return "function" == typeof a.oa ? a.oa() : !0;
      };H.prototype.b = function () {
        return this.a.b() + this.c.b();
      };
      H.prototype.C = function () {
        H.I.C.call(this);if (0 < this.c.b()) throw Error("[goog.structs.Pool] Objects not released");delete this.c;for (var a = this.a; 0 != a.c.length || 0 != a.a.length;) hd(Sb(a));delete this.a;
      }; /*
         Portions of this code are from MochiKit, received by
         The Closure Authors under the MIT license. All other code is Copyright
         2005-2009 The Closure Authors. All Rights Reserved.
         */
      var id = function (a, b) {
        this.c = [];this.m = b || null;this.a = this.h = !1;this.b = void 0;this.j = this.g = !1;this.f = 0;this.i = null;this.o = 0;
      };id.prototype.l = function (a, b) {
        this.g = !1;this.h = !0;this.b = b;this.a = !a;jd(this);
      };var kd = function (a, b, c) {
        B(!a.j, "Blocking Deferreds can not be re-used");a.c.push([b, c, void 0]);a.h && jd(a);
      };id.prototype.then = function (a, b, c) {
        var d,
            e,
            f = new G(function (a, b) {
          d = a;e = b;
        });kd(this, d, function (a) {
          e(a);
        });return f.then(a, b, c);
      };Ia(id);
      var ld = function (a) {
        return rb(a.c, function (a) {
          return r(a[1]);
        });
      },
          jd = function (a) {
        if (a.f && a.h && ld(a)) {
          var b = a.f,
              c = md[b];c && (l.clearTimeout(c.a), delete md[b]);a.f = 0;
        }a.i && (a.i.o--, delete a.i);for (var b = a.b, d = c = !1; a.c.length && !a.g;) {
          var e = a.c.shift(),
              f = e[0],
              g = e[1],
              e = e[2];if (f = a.a ? g : f) try {
            var h = f.call(e || a.m, b);n(h) && (a.a = a.a && (h == b || h instanceof Error), a.b = b = h);if (Ja(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.g = !0;
          } catch (m) {
            b = m, a.a = !0, ld(a) || (c = !0);
          }
        }a.b = b;d && (h = t(a.l, a, !0), d = t(a.l, a, !1), b instanceof id ? (kd(b, h, d), b.j = !0) : b.then(h, d));c && (b = new nd(b), md[b.a] = b, a.f = b.a);
      },
          nd = function (a) {
        this.a = l.setTimeout(t(this.c, this), 0);this.b = a;
      };nd.prototype.c = function () {
        B(md[this.a], "Cannot throw an error that is not scheduled.");delete md[this.a];throw this.b;
      };var md = {};var od = function (a) {
        this.f = a;this.b = this.c = this.a = null;
      },
          pd = function (a, b) {
        this.name = a;this.value = b;
      };pd.prototype.toString = function () {
        return this.name;
      };var qd = new pd("SEVERE", 1E3),
          rd = new pd("CONFIG", 700),
          sd = new pd("FINE", 500),
          td = function (a) {
        if (a.c) return a.c;if (a.a) return td(a.a);db("Root logger has no level set.");return null;
      };
      od.prototype.log = function (a, b, c) {
        if (a.value >= td(this).value) for (r(b) && (b = b()), a = new Ca(a, String(b), this.f), c && (a.a = c), c = "log:" + a.b, l.console && (l.console.timeStamp ? l.console.timeStamp(c) : l.console.markTimeline && l.console.markTimeline(c)), l.msWriteProfilerMark && l.msWriteProfilerMark(c), c = this; c;) c = c.a;
      };
      var ud = {},
          vd = null,
          wd = function (a) {
        vd || (vd = new od(""), ud[""] = vd, vd.c = rd);var b;if (!(b = ud[a])) {
          b = new od(a);var c = a.lastIndexOf("."),
              d = a.substr(c + 1),
              c = wd(a.substr(0, c));c.b || (c.b = {});c.b[d] = b;b.a = c;ud[a] = b;
        }return b;
      };var xd = function () {
        fb.call(this);this.b = new Ib(this);this.Y = this;this.G = null;
      };u(xd, fb);xd.prototype[gb] = !0;xd.prototype.removeEventListener = function (a, b, c, d) {
        ad(this, a, b, c, d);
      };
      var I = function (a, b) {
        Uc(a);var c,
            d = a.G;if (d) {
          c = [];for (var e = 1; d; d = d.G) c.push(d), B(1E3 > ++e, "infinite loop");
        }a = a.Y;d = b.type || b;q(b) ? b = new Cb(b, a) : b instanceof Cb ? b.target = b.target || a : (e = b, b = new Cb(d, a), Ha(b, e));var e = !0,
            f;if (c) for (var g = c.length - 1; 0 <= g; g--) f = b.a = c[g], e = yd(f, d, !0, b) && e;f = b.a = a;e = yd(f, d, !0, b) && e;e = yd(f, d, !1, b) && e;if (c) for (g = 0; g < c.length; g++) f = b.a = c[g], e = yd(f, d, !1, b) && e;
      };
      xd.prototype.C = function () {
        xd.I.C.call(this);if (this.b) {
          var a = this.b,
              b = 0,
              c;for (c in a.a) {
            for (var d = a.a[c], e = 0; e < d.length; e++) ++b, Eb(d[e]);delete a.a[c];a.b--;
          }
        }this.G = null;
      };var yd = function (a, b, c, d) {
        b = a.b.a[String(b)];if (!b) return !0;b = b.concat();for (var e = !0, f = 0; f < b.length; ++f) {
          var g = b[f];if (g && !g.O && g.U == c) {
            var h = g.listener,
                m = g.N || g.src;g.T && Lb(a.b, g);e = !1 !== h.call(m, d) && e;
          }
        }return e && 0 != d.ja;
      },
          Uc = function (a) {
        B(a.b, "Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?");
      };var J = function (a, b) {
        this.h = new $b();H.call(this, a, b);
      };u(J, H);k = J.prototype;k.W = function (a, b) {
        if (!a) return J.I.W.call(this);Qb(this.h, n(b) ? b : 100, a);this.aa();
      };k.aa = function () {
        for (var a = this.h; 0 < a.b();) {
          var b = this.W();if (b) {
            var c;var d = a,
                e = d.a,
                f = e.length;c = e[0];if (0 >= f) c = void 0;else {
              if (1 == f) vb(e);else {
                e[0] = e.pop();for (var e = 0, d = d.a, f = d.length, g = d[e]; e < f >> 1;) {
                  var h = 2 * e + 1,
                      m = 2 * e + 2,
                      h = m < f && d[m].a < d[h].a ? m : h;if (d[h].a > g.a) break;d[e] = d[h];e = h;
                }d[e] = g;
              }c = c.b;
            }c.apply(this, [b]);
          } else break;
        }
      };
      k.$ = function (a) {
        J.I.$.call(this, a);this.aa();
      };k.S = function () {
        J.I.S.call(this);this.aa();
      };k.C = function () {
        J.I.C.call(this);l.clearTimeout(void 0);vb(this.h.a);this.h = null;
      };var K = function (a, b) {
        a && a.log(sd, b, void 0);
      };var zd = function (a, b, c) {
        if (r(a)) c && (a = t(a, c));else if (a && "function" == typeof a.handleEvent) a = t(a.handleEvent, a);else throw Error("Invalid listener argument");return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
      };var L = function (a) {
        xd.call(this);this.headers = new F();this.B = a || null;this.c = !1;this.w = this.a = null;this.L = this.l = "";this.J = 0;this.h = "";this.f = this.F = this.j = this.D = !1;this.i = 0;this.m = null;this.R = "";this.u = this.ca = this.X = !1;
      };u(L, xd);var Ad = L.prototype,
          Bd = wd("goog.net.XhrIo");Ad.v = Bd;var Cd = /^https?$/i,
          Dd = ["POST", "PUT"];
      L.prototype.send = function (a, b, c, d) {
        if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.l + "; newUri=" + a);b = b ? b.toUpperCase() : "GET";this.l = a;this.h = "";this.J = 0;this.L = b;this.D = !1;this.c = !0;this.a = this.B ? this.B.a() : Mb.a();this.w = this.B ? mb(this.B) : mb(Mb);this.a.onreadystatechange = t(this.P, this);this.ca && "onprogress" in this.a && (this.a.onprogress = t(function (a) {
          this.M(a, !0);
        }, this), this.a.upload && (this.a.upload.onprogress = t(this.M, this)));try {
          K(this.v, M(this, "Opening Xhr")), this.F = !0, this.a.open(b, String(a), !0), this.F = !1;
        } catch (f) {
          K(this.v, M(this, "Error opening Xhr: " + f.message));Ed(this, f);return;
        }a = c || "";var e = new F(this.headers);d && Ub(d, function (a, b) {
          e.set(b, a);
        });d = tb(e.H());c = l.FormData && a instanceof l.FormData;!ub(Dd, b) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");e.forEach(function (a, b) {
          this.a.setRequestHeader(b, a);
        }, this);this.R && (this.a.responseType = this.R);"withCredentials" in this.a && this.a.withCredentials !== this.X && (this.a.withCredentials = this.X);try {
          Fd(this), 0 < this.i && (this.u = Gd(this.a), K(this.v, M(this, "Will abort after " + this.i + "ms if incomplete, xhr2 " + this.u)), this.u ? (this.a.timeout = this.i, this.a.ontimeout = t(this.K, this)) : this.m = zd(this.K, this.i, this)), K(this.v, M(this, "Sending request")), this.j = !0, this.a.send(a), this.j = !1;
        } catch (f) {
          K(this.v, M(this, "Send error: " + f.message)), Ed(this, f);
        }
      };var Gd = function (a) {
        return D && E(9) && "number" == typeof a.timeout && n(a.ontimeout);
      },
          sb = function (a) {
        return "content-type" == a.toLowerCase();
      };
      L.prototype.K = function () {
        "undefined" != typeof aa && this.a && (this.h = "Timed out after " + this.i + "ms, aborting", this.J = 8, K(this.v, M(this, this.h)), I(this, "timeout"), Hd(this, 8));
      };var Ed = function (a, b) {
        a.c = !1;a.a && (a.f = !0, a.a.abort(), a.f = !1);a.h = b;a.J = 5;Id(a);Jd(a);
      },
          Id = function (a) {
        a.D || (a.D = !0, I(a, "complete"), I(a, "error"));
      },
          Hd = function (a, b) {
        a.a && a.c && (K(a.v, M(a, "Aborting")), a.c = !1, a.f = !0, a.a.abort(), a.f = !1, a.J = b || 7, I(a, "complete"), I(a, "abort"), Jd(a));
      };
      L.prototype.C = function () {
        this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), Jd(this, !0));L.I.C.call(this);
      };L.prototype.P = function () {
        this.g || (this.F || this.j || this.f ? Kd(this) : this.Z());
      };L.prototype.Z = function () {
        Kd(this);
      };
      var Kd = function (a) {
        if (a.c && "undefined" != typeof aa) if (a.w[1] && 4 == Ld(a) && 2 == P(a)) K(a.v, M(a, "Local request error detected and ignored"));else if (a.j && 4 == Ld(a)) zd(a.P, 0, a);else if (I(a, "readystatechange"), 4 == Ld(a)) {
          K(a.v, M(a, "Request complete"));a.c = !1;try {
            if (Md(a)) I(a, "complete"), I(a, "success");else {
              a.J = 6;var b;try {
                b = 2 < Ld(a) ? a.a.statusText : "";
              } catch (c) {
                K(a.v, "Can not get status: " + c.message), b = "";
              }a.h = b + " [" + P(a) + "]";Id(a);
            }
          } finally {
            Jd(a);
          }
        }
      };
      L.prototype.M = function (a, b) {
        B("progress" === a.type, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");I(this, Nd(a, "progress"));I(this, Nd(a, b ? "downloadprogress" : "uploadprogress"));
      };
      var Nd = function (a, b) {
        return { type: b, lengthComputable: a.lengthComputable, loaded: a.loaded, total: a.total };
      },
          Jd = function (a, b) {
        if (a.a) {
          Fd(a);var c = a.a,
              d = a.w[0] ? ba : null;a.a = null;a.w = null;b || I(a, "ready");try {
            c.onreadystatechange = d;
          } catch (e) {
            (a = a.v) && a.log(qd, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
          }
        }
      },
          Fd = function (a) {
        a.a && a.u && (a.a.ontimeout = null);"number" == typeof a.m && (l.clearTimeout(a.m), a.m = null);
      },
          Md = function (a) {
        var b = P(a),
            c;a: switch (b) {case 200:case 201:case 202:case 204:case 206:case 304:case 1223:
            c = !0;break a;default:
            c = !1;}if (!c) {
          if (b = 0 === b) a = String(a.l).match(Fb)[1] || null, !a && l.self && l.self.location && (a = l.self.location.protocol, a = a.substr(0, a.length - 1)), b = !Cd.test(a ? a.toLowerCase() : "");c = b;
        }return c;
      },
          Ld = function (a) {
        return a.a ? a.a.readyState : 0;
      },
          P = function (a) {
        try {
          return 2 < Ld(a) ? a.a.status : -1;
        } catch (b) {
          return -1;
        }
      },
          Od = function (a) {
        try {
          return a.a ? a.a.responseText : "";
        } catch (b) {
          return K(a.v, "Can not get responseText: " + b.message), "";
        }
      },
          Pd = function (a, b) {
        return a.a && 4 == Ld(a) ? a.a.getResponseHeader(b) : void 0;
      },
          M = function (a, b) {
        return b + " [" + a.L + " " + a.l + " " + P(a) + "]";
      };var Qd = function (a, b, c, d) {
        this.u = a;this.w = !!d;J.call(this, b, c);
      };u(Qd, J);Qd.prototype.i = function () {
        var a = new L(),
            b = this.u;b && b.forEach(function (b, d) {
          a.headers.set(d, b);
        });this.w && (a.X = !0);return a;
      };Qd.prototype.l = function (a) {
        return !a.g && !a.a;
      };var fd = new Qd();var Sd = function (a, b, c, d, e, f, g, h, m, x, O) {
        this.L = a;this.G = b;this.B = c;this.u = d;this.K = e.slice();this.m = f.slice();this.l = this.o = this.f = this.c = null;this.h = this.i = !1;this.w = g;this.j = h;this.g = x;this.M = O;this.F = m;var N = this;this.D = new G(function (a, b) {
          N.o = a;N.l = b;Rd(N);
        });
      },
          Td = function (a, b, c) {
        this.b = a;this.c = b;this.a = !!c;
      },
          Rd = function (a) {
        function b(a, b) {
          b ? a(!1, new Td(!1, null, !0)) : fd.W(function (b) {
            b.X = d.M;d.c = b;var c = null;null !== d.g && (b.ca = !0, c = Sc(b, "uploadprogress", function (a) {
              d.g(a.loaded, a.lengthComputable ? a.total : -1);
            }), b.ca = null !== d.g);b.send(d.L, d.G, d.u, d.B);$c(b, "complete", function (b) {
              null !== c && bd(c);d.c = null;b = b.target;var e = 6 === b.J && 100 <= P(b),
                  f = Md(b) || e,
                  e = P(b);if (!(f = !f)) var g = d,
                  f = 500 <= e && 600 > e,
                  h = ub([408, 429], e),
                  g = ub(g.m, e),
                  f = f || h || g;f ? (e = 7 === b.J, gd(b), a(!1, new Td(!1, null, e))) : (e = ub(d.K, e), a(!0, new Td(e, b)));
            });
          });
        }function c(a, b) {
          var c = d.o;a = d.l;var e = b.c;if (b.b) try {
            var f = d.w(e, Od(e));n(f) ? c(f) : c();
          } catch (x) {
            a(x);
          } else null !== e ? (b = ma(), f = Od(e), b.serverResponse = f, d.j ? a(d.j(e, b)) : a(b)) : (b = b.a ? d.h ? qa() : na() : new v("retry-limit-exceeded", "Max retry time for operation exceeded, please try again."), a(b));gd(e);
        }var d = a;a.i ? c(0, new Td(!1, null, !0)) : a.f = ka(b, c, a.F);
      };Sd.prototype.a = function () {
        return this.D;
      };Sd.prototype.b = function (a) {
        this.i = !0;this.h = a || !1;null !== this.f && (0, this.f)(!1);null !== this.c && Hd(this.c);
      };
      var Ud = function (a, b, c) {
        var d = ab(a.b),
            d = a.i + d,
            e = a.headers ? ta(a.headers) : {};null !== b && 0 < b.length && (e.Authorization = "Firebase " + b);e["X-Firebase-Storage-Version"] = "webjs/" + ("undefined" !== typeof firebase ? firebase.SDK_VERSION : "AppManager");return new Sd(d, a.method, e, a.body, a.f, a.g, a.N, a.a, a.h, a.c, c);
      };var Vd = function (a) {
        var b = l.BlobBuilder || l.WebKitBlobBuilder;if (n(b)) {
          for (var b = new b(), c = 0; c < arguments.length; c++) b.append(arguments[c]);return b.getBlob();
        }b = xb(arguments);c = l.BlobBuilder || l.WebKitBlobBuilder;if (n(c)) {
          for (var c = new c(), d = 0; d < b.length; d++) c.append(b[d], void 0);b = c.getBlob(void 0);
        } else if (n(l.Blob)) b = new Blob(b, {});else throw Error("This browser doesn't seem to support creating Blobs");return b;
      },
          Wd = function (a, b, c) {
        n(c) || (c = a.size);return a.webkitSlice ? a.webkitSlice(b, c) : a.mozSlice ? a.mozSlice(b, c) : a.slice ? cc && !E("13.0") || dc && !E("537.1") ? (0 > b && (b += a.size), 0 > b && (b = 0), 0 > c && (c += a.size), c < b && (c = b), a.slice(b, c - b)) : a.slice(b, c) : null;
      };var Q = function (a, b) {
        ya() && a instanceof Blob ? (this.s = a, b = a.size, a = a.type) : (a instanceof ArrayBuffer ? (b ? this.s = new Uint8Array(a) : (this.s = new Uint8Array(a.byteLength), this.s.set(new Uint8Array(a))), b = this.s.length) : (b ? this.s = a : (this.s = new Uint8Array(a.length), this.s.set(a)), b = a.length), a = "");this.a = b;this.b = a;
      };Q.prototype.type = function () {
        return this.b;
      };
      Q.prototype.slice = function (a, b) {
        if (ya() && this.s instanceof Blob) return a = Wd(this.s, a, b), null === a ? null : new Q(a);a = new Uint8Array(this.s.buffer, a, b - a);return new Q(a, !0);
      };
      var Xd = function (a) {
        var b = [];Array.prototype.push.apply(b, arguments);if (ya()) return b = qb(b, function (a) {
          return a instanceof Q ? a.s : a;
        }), new Q(Vd.apply(null, b));var b = qb(b, function (a) {
          return xa(a) ? $a("raw", a).data.buffer : a.s.buffer;
        }),
            c = 0;ob(b, function (a) {
          c += a.byteLength;
        });var d = new Uint8Array(c),
            e = 0;ob(b, function (a) {
          a = new Uint8Array(a);for (var b = 0; b < a.length; b++) d[e++] = a[b];
        });return new Q(d, !0);
      };var Yd = function (a) {
        this.c = Dc(a);
      };Yd.prototype.a = function () {
        return this.c;
      };Yd.prototype.b = function () {};var Zd = function () {
        this.a = {};this.b = Number.MIN_SAFE_INTEGER;
      },
          $d = function (a, b) {
        function c() {
          delete e.a[d];
        }var d = a.b;a.b++;a.a[d] = b;var e = a;b.a().then(c, c);
      },
          ae = function (a) {
        sa(a.a, function (a, c) {
          c && c.b(!0);
        });a.a = {};
      };var be = function (a, b, c, d) {
        this.a = a;this.g = null;if (null !== this.a && (a = this.a.options, y(a))) {
          a = a.storageBucket || null;if (null == a) a = null;else {
            var e = null;try {
              e = Sa(a);
            } catch (f) {}if (null !== e) {
              if ("" !== e.path) throw new v("invalid-default-bucket", "Invalid default bucket '" + a + "'.");a = e.bucket;
            }
          }this.g = a;
        }this.l = b;this.j = c;this.i = d;this.c = 12E4;this.b = 6E4;this.h = new Zd();this.f = !1;
      },
          ce = function (a) {
        return null !== a.a && y(a.a.INTERNAL) && y(a.a.INTERNAL.getToken) ? a.a.INTERNAL.getToken().then(function (a) {
          return y(a) ? a.accessToken : null;
        }, function () {
          return null;
        }) : Cc(null);
      };be.prototype.bucket = function () {
        if (this.f) throw qa();return this.g;
      };var R = function (a, b, c) {
        if (a.f) return new Yd(qa());b = a.j(b, c, null === a.a);$d(a.h, b);return b;
      };var de = function (a, b) {
        return b;
      },
          S = function (a, b, c, d) {
        this.c = a;this.b = b || a;this.f = !!c;this.a = d || de;
      },
          ee = null,
          fe = function () {
        if (ee) return ee;var a = [];a.push(new S("bucket"));a.push(new S("generation"));a.push(new S("metageneration"));a.push(new S("name", "fullPath", !0));var b = new S("name");b.a = function (a, b) {
          return !xa(b) || 2 > b.length ? b : Hb(b);
        };a.push(b);b = new S("size");b.a = function (a, b) {
          return y(b) ? +b : b;
        };a.push(b);a.push(new S("timeCreated"));a.push(new S("updated"));a.push(new S("md5Hash", null, !0));a.push(new S("cacheControl", null, !0));a.push(new S("contentDisposition", null, !0));a.push(new S("contentEncoding", null, !0));a.push(new S("contentLanguage", null, !0));a.push(new S("contentType", null, !0));a.push(new S("metadata", "customMetadata", !0));a.push(new S("downloadTokens", "downloadURLs", !1, function (a, b) {
          if (!(xa(b) && 0 < b.length)) return [];var c = encodeURIComponent;return qb(b.split(","), function (b) {
            var d = a.fullPath,
                d = "https://firebasestorage.googleapis.com/v0" + ("/b/" + c(a.bucket) + "/o/" + c(d));b = ab({ alt: "media", token: b });return d + b;
          });
        }));return ee = a;
      },
          ge = function (a, b) {
        Object.defineProperty(a, "ref", { get: function () {
            return b.l(b, new z(a.bucket, a.fullPath));
          } });
      },
          he = function (a, b) {
        for (var c = {}, d = b.length, e = 0; e < d; e++) {
          var f = b[e];f.f && (c[f.c] = a[f.b]);
        }return JSON.stringify(c);
      },
          ie = function (a) {
        if (!a || "object" !== typeof a) throw "Expected Metadata object.";for (var b in a) {
          var c = a[b];if ("customMetadata" === b && "object" !== typeof c) throw "Expected object for 'customMetadata' mapping.";
        }
      };var T = function (a, b, c) {
        for (var d = b.length, e = b.length, f = 0; f < b.length; f++) if (b[f].b) {
          d = f;break;
        }if (!(d <= c.length && c.length <= e)) throw d === e ? (b = d, d = 1 === d ? "argument" : "arguments") : (b = "between " + d + " and " + e, d = "arguments"), new v("invalid-argument-count", "Invalid argument count in `" + a + "`: Expected " + b + " " + d + ", received " + c.length + ".");for (f = 0; f < c.length; f++) try {
          b[f].a(c[f]);
        } catch (g) {
          if (g instanceof Error) throw pa(f, a, g.message);throw pa(f, a, g);
        }
      },
          U = function (a, b) {
        var c = this;this.a = function (b) {
          c.b && !n(b) || a(b);
        };
        this.b = !!b;
      },
          je = function (a, b) {
        return function (c) {
          a(c);b(c);
        };
      },
          ke = function (a, b) {
        function c(a) {
          if (!("string" === typeof a || a instanceof String)) throw "Expected string.";
        }var d;a ? d = je(c, a) : d = c;return new U(d, b);
      },
          le = function () {
        return new U(function (a) {
          if (!(a instanceof Uint8Array || a instanceof ArrayBuffer || ya() && a instanceof Blob)) throw "Expected Blob or File.";
        });
      },
          me = function () {
        return new U(function (a) {
          if (!(("number" === typeof a || a instanceof Number) && 0 <= a)) throw "Expected a number 0 or greater.";
        });
      },
          ne = function (a, b) {
        return new U(function (b) {
          if (!(null === b || y(b) && b instanceof Object)) throw "Expected an Object.";y(a) && a(b);
        }, b);
      },
          oe = function () {
        return new U(function (a) {
          if (null !== a && !r(a)) throw "Expected a Function.";
        }, !0);
      };var pe = function (a) {
        if (!a) throw ma();
      },
          qe = function (a, b) {
        return function (c, d) {
          a: {
            var e;try {
              e = JSON.parse(d);
            } catch (h) {
              c = null;break a;
            }c = ea(e) ? e : null;
          }if (null === c) c = null;else {
            d = { type: "file" };e = b.length;for (var f = 0; f < e; f++) {
              var g = b[f];d[g.b] = g.a(d, c[g.c]);
            }ge(d, a);c = d;
          }pe(null !== c);return c;
        };
      },
          re = function (a) {
        return function (b, c) {
          b = 401 === P(b) ? new v("unauthenticated", "User is not authenticated, please authenticate using Firebase Authentication and try again.") : 402 === P(b) ? new v("quota-exceeded", "Quota for bucket '" + a.bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.") : 403 === P(b) ? new v("unauthorized", "User does not have permission to access '" + a.path + "'.") : c;b.serverResponse = c.serverResponse;return b;
        };
      },
          se = function (a) {
        var b = re(a);return function (c, d) {
          var e = b(c, d);404 === P(c) && (e = new v("object-not-found", "Object '" + a.path + "' does not exist."));e.serverResponse = d.serverResponse;return e;
        };
      },
          te = function (a, b, c) {
        var d = Ra(b);a = new w(la + "/v0" + d, "GET", qe(a, c), a.c);a.a = se(b);return a;
      },
          ue = function (a, b) {
        var c = Ra(b);a = new w(la + "/v0" + c, "DELETE", function () {}, a.c);a.f = [200, 204];a.a = se(b);return a;
      },
          ve = function (a, b, c) {
        c = c ? ta(c) : {};c.fullPath = a.path;c.size = b.a;c.contentType || (a = b && b.type() || "application/octet-stream", c.contentType = a);return c;
      },
          we = function (a, b, c, d, e) {
        var f = "/b/" + encodeURIComponent(b.bucket) + "/o",
            g = { "X-Goog-Upload-Protocol": "multipart" },
            h;h = "";for (var m = 0; 2 > m; m++) h += Math.random().toString().slice(2);g["Content-Type"] = "multipart/related; boundary=" + h;e = ve(b, d, e);m = he(e, c);d = Xd("--" + h + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + m + "\r\n--" + h + "\r\nContent-Type: " + e.contentType + "\r\n\r\n", d, "\r\n--" + h + "--");if (null === d) throw oa();a = new w(la + "/v0" + f, "POST", qe(a, c), a.b);a.b = { name: e.fullPath };a.headers = g;a.body = d.s;a.a = re(b);return a;
      },
          xe = function (a, b, c, d) {
        this.a = a;this.total = b;this.b = !!c;this.c = d || null;
      },
          ye = function (a, b) {
        var c;try {
          c = Pd(a, "X-Goog-Upload-Status");
        } catch (d) {
          pe(!1);
        }pe(ub(b || ["active"], c));return c;
      },
          ze = function (a, b, c, d, e) {
        var f = "/b/" + encodeURIComponent(b.bucket) + "/o",
            g = ve(b, d, e);e = { name: g.fullPath };f = la + "/v0" + f;d = { "X-Goog-Upload-Protocol": "resumable",
          "X-Goog-Upload-Command": "start", "X-Goog-Upload-Header-Content-Length": d.a, "X-Goog-Upload-Header-Content-Type": g.contentType, "Content-Type": "application/json; charset=utf-8" };c = he(g, c);a = new w(f, "POST", function (a) {
          ye(a);var b;try {
            b = Pd(a, "X-Goog-Upload-URL");
          } catch (x) {
            pe(!1);
          }pe(xa(b));return b;
        }, a.b);a.b = e;a.headers = d;a.body = c;a.a = re(b);return a;
      },
          Ae = function (a, b, c, d) {
        a = new w(c, "POST", function (a) {
          var b = ye(a, ["active", "final"]),
              c;try {
            c = Pd(a, "X-Goog-Upload-Size-Received");
          } catch (h) {
            pe(!1);
          }a = c;isFinite(a) && (a = String(a));a = q(a) ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;pe(!isNaN(a));return new xe(a, d.a, "final" === b);
        }, a.b);a.headers = { "X-Goog-Upload-Command": "query" };a.a = re(b);return a;
      },
          Be = function (a, b, c, d, e, f) {
        var g = new xe(0, 0);f ? (g.a = f.a, g.total = f.total) : (g.a = 0, g.total = d.a);if (d.a !== g.total) throw new v("server-file-wrong-size", "Server recorded incorrect upload file size, please retry the upload.");var h = f = g.total - g.a,
            h = Math.min(h, 262144),
            m = g.a;f = { "X-Goog-Upload-Command": h === f ? "upload, finalize" : "upload", "X-Goog-Upload-Offset": g.a };m = d.slice(m, m + h);if (null === m) throw oa();c = new w(c, "POST", function (a, c) {
          var f = ye(a, ["active", "final"]),
              m = g.a + h,
              O = d.a,
              x;"final" === f ? x = qe(b, e)(a, c) : x = null;return new xe(m, O, "final" === f, x);
        }, b.b);c.headers = f;c.body = m.s;c.c = null;c.a = re(a);return c;
      };var W = function (a, b, c, d, e, f) {
        this.K = a;this.c = b;this.i = c;this.f = e;this.h = f || null;this.o = d;this.j = 0;this.G = this.m = !1;this.B = [];this.Z = 262144 < this.f.a;this.b = "running";this.a = this.u = this.g = null;var g = this;this.V = function (a) {
          g.a = null;"storage/canceled" === a.code ? (g.m = !0, Ce(g)) : (g.g = a, V(g, "error"));
        };this.Y = function (a) {
          g.a = null;"storage/canceled" === a.code ? Ce(g) : (g.g = a, V(g, "error"));
        };this.w = this.l = null;this.F = new G(function (a, b) {
          g.l = a;g.w = b;De(g);
        });this.F.then(null, function () {});
      },
          De = function (a) {
        "running" === a.b && null === a.a && (a.Z ? null === a.u ? Ee(a) : a.m ? Fe(a) : a.G ? Ge(a) : He(a) : Ie(a));
      },
          Je = function (a, b) {
        ce(a.c).then(function (c) {
          switch (a.b) {case "running":
              b(c);break;case "canceling":
              V(a, "canceled");break;case "pausing":
              V(a, "paused");}
        });
      },
          Ee = function (a) {
        Je(a, function (b) {
          var c = ze(a.c, a.i, a.o, a.f, a.h);a.a = R(a.c, c, b);a.a.a().then(function (b) {
            a.a = null;a.u = b;a.m = !1;Ce(a);
          }, this.V);
        });
      },
          Fe = function (a) {
        var b = a.u;Je(a, function (c) {
          var d = Ae(a.c, a.i, b, a.f);a.a = R(a.c, d, c);a.a.a().then(function (b) {
            a.a = null;Ke(a, b.a);a.m = !1;b.b && (a.G = !0);Ce(a);
          }, a.V);
        });
      },
          He = function (a) {
        var b = new xe(a.j, a.f.a),
            c = a.u;Je(a, function (d) {
          var e;try {
            e = Be(a.i, a.c, c, a.f, a.o, b);
          } catch (f) {
            a.g = f;V(a, "error");return;
          }a.a = R(a.c, e, d);a.a.a().then(function (b) {
            a.a = null;Ke(a, b.a);b.b ? (a.h = b.c, V(a, "success")) : Ce(a);
          }, a.V);
        });
      },
          Ge = function (a) {
        Je(a, function (b) {
          var c = te(a.c, a.i, a.o);a.a = R(a.c, c, b);a.a.a().then(function (b) {
            a.a = null;a.h = b;V(a, "success");
          }, a.Y);
        });
      },
          Ie = function (a) {
        Je(a, function (b) {
          var c = we(a.c, a.i, a.o, a.f, a.h);a.a = R(a.c, c, b);a.a.a().then(function (b) {
            a.a = null;
            a.h = b;Ke(a, a.f.a);V(a, "success");
          }, a.V);
        });
      },
          Ke = function (a, b) {
        var c = a.j;a.j = b;a.j > c && Le(a);
      },
          V = function (a, b) {
        if (a.b !== b) switch (b) {case "canceling":
            a.b = b;null !== a.a && a.a.b();break;case "pausing":
            a.b = b;null !== a.a && a.a.b();break;case "running":
            var c = "paused" === a.b;a.b = b;c && (Le(a), De(a));break;case "paused":
            a.b = b;Le(a);break;case "canceled":
            a.g = na();a.b = b;Le(a);break;case "error":
            a.b = b;Le(a);break;case "success":
            a.b = b, Le(a);}
      },
          Ce = function (a) {
        switch (a.b) {case "pausing":
            V(a, "paused");break;case "canceling":
            V(a, "canceled");break;case "running":
            De(a);}
      };W.prototype.D = function () {
        return new A(this.j, this.f.a, wa(this.b), this.h, this, this.K);
      };
      W.prototype.M = function (a, b, c, d) {
        function e(a) {
          try {
            g(a);return;
          } catch (N) {}try {
            if (h(a), !(n(a.next) || n(a.error) || n(a.complete))) throw "";
          } catch (N) {
            throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";
          }
        }function f(a) {
          return function (b, c, d) {
            null !== a && T("on", a, arguments);var e = new Ta(b, c, d);Me(m, e);return function () {
              wb(m.B, e);
            };
          };
        }var g = oe().a,
            h = ne(null, !0).a;T("on", [ke(function () {
          if ("state_changed" !== a) throw "Expected one of the event types: [state_changed].";
        }), ne(e, !0), oe(), oe()], arguments);var m = this,
            x = [ne(function (a) {
          if (null === a) throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";e(a);
        }), oe(), oe()];return n(b) || n(c) || n(d) ? f(null)(b, c, d) : f(x);
      };W.prototype.then = function (a, b) {
        return this.F.then(a, b);
      };
      var Me = function (a, b) {
        a.B.push(b);Ne(a, b);
      },
          Le = function (a) {
        Oe(a);var b = xb(a.B);ob(b, function (b) {
          Ne(a, b);
        });
      },
          Oe = function (a) {
        if (null !== a.l) {
          var b = !0;switch (wa(a.b)) {case "success":
              Oc(a.l.bind(null, a.D()))();break;case "canceled":case "error":
              Oc(a.w.bind(null, a.g))();break;default:
              b = !1;}b && (a.l = null, a.w = null);
        }
      },
          Ne = function (a, b) {
        switch (wa(a.b)) {case "running":case "paused":
            null !== b.next && Oc(b.next.bind(b, a.D()))();break;case "success":
            null !== b.b && Oc(b.b.bind(b))();break;case "canceled":case "error":
            null !== b.a && Oc(b.a.bind(b, a.g))();break;default:
            null !== b.a && Oc(b.a.bind(b, a.g))();}
      };W.prototype.R = function () {
        T("resume", [], arguments);var a = "paused" === this.b || "pausing" === this.b;a && V(this, "running");return a;
      };W.prototype.P = function () {
        T("pause", [], arguments);var a = "running" === this.b;a && V(this, "pausing");return a;
      };W.prototype.L = function () {
        T("cancel", [], arguments);var a = "running" === this.b || "pausing" === this.b;a && V(this, "canceling");return a;
      };var X = function (a, b) {
        this.b = a;if (b) this.a = b instanceof z ? b : Sa(b);else if (a = a.bucket(), null !== a) this.a = new z(a, "");else throw new v("no-default-bucket", "No default bucket found. Did you set the 'storageBucket' property when initializing the app?");
      };X.prototype.toString = function () {
        T("toString", [], arguments);return "gs://" + this.a.bucket + "/" + this.a.path;
      };var Pe = function (a, b) {
        return new X(a, b);
      };k = X.prototype;
      k.fa = function (a) {
        T("child", [ke()], arguments);var b = Gb(this.a.path, a);return Pe(this.b, new z(this.a.bucket, b));
      };k.Da = function () {
        var a;a = this.a.path;if (0 == a.length) a = null;else {
          var b = a.lastIndexOf("/");a = -1 === b ? "" : a.slice(0, b);
        }return null === a ? null : Pe(this.b, new z(this.a.bucket, a));
      };k.Fa = function () {
        return Pe(this.b, new z(this.a.bucket, ""));
      };k.ma = function () {
        return this.a.bucket;
      };k.ya = function () {
        return this.a.path;
      };k.Ca = function () {
        return Hb(this.a.path);
      };k.Ha = function () {
        return this.b.i;
      };
      k.ra = function (a, b) {
        T("put", [le(), new U(ie, !0)], arguments);Qe(this, "put");return new W(this, this.b, this.a, fe(), new Q(a), b);
      };k.sa = function (a, b, c) {
        T("putString", [ke(), ke(Va, !0), new U(ie, !0)], arguments);Qe(this, "putString");var d = $a(y(b) ? b : "raw", a),
            e = c ? ta(c) : {};!y(e.contentType) && y(d.a) && (e.contentType = d.a);return new W(this, this.b, this.a, fe(), new Q(d.data, !0), e);
      };
      k.delete = function () {
        T("delete", [], arguments);Qe(this, "delete");var a = this;return ce(this.b).then(function (b) {
          var c = ue(a.b, a.a);return R(a.b, c, b).a();
        });
      };k.ga = function () {
        T("getMetadata", [], arguments);Qe(this, "getMetadata");var a = this;return ce(this.b).then(function (b) {
          var c = te(a.b, a.a, fe());return R(a.b, c, b).a();
        });
      };
      k.ta = function (a) {
        T("updateMetadata", [new U(ie, void 0)], arguments);Qe(this, "updateMetadata");var b = this;return ce(this.b).then(function (c) {
          var d = b.b,
              e = b.a,
              f = a,
              g = fe(),
              h = Ra(e),
              h = la + "/v0" + h,
              f = he(f, g),
              d = new w(h, "PATCH", qe(d, g), d.c);d.headers = { "Content-Type": "application/json; charset=utf-8" };d.body = f;d.a = se(e);return R(b.b, d, c).a();
        });
      };
      k.qa = function () {
        T("getDownloadURL", [], arguments);Qe(this, "getDownloadURL");return this.ga().then(function (a) {
          a = a.downloadURLs[0];if (y(a)) return a;throw new v("no-download-url", "The given file does not have any download URLs.");
        });
      };var Qe = function (a, b) {
        if ("" === a.a.path) throw new v("invalid-root-operation", "The operation '" + b + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
      };var Y = function (a) {
        this.a = new be(a, function (a, c) {
          return new X(a, c);
        }, Ud, this);this.b = a;this.c = new Re(this);
      };k = Y.prototype;k.ua = function (a) {
        T("ref", [ke(function (a) {
          if (/^[A-Za-z]+:\/\//.test(a)) throw "Expected child path but got a URL, use refFromURL instead.";
        }, !0)], arguments);var b = new X(this.a);return n(a) ? b.fa(a) : b;
      };
      k.va = function (a) {
        T("refFromURL", [ke(function (a) {
          if (!/^[A-Za-z]+:\/\//.test(a)) throw "Expected full URL but got a child path, use ref instead.";try {
            Sa(a);
          } catch (c) {
            throw "Expected valid full URL but got an invalid one.";
          }
        }, !1)], arguments);return new X(this.a, a);
      };k.Aa = function () {
        return this.a.b;
      };k.xa = function (a) {
        T("setMaxUploadRetryTime", [me()], arguments);this.a.b = a;
      };k.za = function () {
        return this.a.c;
      };k.wa = function (a) {
        T("setMaxOperationRetryTime", [me()], arguments);this.a.c = a;
      };k.la = function () {
        return this.b;
      };
      k.ka = function () {
        return this.c;
      };var Re = function (a) {
        this.a = a;
      };Re.prototype.delete = function () {
        var a = this.a.a;a.f = !0;a.a = null;ae(a.h);
      };var Z = function (a, b, c) {
        Object.defineProperty(a, b, { get: c });
      };X.prototype.toString = X.prototype.toString;X.prototype.child = X.prototype.fa;X.prototype.put = X.prototype.ra;X.prototype.putString = X.prototype.sa;X.prototype["delete"] = X.prototype.delete;X.prototype.getMetadata = X.prototype.ga;X.prototype.updateMetadata = X.prototype.ta;X.prototype.getDownloadURL = X.prototype.qa;Z(X.prototype, "parent", X.prototype.Da);Z(X.prototype, "root", X.prototype.Fa);Z(X.prototype, "bucket", X.prototype.ma);
      Z(X.prototype, "fullPath", X.prototype.ya);Z(X.prototype, "name", X.prototype.Ca);Z(X.prototype, "storage", X.prototype.Ha);Y.prototype.ref = Y.prototype.ua;Y.prototype.refFromURL = Y.prototype.va;Z(Y.prototype, "maxOperationRetryTime", Y.prototype.za);Y.prototype.setMaxOperationRetryTime = Y.prototype.wa;Z(Y.prototype, "maxUploadRetryTime", Y.prototype.Aa);Y.prototype.setMaxUploadRetryTime = Y.prototype.xa;Z(Y.prototype, "app", Y.prototype.la);Z(Y.prototype, "INTERNAL", Y.prototype.ka);Re.prototype["delete"] = Re.prototype.delete;
      Y.prototype.capi_ = function (a) {
        la = a;
      };W.prototype.on = W.prototype.M;W.prototype.resume = W.prototype.R;W.prototype.pause = W.prototype.P;W.prototype.cancel = W.prototype.L;Z(W.prototype, "snapshot", W.prototype.D);Z(A.prototype, "bytesTransferred", A.prototype.na);Z(A.prototype, "totalBytes", A.prototype.Ja);Z(A.prototype, "state", A.prototype.Ga);Z(A.prototype, "metadata", A.prototype.Ba);Z(A.prototype, "downloadURL", A.prototype.pa);Z(A.prototype, "task", A.prototype.Ia);Z(A.prototype, "ref", A.prototype.Ea);
      ua.STATE_CHANGED = "state_changed";va.RUNNING = "running";va.PAUSED = "paused";va.SUCCESS = "success";va.CANCELED = "canceled";va.ERROR = "error";Ua.RAW = "raw";Ua.BASE64 = "base64";Ua.BASE64URL = "base64url";Ua.DATA_URL = "data_url";G.prototype["catch"] = G.prototype.l;G.prototype.then = G.prototype.then;
      (function () {
        function a(a) {
          return new Y(a);
        }var b = { TaskState: va, TaskEvent: ua, StringFormat: Ua, Storage: Y, Reference: X };if ("undefined" !== typeof firebase) firebase.INTERNAL.registerService("storage", a, b);else throw Error("Cannot install Firebase Storage - be sure to load firebase-app.js first.");
      })();
    })();
    $__global["firebase"] = firebase;
  })(this);

  return _retrieveGlobal();
});
$__System.register("12c", [], function() { return { setters: [], execute: function() {} } });

$__System.register("12d", [], function() { return { setters: [], execute: function() {} } });

$__System.registerDynamic('12e', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /**
   * @license
   * lodash <https://lodash.com/>
   * Copyright jQuery Foundation and other contributors <https://jquery.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  ;(function () {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined;

    /** Used as the semantic version number. */
    var VERSION = '4.16.2';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://github.com/es-shims.',
        FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for function metadata. */
    var BIND_FLAG = 1,
        BIND_KEY_FLAG = 2,
        CURRY_BOUND_FLAG = 4,
        CURRY_FLAG = 8,
        CURRY_RIGHT_FLAG = 16,
        PARTIAL_FLAG = 32,
        PARTIAL_RIGHT_FLAG = 64,
        ARY_FLAG = 128,
        REARG_FLAG = 256,
        FLIP_FLAG = 512;

    /** Used to compose bitmasks for comparison styles. */
    var UNORDERED_COMPARE_FLAG = 1,
        PARTIAL_COMPARE_FLAG = 2;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 500,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [['ary', ARY_FLAG], ['bind', BIND_FLAG], ['bindKey', BIND_KEY_FLAG], ['curry', CURRY_FLAG], ['curryRight', CURRY_RIGHT_FLAG], ['flip', FLIP_FLAG], ['partial', PARTIAL_FLAG], ['partialRight', PARTIAL_RIGHT_FLAG], ['rearg', REARG_FLAG]];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        reLeadingDot = /^\./,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
        rsComboSymbolsRange = '\\u20d0-\\u20f0',
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
        rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C', '\xe7': 'c',
      '\xd0': 'D', '\xf0': 'd',
      '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N', '\xf1': 'n',
      '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J', '\u0135': 'j',
      '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't', '\u0165': 't', '\u0167': 't',
      '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W', '\u0175': 'w',
      '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = function () {
      try {
        return freeProcess && freeProcess.binding('util');
      } catch (e) {}
    }();

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * Adds the key-value `pair` to `map`.
     *
     * @private
     * @param {Object} map The map to modify.
     * @param {Array} pair The key-value pair to add.
     * @returns {Object} Returns `map`.
     */
    function addMapEntry(map, pair) {
      // Don't return `map.set` because it's not chainable in IE 11.
      map.set(pair[0], pair[1]);
      return map;
    }

    /**
     * Adds `value` to `set`.
     *
     * @private
     * @param {Object} set The set to modify.
     * @param {*} value The value to add.
     * @returns {Object} Returns `set`.
     */
    function addSetEntry(set, value) {
      // Don't return `set.add` because it's not chainable in IE 11.
      set.add(value);
      return set;
    }

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array ? array.length : 0;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array ? array.length : 0,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array ? array.length : 0;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array ? array.length : 0;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function (value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array ? array.length : 0;
      return length ? baseSum(array, iteratee) / length : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function (key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function (value, index, collection) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : result + current;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function (key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function (value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function (key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function (value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function (arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function (value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = function runInContext(context) {
      context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var objectToString = objectProto.toString;

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          defineProperty = Object.defineProperty,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          iteratorSymbol = Symbol ? Symbol.iterator : undefined,
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create'),
          nativeDefineProperty = getNative(Object, 'defineProperty');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap();

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array of at least `200` elements
       * and any iteratees accept only one argument. The heuristic for whether a
       * section qualifies for shortcut fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = function () {
        function object() {}
        return function (proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = prototype;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {}
      // No operation performed.


      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB). Change the following template settings to use
       * alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer: while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values ? values.length : 0;

        this.__data__ = new MapCache();
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        // Safari 9 makes `arguments.length` enumerable in strict mode.
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];

        var length = result.length,
            skipIndexes = !!length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), n);
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function assignInDefaults(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function (value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths of elements to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            isNil = object == null,
            length = paths.length,
            result = Array(length);

        while (++index < length) {
          result[index] = isNil ? undefined : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @param {boolean} [isFull] Specify a clone including symbols.
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
        var result;
        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = initCloneObject(isFunc ? {} : value);
            if (!isDeep) {
              return copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, baseClone, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (!isArr) {
          var props = isFull ? getAllKeys(value) : keys(value);
        }
        arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function (object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function () {
          func.apply(undefined, args);
        }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function (key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return index && index == length ? object : undefined;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        return objectToString.call(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = comparator || value !== 0 ? value : 0;
          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function (value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        if (!isKey(path, object)) {
          path = castPath(path);
          object = parent(object, path);
          path = last(path);
        }
        var func = object == null ? object : object[toKey(path)];
        return func == null ? undefined : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && objectToString.call(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {boolean} [bitmask] The bitmask of comparison flags.
       *  The bitmask may be composed of the following flags:
       *     1 - Unordered comparison
       *     2 - Partial comparison
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = arrayTag,
            othTag = arrayTag;

        if (!objIsArr) {
          objTag = getTag(object);
          objTag = objTag == argsTag ? objectTag : objTag;
        }
        if (!othIsArr) {
          othTag = getTag(other);
          othTag = othTag == argsTag ? objectTag : othTag;
        }
        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
        }
        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObject(value) && objectToString.call(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function (object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function (object) {
          var objValue = get(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        if (!(isArray(source) || isTypedArray(source))) {
          var props = baseKeysIn(source);
        }
        arrayEach(props || source, function (srcValue, key) {
          if (props) {
            key = srcValue;
            srcValue = source[key];
          }
          if (isObject(srcValue)) {
            stack || (stack = new Stack());
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        });
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = object[key],
            srcValue = source[key],
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

        var isCommon = newValue === undefined;

        if (isCommon) {
          newValue = srcValue;
          if (isArray(srcValue) || isTypedArray(srcValue)) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else {
              isCommon = false;
              newValue = baseClone(srcValue, true);
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
              isCommon = false;
              newValue = baseClone(srcValue, true);
            } else {
              newValue = objValue;
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

        var result = baseMap(collection, function (value, key, collection) {
          var criteria = arrayMap(iteratees, function (iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function (object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} props The property identifiers to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, props) {
        object = Object(object);
        return basePickBy(object, props, function (value, key) {
          return key in object;
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} props The property identifiers to pick from.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, props, predicate) {
        var index = -1,
            length = props.length,
            result = {};

        while (++index < length) {
          var key = props[index],
              value = object[key];

          if (predicate(value, key)) {
            baseAssignValue(result, key, value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function (object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else if (!isKey(index, array)) {
              var path = castPath(index),
                  object = parent(array, path);

              if (object != null) {
                delete object[toKey(last(path))];
              }
            } else {
              delete array[toKey(index)];
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        return shuffleSelf(values(collection), n);
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = isKey(path, object) ? [path] : castPath(path);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function (func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !nativeDefineProperty ? identity : function (func, string) {
        return nativeDefineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function (value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array ? array.length : low;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);

        var low = 0,
            high = array ? array.length : 0,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed <= value : computed < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        object = parent(object, path);

        var key = toKey(last(path));
        return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

        return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function (result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var index = -1,
            length = arrays.length;

        while (++index < length) {
          var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
        }
        return result && result.length ? baseUniq(result, iteratee, comparator) : [];
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function (id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `map`.
       *
       * @private
       * @param {Object} map The map to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned map.
       */
      function cloneMap(map, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
        return arrayReduce(array, addMapEntry, new map.constructor());
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of `set`.
       *
       * @private
       * @param {Object} set The set to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned set.
       */
      function cloneSet(set, isDeep, cloneFunc) {
        var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
        return arrayReduce(array, addSetEntry, new set.constructor());
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbol properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function (collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;

          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function (string) {
          string = toString(string);

          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

          var chr = strSymbols ? strSymbols[0] : string.charAt(0);

          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function (string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function () {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function (key) {
              return iteratee(iterable[key], key, iterable);
            };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function (funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function () {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & ARY_FLAG,
            isBind = bitmask & BIND_FLAG,
            isBindKey = bitmask & BIND_KEY_FLAG,
            isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
            isFlip = bitmask & FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function (object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function (value, other) {
          var result;
          if (value === undefined && other === undefined) {
            return defaultValue;
          }
          if (value !== undefined) {
            result = value;
          }
          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function (iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function (args) {
            var thisArg = this;
            return arrayFunc(iteratees, function (iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = this && this !== root && this instanceof wrapper ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function (start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function (value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;

        bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

        if (!(bitmask & CURRY_BOUND_FLAG)) {
          bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
        }
        var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

        var result = wrapFunc.apply(undefined, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function (number, precision) {
          number = toNumber(number);
          precision = nativeMin(toInteger(precision), 292);
          if (precision) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function (object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *  The bitmask may be composed of the following flags:
       *     1 - `_.bind`
       *     2 - `_.bindKey`
       *     4 - `_.curry` or `_.curryRight` of a bound function
       *     8 - `_.curry`
       *    16 - `_.curryRight`
       *    32 - `_.partial`
       *    64 - `_.partialRight`
       *   128 - `_.rearg`
       *   256 - `_.ary`
       *   512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }
        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined;
        }
        var data = isBindKey ? undefined : getData(func);

        var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
          bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function (othValue, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= UNORDERED_COMPARE_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Function} customizer The function to customize comparisons.
       * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
       *  for more details.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
            objProps = keys(object),
            objLength = objProps.length,
            othProps = keys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function (func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = func.name + '',
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      /**
       * Creates an array of the own enumerable symbol properties of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

      /**
       * Creates an array of the own and inherited enumerable symbol properties
       * of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function (value) {
          var result = objectToString.call(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : undefined;

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':
              start += size;break;
            case 'dropRight':
              end -= size;break;
            case 'take':
              end = nativeMin(end, start + size);break;
            case 'takeRight':
              start = nativeMax(start, end - size);break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = isKey(path, object) ? [path] : castPath(path);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object ? object.length : 0;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {Function} cloneFunc The function to clone values.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, cloneFunc, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag:case float64Tag:
          case int8Tag:case int16Tag:case int32Tag:
          case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return cloneMap(object, isDeep, cloneFunc);

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return cloneSet(object, isDeep, cloneFunc);

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

        var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function mergeDefaults(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }
        return array;
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function (func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = reference + '';
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined ? length : baseClamp(size, 0, length);
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function (string) {
        string = toString(string);

        var result = [];
        if (reLeadingDot.test(string)) {
          result.push('');
        }
        string.replace(rePropName, function (match, number, quote, string) {
          result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to process.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return func + '';
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function (pair) {
          var value = '_.' + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__ = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array ? array.length : 0;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, index += size);
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array ? array.length : 0,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function (array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function (array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array ? array.length : 0;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array ? array.length : 0;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs ? pairs.length : 0,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return array && array.length ? array[0] : undefined;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array ? array.length : 0;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function (arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function (arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (comparator === last(mapped)) {
          comparator = undefined;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array ? nativeJoin.call(array, separator) : '';
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array ? array.length : 0;
        return length ? array[length - 1] : undefined;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array ? array.length : 0;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return array && array.length && values && values.length ? basePullAll(array, values) : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function (array, indexes) {
        var length = array ? array.length : 0,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function (index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array ? nativeReverse.call(array) : array;
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array ? array.length : 0;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array ? array.length : 0;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array ? array.length : 0;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array ? array.length : 0;
        if (!length) {
          return [];
        }
        n = guard || n === undefined ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false},
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function (arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function (arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        return array && array.length ? baseUniq(array, undefined, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function (group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function (index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function (group) {
          return apply(iteratee, undefined, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function (arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function (arrays) {
        var comparator = last(arrays);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function (arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths of elements to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function (paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function (object) {
          return baseAt(object, paths);
        };

        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });
        return new LodashWrapper(value, this.__chain__).thru(function (array) {
          if (length && !array.length) {
            array.push(undefined);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity]
       *  The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function (result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function (collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            isProp = isKey(path),
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function (value) {
          var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
          result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity]
       *  The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function (result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function (result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function () {
        return [[], []];
      });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
       */
      var sortBy = baseRest(function (collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function () {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function (func, thisArg, partials) {
        var bitmask = BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function (object, key, partials) {
        var bitmask = BIND_FLAG | BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              result = wait - timeSinceLastCall;

          return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function () {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function () {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function (func, transforms) {
        transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function (args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function (func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function (func, indexes) {
        return createWrap(func, REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function (args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        wrapper = wrapper == null ? identity : wrapper;
        return partial(wrapper, value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, false, true);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        return baseClone(value, false, true, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, true, true);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        return baseClone(value, true, true, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function (value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      function isArguments(value) {
        // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
        return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
      }

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return value != null && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !nativeKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are **not** supported.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        return objectToString.call(value) == errorTag || typeof value.message == 'string' && typeof value.name == 'string';
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 8-9 which returns 'object' for typed array and other constructors.
        var tag = isObject(value) ? objectToString.call(value) : '';
        return tag == funcTag || tag == genTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || objectToString.call(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && objectToString.call(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function (value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (iteratorSymbol && value[iteratorSymbol]) {
          return iteratorToArray(value[iteratorSymbol]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? remainder ? result - remainder : result : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? other + '' : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function (object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function (object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths of elements to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties ? baseAssign(result, properties) : result;
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function (args) {
        args.push(undefined, assignInDefaults);
        return apply(assignInWith, undefined, args);
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function (args) {
        args.push(undefined, mergeDefaults);
        return apply(mergeWith, undefined, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function (result, value, key) {
        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function (result, value, key) {
        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function (value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable string keyed properties of `object` that are
       * not omitted.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [props] The property identifiers to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function (object, props) {
        if (object == null) {
          return {};
        }
        props = arrayMap(props, toKey);
        return basePick(object, baseDifference(getAllKeysIn(object), props));
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [props] The property identifiers to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function (object, props) {
        return object == null ? {} : basePick(object, arrayMap(props, toKey));
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = isKey(path, object) ? [path] : castPath(path);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          object = undefined;
          length = 1;
        }
        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];
          if (value === undefined) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object) || isTypedArray(object);
        iteratee = getIteratee(iteratee, 4);

        if (accumulator == null) {
          if (isArr || isObject(object)) {
            var Ctor = object.constructor;
            if (isArr) {
              accumulator = isArray(object) ? new Ctor() : [];
            } else {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
          } else {
            accumulator = {};
          }
        }
        (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object ? baseValues(object, keys(object)) : [];
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }
        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }
        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          } else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }
        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function (result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function (result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function (result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }
        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, assignInDefaults);

        var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

        // Use a sourceURL for easier debugging.
        var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

        var result = attempt(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }
        if (strSymbols) {
          end += result.length - end;
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function (result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function (func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function (object, methodNames) {
        arrayEach(methodNames, function (key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs ? pairs.length : 0,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function (pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function (args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, true));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function () {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, true));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, true));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function (path, args) {
        return function (object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function (object, args) {
        return function (path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function (methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function () {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {}
      // No operation performed.


      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function (args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function (path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(value));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function (augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function (dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function (multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function (minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }(), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function (methodName, index) {
        LazyWrapper.prototype[methodName] = function (n) {
          var filtered = this.__filtered__;
          if (filtered && !index) {
            return new LazyWrapper(this);
          }
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

          var result = this.clone();
          if (filtered) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function (iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function (methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function () {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function (methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function () {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function () {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function (predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function (predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function (value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function (predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function (start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function (predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function () {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function () {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function (value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return isTaker && chainAll ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function () {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function (value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function (func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + '',
              names = realNames[key] || (realNames[key] = []);

          names.push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (iteratorSymbol) {
        lodash.prototype[iteratorSymbol] = wrapperToIterator;
      }
      return lodash;
    };

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      // Expose Lodash on the global object to prevent errors when Lodash is
      // loaded by a script tag in the presence of an AMD loader.
      // See http://requirejs.org/docs/errors.html#mismatch for more details.
      // Use `_.noConflict` to remove Lodash from the global object.
      root._ = _;

      // Define as an anonymous module so, through path mapping, it can be
      // referenced as the "underscore" module.
      define(function () {
        return _;
      });
    }
    // Check for `exports` after `define` in case a build optimizer adds it.
    else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      } else {
        // Export to the global object.
        root._ = _;
      }
  }).call(this);
  return module.exports;
});
$__System.registerDynamic('12f', [], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	function preserveCamelCase(str) {
		var isLastCharLower = false;

		for (var i = 0; i < str.length; i++) {
			var c = str.charAt(i);

			if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
				str = str.substr(0, i) + '-' + str.substr(i);
				isLastCharLower = false;
				i++;
			} else {
				isLastCharLower = c.toLowerCase() === c;
			}
		}

		return str;
	}

	module.exports = function () {
		var str = [].map.call(arguments, function (str) {
			return str.trim();
		}).filter(function (str) {
			return str.length;
		}).join('-');

		if (!str.length) {
			return '';
		}

		if (str.length === 1) {
			return str;
		}

		if (!/[_.\- ]+/.test(str)) {
			if (str === str.toUpperCase()) {
				return str.toLowerCase();
			}

			if (str[0] !== str[0].toLowerCase()) {
				return str[0].toLowerCase() + str.slice(1);
			}

			return str;
		}

		str = preserveCamelCase(str);

		return str.replace(/^[_.\- ]+/, '').toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (m, p1) {
			return p1.toUpperCase();
		});
	};
	return module.exports;
});
$__System.registerDynamic('130', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /** Polyfill Function.name for IE9+ support */

        /* Credits: http://matt.scharley.me/2012/03/monkey-patch-name-ie.html */
        (function () {
            if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
                Object.defineProperty(Function.prototype, 'name', {
                    get: function () {
                        var funcNameRegex = /function\s([^(]{1,})\(/;
                        var results = funcNameRegex.exec(this.toString());
                        return results && results.length > 1 ? results[1].trim() : '';
                    },
                    set: function (value) {}
                });
            }
        })();
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('131', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /** Polyfill requestAnimationFrame for IE9+ support */

        /* Credits: Opera engineer Erik Moller */
        (function () {
            var lastTime = 0;
            var vendors = ['webkit', 'moz'];
            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
                window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
            }

            if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function () {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

            if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
                clearTimeout(id);
            };
        })();
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic("132", [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /**
         * Created by lundfall on 2/4/16.
         */

        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (searchString, position) {
                position = position || 0;
                return this.substr(position, searchString.length) === searchString;
            };
        }
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('133', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
        if (!Object.keys) {
            Object.keys = function () {
                'use strict';

                var hasOwnProperty = Object.prototype.hasOwnProperty,
                    hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
                    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
                    dontEnumsLength = dontEnums.length;

                return function (obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }

                    var result = [],
                        prop,
                        i;

                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }

                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }();
        }
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('134', [], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  /*!
   * Bowser - a browser detector
   * https://github.com/ded/bowser
   * MIT License | (c) Dustin Diaz 2015
   */

  !function (name, definition) {
    if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof define == 'function' && define.amd) define(name, definition);else this[name] = definition();
  }('bowser', function () {
    /**
      * See useragents.js for examples of navigator.userAgent
      */

    var t = true;

    function detect(ua) {

      function getFirstMatch(regex) {
        var match = ua.match(regex);
        return match && match.length > 1 && match[1] || '';
      }

      function getSecondMatch(regex) {
        var match = ua.match(regex);
        return match && match.length > 1 && match[2] || '';
      }

      var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
          likeAndroid = /like android/i.test(ua),
          android = !likeAndroid && /android/i.test(ua),
          nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
          nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
          chromeos = /CrOS/.test(ua),
          silk = /silk/i.test(ua),
          sailfish = /sailfish/i.test(ua),
          tizen = /tizen/i.test(ua),
          webos = /(web|hpw)os/i.test(ua),
          windowsphone = /windows phone/i.test(ua),
          samsungBrowser = /SamsungBrowser/i.test(ua),
          windows = !windowsphone && /windows/i.test(ua),
          mac = !iosdevice && !silk && /macintosh/i.test(ua),
          linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
          edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i),
          versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
          tablet = /tablet/i.test(ua),
          mobile = !tablet && /[^-]mobi/i.test(ua),
          xbox = /xbox/i.test(ua),
          result;

      if (/opera/i.test(ua)) {
        //  an old Opera
        result = {
          name: 'Opera',
          opera: t,
          version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/opr|opios/i.test(ua)) {
        // a new Opera
        result = {
          name: 'Opera',
          opera: t,
          version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (/SamsungBrowser/i.test(ua)) {
        result = {
          name: 'Samsung Internet for Android',
          samsungBrowser: t,
          version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/coast/i.test(ua)) {
        result = {
          name: 'Opera Coast',
          coast: t,
          version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/yabrowser/i.test(ua)) {
        result = {
          name: 'Yandex Browser',
          yandexbrowser: t,
          version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/ucbrowser/i.test(ua)) {
        result = {
          name: 'UC Browser',
          ucbrowser: t,
          version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/mxios/i.test(ua)) {
        result = {
          name: 'Maxthon',
          maxthon: t,
          version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/epiphany/i.test(ua)) {
        result = {
          name: 'Epiphany',
          epiphany: t,
          version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/puffin/i.test(ua)) {
        result = {
          name: 'Puffin',
          puffin: t,
          version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
        };
      } else if (/sleipnir/i.test(ua)) {
        result = {
          name: 'Sleipnir',
          sleipnir: t,
          version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/k-meleon/i.test(ua)) {
        result = {
          name: 'K-Meleon',
          kMeleon: t,
          version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (windowsphone) {
        result = {
          name: 'Windows Phone',
          windowsphone: t
        };
        if (edgeVersion) {
          result.msedge = t;
          result.version = edgeVersion;
        } else {
          result.msie = t;
          result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
        }
      } else if (/msie|trident/i.test(ua)) {
        result = {
          name: 'Internet Explorer',
          msie: t,
          version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
        };
      } else if (chromeos) {
        result = {
          name: 'Chrome',
          chromeos: t,
          chromeBook: t,
          chrome: t,
          version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        };
      } else if (/chrome.+? edge/i.test(ua)) {
        result = {
          name: 'Microsoft Edge',
          msedge: t,
          version: edgeVersion
        };
      } else if (/vivaldi/i.test(ua)) {
        result = {
          name: 'Vivaldi',
          vivaldi: t,
          version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (sailfish) {
        result = {
          name: 'Sailfish',
          sailfish: t,
          version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
        };
      } else if (/seamonkey\//i.test(ua)) {
        result = {
          name: 'SeaMonkey',
          seamonkey: t,
          version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
        };
      } else if (/firefox|iceweasel|fxios/i.test(ua)) {
        result = {
          name: 'Firefox',
          firefox: t,
          version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
        };
        if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
          result.firefoxos = t;
        }
      } else if (silk) {
        result = {
          name: 'Amazon Silk',
          silk: t,
          version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
        };
      } else if (/phantom/i.test(ua)) {
        result = {
          name: 'PhantomJS',
          phantom: t,
          version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
        };
      } else if (/slimerjs/i.test(ua)) {
        result = {
          name: 'SlimerJS',
          slimer: t,
          version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
        };
      } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
        result = {
          name: 'BlackBerry',
          blackberry: t,
          version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
        };
      } else if (webos) {
        result = {
          name: 'WebOS',
          webos: t,
          version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
        };
        /touchpad\//i.test(ua) && (result.touchpad = t);
      } else if (/bada/i.test(ua)) {
        result = {
          name: 'Bada',
          bada: t,
          version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
        };
      } else if (tizen) {
        result = {
          name: 'Tizen',
          tizen: t,
          version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (/qupzilla/i.test(ua)) {
        result = {
          name: 'QupZilla',
          qupzilla: t,
          version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
        };
      } else if (/chromium/i.test(ua)) {
        result = {
          name: 'Chromium',
          chromium: t,
          version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
        };
      } else if (/chrome|crios|crmo/i.test(ua)) {
        result = {
          name: 'Chrome',
          chrome: t,
          version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        };
      } else if (android) {
        result = {
          name: 'Android',
          version: versionIdentifier
        };
      } else if (/safari|applewebkit/i.test(ua)) {
        result = {
          name: 'Safari',
          safari: t
        };
        if (versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (iosdevice) {
        result = {
          name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
        };
        // WTF: version is not part of user agent in web apps
        if (versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (/googlebot/i.test(ua)) {
        result = {
          name: 'Googlebot',
          googlebot: t,
          version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
        };
      } else {
        result = {
          name: getFirstMatch(/^(.*)\/(.*) /),
          version: getSecondMatch(/^(.*)\/(.*) /)
        };
      }

      // set webkit or gecko flag for browsers based on these engines
      if (!result.msedge && /(apple)?webkit/i.test(ua)) {
        if (/(apple)?webkit\/537\.36/i.test(ua)) {
          result.name = result.name || "Blink";
          result.blink = t;
        } else {
          result.name = result.name || "Webkit";
          result.webkit = t;
        }
        if (!result.version && versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (!result.opera && /gecko\//i.test(ua)) {
        result.name = result.name || "Gecko";
        result.gecko = t;
        result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
      }

      // set OS flags for platforms that have multiple browsers
      if (!result.msedge && (android || result.silk)) {
        result.android = t;
      } else if (iosdevice) {
        result[iosdevice] = t;
        result.ios = t;
      } else if (mac) {
        result.mac = t;
      } else if (xbox) {
        result.xbox = t;
      } else if (windows) {
        result.windows = t;
      } else if (linux) {
        result.linux = t;
      }

      // OS version extraction
      var osVersion = '';
      if (result.windowsphone) {
        osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
      } else if (iosdevice) {
        osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
        osVersion = osVersion.replace(/[_\s]/g, '.');
      } else if (android) {
        osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
      } else if (result.webos) {
        osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
      } else if (result.blackberry) {
        osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
      } else if (result.bada) {
        osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
      } else if (result.tizen) {
        osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
      }
      if (osVersion) {
        result.osversion = osVersion;
      }

      // device type extraction
      var osMajorVersion = osVersion.split('.')[0];
      if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
        result.tablet = t;
      } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
        result.mobile = t;
      }

      // Graded Browser Support
      // http://developer.yahoo.com/yui/articles/gbs
      if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
        result.a = t;
      } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
        result.c = t;
      } else result.x = t;

      return result;
    }

    var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

    bowser.test = function (browserList) {
      for (var i = 0; i < browserList.length; ++i) {
        var browserItem = browserList[i];
        if (typeof browserItem === 'string') {
          if (browserItem in bowser) {
            return true;
          }
        }
      }
      return false;
    };

    /**
     * Get version precisions count
     *
     * @example
     *   getVersionPrecision("1.10.3") // 3
     *
     * @param  {string} version
     * @return {number}
     */
    function getVersionPrecision(version) {
      return version.split(".").length;
    }

    /**
     * Array::map polyfill
     *
     * @param  {Array} arr
     * @param  {Function} iterator
     * @return {Array}
     */
    function map(arr, iterator) {
      var result = [],
          i;
      if (Array.prototype.map) {
        return Array.prototype.map.call(arr, iterator);
      }
      for (i = 0; i < arr.length; i++) {
        result.push(iterator(arr[i]));
      }
      return result;
    }

    /**
     * Calculate browser version weight
     *
     * @example
     *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
     *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
     *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
     *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
     *
     * @param  {Array<String>} versions versions to compare
     * @return {Number} comparison result
     */
    function compareVersions(versions) {
      // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
      var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
      var chunks = map(versions, function (version) {
        var delta = precision - getVersionPrecision(version);

        // 2) "9" -> "9.0" (for precision = 2)
        version = version + new Array(delta + 1).join(".0");

        // 3) "9.0" -> ["000000000"", "000000009"]
        return map(version.split("."), function (chunk) {
          return new Array(20 - chunk.length).join("0") + chunk;
        }).reverse();
      });

      // iterate in reverse order by reversed chunks array
      while (--precision >= 0) {
        // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
        if (chunks[0][precision] > chunks[1][precision]) {
          return 1;
        } else if (chunks[0][precision] === chunks[1][precision]) {
          if (precision === 0) {
            // all version chunks are same
            return 0;
          }
        } else {
          return -1;
        }
      }
    }

    /**
     * Check if browser is unsupported
     *
     * @example
     *   bowser.isUnsupportedBrowser({
     *     msie: "10",
     *     firefox: "23",
     *     chrome: "29",
     *     safari: "5.1",
     *     opera: "16",
     *     phantom: "534"
     *   });
     *
     * @param  {Object}  minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function isUnsupportedBrowser(minVersions, strictMode, ua) {
      var _bowser = bowser;

      // make strictMode param optional with ua param usage
      if (typeof strictMode === 'string') {
        ua = strictMode;
        strictMode = void 0;
      }

      if (strictMode === void 0) {
        strictMode = false;
      }
      if (ua) {
        _bowser = detect(ua);
      }

      var version = "" + _bowser.version;
      for (var browser in minVersions) {
        if (minVersions.hasOwnProperty(browser)) {
          if (_bowser[browser]) {
            // browser version and min supported version.
            return compareVersions([version, minVersions[browser]]) < 0;
          }
        }
      }

      return strictMode; // not found
    }

    /**
     * Check if browser is supported
     *
     * @param  {Object} minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function check(minVersions, strictMode, ua) {
      return !isUnsupportedBrowser(minVersions, strictMode, ua);
    }

    bowser.isUnsupportedBrowser = isUnsupportedBrowser;
    bowser.compareVersions = compareVersions;
    bowser.check = check;

    /*
     * Set our detect method to the main bowser object so we can
     * reuse it to test other user agents.
     * This is needed to implement future tests.
     */
    bowser._detect = detect;

    return bowser;
  });
  return module.exports;
});
$__System.registerDynamic('135', [], true, function ($__require, exports, module) {
    /* https://github.com/bevacqua/hash-sum */
    'use strict';

    var define,
        global = this || self,
        GLOBAL = global;
    function pad(hash, len) {
        while (hash.length < len) {
            hash = '0' + hash;
        }
        return hash;
    }

    function fold(hash, text) {
        var i;
        var chr;
        var len;
        if (text.length === 0) {
            return hash;
        }
        for (i = 0, len = text.length; i < len; i++) {
            chr = text.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0;
        }
        return hash < 0 ? hash * -2 : hash;
    }

    function foldObject(hash, o, seen) {
        return Object.keys(o).sort().reduce(foldKey, hash);
        function foldKey(hash, key) {
            return foldValue(hash, o[key], key, seen);
        }
    }

    function foldValue(input, value, key, seen) {
        var hash = fold(fold(fold(input, key), toString(value)), typeof value);
        if (value === null) {
            return fold(hash, 'null');
        }
        if (value === undefined) {
            return fold(hash, 'undefined');
        }
        if (typeof value === 'object') {
            if (seen.indexOf(value) !== -1) {
                return fold(hash, '[Circular]' + key);
            }
            seen.push(value);
            return foldObject(hash, value, seen);
        }
        return fold(hash, value.toString());
    }

    function toString(o) {
        return Object.prototype.toString.call(o);
    }

    function sum(o) {
        return pad(foldValue(0, o, '', []).toString(16), 8);
    }

    module.exports = sum;
    return module.exports;
});
$__System.registerDynamic('136', [], true, function ($__require, exports, module) {
	var define,
	    global = this || self,
	    GLOBAL = global;
	;(function () {
		'use strict';

		/**
   * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
   *
   * @codingstandard ftlabs-jsv2
   * @copyright The Financial Times Limited [All Rights Reserved]
   * @license MIT License (see LICENSE.txt)
   */

		/*jslint browser:true, node:true*/
		/*global define, Event, Node*/

		/**
   * Instantiate fast-clicking listeners on the specified layer.
   *
   * @constructor
   * @param {Element} layer The layer to listen on
   * @param {Object} [options={}] The options to override the defaults
   */

		function FastClick(layer, options) {
			var oldOnClick;

			options = options || {};

			/**
    * Whether a click is currently being tracked.
    *
    * @type boolean
    */
			this.trackingClick = false;

			/**
    * Timestamp for when click tracking started.
    *
    * @type number
    */
			this.trackingClickStart = 0;

			/**
    * The element being tracked for a click.
    *
    * @type EventTarget
    */
			this.targetElement = null;

			/**
    * X-coordinate of touch start event.
    *
    * @type number
    */
			this.touchStartX = 0;

			/**
    * Y-coordinate of touch start event.
    *
    * @type number
    */
			this.touchStartY = 0;

			/**
    * ID of the last touch, retrieved from Touch.identifier.
    *
    * @type number
    */
			this.lastTouchIdentifier = 0;

			/**
    * Touchmove boundary, beyond which a click will be cancelled.
    *
    * @type number
    */
			this.touchBoundary = options.touchBoundary || 10;

			/**
    * The FastClick layer.
    *
    * @type Element
    */
			this.layer = layer;

			/**
    * The minimum time between tap(touchstart and touchend) events
    *
    * @type number
    */
			this.tapDelay = options.tapDelay || 200;

			/**
    * The maximum time for a tap
    *
    * @type number
    */
			this.tapTimeout = options.tapTimeout || 700;

			if (FastClick.notNeeded(layer)) {
				return;
			}

			// Some old versions of Android don't have Function.prototype.bind
			function bind(method, context) {
				return function () {
					return method.apply(context, arguments);
				};
			}

			var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
			var context = this;
			for (var i = 0, l = methods.length; i < l; i++) {
				context[methods[i]] = bind(context[methods[i]], context);
			}

			// Set up event handlers as required
			if (deviceIsAndroid) {
				layer.addEventListener('mouseover', this.onMouse, true);
				layer.addEventListener('mousedown', this.onMouse, true);
				layer.addEventListener('mouseup', this.onMouse, true);
			}

			layer.addEventListener('click', this.onClick, true);
			layer.addEventListener('touchstart', this.onTouchStart, false);
			layer.addEventListener('touchmove', this.onTouchMove, false);
			layer.addEventListener('touchend', this.onTouchEnd, false);
			layer.addEventListener('touchcancel', this.onTouchCancel, false);

			// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
			// layer when they are cancelled.
			if (!Event.prototype.stopImmediatePropagation) {
				layer.removeEventListener = function (type, callback, capture) {
					var rmv = Node.prototype.removeEventListener;
					if (type === 'click') {
						rmv.call(layer, type, callback.hijacked || callback, capture);
					} else {
						rmv.call(layer, type, callback, capture);
					}
				};

				layer.addEventListener = function (type, callback, capture) {
					var adv = Node.prototype.addEventListener;
					if (type === 'click') {
						adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
							if (!event.propagationStopped) {
								callback(event);
							}
						}), capture);
					} else {
						adv.call(layer, type, callback, capture);
					}
				};
			}

			// If a handler is already declared in the element's onclick attribute, it will be fired before
			// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
			// adding it as listener.
			if (typeof layer.onclick === 'function') {

				// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
				// - the old one won't work if passed to addEventListener directly.
				oldOnClick = layer.onclick;
				layer.addEventListener('click', function (event) {
					oldOnClick(event);
				}, false);
				layer.onclick = null;
			}
		}

		/**
  * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
  *
  * @type boolean
  */
		var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

		/**
   * Android requires exceptions.
   *
   * @type boolean
   */
		var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;

		/**
   * iOS requires exceptions.
   *
   * @type boolean
   */
		var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;

		/**
   * iOS 4 requires an exception for select elements.
   *
   * @type boolean
   */
		var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

		/**
   * iOS 6.0-7.* requires the target element to be manually derived
   *
   * @type boolean
   */
		var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);

		/**
   * BlackBerry requires exceptions.
   *
   * @type boolean
   */
		var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

		/**
   * Determine whether a given element requires a native click.
   *
   * @param {EventTarget|Element} target Target DOM element
   * @returns {boolean} Returns true if the element needs a native click
   */
		FastClick.prototype.needsClick = function (target) {
			switch (target.nodeName.toLowerCase()) {

				// Don't send a synthetic click to disabled inputs (issue #62)
				case 'button':
				case 'select':
				case 'textarea':
					if (target.disabled) {
						return true;
					}

					break;
				case 'input':

					// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
					if (deviceIsIOS && target.type === 'file' || target.disabled) {
						return true;
					}

					break;
				case 'label':
				case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
				case 'video':
					return true;
			}

			return (/\bneedsclick\b/.test(target.className)
			);
		};

		/**
   * Determine whether a given element requires a call to focus to simulate click into element.
   *
   * @param {EventTarget|Element} target Target DOM element
   * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
   */
		FastClick.prototype.needsFocus = function (target) {
			switch (target.nodeName.toLowerCase()) {
				case 'textarea':
					return true;
				case 'select':
					return !deviceIsAndroid;
				case 'input':
					switch (target.type) {
						case 'button':
						case 'checkbox':
						case 'file':
						case 'image':
						case 'radio':
						case 'submit':
							return false;
					}

					// No point in attempting to focus disabled inputs
					return !target.disabled && !target.readOnly;
				default:
					return (/\bneedsfocus\b/.test(target.className)
					);
			}
		};

		/**
   * Send a click event to the specified element.
   *
   * @param {EventTarget|Element} targetElement
   * @param {Event} event
   */
		FastClick.prototype.sendClick = function (targetElement, event) {
			var clickEvent, touch;

			// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
			if (document.activeElement && document.activeElement !== targetElement) {
				document.activeElement.blur();
			}

			touch = event.changedTouches[0];

			// Synthesise a click event, with an extra attribute so it can be tracked
			clickEvent = document.createEvent('MouseEvents');
			clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
			clickEvent.forwardedTouchEvent = true;
			targetElement.dispatchEvent(clickEvent);
		};

		FastClick.prototype.determineEventType = function (targetElement) {

			//Issue #159: Android Chrome Select Box does not open with a synthetic click event
			if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
				return 'mousedown';
			}

			return 'click';
		};

		/**
   * @param {EventTarget|Element} targetElement
   */
		FastClick.prototype.focus = function (targetElement) {
			var length;

			// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
			if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
				length = targetElement.value.length;
				targetElement.setSelectionRange(length, length);
			} else {
				targetElement.focus();
			}
		};

		/**
   * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
   *
   * @param {EventTarget|Element} targetElement
   */
		FastClick.prototype.updateScrollParent = function (targetElement) {
			var scrollParent, parentElement;

			scrollParent = targetElement.fastClickScrollParent;

			// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
			// target element was moved to another parent.
			if (!scrollParent || !scrollParent.contains(targetElement)) {
				parentElement = targetElement;
				do {
					if (parentElement.scrollHeight > parentElement.offsetHeight) {
						scrollParent = parentElement;
						targetElement.fastClickScrollParent = parentElement;
						break;
					}

					parentElement = parentElement.parentElement;
				} while (parentElement);
			}

			// Always update the scroll top tracker if possible.
			if (scrollParent) {
				scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
			}
		};

		/**
   * @param {EventTarget} targetElement
   * @returns {Element|EventTarget}
   */
		FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {

			// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
			if (eventTarget.nodeType === Node.TEXT_NODE) {
				return eventTarget.parentNode;
			}

			return eventTarget;
		};

		/**
   * On touch start, record the position and scroll offset.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchStart = function (event) {
			var targetElement, touch, selection;

			// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
			if (event.targetTouches.length > 1) {
				return true;
			}

			targetElement = this.getTargetElementFromEventTarget(event.target);
			touch = event.targetTouches[0];

			if (deviceIsIOS) {

				// Only trusted events will deselect text on iOS (issue #49)
				selection = window.getSelection();
				if (selection.rangeCount && !selection.isCollapsed) {
					return true;
				}

				if (!deviceIsIOS4) {

					// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
					// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
					// with the same identifier as the touch event that previously triggered the click that triggered the alert.
					// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
					// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
					// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
					// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
					// random integers, it's safe to to continue if the identifier is 0 here.
					if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
						event.preventDefault();
						return false;
					}

					this.lastTouchIdentifier = touch.identifier;

					// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
					// 1) the user does a fling scroll on the scrollable layer
					// 2) the user stops the fling scroll with another tap
					// then the event.target of the last 'touchend' event will be the element that was under the user's finger
					// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
					// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
					this.updateScrollParent(targetElement);
				}
			}

			this.trackingClick = true;
			this.trackingClickStart = event.timeStamp;
			this.targetElement = targetElement;

			this.touchStartX = touch.pageX;
			this.touchStartY = touch.pageY;

			// Prevent phantom clicks on fast double-tap (issue #36)
			if (event.timeStamp - this.lastClickTime < this.tapDelay) {
				event.preventDefault();
			}

			return true;
		};

		/**
   * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.touchHasMoved = function (event) {
			var touch = event.changedTouches[0],
			    boundary = this.touchBoundary;

			if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
				return true;
			}

			return false;
		};

		/**
   * Update the last position.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchMove = function (event) {
			if (!this.trackingClick) {
				return true;
			}

			// If the touch has moved, cancel the click tracking
			if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
				this.trackingClick = false;
				this.targetElement = null;
			}

			return true;
		};

		/**
   * Attempt to find the labelled control for the given label element.
   *
   * @param {EventTarget|HTMLLabelElement} labelElement
   * @returns {Element|null}
   */
		FastClick.prototype.findControl = function (labelElement) {

			// Fast path for newer browsers supporting the HTML5 control attribute
			if (labelElement.control !== undefined) {
				return labelElement.control;
			}

			// All browsers under test that support touch events also support the HTML5 htmlFor attribute
			if (labelElement.htmlFor) {
				return document.getElementById(labelElement.htmlFor);
			}

			// If no for attribute exists, attempt to retrieve the first labellable descendant element
			// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
			return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
		};

		/**
   * On touch end, determine whether to send a click event at once.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchEnd = function (event) {
			var forElement,
			    trackingClickStart,
			    targetTagName,
			    scrollParent,
			    touch,
			    targetElement = this.targetElement;

			if (!this.trackingClick) {
				return true;
			}

			// Prevent phantom clicks on fast double-tap (issue #36)
			if (event.timeStamp - this.lastClickTime < this.tapDelay) {
				this.cancelNextClick = true;
				return true;
			}

			if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
				return true;
			}

			// Reset to prevent wrong click cancel on input (issue #156).
			this.cancelNextClick = false;

			this.lastClickTime = event.timeStamp;

			trackingClickStart = this.trackingClickStart;
			this.trackingClick = false;
			this.trackingClickStart = 0;

			// On some iOS devices, the targetElement supplied with the event is invalid if the layer
			// is performing a transition or scroll, and has to be re-detected manually. Note that
			// for this to function correctly, it must be called *after* the event target is checked!
			// See issue #57; also filed as rdar://13048589 .
			if (deviceIsIOSWithBadTarget) {
				touch = event.changedTouches[0];

				// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
				targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
				targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
			}

			targetTagName = targetElement.tagName.toLowerCase();
			if (targetTagName === 'label') {
				forElement = this.findControl(targetElement);
				if (forElement) {
					this.focus(targetElement);
					if (deviceIsAndroid) {
						return false;
					}

					targetElement = forElement;
				}
			} else if (this.needsFocus(targetElement)) {

				// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
				// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
				if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {
					this.targetElement = null;
					return false;
				}

				this.focus(targetElement);
				this.sendClick(targetElement, event);

				// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
				// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
				if (!deviceIsIOS || targetTagName !== 'select') {
					this.targetElement = null;
					event.preventDefault();
				}

				return false;
			}

			if (deviceIsIOS && !deviceIsIOS4) {

				// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
				// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
				scrollParent = targetElement.fastClickScrollParent;
				if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
					return true;
				}
			}

			// Prevent the actual click from going though - unless the target node is marked as requiring
			// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
			if (!this.needsClick(targetElement)) {
				event.preventDefault();
				this.sendClick(targetElement, event);
			}

			return false;
		};

		/**
   * On touch cancel, stop tracking the click.
   *
   * @returns {void}
   */
		FastClick.prototype.onTouchCancel = function () {
			this.trackingClick = false;
			this.targetElement = null;
		};

		/**
   * Determine mouse events which should be permitted.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onMouse = function (event) {

			// If a target element was never set (because a touch event was never fired) allow the event
			if (!this.targetElement) {
				return true;
			}

			if (event.forwardedTouchEvent) {
				return true;
			}

			// Programmatically generated events targeting a specific element should be permitted
			if (!event.cancelable) {
				return true;
			}

			// Derive and check the target element to see whether the mouse event needs to be permitted;
			// unless explicitly enabled, prevent non-touch click events from triggering actions,
			// to prevent ghost/doubleclicks.
			if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

				// Prevent any user-added listeners declared on FastClick element from being fired.
				if (event.stopImmediatePropagation) {
					event.stopImmediatePropagation();
				} else {

					// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
					event.propagationStopped = true;
				}

				// Cancel the event
				event.stopPropagation();
				event.preventDefault();

				return false;
			}

			// If the mouse event is permitted, return true for the action to go through.
			return true;
		};

		/**
   * On actual clicks, determine whether this is a touch-generated click, a click action occurring
   * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
   * an actual click which should be permitted.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onClick = function (event) {
			var permitted;

			// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
			if (this.trackingClick) {
				this.targetElement = null;
				this.trackingClick = false;
				return true;
			}

			// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
			if (event.target.type === 'submit' && event.detail === 0) {
				return true;
			}

			permitted = this.onMouse(event);

			// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
			if (!permitted) {
				this.targetElement = null;
			}

			// If clicks are permitted, return true for the action to go through.
			return permitted;
		};

		/**
   * Remove all FastClick's event listeners.
   *
   * @returns {void}
   */
		FastClick.prototype.destroy = function () {
			var layer = this.layer;

			if (deviceIsAndroid) {
				layer.removeEventListener('mouseover', this.onMouse, true);
				layer.removeEventListener('mousedown', this.onMouse, true);
				layer.removeEventListener('mouseup', this.onMouse, true);
			}

			layer.removeEventListener('click', this.onClick, true);
			layer.removeEventListener('touchstart', this.onTouchStart, false);
			layer.removeEventListener('touchmove', this.onTouchMove, false);
			layer.removeEventListener('touchend', this.onTouchEnd, false);
			layer.removeEventListener('touchcancel', this.onTouchCancel, false);
		};

		/**
   * Check whether FastClick is needed.
   *
   * @param {Element} layer The layer to listen on
   */
		FastClick.notNeeded = function (layer) {
			var metaViewport;
			var chromeVersion;
			var blackberryVersion;
			var firefoxVersion;

			// Devices that don't support touch don't need FastClick
			if (typeof window.ontouchstart === 'undefined') {
				return true;
			}

			// Chrome version - zero for other browsers
			chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

			if (chromeVersion) {

				if (deviceIsAndroid) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// Chrome 32 and above with width=device-width or less don't need FastClick
						if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}

					// Chrome desktop doesn't need FastClick (issue #15)
				} else {
					return true;
				}
			}

			if (deviceIsBlackBerry10) {
				blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

				// BlackBerry 10.3+ does not require Fastclick library.
				// https://github.com/ftlabs/fastclick/issues/251
				if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// user-scalable=no eliminates click delay.
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// width=device-width (or less than device-width) eliminates click delay.
						if (document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
				}
			}

			// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
			if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			// Firefox version - zero for other browsers
			firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

			if (firefoxVersion >= 27) {
				// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

				metaViewport = document.querySelector('meta[name=viewport]');
				if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
					return true;
				}
			}

			// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
			// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
			if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			return false;
		};

		/**
   * Factory method for creating a FastClick object
   *
   * @param {Element} layer The layer to listen on
   * @param {Object} [options={}] The options to override the defaults
   */
		FastClick.attach = function (layer, options) {
			return new FastClick(layer, options);
		};

		if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

			// AMD. Register as an anonymous module.
			define(function () {
				return FastClick;
			});
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = FastClick.attach;
			module.exports.FastClick = FastClick;
		} else {
			window.FastClick = FastClick;
		}
	})();
	return module.exports;
});
(function() {
var define = $__System.amdDefine;
define("137", ["require", "exports", "module", "138", "139", "13a", "13b"], function(require, exports, module) {
  var Modifier = require('138');
  var Transform = require('139');
  var Transitionable = require('13a');
  var TransitionableTransform = require('13b');
  function StateModifier(options) {
    this._transformState = new TransitionableTransform(Transform.identity);
    this._opacityState = new Transitionable(1);
    this._originState = new Transitionable([0, 0]);
    this._alignState = new Transitionable([0, 0]);
    this._sizeState = new Transitionable([0, 0]);
    this._proportionsState = new Transitionable([0, 0]);
    this._modifier = new Modifier({
      transform: this._transformState,
      opacity: this._opacityState,
      origin: null,
      align: null,
      size: null,
      proportions: null
    });
    this._hasOrigin = false;
    this._hasAlign = false;
    this._hasSize = false;
    this._hasProportions = false;
    if (options) {
      if (options.transform)
        this.setTransform(options.transform);
      if (options.opacity !== undefined)
        this.setOpacity(options.opacity);
      if (options.origin)
        this.setOrigin(options.origin);
      if (options.align)
        this.setAlign(options.align);
      if (options.size)
        this.setSize(options.size);
      if (options.proportions)
        this.setProportions(options.proportions);
    }
  }
  StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {
    this._transformState.set(transform, transition, callback);
    return this;
  };
  StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
    this._opacityState.set(opacity, transition, callback);
    return this;
  };
  StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
    if (origin === null) {
      if (this._hasOrigin) {
        this._modifier.originFrom(null);
        this._hasOrigin = false;
      }
      return this;
    } else if (!this._hasOrigin) {
      this._hasOrigin = true;
      this._modifier.originFrom(this._originState);
    }
    this._originState.set(origin, transition, callback);
    return this;
  };
  StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {
    if (align === null) {
      if (this._hasAlign) {
        this._modifier.alignFrom(null);
        this._hasAlign = false;
      }
      return this;
    } else if (!this._hasAlign) {
      this._hasAlign = true;
      this._modifier.alignFrom(this._alignState);
    }
    this._alignState.set(align, transition, callback);
    return this;
  };
  StateModifier.prototype.setSize = function setSize(size, transition, callback) {
    if (size === null) {
      if (this._hasSize) {
        this._modifier.sizeFrom(null);
        this._hasSize = false;
      }
      return this;
    } else if (!this._hasSize) {
      this._hasSize = true;
      this._modifier.sizeFrom(this._sizeState);
    }
    this._sizeState.set(size, transition, callback);
    return this;
  };
  StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {
    if (proportions === null) {
      if (this._hasProportions) {
        this._modifier.proportionsFrom(null);
        this._hasProportions = false;
      }
      return this;
    } else if (!this._hasProportions) {
      this._hasProportions = true;
      this._modifier.proportionsFrom(this._proportionsState);
    }
    this._proportionsState.set(proportions, transition, callback);
    return this;
  };
  StateModifier.prototype.halt = function halt() {
    this._transformState.halt();
    this._opacityState.halt();
    this._originState.halt();
    this._alignState.halt();
    this._sizeState.halt();
    this._proportionsState.halt();
  };
  StateModifier.prototype.getTransform = function getTransform() {
    return this._transformState.get();
  };
  StateModifier.prototype.getFinalTransform = function getFinalTransform() {
    return this._transformState.getFinal();
  };
  StateModifier.prototype.getOpacity = function getOpacity() {
    return this._opacityState.get();
  };
  StateModifier.prototype.getOrigin = function getOrigin() {
    return this._hasOrigin ? this._originState.get() : null;
  };
  StateModifier.prototype.getAlign = function getAlign() {
    return this._hasAlign ? this._alignState.get() : null;
  };
  StateModifier.prototype.getSize = function getSize() {
    return this._hasSize ? this._sizeState.get() : null;
  };
  StateModifier.prototype.getProportions = function getProportions() {
    return this._hasProportions ? this._proportionsState.get() : null;
  };
  StateModifier.prototype.modify = function modify(target) {
    return this._modifier.modify(target);
  };
  module.exports = StateModifier;
});

})();
(function() {
var define = $__System.amdDefine;
define("13c", ["require", "exports", "module", "13d", "13e", "139", "138", "137", "13f", "140", "141"], function(require, exports, module) {
  var View = require('13d');
  var LayoutController = require('13e');
  var Transform = require('139');
  var Modifier = require('138');
  var StateModifier = require('137');
  var RenderNode = require('13f');
  var Timer = require('140');
  var Easing = require('141');
  function AnimationController(options) {
    View.apply(this, arguments);
    this._size = [0, 0];
    _createLayout.call(this);
    if (options) {
      this.setOptions(options);
    }
  }
  AnimationController.prototype = Object.create(View.prototype);
  AnimationController.prototype.constructor = AnimationController;
  AnimationController.Animation = {
    Slide: {
      Left: function(show, size) {
        return {transform: Transform.translate(show ? size[0] : -size[0], 0, 0)};
      },
      Right: function(show, size) {
        return {transform: Transform.translate(show ? -size[0] : size[0], 0, 0)};
      },
      Up: function(show, size) {
        return {transform: Transform.translate(0, show ? size[1] : -size[1], 0)};
      },
      Down: function(show, size) {
        return {transform: Transform.translate(0, show ? -size[1] : size[1], 0)};
      }
    },
    Fade: function() {
      return {opacity: (this && (this.opacity !== undefined)) ? this.opacity : 0};
    },
    Zoom: function() {
      var scale = (this && (this.scale !== undefined)) ? this.scale : 0.5;
      return {transform: Transform.scale(scale, scale, 1)};
    },
    FadedRotateZoom: function(show) {
      var scale = show ? ((this && (this.showScale !== undefined)) ? this.showScale : 0.9) : ((this && (this.hideScale !== undefined)) ? this.hideScale : 1.1);
      return {
        opacity: (this && (this.opacity !== undefined)) ? this.opacity : 0,
        transform: Transform.thenScale(Transform.rotateZ(48 * Math.PI / scale), [scale, scale, 1]),
        origin: [0.5, 0.5],
        align: [0.5, 0.5]
      };
    },
    FadedZoom: function(show) {
      var scale = show ? ((this && (this.showScale !== undefined)) ? this.showScale : 0.9) : ((this && (this.hideScale !== undefined)) ? this.hideScale : 1.1);
      return {
        opacity: (this && (this.opacity !== undefined)) ? this.opacity : 0,
        transform: Transform.scale(scale, scale, 1)
      };
    }
  };
  AnimationController.DEFAULT_OPTIONS = {
    transition: {
      duration: 400,
      curve: Easing.inOutQuad
    },
    animation: AnimationController.Animation.Fade,
    show: {},
    hide: {},
    transfer: {
      fastResize: true,
      zIndex: 10
    },
    zIndexOffset: 0,
    keepHiddenViewsInDOMCount: 0
  };
  var ItemState = {
    NONE: 0,
    HIDE: 1,
    HIDING: 2,
    HIDDEN: 3,
    SHOW: 4,
    SHOWING: 5,
    VISIBLE: 6,
    QUEUED: 7
  };
  function ViewStackLayout(context, options) {
    var set = {
      size: context.size,
      translate: [0, 0, 0]
    };
    this._size[0] = context.size[0];
    this._size[1] = context.size[1];
    var views = context.get('views');
    var transferables = context.get('transferables');
    var visibleCount = 0;
    for (var i = 0; i < views.length; i++) {
      var item = this._viewStack[i];
      switch (item.state) {
        case ItemState.HIDDEN:
          context.set(views[i], {
            size: context.size,
            translate: [context.size[0] * 2, context.size[1] * 2, 0]
          });
          break;
        case ItemState.HIDE:
        case ItemState.HIDING:
        case ItemState.VISIBLE:
        case ItemState.SHOW:
        case ItemState.SHOWING:
          if (visibleCount < 2) {
            visibleCount++;
            var view = views[i];
            context.set(view, set);
            for (var j = 0; j < transferables.length; j++) {
              for (var k = 0; k < item.transferables.length; k++) {
                if (transferables[j].renderNode === item.transferables[k].renderNode) {
                  context.set(transferables[j], {
                    translate: [0, 0, set.translate[2]],
                    size: [context.size[0], context.size[1]]
                  });
                }
              }
            }
            set.translate[2] += options.zIndexOffset;
          }
          break;
      }
    }
  }
  function _createLayout() {
    this._renderables = {
      views: [],
      transferables: []
    };
    this._viewStack = [];
    this.layout = new LayoutController({
      layout: ViewStackLayout.bind(this),
      layoutOptions: this.options,
      dataSource: this._renderables
    });
    this.add(this.layout);
    this.layout.on('layoutend', _processAnimations.bind(this));
  }
  function _getViewSpec(item, view, id, callback) {
    if (!item.view) {
      return;
    }
    var spec = view.getSpec(id);
    if (spec && !spec.trueSizeRequested) {
      callback(spec);
    } else {
      Timer.after(_getViewSpec.bind(this, item, view, id, callback), 1);
    }
  }
  function _getTransferable(item, view, id) {
    if (view.getTransferable) {
      return view.getTransferable(id);
    }
    if (view.getSpec && view.get && view.replace) {
      if (view.get(id) !== undefined) {
        return {
          get: function() {
            return view.get(id);
          },
          show: function(renderable) {
            view.replace(id, renderable);
          },
          getSpec: _getViewSpec.bind(this, item, view, id)
        };
      }
    }
    if (view.layout) {
      return _getTransferable.call(this, item, view.layout, id);
    }
  }
  function _initTransferableAnimations(item, prevItem, callback) {
    var callbackCount = 0;
    function waitForAll() {
      callbackCount--;
      if (callbackCount === 0) {
        callback();
      }
    }
    for (var sourceId in item.options.transfer.items) {
      if (_initTransferableAnimation.call(this, item, prevItem, sourceId, waitForAll)) {
        callbackCount++;
      }
    }
    if (!callbackCount) {
      callback();
    }
  }
  function _initTransferableAnimation(item, prevItem, sourceId, callback) {
    var target = item.options.transfer.items[sourceId];
    var transferable = {};
    transferable.source = _getTransferable.call(this, prevItem, prevItem.view, sourceId);
    if (Array.isArray(target)) {
      for (var i = 0; i < target.length; i++) {
        transferable.target = _getTransferable.call(this, item, item.view, target[i]);
        if (transferable.target) {
          break;
        }
      }
    } else {
      transferable.target = _getTransferable.call(this, item, item.view, target);
    }
    if (transferable.source && transferable.target) {
      transferable.source.getSpec(function(sourceSpec) {
        transferable.sourceSpec = sourceSpec;
        transferable.originalSource = transferable.source.get();
        transferable.source.show(new RenderNode(new Modifier(sourceSpec)));
        transferable.originalTarget = transferable.target.get();
        var targetNode = new RenderNode(new Modifier({opacity: 0}));
        targetNode.add(transferable.originalTarget);
        transferable.target.show(targetNode);
        var zIndexMod = new Modifier({transform: Transform.translate(0, 0, item.options.transfer.zIndex)});
        transferable.mod = new StateModifier(sourceSpec);
        transferable.renderNode = new RenderNode(zIndexMod);
        transferable.renderNode.add(transferable.mod).add(transferable.originalSource);
        item.transferables.push(transferable);
        this._renderables.transferables.push(transferable.renderNode);
        this.layout.reflowLayout();
        Timer.after(function() {
          var callbackCalled;
          transferable.target.getSpec(function(targetSpec, transition) {
            transferable.targetSpec = targetSpec;
            transferable.transition = transition;
            if (!callbackCalled) {
              callback();
            }
          }, true);
        }, 1);
      }.bind(this), false);
      return true;
    } else {
      return false;
    }
  }
  function _startTransferableAnimations(item, callback) {
    for (var j = 0; j < item.transferables.length; j++) {
      var transferable = item.transferables[j];
      transferable.mod.halt();
      if ((transferable.sourceSpec.opacity !== undefined) || (transferable.targetSpec.opacity !== undefined)) {
        transferable.mod.setOpacity((transferable.targetSpec.opacity === undefined) ? 1 : transferable.targetSpec.opacity, transferable.transition || item.options.transfer.transition);
      }
      if (item.options.transfer.fastResize) {
        if (transferable.sourceSpec.transform || transferable.targetSpec.transform || transferable.sourceSpec.size || transferable.targetSpec.size) {
          var transform = transferable.targetSpec.transform || Transform.identity;
          if (transferable.sourceSpec.size && transferable.targetSpec.size) {
            transform = Transform.multiply(transform, Transform.scale(transferable.targetSpec.size[0] / transferable.sourceSpec.size[0], transferable.targetSpec.size[1] / transferable.sourceSpec.size[1], 1));
          }
          transferable.mod.setTransform(transform, transferable.transition || item.options.transfer.transition, callback);
          callback = undefined;
        }
      } else {
        if (transferable.sourceSpec.transform || transferable.targetSpec.transform) {
          transferable.mod.setTransform(transferable.targetSpec.transform || Transform.identity, transferable.transition || item.options.transfer.transition, callback);
          callback = undefined;
        }
        if (transferable.sourceSpec.size || transferable.targetSpec.size) {
          transferable.mod.setSize(transferable.targetSpec.size || transferable.sourceSpec.size, transferable.transition || item.options.transfer.transition, callback);
          callback = undefined;
        }
      }
    }
    if (callback) {
      callback();
    }
  }
  function _endTransferableAnimations(item) {
    for (var j = 0; j < item.transferables.length; j++) {
      var transferable = item.transferables[j];
      for (var i = 0; i < this._renderables.transferables.length; i++) {
        if (this._renderables.transferables[i] === transferable.renderNode) {
          this._renderables.transferables.splice(i, 1);
          break;
        }
      }
      transferable.source.show(transferable.originalSource);
      transferable.target.show(transferable.originalTarget);
    }
    item.transferables = [];
    this.layout.reflowLayout();
  }
  function _processAnimations(event) {
    var prevItem;
    for (var i = 0; i < this._viewStack.length; i++) {
      var item = this._viewStack[i];
      switch (item.state) {
        case ItemState.HIDE:
          item.state = ItemState.HIDING;
          _initHideAnimation.call(this, item, prevItem, event.size);
          _updateState.call(this);
          break;
        case ItemState.SHOW:
          item.state = ItemState.SHOWING;
          _initShowAnimation.call(this, item, prevItem, event.size);
          _updateState.call(this);
          break;
      }
      prevItem = item;
    }
  }
  function _initShowAnimation(item, prevItem, size) {
    var spec = item.options.show.animation ? item.options.show.animation.call(undefined, true, size) : {};
    item.startSpec = spec;
    item.endSpec = {
      opacity: 1,
      transform: Transform.identity
    };
    item.mod.halt();
    if (spec.transform) {
      item.mod.setTransform(spec.transform);
    }
    if (spec.opacity !== undefined) {
      item.mod.setOpacity(spec.opacity);
    }
    if (spec.align) {
      item.mod.setAlign(spec.align);
    }
    if (spec.origin) {
      item.mod.setOrigin(spec.origin);
    }
    var startShowAnimation = _startShowAnimation.bind(this, item, spec);
    var waitAndShow = item.wait ? function() {
      item.wait.then(startShowAnimation, startShowAnimation);
    } : startShowAnimation;
    if (prevItem) {
      _initTransferableAnimations.call(this, item, prevItem, waitAndShow);
    } else {
      waitAndShow();
    }
  }
  function _startShowAnimation(item, spec) {
    if (!item.halted) {
      var callback = item.showCallback;
      if (spec.transform) {
        item.mod.setTransform(Transform.identity, item.options.show.transition, callback);
        callback = undefined;
      }
      if (spec.opacity !== undefined) {
        item.mod.setOpacity(1, item.options.show.transition, callback);
        callback = undefined;
      }
      _startTransferableAnimations.call(this, item, callback);
    }
  }
  function _interpolate(start, end, perc) {
    return start + ((end - start) * perc);
  }
  function _haltItemAtFrame(item, perc) {
    item.mod.halt();
    item.halted = true;
    if (item.startSpec && (perc !== undefined)) {
      if ((item.startSpec.opacity !== undefined) && (item.endSpec.opacity !== undefined)) {
        item.mod.setOpacity(_interpolate(item.startSpec.opacity, item.endSpec.opacity, perc));
      }
      if (item.startSpec.transform && item.endSpec.transform) {
        var transform = [];
        for (var i = 0; i < item.startSpec.transform.length; i++) {
          transform.push(_interpolate(item.startSpec.transform[i], item.endSpec.transform[i], perc));
        }
        item.mod.setTransform(transform);
      }
    }
  }
  function _initHideAnimation(item, prevItem, size) {
    var startHideAnimation = _startHideAnimation.bind(this, item, prevItem, size);
    if (item.wait) {
      item.wait.then(startHideAnimation, startHideAnimation);
    } else {
      startHideAnimation();
    }
  }
  function _startHideAnimation(item, prevItem, size) {
    var spec = item.options.hide.animation ? item.options.hide.animation.call(undefined, false, size) : {};
    item.endSpec = spec;
    item.startSpec = {
      opacity: 1,
      transform: Transform.identity
    };
    if (!item.halted) {
      item.mod.halt();
      var callback = item.hideCallback;
      if (spec.transform) {
        item.mod.setTransform(spec.transform, item.options.hide.transition, callback);
        callback = undefined;
      }
      if (spec.opacity !== undefined) {
        item.mod.setOpacity(spec.opacity, item.options.hide.transition, callback);
        callback = undefined;
      }
      if (callback) {
        callback();
      }
    }
  }
  function _setItemOptions(item, options, callback) {
    item.options = {
      show: {
        transition: this.options.show.transition || this.options.transition,
        animation: this.options.show.animation || this.options.animation
      },
      hide: {
        transition: this.options.hide.transition || this.options.transition,
        animation: this.options.hide.animation || this.options.animation
      },
      transfer: {
        transition: this.options.transfer.transition || this.options.transition,
        items: this.options.transfer.items || {},
        zIndex: this.options.transfer.zIndex,
        fastResize: this.options.transfer.fastResize
      }
    };
    if (options) {
      item.options.show.transition = (options.show ? options.show.transition : undefined) || options.transition || item.options.show.transition;
      if (options && options.show && (options.show.animation !== undefined)) {
        item.options.show.animation = options.show.animation;
      } else if (options && (options.animation !== undefined)) {
        item.options.show.animation = options.animation;
      }
      item.options.transfer.transition = (options.transfer ? options.transfer.transition : undefined) || options.transition || item.options.transfer.transition;
      item.options.transfer.items = (options.transfer ? options.transfer.items : undefined) || item.options.transfer.items;
      item.options.transfer.zIndex = (options.transfer && (options.transfer.zIndex !== undefined)) ? options.transfer.zIndex : item.options.transfer.zIndex;
      item.options.transfer.fastResize = (options.transfer && (options.transfer.fastResize !== undefined)) ? options.transfer.fastResize : item.options.transfer.fastResize;
    }
    item.showCallback = function() {
      item.showCallback = undefined;
      item.state = ItemState.VISIBLE;
      _updateState.call(this);
      _endTransferableAnimations.call(this, item);
      item.endSpec = undefined;
      item.startSpec = undefined;
      if (callback) {
        callback();
      }
    }.bind(this);
  }
  function _updateState() {
    var prevItem;
    var invalidated = false;
    var hiddenViewCount = 0;
    var i = 0;
    while (i < this._viewStack.length) {
      if (this._viewStack[i].state === ItemState.HIDDEN) {
        hiddenViewCount++;
        for (var j = 0; j < this._viewStack.length; j++) {
          if ((this._viewStack[j].state !== ItemState.HIDDEN) && (this._viewStack[j].view === this._viewStack[i].view)) {
            this._viewStack[i].view = undefined;
            this._renderables.views.splice(i, 1);
            this._viewStack.splice(i, 1);
            i--;
            hiddenViewCount--;
            break;
          }
        }
      }
      i++;
    }
    while (hiddenViewCount > this.options.keepHiddenViewsInDOMCount) {
      this._viewStack[0].view = undefined;
      this._renderables.views.splice(0, 1);
      this._viewStack.splice(0, 1);
      hiddenViewCount--;
    }
    for (i = hiddenViewCount; i < (Math.min(this._viewStack.length - hiddenViewCount, 2) + hiddenViewCount); i++) {
      var item = this._viewStack[i];
      if (item.state === ItemState.QUEUED) {
        if (!prevItem || (prevItem.state === ItemState.VISIBLE) || (prevItem.state === ItemState.HIDING)) {
          if (prevItem && (prevItem.state === ItemState.VISIBLE)) {
            prevItem.state = ItemState.HIDE;
            prevItem.wait = item.wait;
          }
          item.state = ItemState.SHOW;
          invalidated = true;
        }
        break;
      } else if ((item.state === ItemState.VISIBLE) && item.hide) {
        item.state = ItemState.HIDE;
      }
      if ((item.state === ItemState.SHOW) || (item.state === ItemState.HIDE)) {
        this.layout.reflowLayout();
      }
      prevItem = item;
    }
    if (invalidated) {
      _updateState.call(this);
      this.layout.reflowLayout();
    }
  }
  function _resume() {
    for (var i = 0; i < Math.min(this._viewStack.length, 2); i++) {
      var item = this._viewStack[i];
      if (item.halted) {
        item.halted = false;
        if (item.endSpec) {
          var callback;
          switch (item.state) {
            case ItemState.HIDE:
            case ItemState.HIDING:
              callback = item.hideCallback;
              break;
            case ItemState.SHOW:
            case ItemState.SHOWING:
              callback = item.showCallback;
              break;
          }
          item.mod.halt();
          if (item.endSpec.transform) {
            item.mod.setTransform(item.endSpec.transform, item.options.show.transition, callback);
            callback = undefined;
          }
          if (item.endSpec.opacity !== undefined) {
            item.mod.setOpacity(item.endSpec.opacity, item.options.show.transition, callback);
          }
          if (callback) {
            callback();
          }
        }
      }
    }
  }
  AnimationController.prototype.show = function(renderable, options, callback) {
    _resume.call(this, renderable);
    if (!renderable) {
      return this.hide(options, callback);
    }
    var item = this._viewStack.length ? this._viewStack[this._viewStack.length - 1] : undefined;
    if (item && (item.view === renderable) && (item.state !== ItemState.HIDDEN)) {
      item.hide = false;
      if (item.state === ItemState.HIDE) {
        item.state = ItemState.QUEUED;
        _setItemOptions.call(this, item, options, callback);
        _updateState.call(this);
      } else if (item.state === ItemState.HIDING) {
        this.abort(callback);
      } else if (callback) {
        callback();
      }
      return this;
    }
    if (item && (item.state !== ItemState.HIDING) && options) {
      item.options.hide.transition = (options.hide ? options.hide.transition : undefined) || options.transition || item.options.hide.transition;
      if (options && options.hide && (options.hide.animation !== undefined)) {
        item.options.hide.animation = options.hide.animation;
      } else if (options && (options.animation !== undefined)) {
        item.options.hide.animation = options.animation;
      }
    }
    item = {
      view: renderable,
      mod: new StateModifier(),
      state: ItemState.QUEUED,
      callback: callback,
      transferables: [],
      wait: options ? options.wait : undefined
    };
    item.node = new RenderNode(item.mod);
    item.node.add(renderable);
    _setItemOptions.call(this, item, options, callback);
    item.hideCallback = function() {
      item.hideCallback = undefined;
      item.state = ItemState.HIDDEN;
      _updateState.call(this);
      this.layout.reflowLayout();
    }.bind(this);
    this._renderables.views.push(item.node);
    this._viewStack.push(item);
    _updateState.call(this);
    return this;
  };
  AnimationController.prototype.hide = function(options, callback) {
    _resume.call(this);
    var item = this._viewStack.length ? this._viewStack[this._viewStack.length - 1] : undefined;
    if (!item || (item.state === ItemState.HIDING)) {
      return this;
    }
    item.hide = true;
    if (options) {
      item.options.hide.transition = (options.hide ? options.hide.transition : undefined) || options.transition || item.options.hide.transition;
      if (options && options.hide && (options.hide.animation !== undefined)) {
        item.options.hide.animation = options.hide.animation;
      } else if (options && (options.animation !== undefined)) {
        item.options.hide.animation = options.animation;
      }
    }
    item.hideCallback = function() {
      item.hideCallback = undefined;
      item.state = ItemState.HIDDEN;
      _updateState.call(this);
      this.layout.reflowLayout();
      if (callback) {
        callback();
      }
    }.bind(this);
    _updateState.call(this);
    return this;
  };
  AnimationController.prototype.halt = function(stopAnimation, framePerc) {
    var item;
    for (var i = 0; i < this._viewStack.length; i++) {
      if (stopAnimation) {
        item = this._viewStack[i];
        switch (item.state) {
          case ItemState.SHOW:
          case ItemState.SHOWING:
          case ItemState.HIDE:
          case ItemState.HIDING:
          case ItemState.VISIBLE:
            _haltItemAtFrame(item, framePerc);
            break;
        }
      } else {
        item = this._viewStack[this._viewStack.length - 1];
        if ((item.state === ItemState.QUEUED) || (item.state === ItemState.SHOW)) {
          this._renderables.views.splice(this._viewStack.length - 1, 1);
          this._viewStack.splice(this._viewStack.length - 1, 1);
          item.view = undefined;
        } else {
          break;
        }
      }
    }
    return this;
  };
  AnimationController.prototype.abort = function(callback) {
    var item;
    if ((this._viewStack.length >= 2) && (this._viewStack[0].state === ItemState.HIDING) && (this._viewStack[1].state === ItemState.SHOWING)) {
      var prevItem = this._viewStack[0];
      item = this._viewStack[1];
      var swapSpec;
      item.halted = true;
      swapSpec = item.endSpec;
      item.endSpec = item.startSpec;
      item.startSpec = swapSpec;
      item.state = ItemState.HIDING;
      item.hideCallback = function() {
        item.hideCallback = undefined;
        item.state = ItemState.HIDDEN;
        _updateState.call(this);
        this.layout.reflowLayout();
      }.bind(this);
      prevItem.halted = true;
      swapSpec = prevItem.endSpec;
      prevItem.endSpec = prevItem.startSpec;
      prevItem.startSpec = swapSpec;
      prevItem.state = ItemState.SHOWING;
      prevItem.showCallback = function() {
        prevItem.showCallback = undefined;
        prevItem.state = ItemState.VISIBLE;
        _updateState.call(this);
        _endTransferableAnimations.call(this, prevItem);
        prevItem.endSpec = undefined;
        prevItem.startSpec = undefined;
        if (callback) {
          callback();
        }
      }.bind(this);
      _resume.call(this);
    } else if ((this._viewStack.length === 1) && (this._viewStack[0].state === ItemState.HIDING)) {
      item = this._viewStack[0];
      item.halted = true;
      swapSpec = item.endSpec;
      item.endSpec = item.startSpec;
      item.startSpec = swapSpec;
      item.state = ItemState.SHOWING;
      item.showCallback = function() {
        item.showCallback = undefined;
        item.state = ItemState.VISIBLE;
        _updateState.call(this);
        _endTransferableAnimations.call(this, item);
        item.endSpec = undefined;
        item.startSpec = undefined;
        if (callback) {
          callback();
        }
      }.bind(this);
      _resume.call(this);
    }
    return this;
  };
  AnimationController.prototype.get = function() {
    for (var i = 0; i < this._viewStack.length; i++) {
      var item = this._viewStack[i];
      if ((item.state === ItemState.VISIBLE) || (item.state === ItemState.SHOW) || (item.state === ItemState.SHOWING)) {
        return item.view;
      }
    }
    return undefined;
  };
  AnimationController.prototype.getSize = function() {
    return this._size || this.options.size;
  };
  module.exports = AnimationController;
});

})();
$__System.registerDynamic('142', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        var currentLocation = $__global['currentLocation'],
            isWebsite = $__global['isWebsite'],
            styleElement = $__global['styleElement'],
            styleSheet = $__global['styleSheet'];
        /**
         * Created by tom on 08/07/16.
         */

        var currentLocation = window.location;
        var isWebsite = currentLocation.protocol.indexOf('http') !== -1 && currentLocation.host.indexOf('localhost') === -1;

        if (!isWebsite) {
            /* Source: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule */
            var styleElement = document.createElement('style'),
                styleSheet;

            /* Append style element to head */
            document.head.appendChild(styleElement);

            /* Grab style sheet */
            styleSheet = styleElement.sheet;
            styleSheet.insertRule('*:not(input):not(textarea){-webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -o-user-select: none; user-select: none;}', 0);
        }
        $__global['currentLocation'] = currentLocation;
        $__global['isWebsite'] = isWebsite;
        $__global['styleElement'] = styleElement;
        $__global['styleSheet'] = styleSheet;
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('143', [], true, function ($__require, exports, module) {
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  var has = Object.prototype.hasOwnProperty;

  //
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix = typeof Object.create !== 'function' ? '~' : false;

  /**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} [once=false] Only emit once
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() {} /* Nothing to set */

  /**
   * Hold the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */
  EventEmitter.prototype._events = undefined;

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @api public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var events = this._events,
        names = [],
        name;

    if (!events) return names;

    for (name in events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event,
        available = this._events && this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return false;

    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);break;
          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this),
        evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }

    return this;
  };

  /**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true),
        evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }

    return this;
  };

  /**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return this;

    var listeners = this._events[evt],
        events = [];

    if (fn) {
      if (listeners.fn) {
        if (listeners.fn !== fn || once && !listeners.once || context && listeners.context !== context) {
          events.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) {
      this._events[evt] = events.length === 1 ? events[0] : events;
    } else {
      delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;

    if (event) delete this._events[prefix ? prefix + event : event];else this._events = prefix ? {} : Object.create(null);

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Expose the module.
  //
  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
  return module.exports;
});
$__System.register("144", [], function() { return { setters: [], execute: function() {} } });

(function() {
var define = $__System.amdDefine;
define("145", ["require", "exports", "module", "146"], function(require, exports, module) {
  var Surface = require('146');
  function InputSurface(options) {
    this._placeholder = options.placeholder || '';
    this._value = options.value || '';
    this._type = options.type || 'text';
    this._name = options.name || '';
    Surface.apply(this, arguments);
    this.on('click', this.focus.bind(this));
    window.addEventListener('click', function(event) {
      if (event.target !== this._currentTarget)
        this.blur();
    }.bind(this));
  }
  InputSurface.prototype = Object.create(Surface.prototype);
  InputSurface.prototype.constructor = InputSurface;
  InputSurface.prototype.elementType = 'input';
  InputSurface.prototype.elementClass = 'famous-surface';
  InputSurface.prototype.setPlaceholder = function setPlaceholder(str) {
    this._placeholder = str;
    this._contentDirty = true;
    return this;
  };
  InputSurface.prototype.focus = function focus() {
    if (this._currentTarget)
      this._currentTarget.focus();
    return this;
  };
  InputSurface.prototype.blur = function blur() {
    if (this._currentTarget)
      this._currentTarget.blur();
    return this;
  };
  InputSurface.prototype.setValue = function setValue(str) {
    this._value = str;
    this._contentDirty = true;
    return this;
  };
  InputSurface.prototype.setType = function setType(str) {
    this._type = str;
    this._contentDirty = true;
    return this;
  };
  InputSurface.prototype.getValue = function getValue() {
    if (this._currentTarget) {
      return this._currentTarget.value;
    } else {
      return this._value;
    }
  };
  InputSurface.prototype.setName = function setName(str) {
    this._name = str;
    this._contentDirty = true;
    return this;
  };
  InputSurface.prototype.getName = function getName() {
    return this._name;
  };
  InputSurface.prototype.deploy = function deploy(target) {
    if (this._placeholder !== '')
      target.placeholder = this._placeholder;
    target.value = this._value;
    target.type = this._type;
    target.name = this._name;
  };
  module.exports = InputSurface;
});

})();
(function() {
var define = $__System.amdDefine;
define("147", ["require", "exports", "module", "148", "149"], function(require, exports, module) {
  var Utility = require('148');
  var LayoutUtility = require('149');
  var capabilities = {
    sequence: true,
    direction: [Utility.Direction.Y, Utility.Direction.X],
    scrolling: true,
    trueSize: true,
    sequentialScrollingOptimized: true
  };
  var context;
  var size;
  var direction;
  var alignment;
  var lineDirection;
  var lineLength;
  var offset;
  var margins;
  var margin = [0, 0];
  var spacing;
  var justify;
  var itemSize;
  var getItemSize;
  var lineNodes;
  function _layoutLine(next, endReached) {
    if (!lineNodes.length) {
      return 0;
    }
    var i;
    var lineSize = [0, 0];
    var lineNode;
    for (i = 0; i < lineNodes.length; i++) {
      lineSize[direction] = Math.max(lineSize[direction], lineNodes[i].size[direction]);
      lineSize[lineDirection] += ((i > 0) ? spacing[lineDirection] : 0) + lineNodes[i].size[lineDirection];
    }
    var justifyOffset = justify[lineDirection] ? ((lineLength - lineSize[lineDirection]) / (lineNodes.length * 2)) : 0;
    var lineOffset = (direction ? margins[3] : margins[0]) + justifyOffset;
    var scrollLength;
    for (i = 0; i < lineNodes.length; i++) {
      lineNode = lineNodes[i];
      var translate = [0, 0, 0];
      translate[lineDirection] = lineOffset;
      translate[direction] = next ? offset : (offset - (lineSize[direction]));
      scrollLength = 0;
      if (i === 0) {
        scrollLength = lineSize[direction];
        if (endReached && ((next && !alignment) || (!next && alignment))) {
          scrollLength += direction ? (margins[0] + margins[2]) : (margins[3] + margins[1]);
        } else {
          scrollLength += spacing[direction];
        }
      }
      lineNode.set = {
        size: lineNode.size,
        translate: translate,
        scrollLength: scrollLength
      };
      lineOffset += lineNode.size[lineDirection] + spacing[lineDirection] + (justifyOffset * 2);
    }
    for (i = 0; i < lineNodes.length; i++) {
      lineNode = next ? lineNodes[i] : lineNodes[(lineNodes.length - 1) - i];
      context.set(lineNode.node, lineNode.set);
    }
    lineNodes = [];
    return lineSize[direction] + spacing[direction];
  }
  function _resolveNodeSize(node) {
    var localItemSize = itemSize;
    if (getItemSize) {
      localItemSize = getItemSize(node.renderNode, size);
    }
    if ((localItemSize[0] === true) || (localItemSize[1] === true)) {
      var result = context.resolveSize(node, size);
      if (localItemSize[0] !== true) {
        result[0] = itemSize[0];
      }
      if (localItemSize[1] !== true) {
        result[1] = itemSize[1];
      }
      return result;
    } else {
      return localItemSize;
    }
  }
  function CollectionLayout(context_, options) {
    context = context_;
    size = context.size;
    direction = context.direction;
    alignment = context.alignment;
    lineDirection = (direction + 1) % 2;
    if ((options.gutter !== undefined) && console.warn && !options.suppressWarnings) {
      console.warn('option `gutter` has been deprecated for CollectionLayout, use margins & spacing instead');
    }
    if (options.gutter && !options.margins && !options.spacing) {
      var gutter = Array.isArray(options.gutter) ? options.gutter : [options.gutter, options.gutter];
      margins = [gutter[1], gutter[0], gutter[1], gutter[0]];
      spacing = gutter;
    } else {
      margins = LayoutUtility.normalizeMargins(options.margins);
      spacing = options.spacing || 0;
      spacing = Array.isArray(spacing) ? spacing : [spacing, spacing];
    }
    margin[0] = margins[direction ? 0 : 3];
    margin[1] = -margins[direction ? 2 : 1];
    justify = Array.isArray(options.justify) ? options.justify : (options.justify ? [true, true] : [false, false]);
    lineLength = size[lineDirection] - (direction ? (margins[3] + margins[1]) : (margins[0] + margins[2]));
    var node;
    var nodeSize;
    var lineOffset;
    var bound;
    if (options.cells) {
      if (options.itemSize && console.warn && !options.suppressWarnings) {
        console.warn('options `cells` and `itemSize` cannot both be specified for CollectionLayout, only use one of the two');
      }
      itemSize = [([undefined, true].indexOf(options.cells[0]) > -1) ? options.cells[0] : (size[0] - (margins[1] + margins[3] + (spacing[0] * (options.cells[0] - 1)))) / options.cells[0], ([undefined, true].indexOf(options.cells[1]) > -1) ? options.cells[1] : (size[1] - (margins[0] + margins[2] + (spacing[1] * (options.cells[1] - 1)))) / options.cells[1]];
    } else if (!options.itemSize) {
      itemSize = [true, true];
    } else if (options.itemSize instanceof Function) {
      getItemSize = options.itemSize;
    } else if ((options.itemSize[0] === undefined) || (options.itemSize[0] === undefined)) {
      itemSize = [(options.itemSize[0] === undefined) ? size[0] : options.itemSize[0], (options.itemSize[1] === undefined) ? size[1] : options.itemSize[1]];
    } else {
      itemSize = options.itemSize;
    }
    offset = context.scrollOffset + margin[alignment] + (alignment ? spacing[direction] : 0);
    bound = context.scrollEnd + (alignment ? 0 : margin[alignment]);
    lineOffset = 0;
    lineNodes = [];
    while (offset < bound) {
      node = context.next();
      if (!node) {
        _layoutLine(true, true);
        break;
      }
      nodeSize = _resolveNodeSize(node);
      lineOffset += (lineNodes.length ? spacing[lineDirection] : 0) + nodeSize[lineDirection];
      if ((Math.round(lineOffset * 100) / 100) > lineLength) {
        offset += _layoutLine(true, !node);
        lineOffset = nodeSize[lineDirection];
      }
      lineNodes.push({
        node: node,
        size: nodeSize
      });
    }
    offset = context.scrollOffset + margin[alignment] - (alignment ? 0 : spacing[direction]);
    bound = context.scrollStart + (alignment ? margin[alignment] : 0);
    lineOffset = 0;
    lineNodes = [];
    while (offset > bound) {
      node = context.prev();
      if (!node) {
        _layoutLine(false, true);
        break;
      }
      nodeSize = _resolveNodeSize(node);
      lineOffset += (lineNodes.length ? spacing[lineDirection] : 0) + nodeSize[lineDirection];
      if ((Math.round(lineOffset * 100) / 100) > lineLength) {
        offset -= _layoutLine(false, !node);
        lineOffset = nodeSize[lineDirection];
      }
      lineNodes.unshift({
        node: node,
        size: nodeSize
      });
    }
  }
  CollectionLayout.Capabilities = capabilities;
  CollectionLayout.Name = 'CollectionLayout';
  CollectionLayout.Description = 'Multi-cell collection-layout with margins & spacing';
  module.exports = CollectionLayout;
});

})();
(function() {
var define = $__System.amdDefine;
define("13d", ["require", "exports", "module", "14a", "14b", "13f", "148"], function(require, exports, module) {
  var EventHandler = require('14a');
  var OptionsManager = require('14b');
  var RenderNode = require('13f');
  var Utility = require('148');
  function View(options) {
    this._node = new RenderNode();
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
      this.setOptions(options);
  }
  View.DEFAULT_OPTIONS = {};
  View.prototype.getOptions = function getOptions(key) {
    return this._optionsManager.getOptions(key);
  };
  View.prototype.setOptions = function setOptions(options) {
    this._optionsManager.patch(options);
  };
  View.prototype.add = function add() {
    return this._node.add.apply(this._node, arguments);
  };
  View.prototype._add = View.prototype.add;
  View.prototype.render = function render() {
    return this._node.render();
  };
  View.prototype.getSize = function getSize() {
    if (this._node && this._node.getSize) {
      return this._node.getSize.apply(this._node, arguments) || this.options.size;
    } else
      return this.options.size;
  };
  module.exports = View;
});

})();
(function() {
var define = $__System.amdDefine;
define("14c", ["require", "exports", "module", "146"], function(require, exports, module) {
  var Surface = require('146');
  function ImageSurface(options) {
    this._imageUrl = undefined;
    Surface.apply(this, arguments);
  }
  var urlCache = [];
  var countCache = [];
  var nodeCache = [];
  var cacheEnabled = true;
  ImageSurface.enableCache = function enableCache() {
    cacheEnabled = true;
  };
  ImageSurface.disableCache = function disableCache() {
    cacheEnabled = false;
  };
  ImageSurface.clearCache = function clearCache() {
    urlCache = [];
    countCache = [];
    nodeCache = [];
  };
  ImageSurface.getCache = function getCache() {
    return {
      urlCache: urlCache,
      countCache: countCache,
      nodeCache: nodeCache
    };
  };
  ImageSurface.prototype = Object.create(Surface.prototype);
  ImageSurface.prototype.constructor = ImageSurface;
  ImageSurface.prototype.elementType = 'img';
  ImageSurface.prototype.elementClass = 'famous-surface';
  ImageSurface.prototype.setContent = function setContent(imageUrl) {
    var urlIndex = urlCache.indexOf(this._imageUrl);
    if (urlIndex !== -1) {
      if (countCache[urlIndex] === 1) {
        urlCache.splice(urlIndex, 1);
        countCache.splice(urlIndex, 1);
        nodeCache.splice(urlIndex, 1);
      } else {
        countCache[urlIndex]--;
      }
    }
    urlIndex = urlCache.indexOf(imageUrl);
    if (urlIndex === -1) {
      urlCache.push(imageUrl);
      countCache.push(1);
    } else {
      countCache[urlIndex]++;
    }
    this._imageUrl = imageUrl;
    this._contentDirty = true;
  };
  ImageSurface.prototype.deploy = function deploy(target) {
    var urlIndex = urlCache.indexOf(this._imageUrl);
    if (nodeCache[urlIndex] === undefined && cacheEnabled) {
      var img = new Image();
      img.src = this._imageUrl || '';
      nodeCache[urlIndex] = img;
    }
    target.src = this._imageUrl || '';
  };
  ImageSurface.prototype.recall = function recall(target) {
    target.src = '';
  };
  module.exports = ImageSurface;
});

})();
$__System.registerDynamic('14d', [], true, function ($__require, exports, module) {
  /*jshint browserify: true, es3: true */
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  var _defineProperty = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return function (obj, name, value) {
        Object.defineProperty(obj, name, {
          configurable: false,
          enumerable: false,
          writable: false,
          value: value
        });
      };
    } catch (e) {
      return function (obj, name, value) {
        obj[name] = value;
      };
    }
  }();

  module.exports = OrderedHashMap;
  function OrderedHashMap() {
    this._values = {};
    this._keys = {};
    this._order = [];
    this._id = Date.now() + '$' + String(Math.random()).slice(2);
    this._nextId = 0;
  }
  OrderedHashMap.from = function (arr, keyProp) {
    var Ctor = this;
    var m = new Ctor();
    for (var i = 0; i < arr.length; i++) {
      var value = arr[i];
      var key = keyProp ? typeof keyProp === 'function' ? keyProp(value, i, arr) : value[keyProp] : i;
      var hash = m._hash(key);
      m._order.push(hash);
      m._keys[hash] = key;
      m._values[hash] = value;
    }
    return m;
  };
  OrderedHashMap.fromTuples = function (arr) {
    var Ctor = this;
    var m = new Ctor();
    for (var i = 0; i < arr.length; i++) {
      var item = arr[i];
      var key = item[0];
      var hash = m._hash(key);
      m._order.push(hash);
      m._keys[hash] = item[0];
      m._values[hash] = item[1];
    }
    return m;
  };
  OrderedHashMap.prototype._hash = function (key) {
    var t = typeof key;
    if (key === null || key === undefined || t === 'boolean' || t === 'number') return '%' + key;
    if (t === 'string') return '"' + key;
    if (t !== 'object' && t !== 'function') return '?' + key;
    if (key instanceof Date) return '@' + Number(key);
    if (key instanceof RegExp) return '!' + key;
    var h = '__hash$' + this._id;
    if (key[h] === undefined) {
      _defineProperty(key, h, this._nextId);
      this._nextId += 1;
    }
    return '#' + key[h];
  };
  OrderedHashMap.prototype.count = function () {
    return this._order.length;
  };
  OrderedHashMap.prototype.keyAt = function (i) {
    if (i < 0 || i > this._order.length) return undefined;
    return this._keys[this._order[i]];
  };
  OrderedHashMap.prototype.indexOf = function (key) {
    var hash = this._hash(key);
    return this._order.indexOf(hash);
  };
  OrderedHashMap.prototype.insert = function (index, key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    if (index >= this._order.length) this._order.push(hash);else if (index < 0) this._order.unshift(hash);else this._order.splice(index, 0, hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.set = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i === -1) this._order.push(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.get = function (key) {
    var hash = this._hash(key);
    return this._values[hash];
  };
  OrderedHashMap.prototype.remove = function (key) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i === -1) return false;
    this._order.splice(i, 1);
    delete this._keys[hash];
    delete this._values[hash];
    return true;
  };
  OrderedHashMap.prototype.unshift = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    this._order.unshift(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.shift = function () {
    if (!this._order.length) return undefined;
    var hash = this._order.shift();
    var key = this._keys[hash];
    var value = this._values[hash];
    delete this._keys[hash];
    delete this._values[hash];
    return [key, value];
  };
  OrderedHashMap.prototype.push = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    this._order.push(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.pop = function () {
    if (!this._order.length) return undefined;
    var hash = this._order.pop();
    var key = this._keys[hash];
    var value = this._values[hash];
    delete this._keys[hash];
    delete this._values[hash];
    return [key, value];
  };
  OrderedHashMap.prototype.items = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push([this._keys[hash], this._values[hash]]);
    }
    return arr;
  };
  OrderedHashMap.prototype.values = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(this._values[hash]);
    }
    return arr;
  };
  OrderedHashMap.prototype.keys = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(this._keys[hash]);
    }
    return arr;
  };
  OrderedHashMap.prototype.forEach = function (fn) {
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      fn(this._values[hash], this._keys[hash], this);
    }
  };
  OrderedHashMap.prototype.map = function (fn) {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(fn(this._values[hash], this._keys[hash], this));
    }
    return arr;
  };
  OrderedHashMap.prototype.filter = function (fn) {
    var m = new OrderedHashMap();
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      var key = this._keys[hash];
      var value = this._values[hash];
      if (!fn(value, key, this)) continue;
      m._order.push(hash);
      m._keys[hash] = key;
      m._values[hash] = value;
    }
    return m;
  };
  OrderedHashMap.prototype.reduce = function (fn, initial) {
    var i = 0;
    var accu = initial;
    if (accu === undefined) {
      if (!this._order.length) throw new TypeError('Must provide an initial value for empty maps');
      accu = this._values[this._order[0]];
      i = 1;
    }
    for (; i < this._order.length; i++) {
      var hash = this._order[i];
      accu = fn(accu, this._values[hash], this._keys[hash], this);
    }
    return accu;
  };
  OrderedHashMap.prototype.reduceRight = function (fn, initial) {
    var i = this._order.length;
    var accu = initial;
    if (accu === undefined) {
      if (!this._order.length) throw new TypeError('Must provide an initial value for empty maps');
      accu = this._values[this._order[i - 1]];
      i -= 1;
    }
    for (var i = this._order.length; i > 0; i--) {
      var hash = this._order[i - 1];
      accu = fn(accu, this._values[hash], this._keys[hash], this);
    }
    return accu;
  };
  return module.exports;
});
(function() {
var define = $__System.amdDefine;
define("14e", ["require", "exports", "module"], function(require, exports, module) {
  var Utilities = {};
  Utilities.clamp = function clamp(value, range) {
    return Math.max(Math.min(value, range[1]), range[0]);
  };
  Utilities.length = function length(array) {
    var distanceSquared = 0;
    for (var i = 0; i < array.length; i++) {
      distanceSquared += array[i] * array[i];
    }
    return Math.sqrt(distanceSquared);
  };
  module.exports = Utilities;
});

})();
(function() {
var define = $__System.amdDefine;
define("14f", ["require", "exports", "module", "139", "13a", "14a", "14e", "150", "151", "152"], function(require, exports, module) {
  var Transform = require('139');
  var Transitionable = require('13a');
  var EventHandler = require('14a');
  var Utilities = require('14e');
  var GenericSync = require('150');
  var MouseSync = require('151');
  var TouchSync = require('152');
  GenericSync.register({
    'mouse': MouseSync,
    'touch': TouchSync
  });
  function Draggable(options) {
    this.options = Object.create(Draggable.DEFAULT_OPTIONS);
    this.sync = new GenericSync(['mouse', 'touch'], {scale: this.options.scale});
    if (options)
      this.setOptions(options);
    this._positionState = new Transitionable([0, 0]);
    this._differential = [0, 0];
    this._lastTouchOffset = [0, 0];
    this._active = true;
    this.eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this.sync);
    EventHandler.setOutputHandler(this, this.eventOutput);
    _bindEvents.call(this);
  }
  var _direction = {
    x: 0x01,
    y: 0x02
  };
  Draggable.DIRECTION_X = _direction.x;
  Draggable.DIRECTION_Y = _direction.y;
  var _clamp = Utilities.clamp;
  Draggable.DEFAULT_OPTIONS = {
    projection: _direction.x | _direction.y,
    scale: 1,
    xRange: null,
    yRange: null,
    snapX: 0,
    snapY: 0,
    outsideTouches: true,
    transition: {duration: 0}
  };
  function _mapDifferential(differential) {
    var opts = this.options;
    var projection = opts.projection;
    var snapX = opts.snapX;
    var snapY = opts.snapY;
    var rangeX = opts.xRange;
    var rangeY = opts.yRange;
    var outsideTouches = opts.outsideTouches;
    var lastOffset = this._lastTouchOffset;
    var tx = (projection & _direction.x) ? differential[0] : 0;
    var ty = (projection & _direction.y) ? differential[1] : 0;
    if (snapX > 0)
      tx -= tx % snapX;
    if (snapY > 0)
      ty -= ty % snapY;
    var newPositionX = lastOffset[0] + tx;
    if (rangeX && !outsideTouches && (newPositionX > rangeX[1] || newPositionX < rangeX[0])) {
      var overX = (newPositionX - rangeX[1]);
      var underX = (newPositionX - rangeX[0]);
      tx = _clamp(tx, [tx - underX, tx - overX]);
    }
    var newPositionY = lastOffset[0] + ty;
    if (rangeY && !outsideTouches && (newPositionY > rangeY[1] || newPositionY < rangeY[0])) {
      var overY = (newPositionY - rangeY[1]);
      var underY = (newPositionY - rangeY[0]);
      tx = _clamp(ty, [ty - underY, ty - overY]);
    }
    lastOffset[0] += tx;
    lastOffset[1] += ty;
    return [tx, ty];
  }
  function _handleStart() {
    if (!this._active)
      return;
    if (this._positionState.isActive())
      this._positionState.halt();
    this._lastTouchOffset = [this.getPosition()[0], this.getPosition()[1]];
    this.eventOutput.emit('start', {position: this.getPosition()});
  }
  function _handleMove(event) {
    if (!this._active)
      return;
    var options = this.options;
    this._differential = event.position;
    var newDifferential = _mapDifferential.call(this, this._differential);
    this._differential[0] -= newDifferential[0];
    this._differential[1] -= newDifferential[1];
    var pos = this.getPosition();
    pos[0] += newDifferential[0];
    pos[1] += newDifferential[1];
    if (options.xRange) {
      var xRange = [options.xRange[0] + 0.5 * options.snapX, options.xRange[1] - 0.5 * options.snapX];
      pos[0] = _clamp(pos[0], xRange);
    }
    if (options.yRange) {
      var yRange = [options.yRange[0] + 0.5 * options.snapY, options.yRange[1] - 0.5 * options.snapY];
      pos[1] = _clamp(pos[1], yRange);
    }
    this.eventOutput.emit('update', {position: pos});
  }
  function _handleEnd() {
    if (!this._active)
      return;
    this.eventOutput.emit('end', {position: this.getPosition()});
  }
  function _bindEvents() {
    this.sync.on('start', _handleStart.bind(this));
    this.sync.on('update', _handleMove.bind(this));
    this.sync.on('end', _handleEnd.bind(this));
  }
  Draggable.prototype.setOptions = function setOptions(options) {
    var currentOptions = this.options;
    if (options.projection !== undefined) {
      var proj = options.projection;
      this.options.projection = 0;
      ['x', 'y'].forEach(function(val) {
        if (proj.indexOf(val) !== -1)
          currentOptions.projection |= _direction[val];
      });
    }
    if (options.scale !== undefined) {
      currentOptions.scale = options.scale;
      this.sync.setOptions({scale: options.scale});
    }
    if (options.xRange !== undefined)
      currentOptions.xRange = options.xRange;
    if (options.yRange !== undefined)
      currentOptions.yRange = options.yRange;
    if (options.snapX !== undefined)
      currentOptions.snapX = options.snapX;
    if (options.snapY !== undefined)
      currentOptions.snapY = options.snapY;
  };
  Draggable.prototype.getPosition = function getPosition() {
    return this._positionState.get();
  };
  Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {
    var currPos = this.getPosition();
    var relativePosition = [currPos[0] + position[0], currPos[1] + position[1]];
    this.setPosition(relativePosition, transition, callback);
  };
  Draggable.prototype.setPosition = function setPosition(position, transition, callback) {
    if (this._positionState.isActive())
      this._positionState.halt();
    this._positionState.set(position, transition, callback);
  };
  Draggable.prototype.activate = function activate() {
    this._active = true;
  };
  Draggable.prototype.deactivate = function deactivate() {
    this._active = false;
  };
  Draggable.prototype.toggle = function toggle() {
    this._active = !this._active;
  };
  Draggable.prototype.modify = function modify(target) {
    var pos = this.getPosition();
    return {
      transform: Transform.translate(pos[0], pos[1]),
      target: target
    };
  };
  module.exports = Draggable;
});

})();
(function() {
var define = $__System.amdDefine;
define("153", ["require", "exports", "module", "146", "154"], function(require, exports, module) {
  var Surface = require('146');
  var Context = require('154');
  function ContainerSurface(options) {
    Surface.call(this, options);
    this._container = document.createElement('div');
    this._container.classList.add('famous-group');
    this._container.classList.add('famous-container-group');
    this._shouldRecalculateSize = false;
    this.context = new Context(this._container);
    this.setContent(this._container);
  }
  ContainerSurface.prototype = Object.create(Surface.prototype);
  ContainerSurface.prototype.constructor = ContainerSurface;
  ContainerSurface.prototype.elementType = 'div';
  ContainerSurface.prototype.elementClass = 'famous-surface';
  ContainerSurface.prototype.add = function add() {
    return this.context.add.apply(this.context, arguments);
  };
  ContainerSurface.prototype.render = function render() {
    if (this._sizeDirty)
      this._shouldRecalculateSize = true;
    return Surface.prototype.render.apply(this, arguments);
  };
  ContainerSurface.prototype.deploy = function deploy() {
    this._shouldRecalculateSize = true;
    return Surface.prototype.deploy.apply(this, arguments);
  };
  ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {
    var previousSize = this._size ? [this._size[0], this._size[1]] : null;
    var result = Surface.prototype.commit.apply(this, arguments);
    if (this._shouldRecalculateSize || (previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1]))) {
      this.context.setSize();
      this._shouldRecalculateSize = false;
    }
    this.context.update();
    return result;
  };
  module.exports = ContainerSurface;
});

})();
(function() {
var define = $__System.amdDefine;
define("140", ["require", "exports", "module", "155"], function(require, exports, module) {
  var FamousEngine = require('155');
  var _event = 'prerender';
  var getTime = (window.performance && window.performance.now) ? function() {
    return window.performance.now();
  } : function() {
    return Date.now();
  };
  function addTimerFunction(fn) {
    FamousEngine.on(_event, fn);
    return fn;
  }
  function setTimeout(fn, duration) {
    var t = getTime();
    var callback = function() {
      var t2 = getTime();
      if (t2 - t >= duration) {
        fn.apply(this, arguments);
        FamousEngine.removeListener(_event, callback);
      }
    };
    return addTimerFunction(callback);
  }
  function setInterval(fn, duration) {
    var t = getTime();
    var callback = function() {
      var t2 = getTime();
      if (t2 - t >= duration) {
        fn.apply(this, arguments);
        t = getTime();
      }
    };
    return addTimerFunction(callback);
  }
  function after(fn, numTicks) {
    if (numTicks === undefined)
      return undefined;
    var callback = function() {
      numTicks--;
      if (numTicks <= 0) {
        fn.apply(this, arguments);
        clear(callback);
      }
    };
    return addTimerFunction(callback);
  }
  function every(fn, numTicks) {
    numTicks = numTicks || 1;
    var initial = numTicks;
    var callback = function() {
      numTicks--;
      if (numTicks <= 0) {
        fn.apply(this, arguments);
        numTicks = initial;
      }
    };
    return addTimerFunction(callback);
  }
  function clear(fn) {
    FamousEngine.removeListener(_event, fn);
  }
  function debounce(func, wait) {
    var timeout;
    var ctx;
    var timestamp;
    var result;
    var args;
    return function() {
      ctx = this;
      args = arguments;
      timestamp = getTime();
      var fn = function() {
        var last = getTime - timestamp;
        if (last < wait) {
          timeout = setTimeout(fn, wait - last);
        } else {
          timeout = null;
          result = func.apply(ctx, args);
        }
      };
      clear(timeout);
      timeout = setTimeout(fn, wait);
      return result;
    };
  }
  module.exports = {
    setTimeout: setTimeout,
    setInterval: setInterval,
    debounce: debounce,
    after: after,
    every: every,
    clear: clear
  };
});

})();
(function() {
var define = $__System.amdDefine;
define("150", ["require", "exports", "module", "14a"], function(require, exports, module) {
  var EventHandler = require('14a');
  function GenericSync(syncs, options) {
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._syncs = {};
    if (syncs)
      this.addSync(syncs);
    if (options)
      this.setOptions(options);
  }
  GenericSync.DIRECTION_X = 0;
  GenericSync.DIRECTION_Y = 1;
  GenericSync.DIRECTION_Z = 2;
  var registry = {};
  GenericSync.register = function register(syncObject) {
    for (var key in syncObject) {
      if (registry[key]) {
        if (registry[key] !== syncObject[key])
          throw new Error('Conflicting sync classes for key: ' + key);
      } else
        registry[key] = syncObject[key];
    }
  };
  GenericSync.prototype.setOptions = function(options) {
    for (var key in this._syncs) {
      this._syncs[key].setOptions(options);
    }
  };
  GenericSync.prototype.pipeSync = function pipeToSync(key) {
    var sync = this._syncs[key];
    this._eventInput.pipe(sync);
    sync.pipe(this._eventOutput);
  };
  GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {
    var sync = this._syncs[key];
    this._eventInput.unpipe(sync);
    sync.unpipe(this._eventOutput);
  };
  function _addSingleSync(key, options) {
    if (!registry[key])
      return;
    this._syncs[key] = new (registry[key])(options);
    this.pipeSync(key);
  }
  GenericSync.prototype.addSync = function addSync(syncs) {
    if (syncs instanceof Array)
      for (var i = 0; i < syncs.length; i++)
        _addSingleSync.call(this, syncs[i]);
    else if (syncs instanceof Object)
      for (var key in syncs)
        _addSingleSync.call(this, key, syncs[key]);
  };
  module.exports = GenericSync;
});

})();
(function() {
var define = $__System.amdDefine;
define("151", ["require", "exports", "module", "14a", "14b"], function(require, exports, module) {
  var EventHandler = require('14a');
  var OptionsManager = require('14b');
  function MouseSync(options) {
    this.options = Object.create(MouseSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
      this.setOptions(options);
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._eventInput.on('mousedown', _handleStart.bind(this));
    this._eventInput.on('mousemove', _handleMove.bind(this));
    this._eventInput.on('mouseup', _handleEnd.bind(this));
    if (this.options.propogate)
      this._eventInput.on('mouseleave', _handleLeave.bind(this));
    else
      this._eventInput.on('mouseleave', _handleEnd.bind(this));
    if (this.options.clickThreshold) {
      window.addEventListener('click', function(event) {
        if (Math.sqrt(Math.pow(this._displacement[0], 2) + Math.pow(this._displacement[1], 2)) > this.options.clickThreshold) {
          event.stopPropagation();
        }
      }.bind(this), true);
    }
    this._payload = {
      delta: null,
      position: null,
      velocity: null,
      clientX: 0,
      clientY: 0,
      offsetX: 0,
      offsetY: 0
    };
    this._positionHistory = [];
    this._position = null;
    this._prevCoord = undefined;
    this._prevTime = undefined;
    this._down = false;
    this._moved = false;
    this._displacement = [0, 0];
    this._documentActive = false;
  }
  MouseSync.DEFAULT_OPTIONS = {
    clickThreshold: undefined,
    direction: undefined,
    rails: false,
    scale: 1,
    propogate: true,
    velocitySampleLength: 10,
    preventDefault: true
  };
  MouseSync.DIRECTION_X = 0;
  MouseSync.DIRECTION_Y = 1;
  var MINIMUM_TICK_TIME = 8;
  function _handleStart(event) {
    var delta;
    var velocity;
    if (this.options.preventDefault)
      event.preventDefault();
    var x = event.clientX;
    var y = event.clientY;
    this._prevCoord = [x, y];
    this._prevTime = Date.now();
    this._down = true;
    this._move = false;
    if (this.options.direction !== undefined) {
      this._position = 0;
      delta = 0;
      velocity = 0;
    } else {
      this._position = [0, 0];
      delta = [0, 0];
      velocity = [0, 0];
    }
    if (this.options.clickThreshold) {
      this._displacement = [0, 0];
    }
    var payload = this._payload;
    payload.delta = delta;
    payload.position = this._position;
    payload.velocity = velocity;
    payload.clientX = x;
    payload.clientY = y;
    payload.offsetX = event.offsetX;
    payload.offsetY = event.offsetY;
    this._positionHistory.push({
      position: payload.position.slice ? payload.position.slice(0) : payload.position,
      time: this._prevTime
    });
    this._eventOutput.emit('start', payload);
    this._documentActive = false;
  }
  function _handleMove(event) {
    if (!this._prevCoord)
      return;
    var prevCoord = this._prevCoord;
    var prevTime = this._prevTime;
    var x = event.clientX;
    var y = event.clientY;
    var currTime = Date.now();
    var diffX = x - prevCoord[0];
    var diffY = y - prevCoord[1];
    if (this.options.rails) {
      if (Math.abs(diffX) > Math.abs(diffY))
        diffY = 0;
      else
        diffX = 0;
    }
    var diffTime = Math.max(currTime - this._positionHistory[0].time, MINIMUM_TICK_TIME);
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === MouseSync.DIRECTION_X) {
      nextDelta = scale * diffX;
      this._position += nextDelta;
      nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
    } else if (this.options.direction === MouseSync.DIRECTION_Y) {
      nextDelta = scale * diffY;
      this._position += nextDelta;
      nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
    } else {
      nextDelta = [scale * diffX, scale * diffY];
      nextVel = [scale * (this._position[0] - this._positionHistory[0].position[0]) / diffTime, scale * (this._position[1] - this._positionHistory[0].position[1]) / diffTime];
      this._position[0] += nextDelta[0];
      this._position[1] += nextDelta[1];
    }
    if (this.options.clickThreshold !== false) {
      this._displacement[0] += diffX;
      this._displacement[1] += diffY;
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.position = this._position;
    payload.velocity = nextVel;
    payload.clientX = x;
    payload.clientY = y;
    payload.offsetX = event.offsetX;
    payload.offsetY = event.offsetY;
    if (this._positionHistory.length === this.options.velocitySampleLength) {
      this._positionHistory.shift();
    }
    this._positionHistory.push({
      position: payload.position.slice ? payload.position.slice(0) : payload.position,
      time: currTime
    });
    this._eventOutput.emit('update', payload);
    this._prevCoord = [x, y];
    this._prevTime = currTime;
    this._move = true;
  }
  function _handleEnd(event) {
    if (!this._down)
      return;
    this._eventOutput.emit('end', this._payload);
    this._prevCoord = undefined;
    this._prevTime = undefined;
    this._down = false;
    this._move = false;
    this._positionHistory = [];
  }
  function _handleLeave(event) {
    if (!this._down || !this._move)
      return;
    if (!this._documentActive) {
      var boundMove = _handleMove.bind(this);
      var boundEnd = function(event) {
        _handleEnd.call(this, event);
        document.removeEventListener('mousemove', boundMove);
        document.removeEventListener('mouseup', boundEnd);
      }.bind(this, event);
      document.addEventListener('mousemove', boundMove);
      document.addEventListener('mouseup', boundEnd);
      this._documentActive = true;
    }
  }
  MouseSync.prototype.getOptions = function getOptions() {
    return this.options;
  };
  MouseSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
  };
  module.exports = MouseSync;
});

})();
(function() {
var define = $__System.amdDefine;
define("156", ["require", "exports", "module", "14a"], function(require, exports, module) {
  var EventHandler = require('14a');
  var _now = Date.now;
  function _timestampTouch(touch, event, history) {
    return {
      x: touch.clientX,
      y: touch.clientY,
      identifier: touch.identifier,
      origin: event.origin,
      timestamp: _now(),
      count: event.touches.length,
      history: history
    };
  }
  function _handleStart(event) {
    if (event.touches.length > this.touchLimit)
      return;
    this.isTouched = true;
    for (var i = 0; i < event.changedTouches.length; i++) {
      var touch = event.changedTouches[i];
      var data = _timestampTouch(touch, event, null);
      this.eventOutput.emit('trackstart', data);
      if (!this.selective && !this.touchHistory[touch.identifier])
        this.track(data);
    }
  }
  function _handleMove(event) {
    if (event.touches.length > this.touchLimit)
      return;
    for (var i = 0; i < event.changedTouches.length; i++) {
      var touch = event.changedTouches[i];
      var history = this.touchHistory[touch.identifier];
      if (history) {
        var data = _timestampTouch(touch, event, history);
        this.touchHistory[touch.identifier].push(data);
        this.eventOutput.emit('trackmove', data);
      }
    }
  }
  function _handleEnd(event) {
    if (!this.isTouched)
      return;
    for (var i = 0; i < event.changedTouches.length; i++) {
      var touch = event.changedTouches[i];
      var history = this.touchHistory[touch.identifier];
      if (history) {
        var data = _timestampTouch(touch, event, history);
        this.eventOutput.emit('trackend', data);
        delete this.touchHistory[touch.identifier];
      }
    }
    this.isTouched = false;
  }
  function _handleUnpipe() {
    for (var i in this.touchHistory) {
      var history = this.touchHistory[i];
      this.eventOutput.emit('trackend', {
        touch: history[history.length - 1].touch,
        timestamp: Date.now(),
        count: 0,
        history: history
      });
      delete this.touchHistory[i];
    }
  }
  function TouchTracker(options) {
    this.selective = options.selective;
    this.touchLimit = options.touchLimit || 1;
    this.touchHistory = {};
    this.eventInput = new EventHandler();
    this.eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this.eventInput);
    EventHandler.setOutputHandler(this, this.eventOutput);
    this.eventInput.on('touchstart', _handleStart.bind(this));
    this.eventInput.on('touchmove', _handleMove.bind(this));
    this.eventInput.on('touchend', _handleEnd.bind(this));
    this.eventInput.on('touchcancel', _handleEnd.bind(this));
    this.eventInput.on('unpipe', _handleUnpipe.bind(this));
    this.isTouched = false;
  }
  TouchTracker.prototype.track = function track(data) {
    this.touchHistory[data.identifier] = [data];
  };
  module.exports = TouchTracker;
});

})();
(function() {
var define = $__System.amdDefine;
define("152", ["require", "exports", "module", "156", "14a", "14b"], function(require, exports, module) {
  var TouchTracker = require('156');
  var EventHandler = require('14a');
  var OptionsManager = require('14b');
  function TouchSync(options) {
    this.options = Object.create(TouchSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
      this.setOptions(options);
    this._eventOutput = new EventHandler();
    this._touchTracker = new TouchTracker({touchLimit: this.options.touchLimit});
    EventHandler.setOutputHandler(this, this._eventOutput);
    EventHandler.setInputHandler(this, this._touchTracker);
    this._touchTracker.on('trackstart', _handleStart.bind(this));
    this._touchTracker.on('trackmove', _handleMove.bind(this));
    this._touchTracker.on('trackend', _handleEnd.bind(this));
    this._payload = {
      delta: null,
      position: null,
      velocity: null,
      clientX: undefined,
      clientY: undefined,
      count: 0,
      touch: undefined
    };
    this._position = null;
  }
  TouchSync.DEFAULT_OPTIONS = {
    direction: undefined,
    rails: false,
    touchLimit: 1,
    velocitySampleLength: 10,
    scale: 1
  };
  TouchSync.DIRECTION_X = 0;
  TouchSync.DIRECTION_Y = 1;
  var MINIMUM_TICK_TIME = 8;
  function _handleStart(data) {
    var velocity;
    var delta;
    if (this.options.direction !== undefined) {
      this._position = 0;
      velocity = 0;
      delta = 0;
    } else {
      this._position = [0, 0];
      velocity = [0, 0];
      delta = [0, 0];
    }
    var payload = this._payload;
    payload.delta = delta;
    payload.position = this._position;
    payload.velocity = velocity;
    payload.clientX = data.x;
    payload.clientY = data.y;
    payload.count = data.count;
    payload.touch = data.identifier;
    this._eventOutput.emit('start', payload);
  }
  function _handleMove(data) {
    var history = data.history;
    var currHistory = history[history.length - 1];
    var prevHistory = history[history.length - 2];
    var distantHistory = history[history.length - this.options.velocitySampleLength] ? history[history.length - this.options.velocitySampleLength] : history[history.length - 2];
    var distantTime = distantHistory.timestamp;
    var currTime = currHistory.timestamp;
    var diffX = currHistory.x - prevHistory.x;
    var diffY = currHistory.y - prevHistory.y;
    var velDiffX = currHistory.x - distantHistory.x;
    var velDiffY = currHistory.y - distantHistory.y;
    if (this.options.rails) {
      if (Math.abs(diffX) > Math.abs(diffY))
        diffY = 0;
      else
        diffX = 0;
      if (Math.abs(velDiffX) > Math.abs(velDiffY))
        velDiffY = 0;
      else
        velDiffX = 0;
    }
    var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);
    var velX = velDiffX / diffTime;
    var velY = velDiffY / diffTime;
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === TouchSync.DIRECTION_X) {
      nextDelta = scale * diffX;
      nextVel = scale * velX;
      this._position += nextDelta;
    } else if (this.options.direction === TouchSync.DIRECTION_Y) {
      nextDelta = scale * diffY;
      nextVel = scale * velY;
      this._position += nextDelta;
    } else {
      nextDelta = [scale * diffX, scale * diffY];
      nextVel = [scale * velX, scale * velY];
      this._position[0] += nextDelta[0];
      this._position[1] += nextDelta[1];
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.velocity = nextVel;
    payload.position = this._position;
    payload.clientX = data.x;
    payload.clientY = data.y;
    payload.count = data.count;
    payload.touch = data.identifier;
    this._eventOutput.emit('update', payload);
  }
  function _handleEnd(data) {
    this._payload.count = data.count;
    this._eventOutput.emit('end', this._payload);
  }
  TouchSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
  };
  TouchSync.prototype.getOptions = function getOptions() {
    return this.options;
  };
  module.exports = TouchSync;
});

})();
(function() {
var define = $__System.amdDefine;
define("13b", ["require", "exports", "module", "13a", "139", "148"], function(require, exports, module) {
  var Transitionable = require('13a');
  var Transform = require('139');
  var Utility = require('148');
  function TransitionableTransform(transform) {
    this._final = Transform.identity.slice();
    this._finalTranslate = [0, 0, 0];
    this._finalRotate = [0, 0, 0];
    this._finalSkew = [0, 0, 0];
    this._finalScale = [1, 1, 1];
    this.translate = new Transitionable(this._finalTranslate);
    this.rotate = new Transitionable(this._finalRotate);
    this.skew = new Transitionable(this._finalSkew);
    this.scale = new Transitionable(this._finalScale);
    if (transform)
      this.set(transform);
  }
  function _build() {
    return Transform.build({
      translate: this.translate.get(),
      rotate: this.rotate.get(),
      skew: this.skew.get(),
      scale: this.scale.get()
    });
  }
  function _buildFinal() {
    return Transform.build({
      translate: this._finalTranslate,
      rotate: this._finalRotate,
      skew: this._finalSkew,
      scale: this._finalScale
    });
  }
  TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {
    this._finalTranslate = translate;
    this._final = _buildFinal.call(this);
    this.translate.set(translate, transition, callback);
    return this;
  };
  TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {
    this._finalScale = scale;
    this._final = _buildFinal.call(this);
    this.scale.set(scale, transition, callback);
    return this;
  };
  TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {
    this._finalRotate = eulerAngles;
    this._final = _buildFinal.call(this);
    this.rotate.set(eulerAngles, transition, callback);
    return this;
  };
  TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {
    this._finalSkew = skewAngles;
    this._final = _buildFinal.call(this);
    this.skew.set(skewAngles, transition, callback);
    return this;
  };
  TransitionableTransform.prototype.set = function set(transform, transition, callback) {
    var components = Transform.interpret(transform);
    this._finalTranslate = components.translate;
    this._finalRotate = components.rotate;
    this._finalSkew = components.skew;
    this._finalScale = components.scale;
    this._final = transform;
    var _callback = callback ? Utility.after(4, callback) : null;
    this.translate.set(components.translate, transition, _callback);
    this.rotate.set(components.rotate, transition, _callback);
    this.skew.set(components.skew, transition, _callback);
    this.scale.set(components.scale, transition, _callback);
    return this;
  };
  TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {
    this.translate.setDefault(transition);
    this.rotate.setDefault(transition);
    this.skew.setDefault(transition);
    this.scale.setDefault(transition);
  };
  TransitionableTransform.prototype.get = function get() {
    if (this.isActive()) {
      return _build.call(this);
    } else
      return this._final;
  };
  TransitionableTransform.prototype.getFinal = function getFinal() {
    return this._final;
  };
  TransitionableTransform.prototype.isActive = function isActive() {
    return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();
  };
  TransitionableTransform.prototype.halt = function halt() {
    this.translate.halt();
    this.rotate.halt();
    this.skew.halt();
    this.scale.halt();
    this._final = this.get();
    this._finalTranslate = this.translate.get();
    this._finalRotate = this.rotate.get();
    this._finalSkew = this.skew.get();
    this._finalScale = this.scale.get();
    return this;
  };
  module.exports = TransitionableTransform;
});

})();
(function() {
var define = $__System.amdDefine;
define("138", ["require", "exports", "module", "139", "13a", "13b"], function(require, exports, module) {
  var Transform = require('139');
  var Transitionable = require('13a');
  var TransitionableTransform = require('13b');
  function Modifier(options) {
    this._transformGetter = null;
    this._opacityGetter = null;
    this._originGetter = null;
    this._alignGetter = null;
    this._sizeGetter = null;
    this._proportionGetter = null;
    this._legacyStates = {};
    this._output = {
      transform: Transform.identity,
      opacity: 1,
      origin: null,
      align: null,
      size: null,
      proportions: null,
      target: null
    };
    if (options) {
      if (options.transform)
        this.transformFrom(options.transform);
      if (options.opacity !== undefined)
        this.opacityFrom(options.opacity);
      if (options.origin)
        this.originFrom(options.origin);
      if (options.align)
        this.alignFrom(options.align);
      if (options.size)
        this.sizeFrom(options.size);
      if (options.proportions)
        this.proportionsFrom(options.proportions);
    }
  }
  Modifier.prototype.transformFrom = function transformFrom(transform) {
    if (transform instanceof Function)
      this._transformGetter = transform;
    else if (transform instanceof Object && transform.get)
      this._transformGetter = transform.get.bind(transform);
    else {
      this._transformGetter = null;
      this._output.transform = transform;
    }
    return this;
  };
  Modifier.prototype.opacityFrom = function opacityFrom(opacity) {
    if (opacity instanceof Function)
      this._opacityGetter = opacity;
    else if (opacity instanceof Object && opacity.get)
      this._opacityGetter = opacity.get.bind(opacity);
    else {
      this._opacityGetter = null;
      this._output.opacity = opacity;
    }
    return this;
  };
  Modifier.prototype.originFrom = function originFrom(origin) {
    if (origin instanceof Function)
      this._originGetter = origin;
    else if (origin instanceof Object && origin.get)
      this._originGetter = origin.get.bind(origin);
    else {
      this._originGetter = null;
      this._output.origin = origin;
    }
    return this;
  };
  Modifier.prototype.alignFrom = function alignFrom(align) {
    if (align instanceof Function)
      this._alignGetter = align;
    else if (align instanceof Object && align.get)
      this._alignGetter = align.get.bind(align);
    else {
      this._alignGetter = null;
      this._output.align = align;
    }
    return this;
  };
  Modifier.prototype.sizeFrom = function sizeFrom(size) {
    if (size instanceof Function)
      this._sizeGetter = size;
    else if (size instanceof Object && size.get)
      this._sizeGetter = size.get.bind(size);
    else {
      this._sizeGetter = null;
      this._output.size = size;
    }
    return this;
  };
  Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {
    if (proportions instanceof Function)
      this._proportionGetter = proportions;
    else if (proportions instanceof Object && proportions.get)
      this._proportionGetter = proportions.get.bind(proportions);
    else {
      this._proportionGetter = null;
      this._output.proportions = proportions;
    }
    return this;
  };
  Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {
    if (transition || this._legacyStates.transform) {
      if (!this._legacyStates.transform) {
        this._legacyStates.transform = new TransitionableTransform(this._output.transform);
      }
      if (!this._transformGetter)
        this.transformFrom(this._legacyStates.transform);
      this._legacyStates.transform.set(transform, transition, callback);
      return this;
    } else
      return this.transformFrom(transform);
  };
  Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
    if (transition || this._legacyStates.opacity) {
      if (!this._legacyStates.opacity) {
        this._legacyStates.opacity = new Transitionable(this._output.opacity);
      }
      if (!this._opacityGetter)
        this.opacityFrom(this._legacyStates.opacity);
      return this._legacyStates.opacity.set(opacity, transition, callback);
    } else
      return this.opacityFrom(opacity);
  };
  Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
    if (transition || this._legacyStates.origin) {
      if (!this._legacyStates.origin) {
        this._legacyStates.origin = new Transitionable(this._output.origin || [0, 0]);
      }
      if (!this._originGetter)
        this.originFrom(this._legacyStates.origin);
      this._legacyStates.origin.set(origin, transition, callback);
      return this;
    } else
      return this.originFrom(origin);
  };
  Modifier.prototype.setAlign = function setAlign(align, transition, callback) {
    if (transition || this._legacyStates.align) {
      if (!this._legacyStates.align) {
        this._legacyStates.align = new Transitionable(this._output.align || [0, 0]);
      }
      if (!this._alignGetter)
        this.alignFrom(this._legacyStates.align);
      this._legacyStates.align.set(align, transition, callback);
      return this;
    } else
      return this.alignFrom(align);
  };
  Modifier.prototype.setSize = function setSize(size, transition, callback) {
    if (size && (transition || this._legacyStates.size)) {
      if (!this._legacyStates.size) {
        this._legacyStates.size = new Transitionable(this._output.size || [0, 0]);
      }
      if (!this._sizeGetter)
        this.sizeFrom(this._legacyStates.size);
      this._legacyStates.size.set(size, transition, callback);
      return this;
    } else
      return this.sizeFrom(size);
  };
  Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {
    if (proportions && (transition || this._legacyStates.proportions)) {
      if (!this._legacyStates.proportions) {
        this._legacyStates.proportions = new Transitionable(this._output.proportions || [0, 0]);
      }
      if (!this._proportionGetter)
        this.proportionsFrom(this._legacyStates.proportions);
      this._legacyStates.proportions.set(proportions, transition, callback);
      return this;
    } else
      return this.proportionsFrom(proportions);
  };
  Modifier.prototype.halt = function halt() {
    if (this._legacyStates.transform)
      this._legacyStates.transform.halt();
    if (this._legacyStates.opacity)
      this._legacyStates.opacity.halt();
    if (this._legacyStates.origin)
      this._legacyStates.origin.halt();
    if (this._legacyStates.align)
      this._legacyStates.align.halt();
    if (this._legacyStates.size)
      this._legacyStates.size.halt();
    if (this._legacyStates.proportions)
      this._legacyStates.proportions.halt();
    this._transformGetter = null;
    this._opacityGetter = null;
    this._originGetter = null;
    this._alignGetter = null;
    this._sizeGetter = null;
    this._proportionGetter = null;
  };
  Modifier.prototype.getTransform = function getTransform() {
    return this._transformGetter();
  };
  Modifier.prototype.getFinalTransform = function getFinalTransform() {
    return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;
  };
  Modifier.prototype.getOpacity = function getOpacity() {
    return this._opacityGetter();
  };
  Modifier.prototype.getOrigin = function getOrigin() {
    return this._originGetter();
  };
  Modifier.prototype.getAlign = function getAlign() {
    return this._alignGetter();
  };
  Modifier.prototype.getSize = function getSize() {
    return this._sizeGetter ? this._sizeGetter() : this._output.size;
  };
  Modifier.prototype.getProportions = function getProportions() {
    return this._proportionGetter ? this._proportionGetter() : this._output.proportions;
  };
  function _update() {
    if (this._transformGetter)
      this._output.transform = this._transformGetter();
    if (this._opacityGetter)
      this._output.opacity = this._opacityGetter();
    if (this._originGetter)
      this._output.origin = this._originGetter();
    if (this._alignGetter)
      this._output.align = this._alignGetter();
    if (this._sizeGetter)
      this._output.size = this._sizeGetter();
    if (this._proportionGetter)
      this._output.proportions = this._proportionGetter();
  }
  Modifier.prototype.modify = function modify(target) {
    _update.call(this);
    this._output.target = target;
    return this._output;
  };
  module.exports = Modifier;
});

})();
(function() {
var define = $__System.amdDefine;
define("157", ["require", "exports", "module"], function(require, exports, module) {
  function ViewSequence(options) {
    if (!options)
      options = [];
    if (options instanceof Array)
      options = {array: options};
    this._ = null;
    this.index = options.index || 0;
    if (options.array)
      this._ = new (this.constructor.Backing)(options.array);
    else if (options._)
      this._ = options._;
    if (this.index === this._.firstIndex)
      this._.firstNode = this;
    if (this.index === this._.firstIndex + this._.array.length - 1)
      this._.lastNode = this;
    if (options.loop !== undefined)
      this._.loop = options.loop;
    if (options.trackSize !== undefined)
      this._.trackSize = options.trackSize;
    this._previousNode = null;
    this._nextNode = null;
  }
  ViewSequence.Backing = function Backing(array) {
    this.array = array;
    this.firstIndex = 0;
    this.loop = false;
    this.firstNode = null;
    this.lastNode = null;
    this.cumulativeSizes = [[0, 0]];
    this.sizeDirty = true;
    this.trackSize = false;
  };
  ViewSequence.Backing.prototype.getValue = function getValue(i) {
    var _i = i - this.firstIndex;
    if (_i < 0 || _i >= this.array.length)
      return null;
    return this.array[_i];
  };
  ViewSequence.Backing.prototype.setValue = function setValue(i, value) {
    this.array[i - this.firstIndex] = value;
  };
  ViewSequence.Backing.prototype.getSize = function getSize(index) {
    return this.cumulativeSizes[index];
  };
  ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {
    index = index || this.array.length;
    var size = [0, 0];
    for (var i = 0; i < index; i++) {
      var nodeSize = this.array[i].getSize();
      if (!nodeSize)
        return undefined;
      if (size[0] !== undefined) {
        if (nodeSize[0] === undefined)
          size[0] = undefined;
        else
          size[0] += nodeSize[0];
      }
      if (size[1] !== undefined) {
        if (nodeSize[1] === undefined)
          size[1] = undefined;
        else
          size[1] += nodeSize[1];
      }
      this.cumulativeSizes[i + 1] = size.slice();
    }
    this.sizeDirty = false;
    return size;
  };
  ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {
    if (!this.array[0])
      return;
    var i = 0;
    var index = this.firstIndex;
    var indexShiftAmount = insertCount - removeCount;
    var node = this.firstNode;
    while (index < start - 1) {
      node = node.getNext();
      index++;
    }
    var spliceStartNode = node;
    for (i = 0; i < removeCount; i++) {
      node = node.getNext();
      if (node)
        node._previousNode = spliceStartNode;
    }
    var spliceResumeNode = node ? node.getNext() : null;
    spliceStartNode._nextNode = null;
    node = spliceStartNode;
    for (i = 0; i < insertCount; i++)
      node = node.getNext();
    index += insertCount;
    if (node !== spliceResumeNode) {
      node._nextNode = spliceResumeNode;
      if (spliceResumeNode)
        spliceResumeNode._previousNode = node;
    }
    if (spliceResumeNode) {
      node = spliceResumeNode;
      index++;
      while (node && index < this.array.length + this.firstIndex) {
        if (node._nextNode)
          node.index += indexShiftAmount;
        else
          node.index = index;
        node = node.getNext();
        index++;
      }
    }
    if (this.trackSize)
      this.sizeDirty = true;
  };
  ViewSequence.prototype.getPrevious = function getPrevious() {
    var len = this._.array.length;
    if (!len) {
      this._previousNode = null;
    } else if (this.index === this._.firstIndex) {
      if (this._.loop) {
        this._previousNode = this._.lastNode || new (this.constructor)({
          _: this._,
          index: this._.firstIndex + len - 1
        });
        this._previousNode._nextNode = this;
      } else {
        this._previousNode = null;
      }
    } else if (!this._previousNode) {
      this._previousNode = new (this.constructor)({
        _: this._,
        index: this.index - 1
      });
      this._previousNode._nextNode = this;
    }
    return this._previousNode;
  };
  ViewSequence.prototype.getNext = function getNext() {
    var len = this._.array.length;
    if (!len) {
      this._nextNode = null;
    } else if (this.index === this._.firstIndex + len - 1) {
      if (this._.loop) {
        this._nextNode = this._.firstNode || new (this.constructor)({
          _: this._,
          index: this._.firstIndex
        });
        this._nextNode._previousNode = this;
      } else {
        this._nextNode = null;
      }
    } else if (!this._nextNode) {
      this._nextNode = new (this.constructor)({
        _: this._,
        index: this.index + 1
      });
      this._nextNode._previousNode = this;
    }
    return this._nextNode;
  };
  ViewSequence.prototype.indexOf = function indexOf(item) {
    return this._.array.indexOf(item);
  };
  ViewSequence.prototype.getIndex = function getIndex() {
    return this.index;
  };
  ViewSequence.prototype.toString = function toString() {
    return '' + this.index;
  };
  ViewSequence.prototype.unshift = function unshift(value) {
    this._.array.unshift.apply(this._.array, arguments);
    this._.firstIndex -= arguments.length;
    if (this._.trackSize)
      this._.sizeDirty = true;
  };
  ViewSequence.prototype.push = function push(value) {
    this._.array.push.apply(this._.array, arguments);
    if (this._.trackSize)
      this._.sizeDirty = true;
  };
  ViewSequence.prototype.splice = function splice(index, howMany) {
    var values = Array.prototype.slice.call(arguments, 2);
    this._.array.splice.apply(this._.array, [index - this._.firstIndex, howMany].concat(values));
    this._.reindex(index, howMany, values.length);
  };
  ViewSequence.prototype.swap = function swap(other) {
    var otherValue = other.get();
    var myValue = this.get();
    this._.setValue(this.index, otherValue);
    this._.setValue(other.index, myValue);
    var myPrevious = this._previousNode;
    var myNext = this._nextNode;
    var myIndex = this.index;
    var otherPrevious = other._previousNode;
    var otherNext = other._nextNode;
    var otherIndex = other.index;
    this.index = otherIndex;
    this._previousNode = (otherPrevious === this) ? other : otherPrevious;
    if (this._previousNode)
      this._previousNode._nextNode = this;
    this._nextNode = (otherNext === this) ? other : otherNext;
    if (this._nextNode)
      this._nextNode._previousNode = this;
    other.index = myIndex;
    other._previousNode = (myPrevious === other) ? this : myPrevious;
    if (other._previousNode)
      other._previousNode._nextNode = other;
    other._nextNode = (myNext === other) ? this : myNext;
    if (other._nextNode)
      other._nextNode._previousNode = other;
    if (this.index === this._.firstIndex)
      this._.firstNode = this;
    else if (this.index === this._.firstIndex + this._.array.length - 1)
      this._.lastNode = this;
    if (other.index === this._.firstIndex)
      this._.firstNode = other;
    else if (other.index === this._.firstIndex + this._.array.length - 1)
      this._.lastNode = other;
    if (this._.trackSize)
      this._.sizeDirty = true;
  };
  ViewSequence.prototype.get = function get() {
    return this._.getValue(this.index);
  };
  ViewSequence.prototype.getSize = function getSize() {
    var target = this.get();
    return target ? target.getSize() : null;
  };
  ViewSequence.prototype.render = function render() {
    if (this._.trackSize && this._.sizeDirty)
      this._.calculateSize();
    var target = this.get();
    return target ? target.render.apply(target, arguments) : null;
  };
  module.exports = ViewSequence;
});

})();
(function() {
var define = $__System.amdDefine;
define("158", ["require", "exports", "module", "149"], function(require, exports, module) {
  var LayoutUtility = require('149');
  function LayoutDockHelper(context, options) {
    var size = context.size;
    this._size = size;
    this._context = context;
    this._options = options;
    this._data = {z: (options && options.translateZ) ? options.translateZ : 0};
    if (options && options.margins) {
      var margins = LayoutUtility.normalizeMargins(options.margins);
      this._data.left = margins[3];
      this._data.top = margins[0];
      this._data.right = size[0] - margins[1];
      this._data.bottom = size[1] - margins[2];
    } else {
      this._data.left = 0;
      this._data.top = 0;
      this._data.right = size[0];
      this._data.bottom = size[1];
    }
  }
  LayoutDockHelper.prototype.parse = function(data) {
    for (var i = 0; i < data.length; i++) {
      var rule = data[i];
      var value = (rule.length >= 3) ? rule[2] : undefined;
      if (rule[0] === 'top') {
        this.top(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);
      } else if (rule[0] === 'left') {
        this.left(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);
      } else if (rule[0] === 'right') {
        this.right(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);
      } else if (rule[0] === 'bottom') {
        this.bottom(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);
      } else if (rule[0] === 'fill') {
        this.fill(rule[1], (rule.length >= 3) ? rule[2] : undefined);
      } else if (rule[0] === 'margins') {
        this.margins(rule[1]);
      }
    }
  };
  LayoutDockHelper.prototype.top = function(node, height, z) {
    if (height instanceof Array) {
      height = height[1];
    }
    if (height === undefined) {
      var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
      height = size[1];
    }
    this._context.set(node, {
      size: [this._data.right - this._data.left, height],
      origin: [0, 0],
      align: [0, 0],
      translate: [this._data.left, this._data.top, (z === undefined) ? this._data.z : z]
    });
    this._data.top += height;
    return this;
  };
  LayoutDockHelper.prototype.left = function(node, width, z) {
    if (width instanceof Array) {
      width = width[0];
    }
    if (width === undefined) {
      var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
      width = size[0];
    }
    this._context.set(node, {
      size: [width, this._data.bottom - this._data.top],
      origin: [0, 0],
      align: [0, 0],
      translate: [this._data.left, this._data.top, (z === undefined) ? this._data.z : z]
    });
    this._data.left += width;
    return this;
  };
  LayoutDockHelper.prototype.bottom = function(node, height, z) {
    if (height instanceof Array) {
      height = height[1];
    }
    if (height === undefined) {
      var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
      height = size[1];
    }
    this._context.set(node, {
      size: [this._data.right - this._data.left, height],
      origin: [0, 1],
      align: [0, 1],
      translate: [this._data.left, -(this._size[1] - this._data.bottom), (z === undefined) ? this._data.z : z]
    });
    this._data.bottom -= height;
    return this;
  };
  LayoutDockHelper.prototype.right = function(node, width, z) {
    if (width instanceof Array) {
      width = width[0];
    }
    if (node) {
      if (width === undefined) {
        var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
        width = size[0];
      }
      this._context.set(node, {
        size: [width, this._data.bottom - this._data.top],
        origin: [1, 0],
        align: [1, 0],
        translate: [-(this._size[0] - this._data.right), this._data.top, (z === undefined) ? this._data.z : z]
      });
    }
    if (width) {
      this._data.right -= width;
    }
    return this;
  };
  LayoutDockHelper.prototype.fill = function(node, z) {
    this._context.set(node, {
      size: [this._data.right - this._data.left, this._data.bottom - this._data.top],
      translate: [this._data.left, this._data.top, (z === undefined) ? this._data.z : z]
    });
    return this;
  };
  LayoutDockHelper.prototype.margins = function(margins) {
    margins = LayoutUtility.normalizeMargins(margins);
    this._data.left += margins[3];
    this._data.top += margins[0];
    this._data.right -= margins[1];
    this._data.bottom -= margins[2];
    return this;
  };
  LayoutDockHelper.prototype.get = function() {
    return this._data;
  };
  LayoutUtility.registerHelper('dock', LayoutDockHelper);
  module.exports = LayoutDockHelper;
});

})();
(function() {
var define = $__System.amdDefine;
define("13e", ["require", "exports", "module", "148", "159", "157", "15a", "14b", "14a", "149", "15b", "15c", "15d", "139", "158"], function(require, exports, module) {
  var Utility = require('148');
  var Entity = require('159');
  var ViewSequence = require('157');
  var LinkedListViewSequence = require('15a');
  var OptionsManager = require('14b');
  var EventHandler = require('14a');
  var LayoutUtility = require('149');
  var LayoutNodeManager = require('15b');
  var LayoutNode = require('15c');
  var FlowLayoutNode = require('15d');
  var Transform = require('139');
  require('158');
  function LayoutController(options, nodeManager) {
    this.id = Entity.register(this);
    this._isDirty = true;
    this._contextSizeCache = [0, 0];
    this._commitOutput = {};
    this._dirtyRenderables = [];
    this._cleanupRegistration = {
      commit: function() {
        return undefined;
      },
      cleanup: function(context) {
        this.cleanup(context);
      }.bind(this)
    };
    this._cleanupRegistration.target = Entity.register(this._cleanupRegistration);
    this._cleanupRegistration.render = function() {
      return this.target;
    }.bind(this._cleanupRegistration);
    this._eventInput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._layout = {options: Object.create({})};
    this._layout.optionsManager = new OptionsManager(this._layout.options);
    this._layout.optionsManager.on('change', function() {
      this._isDirty = true;
    }.bind(this));
    this.options = Object.create(LayoutController.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (nodeManager) {
      this._nodes = nodeManager;
    } else if (options && options.flow) {
      this._nodes = new LayoutNodeManager(FlowLayoutNode, _initFlowLayoutNode.bind(this), options.partialFlow);
    } else {
      this._nodes = new LayoutNodeManager(LayoutNode, null, false);
    }
    this.setDirection(undefined);
    if (options) {
      this.setOptions(options);
    }
  }
  LayoutController.DEFAULT_OPTIONS = {
    flow: false,
    partialFlow: false,
    flowOptions: {
      reflowOnResize: true,
      properties: {
        opacity: true,
        align: true,
        origin: true,
        size: true,
        translate: true,
        skew: true,
        rotate: true,
        scale: true
      },
      spring: {
        dampingRatio: 0.8,
        period: 300
      }
    }
  };
  function _initFlowLayoutNode(node, spec) {
    if (!spec && this.options.flowOptions.insertSpec) {
      node.setSpec(this.options.flowOptions.insertSpec);
    }
  }
  LayoutController.prototype.setOptions = function(options) {
    if ((options.alignment !== undefined) && (options.alignment !== this.options.alignment)) {
      this._isDirty = true;
    }
    this._optionsManager.setOptions(options);
    if (options.nodeSpring) {
      console.warn('nodeSpring options have been moved inside `flowOptions`. Use `flowOptions.spring` instead.');
      this._optionsManager.setOptions({flowOptions: {spring: options.nodeSpring}});
      this._nodes.setNodeOptions(this.options.flowOptions);
    }
    if (options.reflowOnResize !== undefined) {
      console.warn('reflowOnResize options have been moved inside `flowOptions`. Use `flowOptions.reflowOnResize` instead.');
      this._optionsManager.setOptions({flowOptions: {reflowOnResize: options.reflowOnResize}});
      this._nodes.setNodeOptions(this.options.flowOptions);
    }
    if (options.insertSpec) {
      console.warn('insertSpec options have been moved inside `flowOptions`. Use `flowOptions.insertSpec` instead.');
      this._optionsManager.setOptions({flowOptions: {insertSpec: options.insertSpec}});
      this._nodes.setNodeOptions(this.options.flowOptions);
    }
    if (options.removeSpec) {
      console.warn('removeSpec options have been moved inside `flowOptions`. Use `flowOptions.removeSpec` instead.');
      this._optionsManager.setOptions({flowOptions: {removeSpec: options.removeSpec}});
      this._nodes.setNodeOptions(this.options.flowOptions);
    }
    if (options.dataSource) {
      this.setDataSource(options.dataSource);
    }
    if (options.layout) {
      this.setLayout(options.layout, options.layoutOptions);
    } else if (options.layoutOptions) {
      this.setLayoutOptions(options.layoutOptions);
    }
    if (options.direction !== undefined) {
      this.setDirection(options.direction);
    }
    if (options.flowOptions && this.options.flow) {
      this._nodes.setNodeOptions(this.options.flowOptions);
    }
    if (options.preallocateNodes) {
      this._nodes.preallocateNodes(options.preallocateNodes.count || 0, options.preallocateNodes.spec);
    }
    return this;
  };
  function _forEachRenderable(callback) {
    if (this._nodesById) {
      for (var key in this._nodesById) {
        callback(this._nodesById[key]);
      }
    } else {
      var sequence = this._viewSequence.getHead();
      while (sequence) {
        var renderable = sequence.get();
        if (renderable) {
          callback(renderable);
        }
        sequence = sequence.getNext();
      }
    }
  }
  LayoutController.prototype.setDataSource = function(dataSource) {
    this._dataSource = dataSource;
    this._nodesById = undefined;
    if (dataSource instanceof ViewSequence) {
      console.warn('The stock famo.us ViewSequence is no longer supported as it is too buggy');
      console.warn('It has been automatically converted to the safe LinkedListViewSequence.');
      console.warn('Please refactor your code by using LinkedListViewSequence.');
      this._dataSource = new LinkedListViewSequence(dataSource._.array);
      this._viewSequence = this._dataSource;
    } else if (dataSource instanceof Array) {
      this._viewSequence = new LinkedListViewSequence(dataSource);
      this._dataSource = this._viewSequence;
    } else if (dataSource instanceof LinkedListViewSequence) {
      this._viewSequence = dataSource;
    } else if (dataSource.getNext) {
      this._viewSequence = dataSource;
    } else if (dataSource instanceof Object) {
      this._nodesById = dataSource;
    }
    if (this.options.autoPipeEvents) {
      if (this._dataSource.pipe) {
        this._dataSource.pipe(this);
        this._dataSource.pipe(this._eventOutput);
      } else {
        _forEachRenderable.call(this, function(renderable) {
          if (renderable && renderable.pipe) {
            renderable.pipe(this);
            renderable.pipe(this._eventOutput);
          }
        }.bind(this));
      }
    }
    this._isDirty = true;
    return this;
  };
  LayoutController.prototype.getDataSource = function() {
    return this._dataSource;
  };
  LayoutController.prototype.setLayout = function(layout, options) {
    if (layout instanceof Function) {
      this._layout._function = layout;
      this._layout.capabilities = layout.Capabilities;
      this._layout.literal = undefined;
    } else if (layout instanceof Object) {
      this._layout.literal = layout;
      this._layout.capabilities = undefined;
      var helperName = Object.keys(layout)[0];
      var Helper = LayoutUtility.getRegisteredHelper(helperName);
      this._layout._function = Helper ? function(context, options2) {
        var helper = new Helper(context, options2);
        helper.parse(layout[helperName]);
      } : undefined;
    } else {
      this._layout._function = undefined;
      this._layout.capabilities = undefined;
      this._layout.literal = undefined;
    }
    if (options) {
      this.setLayoutOptions(options);
    }
    this.setDirection(this._configuredDirection);
    this._isDirty = true;
    return this;
  };
  LayoutController.prototype.getLayout = function() {
    return this._layout.literal || this._layout._function;
  };
  LayoutController.prototype.setLayoutOptions = function(options) {
    this._layout.optionsManager.setOptions(options);
    return this;
  };
  LayoutController.prototype.getLayoutOptions = function() {
    return this._layout.options;
  };
  function _getActualDirection(direction) {
    if (this._layout.capabilities && this._layout.capabilities.direction) {
      if (Array.isArray(this._layout.capabilities.direction)) {
        for (var i = 0; i < this._layout.capabilities.direction.length; i++) {
          if (this._layout.capabilities.direction[i] === direction) {
            return direction;
          }
        }
        return this._layout.capabilities.direction[0];
      } else {
        return this._layout.capabilities.direction;
      }
    }
    return (direction === undefined) ? Utility.Direction.Y : direction;
  }
  LayoutController.prototype.setDirection = function(direction) {
    this._configuredDirection = direction;
    var newDirection = _getActualDirection.call(this, direction);
    if (newDirection !== this._direction) {
      this._direction = newDirection;
      this._isDirty = true;
    }
  };
  LayoutController.prototype.getDirection = function(actual) {
    return actual ? this._direction : this._configuredDirection;
  };
  LayoutController.prototype.getSpec = function(node, normalize, endState) {
    if (!node) {
      return undefined;
    }
    if ((node instanceof String) || (typeof node === 'string')) {
      if (!this._nodesById) {
        return undefined;
      }
      node = this._nodesById[node];
      if (!node) {
        return undefined;
      }
      if (node instanceof Array) {
        return node;
      }
    }
    if (this._specs) {
      for (var i = 0; i < this._specs.length; i++) {
        var spec = this._specs[i];
        if (spec.renderNode === node) {
          if (endState && spec.endState) {
            spec = spec.endState;
          }
          if (normalize && spec.transform && spec.size && (spec.align || spec.origin)) {
            var transform = spec.transform;
            if (spec.align && (spec.align[0] || spec.align[1])) {
              transform = Transform.thenMove(transform, [spec.align[0] * this._contextSizeCache[0], spec.align[1] * this._contextSizeCache[1], 0]);
            }
            if (spec.origin && (spec.origin[0] || spec.origin[1])) {
              transform = Transform.moveThen([-spec.origin[0] * spec.size[0], -spec.origin[1] * spec.size[1], 0], transform);
            }
            return {
              opacity: spec.opacity,
              size: spec.size,
              transform: transform
            };
          }
          return spec;
        }
      }
    }
    return undefined;
  };
  LayoutController.prototype.reflowLayout = function() {
    this._isDirty = true;
    return this;
  };
  LayoutController.prototype.resetFlowState = function() {
    if (this.options.flow) {
      this._resetFlowState = true;
    }
    return this;
  };
  LayoutController.prototype.insert = function(indexOrId, renderable, insertSpec) {
    insertSpec = insertSpec || this.options.flowOptions.insertSpec;
    if ((indexOrId instanceof String) || (typeof indexOrId === 'string')) {
      if (this._dataSource === undefined) {
        this._dataSource = {};
        this._nodesById = this._dataSource;
      }
      if (this._nodesById[indexOrId] === renderable) {
        return this;
      }
      this._nodesById[indexOrId] = renderable;
    } else {
      if (this._dataSource === undefined) {
        this._dataSource = new LinkedListViewSequence();
        this._viewSequence = this._dataSource;
      }
      this._viewSequence.insert(indexOrId, renderable);
    }
    if (insertSpec) {
      var newNode = this._nodes.createNode(renderable, insertSpec);
      newNode.executeInsertSpec();
      this._nodes.insertNode(newNode);
    }
    if (this.options.autoPipeEvents && renderable && renderable.pipe) {
      renderable.pipe(this);
      renderable.pipe(this._eventOutput);
    }
    this._isDirty = true;
    this._dirtyRenderables.push(renderable);
    return this;
  };
  LayoutController.prototype.push = function(renderable, insertSpec) {
    return this.insert(-1, renderable, insertSpec);
  };
  function _getViewSequenceAtIndex(index, startViewSequence) {
    if (this._viewSequence.getAtIndex) {
      return this._viewSequence.getAtIndex(index, startViewSequence);
    }
    var viewSequence = startViewSequence || this._viewSequence;
    var i = viewSequence ? viewSequence.getIndex() : index;
    if (index > i) {
      while (viewSequence) {
        viewSequence = viewSequence.getNext();
        if (!viewSequence) {
          return undefined;
        }
        i = viewSequence.getIndex();
        if (i === index) {
          return viewSequence;
        } else if (index < i) {
          return undefined;
        }
      }
    } else if (index < i) {
      while (viewSequence) {
        viewSequence = viewSequence.getPrevious();
        if (!viewSequence) {
          return undefined;
        }
        i = viewSequence.getIndex();
        if (i === index) {
          return viewSequence;
        } else if (index > i) {
          return undefined;
        }
      }
    }
    return viewSequence;
  }
  LayoutController.prototype.get = function(indexOrId) {
    if (this._nodesById || (indexOrId instanceof String) || (typeof indexOrId === 'string')) {
      return this._nodesById ? this._nodesById[indexOrId] : undefined;
    }
    var viewSequence = _getViewSequenceAtIndex.call(this, indexOrId);
    return viewSequence ? viewSequence.get() : undefined;
  };
  LayoutController.prototype.swap = function(index, index2) {
    this._viewSequence.swap(index, index2);
    this._isDirty = true;
    return this;
  };
  LayoutController.prototype.replace = function(indexOrId, renderable, noAnimation, sequence) {
    var oldRenderable;
    if (this._nodesById || (indexOrId instanceof String) || (typeof indexOrId === 'string')) {
      oldRenderable = this._nodesById[indexOrId];
      if (oldRenderable !== renderable) {
        if (noAnimation && oldRenderable) {
          var node = this._nodes.getNodeByRenderNode(oldRenderable);
          if (node) {
            node.setRenderNode(renderable);
          }
        }
        this._nodesById[indexOrId] = renderable;
        this._isDirty = true;
      }
      return oldRenderable;
    }
    if (!sequence) {
      sequence = this._viewSequence.findByIndex(indexOrId);
    }
    if (!sequence) {
      throw 'Invalid index (' + indexOrId + ') specified to .replace';
    }
    oldRenderable = sequence.get();
    sequence.set(renderable);
    if (oldRenderable !== renderable) {
      if (noAnimation && oldRenderable) {
        var node = this._nodes.getNodeByRenderNode(oldRenderable);
        if (node) {
          node.setRenderNode(renderable);
        }
      } else {
        this._isDirty = true;
      }
    }
    return oldRenderable;
  };
  LayoutController.prototype.move = function(index, newIndex) {
    var sequence = this._viewSequence.findByIndex(index);
    if (!sequence) {
      throw 'Invalid index (' + index + ') specified to .move';
    }
    this._viewSequence = this._viewSequence.remove(sequence);
    this._viewSequence.insert(newIndex, sequence.get());
    this._isDirty = true;
    return this;
  };
  LayoutController.prototype.remove = function(indexOrId, removeSpec) {
    var renderNode;
    if (this._nodesById || (indexOrId instanceof String) || (typeof indexOrId === 'string')) {
      if ((indexOrId instanceof String) || (typeof indexOrId === 'string')) {
        renderNode = this._nodesById[indexOrId];
        if (renderNode) {
          delete this._nodesById[indexOrId];
        }
      } else {
        for (var key in this._nodesById) {
          if (this._nodesById[key] === indexOrId) {
            delete this._nodesById[key];
            renderNode = indexOrId;
            break;
          }
        }
      }
    } else {
      var sequence;
      if ((indexOrId instanceof Number) || (typeof indexOrId === 'number')) {
        sequence = this._viewSequence.findByIndex(indexOrId);
      } else {
        sequence = this._viewSequence.findByValue(indexOrId);
      }
      if (sequence) {
        renderNode = sequence.get();
        this._viewSequence = this._viewSequence.remove(sequence);
      }
    }
    if (renderNode && removeSpec) {
      var node = this._nodes.getNodeByRenderNode(renderNode);
      if (node) {
        node.remove(removeSpec || this.options.flowOptions.removeSpec);
      }
    }
    if (renderNode) {
      this._isDirty = true;
    }
    return renderNode;
  };
  LayoutController.prototype.removeAll = function(removeSpec) {
    if (this._nodesById) {
      var dirty = false;
      for (var key in this._nodesById) {
        delete this._nodesById[key];
        dirty = true;
      }
      if (dirty) {
        this._isDirty = true;
      }
    } else if (this._viewSequence) {
      this._viewSequence = this._viewSequence.clear();
    }
    if (removeSpec) {
      var node = this._nodes.getStartEnumNode();
      while (node) {
        node.remove(removeSpec || this.options.flowOptions.removeSpec);
        node = node._next;
      }
    }
    return this;
  };
  LayoutController.prototype.getSize = function() {
    return this._size || this.options.size;
  };
  LayoutController.prototype.render = function render() {
    return this.id;
  };
  LayoutController.prototype.commit = function commit(context) {
    var transform = context.transform;
    var origin = context.origin;
    var size = context.size;
    var opacity = context.opacity;
    if (this._resetFlowState) {
      this._resetFlowState = false;
      this._isDirty = true;
      this._nodes.removeAll();
    }
    this._isDisplaying = true;
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || this._isDirty || this._nodes._trueSizeRequested || this.options.alwaysLayout) {
      var eventData = {
        target: this,
        oldSize: this._contextSizeCache,
        size: size,
        dirty: this._isDirty,
        trueSizeRequested: this._nodes._trueSizeRequested
      };
      this._eventOutput.emit('layoutstart', eventData);
      if (this.options.flow) {
        var lock = false;
        if (!this.options.flowOptions.reflowOnResize) {
          if (!this._isDirty && ((size[0] !== this._contextSizeCache[0]) || (size[1] !== this._contextSizeCache[1]))) {
            lock = undefined;
          } else {
            lock = true;
          }
        }
        if (lock !== undefined) {
          var node = this._nodes.getStartEnumNode();
          while (node) {
            if (node.releaseLock) {
              node.releaseLock(lock);
            }
            node = node._next;
          }
        }
      }
      this._contextSizeCache[0] = size[0];
      this._contextSizeCache[1] = size[1];
      this._isDirty = false;
      var scrollEnd;
      if (this.options.size && (this.options.size[this._direction] === true)) {
        scrollEnd = 1000000;
      }
      var layoutContext = this._nodes.prepareForLayout(this._viewSequence, this._nodesById, {
        size: size,
        direction: this._direction,
        scrollEnd: scrollEnd
      });
      if (this._layout._function) {
        this._layout._function(layoutContext, this._layout.options);
      }
      this._nodes.removeNonInvalidatedNodes(this.options.flowOptions.removeSpec);
      this._nodes.removeVirtualViewSequenceNodes();
      if (scrollEnd) {
        scrollEnd = 0;
        node = this._nodes.getStartEnumNode();
        while (node) {
          if (node._invalidated && node.scrollLength) {
            scrollEnd += node.scrollLength;
          }
          node = node._next;
        }
        this._size = this._size || [0, 0];
        this._size[0] = this.options.size[0];
        this._size[1] = this.options.size[1];
        this._size[this._direction] = scrollEnd;
      }
      var result = this._nodes.buildSpecAndDestroyUnrenderedNodes();
      this._specs = result.specs;
      this._commitOutput.target = result.specs;
      this._eventOutput.emit('layoutend', eventData);
      this._eventOutput.emit('reflow', {target: this});
      this._lastResultUntouched = false;
    } else if (this.options.flow && !this._lastResultUntouched) {
      result = this._nodes.buildSpecAndDestroyUnrenderedNodes();
      this._specs = result.specs;
      this._commitOutput.target = result.specs;
      if (result.modified) {
        this._eventOutput.emit('reflow', {target: this});
      }
      this._lastResultUntouched = !result.modified;
    }
    var target = this._commitOutput.target;
    for (var i = 0,
        j = target.length; i < j; i++) {
      if (target[i].renderNode) {
        target[i].target = target[i].renderNode.render();
      }
    }
    if (!target.length || (target[target.length - 1] !== this._cleanupRegistration)) {
      target.push(this._cleanupRegistration);
    }
    if (origin && ((origin[0] !== 0) || (origin[1] !== 0))) {
      transform = Transform.moveThen([-size[0] * origin[0], -size[1] * origin[1], 0], transform);
    }
    this._commitOutput.size = size;
    this._commitOutput.opacity = opacity;
    this._commitOutput.transform = transform;
    return this._commitOutput;
  };
  LayoutController.prototype.cleanup = function(context) {
    if (this.options.flow) {
      this._resetFlowState = true;
    }
    this._isDisplaying = false;
  };
  LayoutController.prototype.isDisplaying = function() {
    return this._isDisplaying;
  };
  LayoutController.prototype.once = function(event, handler, context) {
    return this.on(event, function onceWrapper() {
      handler.apply(context, arguments);
      this.removeListener(event, onceWrapper);
    }, this);
  };
  module.exports = LayoutController;
});

})();
(function() {
var define = $__System.amdDefine;
define("15e", ["require", "exports", "module"], function(require, exports, module) {
  function LayoutContext(methods) {
    for (var n in methods) {
      this[n] = methods[n];
    }
  }
  LayoutContext.prototype.size = undefined;
  LayoutContext.prototype.direction = undefined;
  LayoutContext.prototype.scrollOffset = undefined;
  LayoutContext.prototype.scrollStart = undefined;
  LayoutContext.prototype.scrollEnd = undefined;
  LayoutContext.prototype.next = function() {};
  LayoutContext.prototype.prev = function() {};
  LayoutContext.prototype.get = function(node) {};
  LayoutContext.prototype.set = function(node, set) {};
  LayoutContext.prototype.resolveSize = function(node) {};
  module.exports = LayoutContext;
});

})();
$__System.registerDynamic('15f', [], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var map, iterator, result;
		if (typeof Map !== 'function') return false;
		try {
			// WebKit doesn't support arguments and crashes
			map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
		} catch (e) {
			return false;
		}
		if (String(map) !== '[object Map]') return false;
		if (map.size !== 3) return false;
		if (typeof map.clear !== 'function') return false;
		if (typeof map.delete !== 'function') return false;
		if (typeof map.entries !== 'function') return false;
		if (typeof map.forEach !== 'function') return false;
		if (typeof map.get !== 'function') return false;
		if (typeof map.has !== 'function') return false;
		if (typeof map.keys !== 'function') return false;
		if (typeof map.set !== 'function') return false;
		if (typeof map.values !== 'function') return false;

		iterator = map.entries();
		result = iterator.next();
		if (result.done !== false) return false;
		if (!result.value) return false;
		if (result.value[0] !== 'raz') return false;
		if (result.value[1] !== 'one') return false;

		return true;
	};
	return module.exports;
});
$__System.registerDynamic('160', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var sign = Math.sign;
		if (typeof sign !== 'function') return false;
		return sign(10) === 1 && sign(-20) === -1;
	};
	return module.exports;
});
$__System.registerDynamic('161', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function (value) {
		value = Number(value);
		if (isNaN(value) || value === 0) return value;
		return value > 0 ? 1 : -1;
	};
	return module.exports;
});
$__System.registerDynamic('162', ['160', '161', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('160')() ? Math.sign : $__require('161');
	return module.exports;
});
$__System.registerDynamic('163', ['162', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var sign = $__require('162'),
	    abs = Math.abs,
	    floor = Math.floor;

	module.exports = function (value) {
		if (isNaN(value)) return 0;
		value = Number(value);
		if (value === 0 || !isFinite(value)) return value;
		return sign(value) * floor(abs(value));
	};
	return module.exports;
});
$__System.registerDynamic('164', ['163', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toInteger = $__require('163'),
      max = Math.max;

  module.exports = function (value) {
    return max(0, toInteger(value));
  };
  return module.exports;
});
$__System.registerDynamic('165', ['164', '166', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var toPosInt = $__require('164'),
	    value = $__require('166'),
	    indexOf = Array.prototype.indexOf,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    abs = Math.abs,
	    floor = Math.floor;

	module.exports = function (searchElement /*, fromIndex*/) {
		var i, l, fromIndex, val;
		if (searchElement === searchElement) {
			//jslint: ignore
			return indexOf.apply(this, arguments);
		}

		l = toPosInt(value(this).length);
		fromIndex = arguments[1];
		if (isNaN(fromIndex)) fromIndex = 0;else if (fromIndex >= 0) fromIndex = floor(fromIndex);else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

		for (i = fromIndex; i < l; ++i) {
			if (hasOwnProperty.call(this, i)) {
				val = this[i];
				if (val !== val) return i; //jslint: ignore
			}
		}
		return -1;
	};
	return module.exports;
});
$__System.registerDynamic('167', ['168', '169'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var d = $__require('168'),
	    callable = $__require('169'),
	    apply = Function.prototype.apply,
	    call = Function.prototype.call,
	    create = Object.create,
	    defineProperty = Object.defineProperty,
	    defineProperties = Object.defineProperties,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    descriptor = { configurable: true, enumerable: false, writable: true },
	    on,
	    once,
	    off,
	    emit,
	    methods,
	    descriptors,
	    base;

	on = function (type, listener) {
		var data;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) {
			data = descriptor.value = create(null);
			defineProperty(this, '__ee__', descriptor);
			descriptor.value = null;
		} else {
			data = this.__ee__;
		}
		if (!data[type]) data[type] = listener;else if (typeof data[type] === 'object') data[type].push(listener);else data[type] = [data[type], listener];

		return this;
	};

	once = function (type, listener) {
		var once, self;

		callable(listener);
		self = this;
		on.call(this, type, once = function () {
			off.call(self, type, once);
			apply.call(listener, this, arguments);
		});

		once.__eeOnceListener__ = listener;
		return this;
	};

	off = function (type, listener) {
		var data, listeners, candidate, i;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) return this;
		data = this.__ee__;
		if (!data[type]) return this;
		listeners = data[type];

		if (typeof listeners === 'object') {
			for (i = 0; candidate = listeners[i]; ++i) {
				if (candidate === listener || candidate.__eeOnceListener__ === listener) {
					if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];else listeners.splice(i, 1);
				}
			}
		} else {
			if (listeners === listener || listeners.__eeOnceListener__ === listener) {
				delete data[type];
			}
		}

		return this;
	};

	emit = function (type) {
		var i, l, listener, listeners, args;

		if (!hasOwnProperty.call(this, '__ee__')) return;
		listeners = this.__ee__[type];
		if (!listeners) return;

		if (typeof listeners === 'object') {
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

			listeners = listeners.slice();
			for (i = 0; listener = listeners[i]; ++i) {
				apply.call(listener, this, args);
			}
		} else {
			switch (arguments.length) {
				case 1:
					call.call(listeners, this);
					break;
				case 2:
					call.call(listeners, this, arguments[1]);
					break;
				case 3:
					call.call(listeners, this, arguments[1], arguments[2]);
					break;
				default:
					l = arguments.length;
					args = new Array(l - 1);
					for (i = 1; i < l; ++i) {
						args[i - 1] = arguments[i];
					}
					apply.call(listeners, this, args);
			}
		}
	};

	methods = {
		on: on,
		once: once,
		off: off,
		emit: emit
	};

	descriptors = {
		on: d(on),
		once: d(once),
		off: d(off),
		emit: d(emit)
	};

	base = defineProperties({}, descriptors);

	module.exports = exports = function (o) {
		return o == null ? create(base) : defineProperties(Object(o), descriptors);
	};
	exports.methods = methods;
	return module.exports;
});
$__System.registerDynamic('16a', ['16c', '16d', '168', '16b'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('16c'),
	    contains = $__require('16d'),
	    d = $__require('168'),
	    Iterator = $__require('16b'),
	    defineProperty = Object.defineProperty,
	    ArrayIterator;

	ArrayIterator = module.exports = function (arr, kind) {
		if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
		Iterator.call(this, arr);
		if (!kind) kind = 'value';else if (contains.call(kind, 'key+value')) kind = 'key+value';else if (contains.call(kind, 'key')) kind = 'key';else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

	ArrayIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(ArrayIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
			return i;
		}),
		toString: d(function () {
			return '[object Array Iterator]';
		})
	});
	return module.exports;
});
$__System.registerDynamic('16e', ['16c', '168', '16b'], true, function ($__require, exports, module) {
	// Thanks @mathiasbynens
	// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols

	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('16c'),
	    d = $__require('168'),
	    Iterator = $__require('16b'),
	    defineProperty = Object.defineProperty,
	    StringIterator;

	StringIterator = module.exports = function (str) {
		if (!(this instanceof StringIterator)) return new StringIterator(str);
		str = String(str);
		Iterator.call(this, str);
		defineProperty(this, '__length__', d('', str.length));
	};
	if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

	StringIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(StringIterator),
		_next: d(function () {
			if (!this.__list__) return;
			if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
			this._unBind();
		}),
		_resolve: d(function (i) {
			var char = this.__list__[i],
			    code;
			if (this.__nextIndex__ === this.__length__) return char;
			code = char.charCodeAt(0);
			if (code >= 0xD800 && code <= 0xDBFF) return char + this.__list__[this.__nextIndex__++];
			return char;
		}),
		toString: d(function () {
			return '[object String Iterator]';
		})
	});
	return module.exports;
});
$__System.registerDynamic('16f', ['5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  var toString = Object.prototype.toString,
      id = toString.call(function () {
    return arguments;
  }());

  module.exports = function (x) {
    return toString.call(x) === id;
  };
  return module.exports;
});
$__System.registerDynamic('170', ['5'], true, function ($__require, exports, module) {
		'use strict';

		var process = $__require('5');
		var define,
		    global = this || self,
		    GLOBAL = global;
		var toString = Object.prototype.toString,
		    id = toString.call('');

		module.exports = function (x) {
				return typeof x === 'string' || x && typeof x === 'object' && (x instanceof String || toString.call(x) === id) || false;
		};
		return module.exports;
});
$__System.registerDynamic('171', ['16f', '170', '172'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var isArguments = $__require('16f'),
	    isString = $__require('170'),
	    iteratorSymbol = $__require('172').iterator,
	    isArray = Array.isArray;

	module.exports = function (value) {
		if (value == null) return false;
		if (isArray(value)) return true;
		if (isString(value)) return true;
		if (isArguments(value)) return true;
		return typeof value[iteratorSymbol] === 'function';
	};
	return module.exports;
});
$__System.registerDynamic('173', ['171'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var isIterable = $__require('171');

	module.exports = function (value) {
		if (!isIterable(value)) throw new TypeError(value + " is not iterable");
		return value;
	};
	return module.exports;
});
$__System.registerDynamic('174', ['16f', '170', '16a', '16e', '173', '172'], true, function ($__require, exports, module) {
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  var isArguments = $__require('16f'),
      isString = $__require('170'),
      ArrayIterator = $__require('16a'),
      StringIterator = $__require('16e'),
      iterable = $__require('173'),
      iteratorSymbol = $__require('172').iterator;

  module.exports = function (obj) {
    if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
    if (isArguments(obj)) return new ArrayIterator(obj);
    if (isString(obj)) return new StringIterator(obj);
    return new ArrayIterator(obj);
  };
  return module.exports;
});
$__System.registerDynamic('175', ['16f', '169', '170', '174'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var isArguments = $__require('16f'),
	    callable = $__require('169'),
	    isString = $__require('170'),
	    get = $__require('174'),
	    isArray = Array.isArray,
	    call = Function.prototype.call,
	    some = Array.prototype.some;

	module.exports = function (iterable, cb /*, thisArg*/) {
		var mode,
		    thisArg = arguments[2],
		    result,
		    doBreak,
		    broken,
		    i,
		    l,
		    char,
		    code;
		if (isArray(iterable) || isArguments(iterable)) mode = 'array';else if (isString(iterable)) mode = 'string';else iterable = get(iterable);

		callable(cb);
		doBreak = function () {
			broken = true;
		};
		if (mode === 'array') {
			some.call(iterable, function (value) {
				call.call(cb, thisArg, value, doBreak);
				if (broken) return true;
			});
			return;
		}
		if (mode === 'string') {
			l = iterable.length;
			for (i = 0; i < l; ++i) {
				char = iterable[i];
				if (i + 1 < l) {
					code = char.charCodeAt(0);
					if (code >= 0xD800 && code <= 0xDBFF) char += iterable[++i];
				}
				call.call(cb, thisArg, char, doBreak);
				if (broken) break;
			}
			return;
		}
		result = iterable.next();

		while (!result.done) {
			call.call(cb, thisArg, result.value, doBreak);
			if (broken) return;
			result = iterable.next();
		}
	};
	return module.exports;
});
$__System.registerDynamic('176', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var map = { function: true, object: true };

	module.exports = function (x) {
		return x != null && map[typeof x] || false;
	};
	return module.exports;
});
$__System.registerDynamic('177', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var create = Object.create,
	    getPrototypeOf = Object.getPrototypeOf,
	    x = {};

	module.exports = function () /*customCreate*/{
		var setPrototypeOf = Object.setPrototypeOf,
		    customCreate = arguments[0] || create;
		if (typeof setPrototypeOf !== 'function') return false;
		return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
	};
	return module.exports;
});
$__System.registerDynamic('178', ['177', '179', '5'], true, function ($__require, exports, module) {
	// Workaround for http://code.google.com/p/v8/issues/detail?id=2804

	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var create = Object.create,
	    shim;

	if (!$__require('177')()) {
		shim = $__require('179');
	}

	module.exports = function () {
		var nullObject, props, desc;
		if (!shim) return create;
		if (shim.level !== 1) return create;

		nullObject = {};
		props = {};
		desc = { configurable: false, enumerable: false, writable: true,
			value: undefined };
		Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
			if (name === '__proto__') {
				props[name] = { configurable: true, enumerable: false, writable: true,
					value: undefined };
				return;
			}
			props[name] = desc;
		});
		Object.defineProperties(nullObject, props);

		Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
			enumerable: false, writable: false, value: nullObject });

		return function (prototype, props) {
			return create(prototype === null ? nullObject : prototype, props);
		};
	}();
	return module.exports;
});
$__System.registerDynamic('179', ['176', '166', '178', '5'], true, function ($__require, exports, module) {
	// Big thanks to @WebReflection for sorting this out
	// https://gist.github.com/WebReflection/5593554

	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var isObject = $__require('176'),
	    value = $__require('166'),
	    isPrototypeOf = Object.prototype.isPrototypeOf,
	    defineProperty = Object.defineProperty,
	    nullDesc = { configurable: true, enumerable: false, writable: true,
		value: undefined },
	    validate;

	validate = function (obj, prototype) {
		value(obj);
		if (prototype === null || isObject(prototype)) return obj;
		throw new TypeError('Prototype must be null or an object');
	};

	module.exports = function (status) {
		var fn, set;
		if (!status) return null;
		if (status.level === 2) {
			if (status.set) {
				set = status.set;
				fn = function (obj, prototype) {
					set.call(validate(obj, prototype), prototype);
					return obj;
				};
			} else {
				fn = function (obj, prototype) {
					validate(obj, prototype).__proto__ = prototype;
					return obj;
				};
			}
		} else {
			fn = function self(obj, prototype) {
				var isNullBase;
				validate(obj, prototype);
				isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
				if (isNullBase) delete self.nullPolyfill.__proto__;
				if (prototype === null) prototype = self.nullPolyfill;
				obj.__proto__ = prototype;
				if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
				return obj;
			};
		}
		return Object.defineProperty(fn, 'level', { configurable: false,
			enumerable: false, writable: false, value: status.level });
	}(function () {
		var x = Object.create(null),
		    y = {},
		    set,
		    desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(x, y);
			} catch (ignore) {}
			if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
		}

		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 2 };

		x = {};
		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 1 };

		return false;
	}());

	$__require('178');
	return module.exports;
});
$__System.registerDynamic('16c', ['177', '179', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('177')() ? Object.setPrototypeOf : $__require('179');
	return module.exports;
});
$__System.registerDynamic('17a', ['166', '5'], true, function ($__require, exports, module) {
	// Inspired by Google Closure:
	// http://closure-library.googlecode.com/svn/docs/
	// closure_goog_array_array.js.html#goog.array.clear

	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var value = $__require('166');

	module.exports = function () {
		value(this).length = 0;
		return this;
	};
	return module.exports;
});
$__System.registerDynamic('17b', ['17c', '166', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var assign = $__require('17c'),
	    value = $__require('166');

	module.exports = function (obj) {
		var copy = Object(value(obj));
		if (copy !== obj) return copy;
		return assign({}, obj);
	};
	return module.exports;
});
$__System.registerDynamic('17d', ['169', '166', '5'], true, function ($__require, exports, module) {
	// Internal method, used by iteration functions.
	// Calls a function for each key-value pair found in object
	// Optionally takes compareFn to iterate object in specific order

	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var callable = $__require('169'),
	    value = $__require('166'),
	    bind = Function.prototype.bind,
	    call = Function.prototype.call,
	    keys = Object.keys,
	    propertyIsEnumerable = Object.prototype.propertyIsEnumerable;

	module.exports = function (method, defVal) {
		return function (obj, cb /*, thisArg, compareFn*/) {
			var list,
			    thisArg = arguments[2],
			    compareFn = arguments[3];
			obj = Object(value(obj));
			callable(cb);

			list = keys(obj);
			if (compareFn) {
				list.sort(typeof compareFn === 'function' ? bind.call(compareFn, obj) : undefined);
			}
			if (typeof method !== 'function') method = list[method];
			return call.call(method, list, function (key, index) {
				if (!propertyIsEnumerable.call(obj, key)) return defVal;
				return call.call(cb, thisArg, obj[key], key, obj, index);
			});
		};
	};
	return module.exports;
});
$__System.registerDynamic('17e', ['17d', '5'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('17d')('forEach');
  return module.exports;
});
$__System.registerDynamic('17f', ['169', '17e', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var callable = $__require('169'),
	    forEach = $__require('17e'),
	    call = Function.prototype.call;

	module.exports = function (obj, cb /*, thisArg*/) {
		var o = {},
		    thisArg = arguments[2];
		callable(cb);
		forEach(obj, function (value, key, obj, index) {
			o[key] = call.call(cb, thisArg, value, key, obj, index);
		});
		return o;
	};
	return module.exports;
});
$__System.registerDynamic('169', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function (fn) {
		if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
		return fn;
	};
	return module.exports;
});
$__System.registerDynamic('180', ['17b', '17f', '169', '166'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var copy = $__require('17b'),
	    map = $__require('17f'),
	    callable = $__require('169'),
	    validValue = $__require('166'),
	    bind = Function.prototype.bind,
	    defineProperty = Object.defineProperty,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    define;

	define = function (name, desc, bindTo) {
		var value = validValue(desc) && callable(desc.value),
		    dgs;
		dgs = copy(desc);
		delete dgs.writable;
		delete dgs.value;
		dgs.get = function () {
			if (hasOwnProperty.call(this, name)) return value;
			desc.value = bind.call(value, bindTo == null ? this : this[bindTo]);
			defineProperty(this, name, desc);
			return this[name];
		};
		return dgs;
	};

	module.exports = function (props /*, bindTo*/) {
		var bindTo = arguments[1];
		return map(props, function (desc, name) {
			return define(name, desc, bindTo);
		});
	};
	return module.exports;
});
$__System.registerDynamic('16b', ['17a', '17c', '169', '166', '168', '180', '172'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var clear = $__require('17a'),
	    assign = $__require('17c'),
	    callable = $__require('169'),
	    value = $__require('166'),
	    d = $__require('168'),
	    autoBind = $__require('180'),
	    Symbol = $__require('172'),
	    defineProperty = Object.defineProperty,
	    defineProperties = Object.defineProperties,
	    Iterator;

	module.exports = Iterator = function (list, context) {
		if (!(this instanceof Iterator)) return new Iterator(list, context);
		defineProperties(this, {
			__list__: d('w', value(list)),
			__context__: d('w', context),
			__nextIndex__: d('w', 0)
		});
		if (!context) return;
		callable(context.on);
		context.on('_add', this._onAdd);
		context.on('_delete', this._onDelete);
		context.on('_clear', this._onClear);
	};

	defineProperties(Iterator.prototype, assign({
		constructor: d(Iterator),
		_next: d(function () {
			var i;
			if (!this.__list__) return;
			if (this.__redo__) {
				i = this.__redo__.shift();
				if (i !== undefined) return i;
			}
			if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
			this._unBind();
		}),
		next: d(function () {
			return this._createResult(this._next());
		}),
		_createResult: d(function (i) {
			if (i === undefined) return { done: true, value: undefined };
			return { done: false, value: this._resolve(i) };
		}),
		_resolve: d(function (i) {
			return this.__list__[i];
		}),
		_unBind: d(function () {
			this.__list__ = null;
			delete this.__redo__;
			if (!this.__context__) return;
			this.__context__.off('_add', this._onAdd);
			this.__context__.off('_delete', this._onDelete);
			this.__context__.off('_clear', this._onClear);
			this.__context__ = null;
		}),
		toString: d(function () {
			return '[object Iterator]';
		})
	}, autoBind({
		_onAdd: d(function (index) {
			if (index >= this.__nextIndex__) return;
			++this.__nextIndex__;
			if (!this.__redo__) {
				defineProperty(this, '__redo__', d('c', [index]));
				return;
			}
			this.__redo__.forEach(function (redo, i) {
				if (redo >= index) this.__redo__[i] = ++redo;
			}, this);
			this.__redo__.push(index);
		}),
		_onDelete: d(function (index) {
			var i;
			if (index >= this.__nextIndex__) return;
			--this.__nextIndex__;
			if (!this.__redo__) return;
			i = this.__redo__.indexOf(index);
			if (i !== -1) this.__redo__.splice(i, 1);
			this.__redo__.forEach(function (redo, i) {
				if (redo > index) this.__redo__[i] = --redo;
			}, this);
		}),
		_onClear: d(function () {
			if (this.__redo__) clear.call(this.__redo__);
			this.__nextIndex__ = 0;
		})
	})));

	defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
		return this;
	}));
	defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));
	return module.exports;
});
$__System.registerDynamic('181', [], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var validTypes = { object: true, symbol: true };

	module.exports = function () {
		var symbol;
		if (typeof Symbol !== 'function') return false;
		symbol = Symbol('test symbol');
		try {
			String(symbol);
		} catch (e) {
			return false;
		}

		// Return 'true' also for polyfills
		if (!validTypes[typeof Symbol.iterator]) return false;
		if (!validTypes[typeof Symbol.toPrimitive]) return false;
		if (!validTypes[typeof Symbol.toStringTag]) return false;

		return true;
	};
	return module.exports;
});
$__System.registerDynamic('182', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var assign = Object.assign,
		    obj;
		if (typeof assign !== 'function') return false;
		obj = { foo: 'raz' };
		assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
		return obj.foo + obj.bar + obj.trzy === 'razdwatrzy';
	};
	return module.exports;
});
$__System.registerDynamic('183', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		try {
			Object.keys('primitive');
			return true;
		} catch (e) {
			return false;
		}
	};
	return module.exports;
});
$__System.registerDynamic('184', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var keys = Object.keys;

	module.exports = function (object) {
		return keys(object == null ? object : Object(object));
	};
	return module.exports;
});
$__System.registerDynamic('185', ['183', '184', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('183')() ? Object.keys : $__require('184');
	return module.exports;
});
$__System.registerDynamic("166", ["5"], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require("5");
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function (value) {
		if (value == null) throw new TypeError("Cannot use null or undefined");
		return value;
	};
	return module.exports;
});
$__System.registerDynamic('186', ['185', '166', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var keys = $__require('185'),
	    value = $__require('166'),
	    max = Math.max;

	module.exports = function (dest, src /*, …srcn*/) {
		var error,
		    i,
		    l = max(arguments.length, 2),
		    assign;
		dest = Object(value(dest));
		assign = function (key) {
			try {
				dest[key] = src[key];
			} catch (e) {
				if (!error) error = e;
			}
		};
		for (i = 1; i < l; ++i) {
			src = arguments[i];
			keys(src).forEach(assign);
		}
		if (error !== undefined) throw error;
		return dest;
	};
	return module.exports;
});
$__System.registerDynamic('17c', ['182', '186', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('182')() ? Object.assign : $__require('186');
	return module.exports;
});
$__System.registerDynamic('187', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var forEach = Array.prototype.forEach,
	    create = Object.create;

	var process = function (src, obj) {
		var key;
		for (key in src) obj[key] = src[key];
	};

	module.exports = function (options /*, …options*/) {
		var result = create(null);
		forEach.call(arguments, function (options) {
			if (options == null) return;
			process(Object(options), result);
		});
		return result;
	};
	return module.exports;
});
$__System.registerDynamic('188', ['5'], true, function ($__require, exports, module) {
  // Deprecated

  'use strict';

  var process = $__require('5');
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = function (obj) {
    return typeof obj === 'function';
  };
  return module.exports;
});
$__System.registerDynamic('189', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var str = 'razdwatrzy';

	module.exports = function () {
		if (typeof str.contains !== 'function') return false;
		return str.contains('dwa') === true && str.contains('foo') === false;
	};
	return module.exports;
});
$__System.registerDynamic('18a', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var indexOf = String.prototype.indexOf;

	module.exports = function (searchString /*, position*/) {
		return indexOf.call(this, searchString, arguments[1]) > -1;
	};
	return module.exports;
});
$__System.registerDynamic('16d', ['189', '18a', '5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('189')() ? String.prototype.contains : $__require('18a');
	return module.exports;
});
$__System.registerDynamic('168', ['17c', '187', '188', '16d'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var assign = $__require('17c'),
	    normalizeOpts = $__require('187'),
	    isCallable = $__require('188'),
	    contains = $__require('16d'),
	    d;

	d = module.exports = function (dscr, value /*, options*/) {
		var c, e, w, options, desc;
		if (arguments.length < 2 || typeof dscr !== 'string') {
			options = value;
			value = dscr;
			dscr = null;
		} else {
			options = arguments[2];
		}
		if (dscr == null) {
			c = w = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
			w = contains.call(dscr, 'w');
		}

		desc = { value: value, configurable: c, enumerable: e, writable: w };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};

	d.gs = function (dscr, get, set /*, options*/) {
		var c, e, options, desc;
		if (typeof dscr !== 'string') {
			options = set;
			set = get;
			get = dscr;
			dscr = null;
		} else {
			options = arguments[3];
		}
		if (get == null) {
			get = undefined;
		} else if (!isCallable(get)) {
			options = get;
			get = set = undefined;
		} else if (set == null) {
			set = undefined;
		} else if (!isCallable(set)) {
			options = set;
			set = undefined;
		}
		if (dscr == null) {
			c = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
		}

		desc = { get: get, set: set, configurable: c, enumerable: e };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};
	return module.exports;
});
$__System.registerDynamic('18b', [], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function (x) {
		if (!x) return false;
		if (typeof x === 'symbol') return true;
		if (!x.constructor) return false;
		if (x.constructor.name !== 'Symbol') return false;
		return x[x.constructor.toStringTag] === 'Symbol';
	};
	return module.exports;
});
$__System.registerDynamic('18c', ['18b'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var isSymbol = $__require('18b');

	module.exports = function (value) {
		if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
		return value;
	};
	return module.exports;
});
$__System.registerDynamic('18d', ['168', '18c'], true, function ($__require, exports, module) {
	// ES2015 Symbol polyfill for environments that do not support it (or partially support it)

	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var d = $__require('168'),
	    validateSymbol = $__require('18c'),
	    create = Object.create,
	    defineProperties = Object.defineProperties,
	    defineProperty = Object.defineProperty,
	    objPrototype = Object.prototype,
	    NativeSymbol,
	    SymbolPolyfill,
	    HiddenSymbol,
	    globalSymbols = create(null),
	    isNativeSafe;

	if (typeof Symbol === 'function') {
		NativeSymbol = Symbol;
		try {
			String(NativeSymbol());
			isNativeSafe = true;
		} catch (ignore) {}
	}

	var generateName = function () {
		var created = create(null);
		return function (desc) {
			var postfix = 0,
			    name,
			    ie11BugWorkaround;
			while (created[desc + (postfix || '')]) ++postfix;
			desc += postfix || '';
			created[desc] = true;
			name = '@@' + desc;
			defineProperty(objPrototype, name, d.gs(null, function (value) {
				// For IE11 issue see:
				// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
				//    ie11-broken-getters-on-dom-objects
				// https://github.com/medikoo/es6-symbol/issues/12
				if (ie11BugWorkaround) return;
				ie11BugWorkaround = true;
				defineProperty(this, name, d(value));
				ie11BugWorkaround = false;
			}));
			return name;
		};
	}();

	// Internal constructor (not one exposed) for creating Symbol instances.
	// This one is used to ensure that `someSymbol instanceof Symbol` always return false
	HiddenSymbol = function Symbol(description) {
		if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
		return SymbolPolyfill(description);
	};

	// Exposed `Symbol` constructor
	// (returns instances of HiddenSymbol)
	module.exports = SymbolPolyfill = function Symbol(description) {
		var symbol;
		if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
		if (isNativeSafe) return NativeSymbol(description);
		symbol = create(HiddenSymbol.prototype);
		description = description === undefined ? '' : String(description);
		return defineProperties(symbol, {
			__description__: d('', description),
			__name__: d('', generateName(description))
		});
	};
	defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (globalSymbols[key]) return globalSymbols[key];
			return globalSymbols[key] = SymbolPolyfill(String(key));
		}),
		keyFor: d(function (s) {
			var key;
			validateSymbol(s);
			for (key in globalSymbols) if (globalSymbols[key] === s) return key;
		}),

		// If there's native implementation of given symbol, let's fallback to it
		// to ensure proper interoperability with other native functions e.g. Array.from
		hasInstance: d('', NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill('hasInstance')),
		isConcatSpreadable: d('', NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill('isConcatSpreadable')),
		iterator: d('', NativeSymbol && NativeSymbol.iterator || SymbolPolyfill('iterator')),
		match: d('', NativeSymbol && NativeSymbol.match || SymbolPolyfill('match')),
		replace: d('', NativeSymbol && NativeSymbol.replace || SymbolPolyfill('replace')),
		search: d('', NativeSymbol && NativeSymbol.search || SymbolPolyfill('search')),
		species: d('', NativeSymbol && NativeSymbol.species || SymbolPolyfill('species')),
		split: d('', NativeSymbol && NativeSymbol.split || SymbolPolyfill('split')),
		toPrimitive: d('', NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill('toPrimitive')),
		toStringTag: d('', NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill('toStringTag')),
		unscopables: d('', NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill('unscopables'))
	});

	// Internal tweaks for real symbol producer
	defineProperties(HiddenSymbol.prototype, {
		constructor: d(SymbolPolyfill),
		toString: d('', function () {
			return this.__name__;
		})
	});

	// Proper implementation of methods exposed on Symbol.prototype
	// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
	defineProperties(SymbolPolyfill.prototype, {
		toString: d(function () {
			return 'Symbol (' + validateSymbol(this).__description__ + ')';
		}),
		valueOf: d(function () {
			return validateSymbol(this);
		})
	});
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === 'symbol') return symbol;
		return symbol.toString();
	}));
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

	// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

	// Note: It's important to define `toPrimitive` as last one, as some implementations
	// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
	// And that may invoke error in definition flow:
	// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
	return module.exports;
});
$__System.registerDynamic('172', ['181', '18d'], true, function ($__require, exports, module) {
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('181')() ? Symbol : $__require('18d');
  return module.exports;
});
$__System.registerDynamic("@system-env", [], false, function() {
  return {
    "default": true
  };
});

$__System.registerDynamic('5', ['@system-env'], true, function ($__require, exports, module) {
    var define,
        global = this || self,
        GLOBAL = global;
    // From https://github.com/defunctzombie/node-process/blob/master/browser.js
    // shim for using process in browser

    var productionEnv = $__require('@system-env').production;

    var process = module.exports = {};
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = setTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        clearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            setTimeout(drainQueue, 0);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {
        NODE_ENV: productionEnv ? 'production' : 'development'
    };
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
        return '/';
    };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
        return 0;
    };
    return module.exports;
});
$__System.registerDynamic('18e', ['5'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('5');
	var define,
	    global = this || self,
	    GLOBAL = global;
	var forEach = Array.prototype.forEach,
	    create = Object.create;

	module.exports = function (arg /*, …args*/) {
		var set = create(null);
		forEach.call(arguments, function (name) {
			set[name] = true;
		});
		return set;
	};
	return module.exports;
});
$__System.registerDynamic('18f', ['18e'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = $__require('18e')('key', 'value', 'key+value');
	return module.exports;
});
$__System.registerDynamic('190', ['16c', '168', '16b', '172', '18f'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('16c'),
	    d = $__require('168'),
	    Iterator = $__require('16b'),
	    toStringTagSymbol = $__require('172').toStringTag,
	    kinds = $__require('18f'),
	    defineProperties = Object.defineProperties,
	    unBind = Iterator.prototype._unBind,
	    MapIterator;

	MapIterator = module.exports = function (map, kind) {
		if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
		Iterator.call(this, map.__mapKeysData__, map);
		if (!kind || !kinds[kind]) kind = 'key+value';
		defineProperties(this, {
			__kind__: d('', kind),
			__values__: d('w', map.__mapValuesData__)
		});
	};
	if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

	MapIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(MapIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__values__[i];
			if (this.__kind__ === 'key') return this.__list__[i];
			return [this.__list__[i], this.__values__[i]];
		}),
		_unBind: d(function () {
			this.__values__ = null;
			unBind.call(this);
		}),
		toString: d(function () {
			return '[object Map Iterator]';
		})
	});
	Object.defineProperty(MapIterator.prototype, toStringTagSymbol, d('c', 'Map Iterator'));
	return module.exports;
});
$__System.registerDynamic('191', [], true, function ($__require, exports, module) {
	// Exports true if environment provides native `Map` implementation,
	// whatever that is.

	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		if (typeof Map === 'undefined') return false;
		return Object.prototype.toString.call(new Map()) === '[object Map]';
	}();
	return module.exports;
});
$__System.registerDynamic('192', ['17a', '165', '16c', '169', '166', '168', '167', '172', '173', '175', '190', '191'], true, function ($__require, exports, module) {
	'use strict';

	var define,
	    global = this || self,
	    GLOBAL = global;
	var clear = $__require('17a'),
	    eIndexOf = $__require('165'),
	    setPrototypeOf = $__require('16c'),
	    callable = $__require('169'),
	    validValue = $__require('166'),
	    d = $__require('168'),
	    ee = $__require('167'),
	    Symbol = $__require('172'),
	    iterator = $__require('173'),
	    forOf = $__require('175'),
	    Iterator = $__require('190'),
	    isNative = $__require('191'),
	    call = Function.prototype.call,
	    defineProperties = Object.defineProperties,
	    getPrototypeOf = Object.getPrototypeOf,
	    MapPoly;

	module.exports = MapPoly = function () /*iterable*/{
		var iterable = arguments[0],
		    keys,
		    values,
		    self;
		if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
		if (isNative && setPrototypeOf && Map !== MapPoly) {
			self = setPrototypeOf(new Map(), getPrototypeOf(this));
		} else {
			self = this;
		}
		if (iterable != null) iterator(iterable);
		defineProperties(self, {
			__mapKeysData__: d('c', keys = []),
			__mapValuesData__: d('c', values = [])
		});
		if (!iterable) return self;
		forOf(iterable, function (value) {
			var key = validValue(value)[0];
			value = value[1];
			if (eIndexOf.call(keys, key) !== -1) return;
			keys.push(key);
			values.push(value);
		}, self);
		return self;
	};

	if (isNative) {
		if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
		MapPoly.prototype = Object.create(Map.prototype, {
			constructor: d(MapPoly)
		});
	}

	ee(defineProperties(MapPoly.prototype, {
		clear: d(function () {
			if (!this.__mapKeysData__.length) return;
			clear.call(this.__mapKeysData__);
			clear.call(this.__mapValuesData__);
			this.emit('_clear');
		}),
		delete: d(function (key) {
			var index = eIndexOf.call(this.__mapKeysData__, key);
			if (index === -1) return false;
			this.__mapKeysData__.splice(index, 1);
			this.__mapValuesData__.splice(index, 1);
			this.emit('_delete', index, key);
			return true;
		}),
		entries: d(function () {
			return new Iterator(this, 'key+value');
		}),
		forEach: d(function (cb /*, thisArg*/) {
			var thisArg = arguments[1],
			    iterator,
			    result;
			callable(cb);
			iterator = this.entries();
			result = iterator._next();
			while (result !== undefined) {
				call.call(cb, thisArg, this.__mapValuesData__[result], this.__mapKeysData__[result], this);
				result = iterator._next();
			}
		}),
		get: d(function (key) {
			var index = eIndexOf.call(this.__mapKeysData__, key);
			if (index === -1) return;
			return this.__mapValuesData__[index];
		}),
		has: d(function (key) {
			return eIndexOf.call(this.__mapKeysData__, key) !== -1;
		}),
		keys: d(function () {
			return new Iterator(this, 'key');
		}),
		set: d(function (key, value) {
			var index = eIndexOf.call(this.__mapKeysData__, key),
			    emit;
			if (index === -1) {
				index = this.__mapKeysData__.push(key) - 1;
				emit = true;
			}
			this.__mapValuesData__[index] = value;
			if (emit) this.emit('_add', index, key);
			return this;
		}),
		size: d.gs(function () {
			return this.__mapKeysData__.length;
		}),
		values: d(function () {
			return new Iterator(this, 'value');
		}),
		toString: d(function () {
			return '[object Map]';
		})
	}));
	Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
		return this.entries();
	}));
	Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));
	return module.exports;
});
$__System.registerDynamic('193', ['15f', '192'], true, function ($__require, exports, module) {
  'use strict';

  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('15f')() ? Map : $__require('192');
  return module.exports;
});
(function() {
var define = $__System.amdDefine;
define("141", ["require", "exports", "module"], function(require, exports, module) {
  var Easing = {
    inQuad: function(t) {
      return t * t;
    },
    outQuad: function(t) {
      return -(t -= 1) * t + 1;
    },
    inOutQuad: function(t) {
      if ((t /= .5) < 1)
        return .5 * t * t;
      return -.5 * ((--t) * (t - 2) - 1);
    },
    inCubic: function(t) {
      return t * t * t;
    },
    outCubic: function(t) {
      return ((--t) * t * t + 1);
    },
    inOutCubic: function(t) {
      if ((t /= .5) < 1)
        return .5 * t * t * t;
      return .5 * ((t -= 2) * t * t + 2);
    },
    inQuart: function(t) {
      return t * t * t * t;
    },
    outQuart: function(t) {
      return -((--t) * t * t * t - 1);
    },
    inOutQuart: function(t) {
      if ((t /= .5) < 1)
        return .5 * t * t * t * t;
      return -.5 * ((t -= 2) * t * t * t - 2);
    },
    inQuint: function(t) {
      return t * t * t * t * t;
    },
    outQuint: function(t) {
      return ((--t) * t * t * t * t + 1);
    },
    inOutQuint: function(t) {
      if ((t /= .5) < 1)
        return .5 * t * t * t * t * t;
      return .5 * ((t -= 2) * t * t * t * t + 2);
    },
    inSine: function(t) {
      return -1.0 * Math.cos(t * (Math.PI / 2)) + 1.0;
    },
    outSine: function(t) {
      return Math.sin(t * (Math.PI / 2));
    },
    inOutSine: function(t) {
      return -.5 * (Math.cos(Math.PI * t) - 1);
    },
    inExpo: function(t) {
      return (t === 0) ? 0.0 : Math.pow(2, 10 * (t - 1));
    },
    outExpo: function(t) {
      return (t === 1.0) ? 1.0 : (-Math.pow(2, -10 * t) + 1);
    },
    inOutExpo: function(t) {
      if (t === 0)
        return 0.0;
      if (t === 1.0)
        return 1.0;
      if ((t /= .5) < 1)
        return .5 * Math.pow(2, 10 * (t - 1));
      return .5 * (-Math.pow(2, -10 * --t) + 2);
    },
    inCirc: function(t) {
      return -(Math.sqrt(1 - t * t) - 1);
    },
    outCirc: function(t) {
      return Math.sqrt(1 - (--t) * t);
    },
    inOutCirc: function(t) {
      if ((t /= .5) < 1)
        return -.5 * (Math.sqrt(1 - t * t) - 1);
      return .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    },
    inElastic: function(t) {
      var s = 1.70158;
      var p = 0;
      var a = 1.0;
      if (t === 0)
        return 0.0;
      if (t === 1)
        return 1.0;
      if (!p)
        p = .3;
      s = p / (2 * Math.PI) * Math.asin(1.0 / a);
      return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    },
    outElastic: function(t) {
      var s = 1.70158;
      var p = 0;
      var a = 1.0;
      if (t === 0)
        return 0.0;
      if (t === 1)
        return 1.0;
      if (!p)
        p = .3;
      s = p / (2 * Math.PI) * Math.asin(1.0 / a);
      return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1.0;
    },
    inOutElastic: function(t) {
      var s = 1.70158;
      var p = 0;
      var a = 1.0;
      if (t === 0)
        return 0.0;
      if ((t /= .5) === 2)
        return 1.0;
      if (!p)
        p = (.3 * 1.5);
      s = p / (2 * Math.PI) * Math.asin(1.0 / a);
      if (t < 1)
        return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * .5 + 1.0;
    },
    inBack: function(t, s) {
      if (s === undefined)
        s = 1.70158;
      return t * t * ((s + 1) * t - s);
    },
    outBack: function(t, s) {
      if (s === undefined)
        s = 1.70158;
      return ((--t) * t * ((s + 1) * t + s) + 1);
    },
    inOutBack: function(t, s) {
      if (s === undefined)
        s = 1.70158;
      if ((t /= .5) < 1)
        return .5 * (t * t * (((s *= (1.525)) + 1) * t - s));
      return .5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
    },
    inBounce: function(t) {
      return 1.0 - Easing.outBounce(1.0 - t);
    },
    outBounce: function(t) {
      if (t < (1 / 2.75)) {
        return (7.5625 * t * t);
      } else if (t < (2 / 2.75)) {
        return (7.5625 * (t -= (1.5 / 2.75)) * t + .75);
      } else if (t < (2.5 / 2.75)) {
        return (7.5625 * (t -= (2.25 / 2.75)) * t + .9375);
      } else {
        return (7.5625 * (t -= (2.625 / 2.75)) * t + .984375);
      }
    },
    inOutBounce: function(t) {
      if (t < .5)
        return Easing.inBounce(t * 2) * .5;
      return Easing.outBounce(t * 2 - 1.0) * .5 + .5;
    }
  };
  module.exports = Easing;
});

})();
(function() {
var define = $__System.amdDefine;
define("15d", ["require", "exports", "module", "14b", "139", "194", "195", "196", "197", "15c", "13a", "141"], function(require, exports, module) {
  var OptionsManager = require('14b');
  var Transform = require('139');
  var Vector = require('194');
  var Particle = require('195');
  var Spring = require('196');
  var PhysicsEngine = require('197');
  var LayoutNode = require('15c');
  var Transitionable = require('13a');
  var Easing = require('141');
  function FlowLayoutNode(renderNode, spec) {
    LayoutNode.apply(this, arguments);
    if (!this.options) {
      this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
      this._optionsManager = new OptionsManager(this.options);
    }
    if (!this._pe) {
      this._pe = new PhysicsEngine();
      this._pe.on('end', function() {
        if (!this._shouldDoSingleTween) {
          this._completeFlowCallback({reason: 'flowEnd'});
        }
      }.bind(this));
      this._pe.sleep();
    }
    if (!this._properties) {
      this._properties = {};
    } else {
      for (var propName in this._properties) {
        this._properties[propName].init = false;
      }
    }
    if (!this._lockTransitionable) {
      this._lockTransitionable = new Transitionable(1);
    } else {
      this._lockTransitionable.halt();
      this._lockTransitionable.reset(1);
    }
    this._specModified = true;
    if (spec) {
      this.setInsertSpec(spec);
    }
    this._initial = true;
    this._spec.endState = {};
    this._exists = false;
  }
  FlowLayoutNode.prototype = Object.create(LayoutNode.prototype);
  FlowLayoutNode.prototype.constructor = FlowLayoutNode;
  FlowLayoutNode.DEFAULT_OPTIONS = {
    spring: {
      dampingRatio: 0.8,
      period: 300
    },
    properties: {
      opacity: true,
      align: true,
      origin: true,
      size: true,
      translate: true,
      skew: true,
      rotate: true,
      scale: true
    },
    particleRounding: 0.001
  };
  var DEFAULT = {
    opacity: 1,
    opacity2D: [1, 0],
    size: [0, 0],
    origin: [0, 0],
    align: [0, 0],
    scale: [1, 1, 1],
    translate: [0, 0, 0],
    rotate: [0, 0, 0],
    skew: [0, 0, 0]
  };
  FlowLayoutNode.prototype.setOptions = function(options) {
    this._optionsManager.setOptions(options);
    var wasSleeping = this._pe.isSleeping();
    for (var propName in this._properties) {
      var prop = this._properties[propName];
      if (options.spring && prop.force) {
        prop.force.setOptions(this.options.spring);
      }
      if (options.properties && (options.properties[propName] !== undefined)) {
        if (this.options.properties[propName].length) {
          prop.enabled = this.options.properties[propName];
        } else {
          prop.enabled = [this.options.properties[propName], this.options.properties[propName], this.options.properties[propName]];
        }
      }
    }
    if (wasSleeping) {
      this._pe.sleep();
    }
    return this;
  };
  FlowLayoutNode.prototype.setInsertSpec = function(spec) {
    this._latentInsertSpec = spec;
  };
  FlowLayoutNode.prototype.executeInsertSpec = function() {
    this._insertSpec = this._latentInsertSpec;
  };
  FlowLayoutNode.prototype.reset = function() {
    if (this._invalidated) {
      for (var propName in this._properties) {
        this._properties[propName].invalidated = false;
      }
      this._invalidated = false;
    }
    this.trueSizeRequested = false;
    this.usesTrueSize = false;
  };
  FlowLayoutNode.prototype.remove = function(removeSpec) {
    this._removing = true;
    if (removeSpec) {
      this.setInsertSpec(removeSpec);
    } else {
      this._pe.sleep();
      this._specModified = false;
    }
    this._invalidated = false;
  };
  FlowLayoutNode.prototype.releaseLock = function(enable, options, callback) {
    if (!this._singleTween) {
      if (!options) {
        options = {duration: this.options.spring.period || 1000};
      }
      this._releaseLock = {
        enable: enable,
        options: options,
        callback: callback
      };
    }
  };
  function _getRoundedValue3D(prop, def, precision, lockValue) {
    if (!prop || !prop.init) {
      return def;
    }
    return [prop.enabled[0] ? (Math.round((prop.curState.x + ((prop.endState.x - prop.curState.x) * lockValue)) / precision) * precision) : prop.endState.x, prop.enabled[1] ? (Math.round((prop.curState.y + ((prop.endState.y - prop.curState.y) * lockValue)) / precision) * precision) : prop.endState.y, prop.enabled[2] ? (Math.round((prop.curState.z + ((prop.endState.z - prop.curState.z) * lockValue)) / precision) * precision) : prop.endState.z];
  }
  FlowLayoutNode.prototype.getSpec = function() {
    if (this._releaseLock) {
      var enable = this._releaseLock.enable;
      var options = this._releaseLock.options;
      var callback = this._releaseLock.callback;
      this._lockTransitionable.halt();
      this._lockTransitionable.reset(0);
      if (enable) {
        this._lockTransitionable.set(1, options, callback);
      }
      this._releaseLock = undefined;
    }
    if (this._insertSpec) {
      var insertSpec = this._insertSpec;
      this._insertSpec = undefined;
      var oldExists = this._exists;
      var oldRemoving = this._removing;
      var oldInvalidated = this._invalidated;
      this.set(insertSpec);
      this._exists = oldExists;
      this._removing = oldRemoving;
      this._invalidated = oldInvalidated;
    }
    if (!this._exists) {
      this._spec.removed = true;
      return this._spec;
    }
    var endStateReached = this._pe.isSleeping() && !this._singleTween;
    if (!this._specModified && endStateReached) {
      this._spec.removed = !this._invalidated;
      return this._spec;
    }
    this._initial = false;
    this._specModified = !endStateReached;
    this._spec.removed = false;
    if (!endStateReached && !this._singleTween) {
      this._pe.step();
    }
    var spec = this._spec;
    var precision = this.options.particleRounding;
    var lockValue = this._lockTransitionable.get();
    var prop = this._properties.opacity;
    if (prop && prop.init) {
      spec.opacity = prop.enabled[0] ? Math.max(0, Math.min(1, (Math.round((prop.curState.x + ((prop.endState.x - prop.curState.x) * lockValue)) / precision) * precision))) : prop.endState.x;
      spec.endState.opacity = prop.endState.x;
    } else {
      spec.opacity = undefined;
      spec.endState.opacity = undefined;
    }
    prop = this._properties.size;
    if (prop && prop.init) {
      spec.size = spec.size || [0, 0];
      spec.size[0] = prop.enabled[0] ? (Math.round((prop.curState.x + ((prop.endState.x - prop.curState.x) * lockValue)) / 0.1) * 0.1) : prop.endState.x;
      spec.size[1] = prop.enabled[1] ? (Math.round((prop.curState.y + ((prop.endState.y - prop.curState.y) * lockValue)) / 0.1) * 0.1) : prop.endState.y;
      spec.endState.size = spec.endState.size || [0, 0];
      spec.endState.size[0] = prop.endState.x;
      spec.endState.size[1] = prop.endState.y;
    } else {
      spec.size = undefined;
      spec.endState.size = undefined;
    }
    prop = this._properties.align;
    if (prop && prop.init) {
      spec.align = spec.align || [0, 0];
      spec.align[0] = prop.enabled[0] ? (Math.round((prop.curState.x + ((prop.endState.x - prop.curState.x) * lockValue)) / 0.0001) * 0.0001) : prop.endState.x;
      spec.align[1] = prop.enabled[1] ? (Math.round((prop.curState.y + ((prop.endState.y - prop.curState.y) * lockValue)) / 0.0001) * 0.0001) : prop.endState.y;
      spec.endState.align = spec.endState.align || [0, 0];
      spec.endState.align[0] = prop.endState.x;
      spec.endState.align[1] = prop.endState.y;
    } else {
      spec.align = undefined;
      spec.endState.align = undefined;
    }
    prop = this._properties.origin;
    if (prop && prop.init) {
      spec.origin = spec.origin || [0, 0];
      spec.origin[0] = prop.enabled[0] ? (Math.round((prop.curState.x + ((prop.endState.x - prop.curState.x) * lockValue)) / 0.0001) * 0.0001) : prop.endState.x;
      spec.origin[1] = prop.enabled[1] ? (Math.round((prop.curState.y + ((prop.endState.y - prop.curState.y) * lockValue)) / 0.0001) * 0.0001) : prop.endState.y;
      spec.endState.origin = spec.endState.origin || [0, 0];
      spec.endState.origin[0] = prop.endState.x;
      spec.endState.origin[1] = prop.endState.y;
    } else {
      spec.origin = undefined;
      spec.endState.origin = undefined;
    }
    var translate = this._properties.translate;
    var translateX;
    var translateY;
    var translateZ;
    if (translate && translate.init) {
      translateX = translate.enabled[0] ? (Math.round((translate.curState.x + ((translate.endState.x - translate.curState.x) * lockValue)) / precision) * precision) : translate.endState.x;
      translateY = translate.enabled[1] ? (Math.round((translate.curState.y + ((translate.endState.y - translate.curState.y) * lockValue)) / precision) * precision) : translate.endState.y;
      translateZ = translate.enabled[2] ? (Math.round((translate.curState.z + ((translate.endState.z - translate.curState.z) * lockValue)) / precision) * precision) : translate.endState.z;
    } else {
      translateX = 0;
      translateY = 0;
      translateZ = 0;
    }
    var scale = this._properties.scale;
    var skew = this._properties.skew;
    var rotate = this._properties.rotate;
    if (scale || skew || rotate) {
      spec.transform = Transform.build({
        translate: [translateX, translateY, translateZ],
        skew: _getRoundedValue3D.call(this, skew, DEFAULT.skew, this.options.particleRounding, lockValue),
        scale: _getRoundedValue3D.call(this, scale, DEFAULT.scale, this.options.particleRounding, lockValue),
        rotate: _getRoundedValue3D.call(this, rotate, DEFAULT.rotate, this.options.particleRounding, lockValue)
      });
      spec.endState.transform = Transform.build({
        translate: translate ? [translate.endState.x, translate.endState.y, translate.endState.z] : DEFAULT.translate,
        scale: scale ? [scale.endState.x, scale.endState.y, scale.endState.z] : DEFAULT.scale,
        skew: skew ? [skew.endState.x, skew.endState.y, skew.endState.z] : DEFAULT.skew,
        rotate: rotate ? [rotate.endState.x, rotate.endState.y, rotate.endState.z] : DEFAULT.rotate
      });
    } else if (translate) {
      if (!spec.transform) {
        spec.transform = Transform.translate(translateX, translateY, translateZ);
      } else {
        spec.transform[12] = translateX;
        spec.transform[13] = translateY;
        spec.transform[14] = translateZ;
      }
      if (!spec.endState.transform) {
        spec.endState.transform = Transform.translate(translate.endState.x, translate.endState.y, translate.endState.z);
      } else {
        spec.endState.transform[12] = translate.endState.x;
        spec.endState.transform[13] = translate.endState.y;
        spec.endState.transform[14] = translate.endState.z;
      }
    } else {
      spec.transform = undefined;
      spec.endState.transform = undefined;
    }
    return this._spec;
  };
  function _setPropertyValue(prop, propName, endState, defaultValue, transition) {
    var immediate = false;
    prop = prop || this._properties[propName];
    if (prop && prop.init) {
      prop.invalidated = true;
      var value = defaultValue;
      if (endState !== undefined) {
        value = endState;
      } else if (this._removing) {
        value = prop.particle.getPosition();
      }
      var newPropsAreDifferent = !_approxEqual3d(value, prop.endState);
      if (this._pe.isSleeping() && !this._singleTween && newPropsAreDifferent && !this._disableSingleTween && transition) {
        _assignVectorFromArray(prop.endState, value);
        this._shouldDoSingleTween = true;
      } else {
        if (immediate) {
          prop.curState.x = prop.endState.x;
          prop.curState.y = prop.endState.y;
          prop.curState.z = prop.endState.z;
          prop.velocity.x = 0;
          prop.velocity.y = 0;
          prop.velocity.z = 0;
        } else if (newPropsAreDifferent) {
          this._shouldDoSingleTween = false;
          if (this._singleTween) {
            if (!this._disableSingleTween) {
              this._disableSingleTween = {};
            }
            this._disableSingleTween[propName] = true;
            this.interruptPropertyTween(propName);
          }
          _assignVectorFromArray(prop.endState, value);
          this._pe.wake();
        }
      }
    } else {
      this._shouldDoSingleTween = !!transition;
      var wasSleeping = this._pe.isSleeping();
      if (!prop) {
        prop = {
          particle: new Particle({position: (this._initial || immediate) ? endState : defaultValue}),
          endState: new Vector(endState)
        };
        prop.curState = prop.particle.position;
        prop.velocity = prop.particle.velocity;
        prop.force = new Spring(this.options.spring);
        prop.force.setOptions({anchor: prop.endState});
        this._pe.addBody(prop.particle);
        prop.forceId = this._pe.attach(prop.force, prop.particle);
        this._properties[propName] = prop;
      } else {
        prop.particle.setPosition((this._initial || immediate) ? endState : defaultValue);
        prop.endState.set(endState);
      }
      if (!this._initial && !immediate) {
        if (wasSleeping && transition && !this._singleTween) {
          this._shouldDoSingleTween = true;
          this._pe.sleep();
        } else {
          this._pe.wake();
        }
      } else if (wasSleeping) {
        this._pe.sleep();
      }
      if (this.options.properties[propName] && this.options.properties[propName].length) {
        prop.enabled = this.options.properties[propName];
      } else {
        prop.enabled = [this.options.properties[propName], this.options.properties[propName], this.options.properties[propName]];
      }
      prop.init = true;
      prop.invalidated = true;
    }
  }
  function _getIfNE2D(a1, a2) {
    return ((a1[0] === a2[0]) && (a1[1] === a2[1])) ? undefined : a1;
  }
  function _getIfNE3D(a1, a2) {
    return ((a1[0] === a2[0]) && (a1[1] === a2[1]) && (a1[2] === a2[2])) ? undefined : a1;
  }
  function _approxEqual3d(array, vector) {
    return ['x', 'y', 'z'].every(function(dimension, index) {
      return (array.length <= index || array[index] === true || Math.abs(array[index] - vector[dimension]) < 0.01);
    });
  }
  function _assignVectorFromArray(vector, array) {
    vector.x = array[0] === true ? vector.endState.x : array[0];
    vector.y = (array.length > 1) ? array[1] === true ? vector.endState.y : array[1] : 0;
    vector.z = (array.length > 2) ? array[2] : 0;
  }
  FlowLayoutNode.prototype.set = function(set, defaultSize) {
    this._exists = true;
    if (defaultSize) {
      this._removing = false;
    }
    this._invalidated = true;
    this.scrollLength = set.scrollLength;
    this._specModified = true;
    var prop = this._properties.opacity;
    var value = set.opacity !== undefined ? set.opacity : 1;
    if (this._insertSpec && this._insertSpec.opacity !== undefined) {
      _setPropertyValue.call(this, prop, 'opacity', [this._insertSpec.opacity * value, 0], DEFAULT.opacity2D, set.transition);
    }
    _setPropertyValue.call(this, prop, 'opacity', [value, 0], DEFAULT.opacity2D, set.transition);
    prop = this._properties.align;
    value = set.align ? _getIfNE2D(set.align, DEFAULT.align) : undefined;
    if (this._insertSpec && this._insertSpec.align) {
      var initial = this._insertSpec.align;
      _setPropertyValue.call(this, prop, 'align', initial, DEFAULT.align, set.transition);
    }
    if (value || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'align', value, DEFAULT.align, set.transition);
    }
    prop = this._properties.origin;
    value = set.origin ? _getIfNE2D(set.origin, DEFAULT.origin) : undefined;
    if (this._insertSpec && this._insertSpec.origin) {
      var initial = this._insertSpec.origin;
      _setPropertyValue.call(this, prop, 'origin', initial, DEFAULT.origin, set.transition);
    }
    if (value || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'origin', value, DEFAULT.origin, set.transition);
    }
    if (this._insertSpec && this._insertSpec.size) {
      var initial = this._insertSpec.size;
      _setPropertyValue.call(this, prop, 'size', initial, defaultSize, set.transition);
    }
    prop = this._properties.size;
    value = set.size || defaultSize;
    if (value || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'size', value, defaultSize, set.transition);
    }
    prop = this._properties.translate;
    value = set.translate;
    if (value || (prop && prop.init)) {
      if (this._insertSpec && this._insertSpec.translate) {
        var initial = this._insertSpec.translate;
        _setPropertyValue.call(this, prop, 'translate', [0, 1, 2].map(function(index) {
          return initial[index] + value[index];
        }), DEFAULT.translate, undefined, true);
      }
      _setPropertyValue.call(this, prop, 'translate', value, DEFAULT.translate, set.transition);
    }
    prop = this._properties.scale;
    value = set.scale ? _getIfNE3D(set.scale, DEFAULT.scale) : undefined;
    if (this._insertSpec && this._insertSpec.scale) {
      var initial = this._insertSpec.scale;
      _setPropertyValue.call(this, prop, 'scale', initial, DEFAULT.scale, set.transition);
    }
    if (value !== undefined || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'scale', value, DEFAULT.scale, set.transition);
    }
    prop = this._properties.rotate;
    value = set.rotate ? _getIfNE3D(set.rotate, DEFAULT.rotate) : undefined;
    if (this._insertSpec && this._insertSpec.rotate) {
      var initial = this._insertSpec.rotate;
      _setPropertyValue.call(this, prop, 'rotate', initial, DEFAULT.rotate, set.transition);
    }
    if (value !== undefined || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'rotate', value, DEFAULT.rotate, set.transition);
    }
    prop = this._properties.skew;
    value = set.skew ? _getIfNE3D(set.skew, DEFAULT.skew) : undefined;
    if (this._insertSpec && this._insertSpec.skew) {
      var initial = this._insertSpec.skew;
      _setPropertyValue.call(this, prop, 'skew', initial, DEFAULT.skew, set.transition);
    }
    if (value !== undefined || (prop && prop.init)) {
      _setPropertyValue.call(this, prop, 'skew', value, DEFAULT.skew, set.transition);
    }
    if (set.callback) {
      if (this._currentCallback && this._currentCallback !== set.callback) {
        this._currentCallback({reason: 'flowInterrupted'});
      }
      this._currentCallback = set.callback;
    }
    if (this._shouldDoSingleTween) {
      var givenTransformation = typeof set.transition === 'function' ? set : set.transition;
      this._shouldDoSingleTween = false;
      this._singleTweenProperties = givenTransformation || {
        curve: function linear(x) {
          return x;
        },
        duration: 1000
      };
      this.releaseLock(true, this._singleTweenProperties, function() {
        if (this._singleTween) {
          this._singleTween = false;
          for (var propName in this._properties) {
            var prop = this._properties[propName];
            if (prop && prop.init) {
              prop.curState.x = prop.endState.x;
              prop.curState.y = prop.endState.y;
              prop.curState.z = prop.endState.z;
            }
          }
          this._completeFlowCallback({reason: 'flowEnd'});
        }
      }.bind(this));
      this._singleTween = true;
    } else if (this._disableSingleTween) {
      this._singleTween = false;
      for (var otherPropName in this._properties) {
        if (!(otherPropName in this._disableSingleTween)) {
          this.interruptPropertyTween(otherPropName);
        }
      }
      this._disableSingleTween = false;
      this.releaseLock();
    } else if (this._pe.isSleeping() && !this._singleTween) {
      this._completeFlowCallback({reason: 'flowSkipped'});
    }
    this._insertSpec = undefined;
  };
  FlowLayoutNode.prototype.interruptPropertyTween = function(propertyName) {
    var lockVar = this._lockTransitionable.get();
    var velocity = this._lockTransitionable.velocity;
    var curve = this._singleTweenProperties.curve || function linear(x) {
      return x;
    };
    var duration = this._singleTweenProperties.duration;
    var epsilon = 1e-7;
    var curveDelta = (curve(lockVar) - curve(lockVar - epsilon)) / epsilon;
    var adjustedProp = this._properties[propertyName];
    ['x', 'y', 'z'].forEach(function(dimension) {
      var distanceToTravel = (adjustedProp.endState[dimension] - adjustedProp.curState[dimension]);
      var distanceTraveled = distanceToTravel * lockVar;
      if (!duration) {
        adjustedProp.curState[dimension] = adjustedProp.endState[dimension];
      } else {
        adjustedProp.velocity[dimension] = -1 * curveDelta * (adjustedProp.curState[dimension] - adjustedProp.endState[dimension]) / duration;
        adjustedProp.curState[dimension] = (adjustedProp.curState[dimension] + distanceTraveled) || 0;
      }
    });
  };
  FlowLayoutNode.prototype._completeFlowCallback = function(options) {
    if (this._currentCallback) {
      this._currentCallback(options);
      delete this._currentCallback;
    }
  };
  module.exports = FlowLayoutNode;
});

})();
(function() {
var define = $__System.amdDefine;
define("15c", ["require", "exports", "module", "139", "149"], function(require, exports, module) {
  var Transform = require('139');
  var LayoutUtility = require('149');
  function LayoutNode(renderNode, spec) {
    this.renderNode = renderNode;
    this._spec = spec ? LayoutUtility.cloneSpec(spec) : {};
    this._spec.renderNode = renderNode;
    this._specModified = true;
    this._invalidated = false;
    this._removing = false;
  }
  LayoutNode.prototype.setRenderNode = function(renderNode) {
    this.renderNode = renderNode;
    this._spec.renderNode = renderNode;
  };
  LayoutNode.prototype.setOptions = function(options) {};
  LayoutNode.prototype.destroy = function() {
    this.renderNode = undefined;
    this._spec.renderNode = undefined;
    this._viewSequence = undefined;
  };
  LayoutNode.prototype.reset = function() {
    this._invalidated = false;
    this.trueSizeRequested = false;
  };
  LayoutNode.prototype.setSpec = function(spec) {
    this._specModified = true;
    if (spec.align) {
      if (!spec.align) {
        this._spec.align = [0, 0];
      }
      this._spec.align[0] = spec.align[0];
      this._spec.align[1] = spec.align[1];
    } else {
      this._spec.align = undefined;
    }
    if (spec.origin) {
      if (!spec.origin) {
        this._spec.origin = [0, 0];
      }
      this._spec.origin[0] = spec.origin[0];
      this._spec.origin[1] = spec.origin[1];
    } else {
      this._spec.origin = undefined;
    }
    if (spec.size) {
      if (!spec.size) {
        this._spec.size = [0, 0];
      }
      this._spec.size[0] = spec.size[0];
      this._spec.size[1] = spec.size[1];
    } else {
      this._spec.size = undefined;
    }
    if (spec.transform) {
      if (!spec.transform) {
        this._spec.transform = spec.transform.slice(0);
      } else {
        for (var i = 0; i < 16; i++) {
          this._spec.transform[i] = spec.transform[i];
        }
      }
    } else {
      this._spec.transform = undefined;
    }
    this._spec.opacity = spec.opacity;
  };
  LayoutNode.prototype.set = function(set, size) {
    this._invalidated = true;
    this._specModified = true;
    this._removing = false;
    var spec = this._spec;
    spec.opacity = set.opacity;
    if (set.size) {
      if (!spec.size) {
        spec.size = [0, 0];
      }
      spec.size[0] = set.size[0];
      spec.size[1] = set.size[1];
    } else {
      spec.size = undefined;
    }
    if (set.origin) {
      if (!spec.origin) {
        spec.origin = [0, 0];
      }
      spec.origin[0] = set.origin[0];
      spec.origin[1] = set.origin[1];
    } else {
      spec.origin = undefined;
    }
    if (set.align) {
      if (!spec.align) {
        spec.align = [0, 0];
      }
      spec.align[0] = set.align[0];
      spec.align[1] = set.align[1];
    } else {
      spec.align = undefined;
    }
    if (set.skew || set.rotate || set.scale) {
      this._spec.transform = Transform.build({
        translate: set.translate || [0, 0, 0],
        skew: set.skew || [0, 0, 0],
        scale: set.scale || [1, 1, 1],
        rotate: set.rotate || [0, 0, 0]
      });
    } else if (set.translate) {
      this._spec.transform = Transform.translate(set.translate[0], set.translate[1], set.translate[2]);
    } else {
      this._spec.transform = undefined;
    }
    this.scrollLength = set.scrollLength;
  };
  LayoutNode.prototype.getSpec = function() {
    this._specModified = false;
    this._spec.removed = !this._invalidated;
    return this._spec;
  };
  LayoutNode.prototype.remove = function(removeSpec) {
    this._removing = true;
  };
  module.exports = LayoutNode;
});

})();
(function() {
var define = $__System.amdDefine;
define("15b", ["require", "exports", "module", "15e", "193", "149", "146", "13f", "15d", "15c"], function(require, exports, module) {
  var LayoutContext = require('15e');
  var Map = require('193');
  var LayoutUtility = require('149');
  var Surface = require('146');
  var RenderNode = require('13f');
  var FlowLayoutNode = require('15d');
  var LayoutNode = require('15c');
  var MAX_POOL_SIZE = 100;
  function LayoutNodeManager(LayoutNode, initLayoutNodeFn, partialFlow) {
    this.LayoutNode = LayoutNode;
    this._partialFlow = partialFlow || false;
    this._initLayoutNodeFn = initLayoutNodeFn;
    this._layoutCount = 0;
    this._context = new LayoutContext({
      next: _contextNext.bind(this),
      prev: _contextPrev.bind(this),
      get: _contextGet.bind(this),
      set: _contextSet.bind(this),
      resolveSize: _contextResolveSize.bind(this),
      size: [0, 0]
    });
    this._contextState = {};
    this._pool = {
      layoutNodes: {size: 0},
      resolveSize: [0, 0]
    };
  }
  LayoutNodeManager.prototype.prepareForLayout = function(viewSequence, nodesById, contextData) {
    var node = this._first;
    while (node) {
      node.reset();
      node = node._next;
    }
    this._nodeIdInCurrentBuild = new Map();
    var context = this._context;
    this._layoutCount++;
    this._nodesById = nodesById;
    this._trueSizeRequested = false;
    this._reevalTrueSize = contextData.reevalTrueSize || !context.size || (context.size[0] !== contextData.size[0]) || (context.size[1] !== contextData.size[1]);
    var contextState = this._contextState;
    contextState.startSequence = viewSequence;
    contextState.nextSequence = viewSequence;
    contextState.prevSequence = viewSequence;
    contextState.start = undefined;
    contextState.nextGetIndex = 0;
    contextState.prevGetIndex = 0;
    contextState.nextSetIndex = 0;
    contextState.prevSetIndex = 0;
    contextState.addCount = 0;
    contextState.removeCount = 0;
    contextState.lastRenderNode = undefined;
    context.size[0] = contextData.size[0];
    context.size[1] = contextData.size[1];
    context.direction = contextData.direction;
    context.reverse = contextData.reverse;
    context.alignment = contextData.reverse ? 1 : 0;
    context.scrollOffset = contextData.scrollOffset || 0;
    context.scrollStart = contextData.scrollStart || 0;
    context.scrollEnd = contextData.scrollEnd || context.size[context.direction];
    return context;
  };
  LayoutNodeManager.prototype.removeNonInvalidatedNodes = function(removeSpec) {
    var node = this._first;
    while (node) {
      if (!node._invalidated && !node._removing) {
        node.remove(removeSpec);
      }
      node = node._next;
    }
  };
  LayoutNodeManager.prototype.removeVirtualViewSequenceNodes = function() {
    if (this._contextState.startSequence && this._contextState.startSequence.cleanup) {
      this._contextState.startSequence.cleanup();
    }
  };
  LayoutNodeManager.prototype.buildSpecAndDestroyUnrenderedNodes = function(translate) {
    var specs = [];
    var result = {
      specs: specs,
      modified: false
    };
    var node = this._first;
    while (node) {
      var modified = node._specModified;
      var spec = node.getSpec();
      if (spec.removed) {
        var destroyNode = node;
        node = node._next;
        _destroyNode.call(this, destroyNode);
        result.modified = true;
      } else {
        if (modified) {
          if (spec.transform && translate) {
            spec.transform[12] += translate[0];
            spec.transform[13] += translate[1];
            spec.transform[14] += translate[2];
            spec.transform[12] = Math.round(spec.transform[12] * 100000) / 100000;
            spec.transform[13] = Math.round(spec.transform[13] * 100000) / 100000;
            if (spec.endState) {
              spec.endState.transform[12] += translate[0];
              spec.endState.transform[13] += translate[1];
              spec.endState.transform[14] += translate[2];
              spec.endState.transform[12] = Math.round(spec.endState.transform[12] * 100000) / 100000;
              spec.endState.transform[13] = Math.round(spec.endState.transform[13] * 100000) / 100000;
            }
          }
          result.modified = true;
        }
        spec.usesTrueSize = node.usesTrueSize;
        spec.trueSizeRequested = node.trueSizeRequested;
        specs.push(spec);
        node = node._next;
      }
    }
    this._contextState.addCount = 0;
    this._contextState.removeCount = 0;
    return result;
  };
  LayoutNodeManager.prototype.getNodeByRenderNode = function(renderable) {
    var node = this._first;
    while (node) {
      if (node.renderNode === renderable) {
        return node;
      }
      node = node._next;
    }
    return undefined;
  };
  LayoutNodeManager.prototype.insertNode = function(node) {
    node._next = this._first;
    if (this._first) {
      this._first._prev = node;
    }
    this._first = node;
  };
  LayoutNodeManager.prototype.setNodeOptions = function(options) {
    this._nodeOptions = options;
    var node = this._first;
    while (node) {
      node.setOptions(options);
      node = node._next;
    }
    node = this._pool.layoutNodes.first;
    while (node) {
      node.setOptions(options);
      node = node._next;
    }
  };
  LayoutNodeManager.prototype.preallocateNodes = function(count, spec) {
    var nodes = [];
    for (var i = 0; i < count; i++) {
      nodes.push(this.createNode(undefined, spec));
    }
    for (i = 0; i < count; i++) {
      _destroyNode.call(this, nodes[i]);
    }
  };
  LayoutNodeManager.prototype.createNode = function(renderNode, spec) {
    var node;
    var layoutNodeClass = this.getLayoutNodeClassForRenderNode(renderNode);
    if (this._pool.layoutNodes.first) {
      node = this._pool.layoutNodes.first;
      this._pool.layoutNodes.first = node._next;
      this._pool.layoutNodes.size--;
      if (this._partialFlow) {
        node = new layoutNodeClass(renderNode, spec);
      } else {
        node.constructor.apply(node, arguments);
      }
    } else {
      node = new layoutNodeClass(renderNode, spec);
      if (this._nodeOptions) {
        node.setOptions(this._nodeOptions);
      }
    }
    node._prev = undefined;
    node._next = undefined;
    node._viewSequence = undefined;
    node._layoutCount = 0;
    if (this._initLayoutNodeFn) {
      this._initLayoutNodeFn.call(this, node, spec);
    }
    return node;
  };
  LayoutNodeManager.prototype.getLayoutNodeClassForRenderNode = function(renderNode) {
    if (this._partialFlow) {
      if (renderNode.isFlowy) {
        return FlowLayoutNode;
      } else {
        return LayoutNode;
      }
    }
    return this.LayoutNode;
  };
  LayoutNodeManager.prototype.removeAll = function() {
    var node = this._first;
    while (node) {
      var next = node._next;
      _destroyNode.call(this, node);
      node = next;
    }
    this._first = undefined;
  };
  function _destroyNode(node) {
    if (node._next) {
      node._next._prev = node._prev;
    }
    if (node._prev) {
      node._prev._next = node._next;
    } else {
      this._first = node._next;
    }
    node.destroy();
    if (this._pool.layoutNodes.size < MAX_POOL_SIZE) {
      this._pool.layoutNodes.size++;
      node._prev = undefined;
      node._next = this._pool.layoutNodes.first;
      this._pool.layoutNodes.first = node;
    }
  }
  LayoutNodeManager.prototype.isNodeInCurrentBuild = function(node) {
    return !!this._nodeIdInCurrentBuild.get(node);
  };
  LayoutNodeManager.prototype.getStartEnumNode = function(next) {
    if (next === undefined) {
      return this._first;
    } else if (next === true) {
      return (this._contextState.start && this._contextState.startPrev) ? this._contextState.start._next : this._contextState.start;
    } else if (next === false) {
      return (this._contextState.start && !this._contextState.startPrev) ? this._contextState.start._prev : this._contextState.start;
    }
  };
  function _contextGetCreateAndOrderNodes(renderNode, prev) {
    var node;
    var state = this._contextState;
    if (!state.start) {
      node = this._first;
      while (node) {
        if (node.renderNode === renderNode) {
          break;
        }
        node = node._next;
      }
      if (!node) {
        node = this.createNode(renderNode);
        node._next = this._first;
        if (this._first) {
          this._first._prev = node;
        }
        this._first = node;
      }
      state.start = node;
      state.startPrev = prev;
      state.prev = node;
      state.next = node;
      return node;
    }
    if (prev) {
      if (state.prev._prev && (state.prev._prev.renderNode === renderNode)) {
        state.prev = state.prev._prev;
        return state.prev;
      }
    } else {
      if (state.next._next && (state.next._next.renderNode === renderNode)) {
        state.next = state.next._next;
        return state.next;
      }
    }
    node = this._first;
    while (node) {
      if (node.renderNode === renderNode) {
        break;
      }
      node = node._next;
    }
    if (!node) {
      node = this.createNode(renderNode);
    } else {
      if (node._next) {
        node._next._prev = node._prev;
      }
      if (node._prev) {
        node._prev._next = node._next;
      } else {
        this._first = node._next;
      }
      node._next = undefined;
      node._prev = undefined;
    }
    if (prev) {
      if (state.prev._prev) {
        node._prev = state.prev._prev;
        state.prev._prev._next = node;
      } else {
        this._first = node;
      }
      state.prev._prev = node;
      node._next = state.prev;
      state.prev = node;
    } else {
      if (state.next._next) {
        node._next = state.next._next;
        state.next._next._prev = node;
      }
      state.next._next = node;
      node._prev = state.next;
      state.next = node;
    }
    return node;
  }
  function _contextNext() {
    if (!this._contextState.nextSequence) {
      return undefined;
    }
    if (this._context.reverse) {
      this._contextState.nextSequence = this._contextState.nextSequence.getNext();
      if (!this._contextState.nextSequence) {
        return undefined;
      }
    }
    var renderNode = this._contextState.nextSequence.get();
    if (!renderNode) {
      this._contextState.nextSequence = undefined;
      return undefined;
    }
    var nextSequence = this._contextState.nextSequence;
    if (!this._context.reverse) {
      this._contextState.nextSequence = this._contextState.nextSequence.getNext();
    }
    if (this._contextState.lastRenderNode === renderNode) {
      throw 'ViewSequence is corrupted, should never contain the same renderNode twice, index: ' + nextSequence.getIndex();
    }
    this._contextState.lastRenderNode = renderNode;
    return {
      renderNode: renderNode,
      viewSequence: nextSequence,
      next: true,
      index: ++this._contextState.nextGetIndex
    };
  }
  function _contextPrev() {
    if (!this._contextState.prevSequence) {
      return undefined;
    }
    if (!this._context.reverse) {
      this._contextState.prevSequence = this._contextState.prevSequence.getPrevious();
      if (!this._contextState.prevSequence) {
        return undefined;
      }
    }
    var renderNode = this._contextState.prevSequence.get();
    if (!renderNode) {
      this._contextState.prevSequence = undefined;
      return undefined;
    }
    var prevSequence = this._contextState.prevSequence;
    if (this._context.reverse) {
      this._contextState.prevSequence = this._contextState.prevSequence.getPrevious();
    }
    if (this._contextState.lastRenderNode === renderNode) {
      throw 'ViewSequence is corrupted, should never contain the same renderNode twice, index: ' + prevSequence.getIndex();
    }
    this._contextState.lastRenderNode = renderNode;
    return {
      renderNode: renderNode,
      viewSequence: prevSequence,
      prev: true,
      index: --this._contextState.prevGetIndex
    };
  }
  function _contextGet(contextNodeOrId) {
    if (this._nodesById && ((contextNodeOrId instanceof String) || (typeof contextNodeOrId === 'string'))) {
      var renderNode = this._nodesById[contextNodeOrId];
      if (!renderNode) {
        return undefined;
      }
      if (renderNode instanceof Array) {
        var result = [];
        for (var i = 0,
            j = renderNode.length; i < j; i++) {
          result.push({
            renderNode: renderNode[i],
            arrayElement: true
          });
        }
        return result;
      }
      return {
        renderNode: renderNode,
        byId: true
      };
    } else {
      return contextNodeOrId;
    }
  }
  function _contextSet(contextNodeOrId, set) {
    var contextNode = this._nodesById ? _contextGet.call(this, contextNodeOrId) : contextNodeOrId;
    if (contextNode) {
      this._nodeIdInCurrentBuild.set(contextNode.renderNode, true);
      var node = contextNode.node;
      if (!node) {
        if (contextNode.next) {
          if (contextNode.index < this._contextState.nextSetIndex) {
            LayoutUtility.error('Nodes must be layed out in the same order as they were requested!');
          }
          this._contextState.nextSetIndex = contextNode.index;
        } else if (contextNode.prev) {
          if (contextNode.index > this._contextState.prevSetIndex) {
            LayoutUtility.error('Nodes must be layed out in the same order as they were requested!');
          }
          this._contextState.prevSetIndex = contextNode.index;
        }
        node = _contextGetCreateAndOrderNodes.call(this, contextNode.renderNode, contextNode.prev);
        node._viewSequence = contextNode.viewSequence;
        node._layoutCount++;
        if (node._layoutCount === 1) {
          this._contextState.addCount++;
        }
        contextNode.node = node;
      }
      node.usesTrueSize = contextNode.usesTrueSize;
      node.trueSizeRequested = contextNode.trueSizeRequested;
      node.set(set, this._context.size);
      contextNode.set = set;
    }
    return set;
  }
  function _resolveConfigSize(renderNode) {
    if (renderNode instanceof RenderNode) {
      var result = null;
      var target = renderNode.get();
      if (target) {
        result = _resolveConfigSize(target);
        if (result) {
          return result;
        }
      }
      if (renderNode._child) {
        return _resolveConfigSize(renderNode._child);
      }
    } else if (renderNode instanceof Surface) {
      return renderNode.size ? {
        renderNode: renderNode,
        size: renderNode.size
      } : undefined;
    } else if (renderNode.options && renderNode.options.size) {
      return {
        renderNode: renderNode,
        size: renderNode.options.size
      };
    }
    return undefined;
  }
  function _contextResolveSize(contextNodeOrId, parentSize) {
    var contextNode = this._nodesById ? _contextGet.call(this, contextNodeOrId) : contextNodeOrId;
    var resolveSize = this._pool.resolveSize;
    if (!contextNode) {
      resolveSize[0] = 0;
      resolveSize[1] = 0;
      return resolveSize;
    }
    var renderNode = contextNode.renderNode;
    var size = renderNode.getSize();
    if (!size) {
      return parentSize;
    }
    var configSize = _resolveConfigSize(renderNode);
    if (configSize && ((configSize.size[0] === true) || (configSize.size[1] === true))) {
      contextNode.usesTrueSize = true;
      if (configSize.renderNode instanceof Surface) {
        var backupSize = configSize.renderNode._backupSize;
        if (configSize.renderNode._contentDirty || configSize.renderNode._trueSizeCheck) {
          this._trueSizeRequested = true;
          contextNode.trueSizeRequested = true;
        }
        if (configSize.renderNode._trueSizeCheck) {
          if (backupSize && (configSize.size !== size)) {
            var newWidth = (configSize.size[0] === true) ? Math.max(backupSize[0], size[0]) : size[0];
            var newHeight = (configSize.size[1] === true) ? Math.max(backupSize[1], size[1]) : size[1];
            backupSize[0] = newWidth;
            backupSize[1] = newHeight;
            size = backupSize;
            configSize.renderNode._backupSize = undefined;
            backupSize = undefined;
          }
        }
        if (this._reevalTrueSize || (backupSize && ((backupSize[0] !== size[0]) || (backupSize[1] !== size[1])))) {
          configSize.renderNode._trueSizeCheck = true;
          configSize.renderNode._sizeDirty = true;
          this._trueSizeRequested = true;
        }
        if (!backupSize) {
          configSize.renderNode._backupSize = [0, 0];
          backupSize = configSize.renderNode._backupSize;
        }
        backupSize[0] = size[0];
        backupSize[1] = size[1];
      } else if (configSize.renderNode._nodes) {
        if (this._reevalTrueSize || configSize.renderNode._nodes._trueSizeRequested) {
          contextNode.trueSizeRequested = true;
          this._trueSizeRequested = true;
        }
      }
    }
    if ((size[0] === undefined) || (size[0] === true) || (size[1] === undefined) || (size[1] === true)) {
      resolveSize[0] = size[0];
      resolveSize[1] = size[1];
      size = resolveSize;
      if (size[0] === undefined) {
        size[0] = parentSize[0];
      } else if (size[0] === true) {
        size[0] = 0;
        this._trueSizeRequested = true;
        contextNode.trueSizeRequested = true;
      }
      if (size[1] === undefined) {
        size[1] = parentSize[1];
      } else if (size[1] === true) {
        size[1] = 0;
        this._trueSizeRequested = true;
        contextNode.trueSizeRequested = true;
      }
    }
    return size;
  }
  module.exports = LayoutNodeManager;
});

})();
(function() {
var define = $__System.amdDefine;
define("198", ["require", "exports", "module", "146", "154"], function(require, exports, module) {
  var Surface = require('146');
  var Context = require('154');
  function ContainerSurface(options) {
    Surface.call(this, options);
    this._container = document.createElement('div');
    this._container.classList.add('famous-group');
    this._container.classList.add('famous-container-group');
    this._shouldRecalculateSize = false;
    this.context = new Context(this._container);
    this.setContent(this._container);
  }
  ContainerSurface.prototype = Object.create(Surface.prototype);
  ContainerSurface.prototype.constructor = ContainerSurface;
  ContainerSurface.prototype.elementType = 'div';
  ContainerSurface.prototype.elementClass = 'famous-surface';
  ContainerSurface.prototype.add = function add() {
    return this.context.add.apply(this.context, arguments);
  };
  ContainerSurface.prototype.render = function render() {
    if (this._sizeDirty)
      this._shouldRecalculateSize = true;
    return Surface.prototype.render.apply(this, arguments);
  };
  ContainerSurface.prototype.deploy = function deploy() {
    this._shouldRecalculateSize = true;
    return Surface.prototype.deploy.apply(this, arguments);
  };
  ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {
    var previousSize = this._size ? [this._size[0], this._size[1]] : null;
    var result = Surface.prototype.commit.apply(this, arguments);
    if (this._shouldRecalculateSize || (previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1]))) {
      this.context.setSize();
      this._shouldRecalculateSize = false;
    }
    this.context.update();
    return result;
  };
  module.exports = ContainerSurface;
});

})();
(function() {
var define = $__System.amdDefine;
define("199", ["require", "exports", "module", "159", "14a", "139"], function(require, exports, module) {
  var Entity = require('159');
  var EventHandler = require('14a');
  var Transform = require('139');
  var usePrefix = !('transform' in document.documentElement.style);
  var devicePixelRatio = window.devicePixelRatio || 1;
  function ElementOutput(element) {
    this._matrix = null;
    this._opacity = 1;
    this._origin = null;
    this._size = null;
    this._eventOutput = new EventHandler();
    this._eventOutput.bindThis(this);
    this.eventForwarder = function eventForwarder(event) {
      this._eventOutput.emit(event.type, event);
    }.bind(this);
    this.id = Entity.register(this);
    this._element = null;
    this._sizeDirty = false;
    this._originDirty = false;
    this._transformDirty = false;
    this._invisible = false;
    if (element)
      this.attach(element);
  }
  ElementOutput.prototype.on = function on(type, fn) {
    if (this._element)
      this._element.addEventListener(type, this.eventForwarder);
    this._eventOutput.on(type, fn);
  };
  ElementOutput.prototype.removeListener = function removeListener(type, fn) {
    this._eventOutput.removeListener(type, fn);
  };
  ElementOutput.prototype.emit = function emit(type, event) {
    if (event && !event.origin)
      event.origin = this;
    var handled = this._eventOutput.emit(type, event);
    if (handled && event && event.stopPropagation)
      event.stopPropagation();
    return handled;
  };
  ElementOutput.prototype.pipe = function pipe(target) {
    return this._eventOutput.pipe(target);
  };
  ElementOutput.prototype.unpipe = function unpipe(target) {
    return this._eventOutput.unpipe(target);
  };
  ElementOutput.prototype.render = function render() {
    return this.id;
  };
  function _addEventListeners(target) {
    for (var i in this._eventOutput.listeners) {
      target.addEventListener(i, this.eventForwarder);
    }
  }
  function _removeEventListeners(target) {
    for (var i in this._eventOutput.listeners) {
      target.removeEventListener(i, this.eventForwarder);
    }
  }
  function _formatCSSTransform(m) {
    m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;
    m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;
    var result = 'matrix3d(';
    for (var i = 0; i < 15; i++) {
      result += (m[i] < 0.000001 && m[i] > -0.000001) ? '0,' : m[i] + ',';
    }
    result += m[15] + ')';
    return result;
  }
  var _setMatrix;
  if (usePrefix) {
    _setMatrix = function(element, matrix) {
      element.style.webkitTransform = _formatCSSTransform(matrix);
    };
  } else {
    _setMatrix = function(element, matrix) {
      element.style.transform = _formatCSSTransform(matrix);
    };
  }
  function _formatCSSOrigin(origin) {
    return (100 * origin[0]) + '% ' + (100 * origin[1]) + '%';
  }
  var _setOrigin = usePrefix ? function(element, origin) {
    element.style.webkitTransformOrigin = _formatCSSOrigin(origin);
  } : function(element, origin) {
    element.style.transformOrigin = _formatCSSOrigin(origin);
  };
  var _setInvisible = usePrefix ? function(element) {
    element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';
    element.style.opacity = 0;
  } : function(element) {
    element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';
    element.style.opacity = 0;
  };
  function _xyNotEquals(a, b) {
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;
  }
  ElementOutput.prototype.commit = function commit(context) {
    var target = this._element;
    if (!target)
      return;
    var matrix = context.transform;
    var opacity = context.opacity;
    var origin = context.origin;
    var size = context.size;
    if (!matrix && this._matrix) {
      this._matrix = null;
      this._opacity = 0;
      _setInvisible(target);
      return;
    }
    if (_xyNotEquals(this._origin, origin))
      this._originDirty = true;
    if (Transform.notEquals(this._matrix, matrix))
      this._transformDirty = true;
    if (this._invisible) {
      this._invisible = false;
      this._element.style.display = '';
    }
    if (this._opacity !== opacity) {
      this._opacity = opacity;
      target.style.opacity = (opacity >= 1) ? '0.999999' : opacity;
    }
    if (this._transformDirty || this._originDirty || this._sizeDirty) {
      if (this._sizeDirty)
        this._sizeDirty = false;
      if (this._originDirty) {
        if (origin) {
          if (!this._origin)
            this._origin = [0, 0];
          this._origin[0] = origin[0];
          this._origin[1] = origin[1];
        } else
          this._origin = null;
        _setOrigin(target, this._origin);
        this._originDirty = false;
      }
      if (!matrix)
        matrix = Transform.identity;
      this._matrix = matrix;
      var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0] * origin[0], -this._size[1] * origin[1], 0]) : matrix;
      _setMatrix(target, aaMatrix);
      this._transformDirty = false;
    }
  };
  ElementOutput.prototype.cleanup = function cleanup() {
    if (this._element) {
      this._invisible = true;
      this._element.style.display = 'none';
    }
  };
  ElementOutput.prototype.attach = function attach(target) {
    this._element = target;
    _addEventListeners.call(this, target);
  };
  ElementOutput.prototype.detach = function detach() {
    var target = this._element;
    if (target) {
      _removeEventListeners.call(this, target);
      if (this._invisible) {
        this._invisible = false;
        this._element.style.display = '';
      }
    }
    this._element = null;
    return target;
  };
  module.exports = ElementOutput;
});

})();
(function() {
var define = $__System.amdDefine;
define("146", ["require", "exports", "module", "199"], function(require, exports, module) {
  var ElementOutput = require('199');
  function Surface(options) {
    ElementOutput.call(this);
    this.options = {};
    this.properties = {};
    this.attributes = {};
    this.content = '';
    this.classList = [];
    this.size = null;
    this._classesDirty = true;
    this._stylesDirty = true;
    this._attributesDirty = true;
    this._sizeDirty = true;
    this._contentDirty = true;
    this._trueSizeCheck = true;
    this._dirtyClasses = [];
    if (options)
      this.setOptions(options);
    this._currentTarget = null;
  }
  Surface.prototype = Object.create(ElementOutput.prototype);
  Surface.prototype.constructor = Surface;
  Surface.prototype.elementType = 'div';
  Surface.prototype.elementClass = 'famous-surface';
  Surface.prototype.setAttributes = function setAttributes(attributes) {
    for (var n in attributes) {
      if (n === 'style')
        throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
      this.attributes[n] = attributes[n];
    }
    this._attributesDirty = true;
  };
  Surface.prototype.getAttributes = function getAttributes() {
    return this.attributes;
  };
  Surface.prototype.setProperties = function setProperties(properties) {
    for (var n in properties) {
      this.properties[n] = properties[n];
    }
    this._stylesDirty = true;
    return this;
  };
  Surface.prototype.getProperties = function getProperties() {
    return this.properties;
  };
  Surface.prototype.addClass = function addClass(className) {
    if (this.classList.indexOf(className) < 0) {
      this.classList.push(className);
      this._classesDirty = true;
    }
    return this;
  };
  Surface.prototype.removeClass = function removeClass(className) {
    var i = this.classList.indexOf(className);
    if (i >= 0) {
      this._dirtyClasses.push(this.classList.splice(i, 1)[0]);
      this._classesDirty = true;
    }
    return this;
  };
  Surface.prototype.toggleClass = function toggleClass(className) {
    var i = this.classList.indexOf(className);
    if (i >= 0) {
      this.removeClass(className);
    } else {
      this.addClass(className);
    }
    return this;
  };
  Surface.prototype.setClasses = function setClasses(classList) {
    var i = 0;
    var removal = [];
    for (i = 0; i < this.classList.length; i++) {
      if (classList.indexOf(this.classList[i]) < 0)
        removal.push(this.classList[i]);
    }
    for (i = 0; i < removal.length; i++)
      this.removeClass(removal[i]);
    for (i = 0; i < classList.length; i++)
      this.addClass(classList[i]);
    return this;
  };
  Surface.prototype.getClassList = function getClassList() {
    return this.classList;
  };
  Surface.prototype.setContent = function setContent(content) {
    if (this.content !== content) {
      this.content = content;
      this._contentDirty = true;
    }
    return this;
  };
  Surface.prototype.getContent = function getContent() {
    return this.content;
  };
  Surface.prototype.setOptions = function setOptions(options) {
    if (options.size)
      this.setSize(options.size);
    if (options.classes)
      this.setClasses(options.classes);
    if (options.properties)
      this.setProperties(options.properties);
    if (options.attributes)
      this.setAttributes(options.attributes);
    if (options.content)
      this.setContent(options.content);
    return this;
  };
  function _cleanupClasses(target) {
    for (var i = 0; i < this._dirtyClasses.length; i++)
      target.classList.remove(this._dirtyClasses[i]);
    this._dirtyClasses = [];
  }
  function _applyStyles(target) {
    for (var n in this.properties) {
      target.style[n] = this.properties[n];
    }
  }
  function _cleanupStyles(target) {
    for (var n in this.properties) {
      target.style[n] = '';
    }
  }
  function _applyAttributes(target) {
    for (var n in this.attributes) {
      target.setAttribute(n, this.attributes[n]);
    }
  }
  function _cleanupAttributes(target) {
    for (var n in this.attributes) {
      target.removeAttribute(n);
    }
  }
  function _xyNotEquals(a, b) {
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;
  }
  Surface.prototype.setup = function setup(allocator) {
    var target = allocator.allocate(this.elementType);
    if (this.elementClass) {
      if (this.elementClass instanceof Array) {
        for (var i = 0; i < this.elementClass.length; i++) {
          target.classList.add(this.elementClass[i]);
        }
      } else {
        target.classList.add(this.elementClass);
      }
    }
    target.style.display = '';
    this.attach(target);
    this._opacity = null;
    this._currentTarget = target;
    this._stylesDirty = true;
    this._classesDirty = true;
    this._attributesDirty = true;
    this._sizeDirty = true;
    this._contentDirty = true;
    this._originDirty = true;
    this._transformDirty = true;
  };
  Surface.prototype.commit = function commit(context) {
    if (!this._currentTarget)
      this.setup(context.allocator);
    var target = this._currentTarget;
    var size = context.size;
    if (this._classesDirty) {
      _cleanupClasses.call(this, target);
      var classList = this.getClassList();
      for (var i = 0; i < classList.length; i++)
        target.classList.add(classList[i]);
      this._classesDirty = false;
      this._trueSizeCheck = true;
    }
    if (this._stylesDirty) {
      _applyStyles.call(this, target);
      this._stylesDirty = false;
      this._trueSizeCheck = true;
    }
    if (this._attributesDirty) {
      _applyAttributes.call(this, target);
      this._attributesDirty = false;
      this._trueSizeCheck = true;
    }
    if (this.size) {
      var origSize = context.size;
      size = [this.size[0], this.size[1]];
      if (size[0] === undefined)
        size[0] = origSize[0];
      if (size[1] === undefined)
        size[1] = origSize[1];
      if (size[0] === true || size[1] === true) {
        if (size[0] === true) {
          if (this._trueSizeCheck || (this._size[0] === 0)) {
            var width = target.offsetWidth;
            if (this._size && this._size[0] !== width) {
              this._size[0] = width;
              this._sizeDirty = true;
            }
            size[0] = width;
          } else {
            if (this._size)
              size[0] = this._size[0];
          }
        }
        if (size[1] === true) {
          if (this._trueSizeCheck || (this._size[1] === 0)) {
            var height = target.offsetHeight;
            if (this._size && this._size[1] !== height) {
              this._size[1] = height;
              this._sizeDirty = true;
            }
            size[1] = height;
          } else {
            if (this._size)
              size[1] = this._size[1];
          }
        }
        this._trueSizeCheck = false;
      }
    }
    if (_xyNotEquals(this._size, size)) {
      if (!this._size)
        this._size = [0, 0];
      this._size[0] = size[0];
      this._size[1] = size[1];
      this._sizeDirty = true;
    }
    if (this._sizeDirty) {
      if (this._size) {
        target.style.width = this.size && this.size[0] === true || this._size[0] == true ? '' : this._size[0] + 'px';
        target.style.height = this.size && this.size[1] === true || this._size[1] == true ? '' : this._size[1] + 'px';
      }
      this._eventOutput.emit('resize');
    }
    if (this._contentDirty) {
      this.deploy(target);
      this._eventOutput.emit('deploy');
      this._contentDirty = false;
      this._trueSizeCheck = true;
    }
    ElementOutput.prototype.commit.call(this, context);
  };
  Surface.prototype.cleanup = function cleanup(allocator) {
    var i = 0;
    var target = this._currentTarget;
    this._eventOutput.emit('recall');
    this.recall(target);
    target.style.display = 'none';
    target.style.opacity = '';
    target.style.width = '';
    target.style.height = '';
    _cleanupStyles.call(this, target);
    _cleanupAttributes.call(this, target);
    var classList = this.getClassList();
    _cleanupClasses.call(this, target);
    for (i = 0; i < classList.length; i++)
      target.classList.remove(classList[i]);
    if (this.elementClass) {
      if (this.elementClass instanceof Array) {
        for (i = 0; i < this.elementClass.length; i++) {
          target.classList.remove(this.elementClass[i]);
        }
      } else {
        target.classList.remove(this.elementClass);
      }
    }
    this.detach(target);
    this._currentTarget = null;
    allocator.deallocate(target);
  };
  Surface.prototype.deploy = function deploy(target) {
    var content = this.getContent();
    if (content instanceof Node) {
      while (target.hasChildNodes())
        target.removeChild(target.firstChild);
      target.appendChild(content);
    } else
      target.innerHTML = content;
    this.content = target.innerHTML;
  };
  Surface.prototype.recall = function recall(target) {
    if (!this._contentDirty) {
      var df = document.createDocumentFragment();
      while (target.hasChildNodes()) {
        df.appendChild(target.firstChild);
      }
      this.setContent(df);
    } else {
      this._contentDirty = true;
    }
  };
  Surface.prototype.getSize = function getSize() {
    return this._size ? this._size : this.size;
  };
  Surface.prototype.setSize = function setSize(size) {
    this.size = size ? [size[0], size[1]] : null;
    this._sizeDirty = true;
    return this;
  };
  module.exports = Surface;
});

})();
(function() {
var define = $__System.amdDefine;
define("19a", ["require", "exports", "module", "154", "139", "146"], function(require, exports, module) {
  var Context = require('154');
  var Transform = require('139');
  var Surface = require('146');
  function Group(options) {
    Surface.call(this, options);
    this._shouldRecalculateSize = false;
    this._container = document.createDocumentFragment();
    this.context = new Context(this._container);
    this.setContent(this._container);
    this._groupSize = [undefined, undefined];
  }
  Group.SIZE_ZERO = [0, 0];
  Group.prototype = Object.create(Surface.prototype);
  Group.prototype.elementType = 'div';
  Group.prototype.elementClass = 'famous-group';
  Group.prototype.add = function add() {
    return this.context.add.apply(this.context, arguments);
  };
  Group.prototype.render = function render() {
    return Surface.prototype.render.call(this);
  };
  Group.prototype.deploy = function deploy(target) {
    this.context.migrate(target);
  };
  Group.prototype.recall = function recall(target) {
    this._container = document.createDocumentFragment();
    this.context.migrate(this._container);
  };
  Group.prototype.commit = function commit(context) {
    var transform = context.transform;
    var origin = context.origin;
    var opacity = context.opacity;
    var size = context.size;
    var result = Surface.prototype.commit.call(this, {
      allocator: context.allocator,
      transform: Transform.thenMove(transform, [-origin[0] * size[0], -origin[1] * size[1], 0]),
      opacity: opacity,
      origin: origin,
      size: Group.SIZE_ZERO
    });
    if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {
      this._groupSize[0] = size[0];
      this._groupSize[1] = size[1];
      this.context.setSize(size);
    }
    this.context.update({
      transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),
      origin: origin,
      size: size
    });
    return result;
  };
  module.exports = Group;
});

})();
(function() {
var define = $__System.amdDefine;
define("197", ["require", "exports", "module", "14a"], function(require, exports, module) {
  var EventHandler = require('14a');
  function PhysicsEngine(options) {
    this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);
    if (options)
      this.setOptions(options);
    this._particles = [];
    this._bodies = [];
    this._agentData = {};
    this._forces = [];
    this._constraints = [];
    this._buffer = 0.0;
    this._prevTime = now();
    this._isSleeping = false;
    this._eventHandler = null;
    this._currAgentId = 0;
    this._hasBodies = false;
    this._eventHandler = null;
  }
  var TIMESTEP = 17;
  var MIN_TIME_STEP = 1000 / 120;
  var MAX_TIME_STEP = 17;
  var now = Date.now;
  var _events = {
    start: 'start',
    update: 'update',
    end: 'end'
  };
  PhysicsEngine.DEFAULT_OPTIONS = {
    constraintSteps: 1,
    sleepTolerance: 1e-7,
    velocityCap: undefined,
    angularVelocityCap: undefined
  };
  PhysicsEngine.prototype.setOptions = function setOptions(opts) {
    for (var key in opts)
      if (this.options[key])
        this.options[key] = opts[key];
  };
  PhysicsEngine.prototype.addBody = function addBody(body) {
    body._engine = this;
    if (body.isBody) {
      this._bodies.push(body);
      this._hasBodies = true;
    } else
      this._particles.push(body);
    body.on('start', this.wake.bind(this));
    return body;
  };
  PhysicsEngine.prototype.removeBody = function removeBody(body) {
    var array = (body.isBody) ? this._bodies : this._particles;
    var index = array.indexOf(body);
    if (index > -1) {
      for (var agentKey in this._agentData) {
        if (this._agentData.hasOwnProperty(agentKey)) {
          this.detachFrom(this._agentData[agentKey].id, body);
        }
      }
      array.splice(index, 1);
    }
    if (this.getBodies().length === 0)
      this._hasBodies = false;
  };
  function _mapAgentArray(agent) {
    if (agent.applyForce)
      return this._forces;
    if (agent.applyConstraint)
      return this._constraints;
  }
  function _attachOne(agent, targets, source) {
    if (targets === undefined)
      targets = this.getParticlesAndBodies();
    if (!(targets instanceof Array))
      targets = [targets];
    agent.on('change', this.wake.bind(this));
    this._agentData[this._currAgentId] = {
      agent: agent,
      id: this._currAgentId,
      targets: targets,
      source: source
    };
    _mapAgentArray.call(this, agent).push(this._currAgentId);
    return this._currAgentId++;
  }
  PhysicsEngine.prototype.attach = function attach(agents, targets, source) {
    this.wake();
    if (agents instanceof Array) {
      var agentIDs = [];
      for (var i = 0; i < agents.length; i++)
        agentIDs[i] = _attachOne.call(this, agents[i], targets, source);
      return agentIDs;
    } else
      return _attachOne.call(this, agents, targets, source);
  };
  PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {
    _getAgentData.call(this, agentID).targets.push(target);
  };
  PhysicsEngine.prototype.detach = function detach(id) {
    var agent = this.getAgent(id);
    var agentArray = _mapAgentArray.call(this, agent);
    var index = agentArray.indexOf(id);
    agentArray.splice(index, 1);
    delete this._agentData[id];
  };
  PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {
    var boundAgent = _getAgentData.call(this, id);
    if (boundAgent.source === target)
      this.detach(id);
    else {
      var targets = boundAgent.targets;
      var index = targets.indexOf(target);
      if (index > -1)
        targets.splice(index, 1);
    }
  };
  PhysicsEngine.prototype.detachAll = function detachAll() {
    this._agentData = {};
    this._forces = [];
    this._constraints = [];
    this._currAgentId = 0;
  };
  function _getAgentData(id) {
    return this._agentData[id];
  }
  PhysicsEngine.prototype.getAgent = function getAgent(id) {
    return _getAgentData.call(this, id).agent;
  };
  PhysicsEngine.prototype.getParticles = function getParticles() {
    return this._particles;
  };
  PhysicsEngine.prototype.getBodies = function getBodies() {
    return this._bodies;
  };
  PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {
    return this.getParticles().concat(this.getBodies());
  };
  PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {
    var particles = this.getParticles();
    for (var index = 0,
        len = particles.length; index < len; index++)
      fn.call(this, particles[index], dt);
  };
  PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {
    if (!this._hasBodies)
      return;
    var bodies = this.getBodies();
    for (var index = 0,
        len = bodies.length; index < len; index++)
      fn.call(this, bodies[index], dt);
  };
  PhysicsEngine.prototype.forEach = function forEach(fn, dt) {
    this.forEachParticle(fn, dt);
    this.forEachBody(fn, dt);
  };
  function _updateForce(index) {
    var boundAgent = _getAgentData.call(this, this._forces[index]);
    boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);
  }
  function _updateForces() {
    for (var index = this._forces.length - 1; index > -1; index--)
      _updateForce.call(this, index);
  }
  function _updateConstraint(index, dt) {
    var boundAgent = this._agentData[this._constraints[index]];
    return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);
  }
  function _updateConstraints(dt) {
    var iteration = 0;
    while (iteration < this.options.constraintSteps) {
      for (var index = this._constraints.length - 1; index > -1; index--)
        _updateConstraint.call(this, index, dt);
      iteration++;
    }
  }
  function _updateVelocities(body, dt) {
    body.integrateVelocity(dt);
    if (this.options.velocityCap)
      body.velocity.cap(this.options.velocityCap).put(body.velocity);
  }
  function _updateAngularVelocities(body, dt) {
    body.integrateAngularMomentum(dt);
    body.updateAngularVelocity();
    if (this.options.angularVelocityCap)
      body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);
  }
  function _updateOrientations(body, dt) {
    body.integrateOrientation(dt);
  }
  function _updatePositions(body, dt) {
    body.integratePosition(dt);
    body.emit(_events.update, body);
  }
  function _integrate(dt) {
    _updateForces.call(this, dt);
    this.forEach(_updateVelocities, dt);
    this.forEachBody(_updateAngularVelocities, dt);
    _updateConstraints.call(this, dt);
    this.forEachBody(_updateOrientations, dt);
    this.forEach(_updatePositions, dt);
  }
  function _getParticlesEnergy() {
    var energy = 0.0;
    var particleEnergy = 0.0;
    this.forEach(function(particle) {
      particleEnergy = particle.getEnergy();
      energy += particleEnergy;
    });
    return energy;
  }
  function _getAgentsEnergy() {
    var energy = 0;
    for (var id in this._agentData)
      energy += this.getAgentEnergy(id);
    return energy;
  }
  PhysicsEngine.prototype.getAgentEnergy = function(agentId) {
    var agentData = _getAgentData.call(this, agentId);
    return agentData.agent.getEnergy(agentData.targets, agentData.source);
  };
  PhysicsEngine.prototype.getEnergy = function getEnergy() {
    return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);
  };
  PhysicsEngine.prototype.step = function step() {
    if (this.isSleeping())
      return;
    var currTime = now();
    var dtFrame = currTime - this._prevTime;
    this._prevTime = currTime;
    if (dtFrame < MIN_TIME_STEP)
      return;
    if (dtFrame > MAX_TIME_STEP)
      dtFrame = MAX_TIME_STEP;
    _integrate.call(this, TIMESTEP);
    this.emit(_events.update, this);
    if (this.getEnergy() < this.options.sleepTolerance)
      this.sleep();
  };
  PhysicsEngine.prototype.isSleeping = function isSleeping() {
    return this._isSleeping;
  };
  PhysicsEngine.prototype.isActive = function isSleeping() {
    return !this._isSleeping;
  };
  PhysicsEngine.prototype.sleep = function sleep() {
    if (this._isSleeping)
      return;
    this.forEach(function(body) {
      body.sleep();
    });
    this.emit(_events.end, this);
    this._isSleeping = true;
  };
  PhysicsEngine.prototype.wake = function wake() {
    if (!this._isSleeping)
      return;
    this._prevTime = now();
    this.emit(_events.start, this);
    this._isSleeping = false;
  };
  PhysicsEngine.prototype.emit = function emit(type, data) {
    if (this._eventHandler === null)
      return;
    this._eventHandler.emit(type, data);
  };
  PhysicsEngine.prototype.on = function on(event, fn) {
    if (this._eventHandler === null)
      this._eventHandler = new EventHandler();
    this._eventHandler.on(event, fn);
  };
  module.exports = PhysicsEngine;
});

})();
(function() {
var define = $__System.amdDefine;
define("19b", ["require", "exports", "module"], function(require, exports, module) {
  var SymplecticEuler = {};
  SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {
    var v = body.velocity;
    var w = body.inverseMass;
    var f = body.force;
    if (f.isZero())
      return;
    v.add(f.mult(dt * w)).put(v);
    f.clear();
  };
  SymplecticEuler.integratePosition = function integratePosition(body, dt) {
    var p = body.position;
    var v = body.velocity;
    p.add(v.mult(dt)).put(p);
  };
  SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {
    var L = body.angularMomentum;
    var t = body.torque;
    if (t.isZero())
      return;
    L.add(t.mult(dt)).put(L);
    t.clear();
  };
  SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {
    var q = body.orientation;
    var w = body.angularVelocity;
    if (w.isZero())
      return;
    q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);
  };
  module.exports = SymplecticEuler;
});

})();
(function() {
var define = $__System.amdDefine;
define("195", ["require", "exports", "module", "194", "139", "14a", "19b"], function(require, exports, module) {
  var Vector = require('194');
  var Transform = require('139');
  var EventHandler = require('14a');
  var Integrator = require('19b');
  function Particle(options) {
    options = options || {};
    var defaults = Particle.DEFAULT_OPTIONS;
    this.position = new Vector();
    this.velocity = new Vector();
    this.force = new Vector();
    this._engine = null;
    this._isSleeping = true;
    this._eventOutput = null;
    this.mass = (options.mass !== undefined) ? options.mass : defaults.mass;
    this.inverseMass = 1 / this.mass;
    this.setPosition(options.position || defaults.position);
    this.setVelocity(options.velocity || defaults.velocity);
    this.force.set(options.force || [0, 0, 0]);
    this.transform = Transform.identity.slice();
    this._spec = {
      size: [true, true],
      target: {
        transform: this.transform,
        origin: [0.5, 0.5],
        target: null
      }
    };
  }
  Particle.DEFAULT_OPTIONS = {
    position: [0, 0, 0],
    velocity: [0, 0, 0],
    mass: 1
  };
  var _events = {
    start: 'start',
    update: 'update',
    end: 'end'
  };
  var now = Date.now;
  Particle.prototype.isBody = false;
  Particle.prototype.isActive = function isActive() {
    return !this._isSleeping;
  };
  Particle.prototype.sleep = function sleep() {
    if (this._isSleeping)
      return;
    this.emit(_events.end, this);
    this._isSleeping = true;
  };
  Particle.prototype.wake = function wake() {
    if (!this._isSleeping)
      return;
    this.emit(_events.start, this);
    this._isSleeping = false;
    this._prevTime = now();
    if (this._engine)
      this._engine.wake();
  };
  Particle.prototype.setPosition = function setPosition(position) {
    this.position.set(position);
  };
  Particle.prototype.setPosition1D = function setPosition1D(x) {
    this.position.x = x;
  };
  Particle.prototype.getPosition = function getPosition() {
    this._engine.step();
    return this.position.get();
  };
  Particle.prototype.getPosition1D = function getPosition1D() {
    this._engine.step();
    return this.position.x;
  };
  Particle.prototype.setVelocity = function setVelocity(velocity) {
    this.velocity.set(velocity);
    if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0))
      this.wake();
  };
  Particle.prototype.setVelocity1D = function setVelocity1D(x) {
    this.velocity.x = x;
    if (x !== 0)
      this.wake();
  };
  Particle.prototype.getVelocity = function getVelocity() {
    return this.velocity.get();
  };
  Particle.prototype.setForce = function setForce(force) {
    this.force.set(force);
    this.wake();
  };
  Particle.prototype.getVelocity1D = function getVelocity1D() {
    return this.velocity.x;
  };
  Particle.prototype.setMass = function setMass(mass) {
    this.mass = mass;
    this.inverseMass = 1 / mass;
  };
  Particle.prototype.getMass = function getMass() {
    return this.mass;
  };
  Particle.prototype.reset = function reset(position, velocity) {
    this.setPosition(position || [0, 0, 0]);
    this.setVelocity(velocity || [0, 0, 0]);
  };
  Particle.prototype.applyForce = function applyForce(force) {
    if (force.isZero())
      return;
    this.force.add(force).put(this.force);
    this.wake();
  };
  Particle.prototype.applyImpulse = function applyImpulse(impulse) {
    if (impulse.isZero())
      return;
    var velocity = this.velocity;
    velocity.add(impulse.mult(this.inverseMass)).put(velocity);
  };
  Particle.prototype.integrateVelocity = function integrateVelocity(dt) {
    Integrator.integrateVelocity(this, dt);
  };
  Particle.prototype.integratePosition = function integratePosition(dt) {
    Integrator.integratePosition(this, dt);
  };
  Particle.prototype._integrate = function _integrate(dt) {
    this.integrateVelocity(dt);
    this.integratePosition(dt);
  };
  Particle.prototype.getEnergy = function getEnergy() {
    return 0.5 * this.mass * this.velocity.normSquared();
  };
  Particle.prototype.getTransform = function getTransform() {
    this._engine.step();
    var position = this.position;
    var transform = this.transform;
    transform[12] = position.x;
    transform[13] = position.y;
    transform[14] = position.z;
    return transform;
  };
  Particle.prototype.modify = function modify(target) {
    var _spec = this._spec.target;
    _spec.transform = this.getTransform();
    _spec.target = target;
    return this._spec;
  };
  function _createEventOutput() {
    this._eventOutput = new EventHandler();
    this._eventOutput.bindThis(this);
    EventHandler.setOutputHandler(this, this._eventOutput);
  }
  Particle.prototype.emit = function emit(type, data) {
    if (!this._eventOutput)
      return;
    this._eventOutput.emit(type, data);
  };
  Particle.prototype.on = function on() {
    _createEventOutput.call(this);
    return this.on.apply(this, arguments);
  };
  Particle.prototype.removeListener = function removeListener() {
    _createEventOutput.call(this);
    return this.removeListener.apply(this, arguments);
  };
  Particle.prototype.pipe = function pipe() {
    _createEventOutput.call(this);
    return this.pipe.apply(this, arguments);
  };
  Particle.prototype.unpipe = function unpipe() {
    _createEventOutput.call(this);
    return this.unpipe.apply(this, arguments);
  };
  module.exports = Particle;
});

})();
(function() {
var define = $__System.amdDefine;
define("19c", ["require", "exports", "module", "19d"], function(require, exports, module) {
  var Force = require('19d');
  function Drag(options) {
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
      this.setOptions(options);
    Force.call(this);
  }
  Drag.prototype = Object.create(Force.prototype);
  Drag.prototype.constructor = Drag;
  Drag.FORCE_FUNCTIONS = {
    LINEAR: function(velocity) {
      return velocity;
    },
    QUADRATIC: function(velocity) {
      return velocity.mult(velocity.norm());
    }
  };
  Drag.DEFAULT_OPTIONS = {
    strength: 0.01,
    forceFunction: Drag.FORCE_FUNCTIONS.LINEAR
  };
  Drag.prototype.applyForce = function applyForce(targets) {
    var strength = this.options.strength;
    var forceFunction = this.options.forceFunction;
    var force = this.force;
    var index;
    var particle;
    for (index = 0; index < targets.length; index++) {
      particle = targets[index];
      forceFunction(particle.velocity).mult(-strength).put(force);
      particle.applyForce(force);
    }
  };
  Drag.prototype.setOptions = function setOptions(options) {
    for (var key in options)
      this.options[key] = options[key];
  };
  module.exports = Drag;
});

})();
(function() {
var define = $__System.amdDefine;
define("19d", ["require", "exports", "module", "194", "14a"], function(require, exports, module) {
  var Vector = require('194');
  var EventHandler = require('14a');
  function Force(force) {
    this.force = new Vector(force);
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
  }
  Force.prototype.setOptions = function setOptions(options) {
    this._eventOutput.emit('change', options);
  };
  Force.prototype.applyForce = function applyForce(targets) {
    var length = targets.length;
    while (length--) {
      targets[length].applyForce(this.force);
    }
  };
  Force.prototype.getEnergy = function getEnergy() {
    return 0.0;
  };
  module.exports = Force;
});

})();
(function() {
var define = $__System.amdDefine;
define("194", ["require", "exports", "module"], function(require, exports, module) {
  function Vector(x, y, z) {
    if (arguments.length === 1 && x !== undefined)
      this.set(x);
    else {
      this.x = x || 0;
      this.y = y || 0;
      this.z = z || 0;
    }
    return this;
  }
  var _register = new Vector(0, 0, 0);
  Vector.prototype.add = function add(v) {
    return _setXYZ.call(_register, this.x + v.x, this.y + v.y, this.z + v.z);
  };
  Vector.prototype.sub = function sub(v) {
    return _setXYZ.call(_register, this.x - v.x, this.y - v.y, this.z - v.z);
  };
  Vector.prototype.mult = function mult(r) {
    return _setXYZ.call(_register, r * this.x, r * this.y, r * this.z);
  };
  Vector.prototype.div = function div(r) {
    return this.mult(1 / r);
  };
  Vector.prototype.cross = function cross(v) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var vx = v.x;
    var vy = v.y;
    var vz = v.z;
    return _setXYZ.call(_register, z * vy - y * vz, x * vz - z * vx, y * vx - x * vy);
  };
  Vector.prototype.equals = function equals(v) {
    return (v.x === this.x && v.y === this.y && v.z === this.z);
  };
  Vector.prototype.rotateX = function rotateX(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, x, y * cosTheta - z * sinTheta, y * sinTheta + z * cosTheta);
  };
  Vector.prototype.rotateY = function rotateY(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, z * sinTheta + x * cosTheta, y, z * cosTheta - x * sinTheta);
  };
  Vector.prototype.rotateZ = function rotateZ(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, x * cosTheta - y * sinTheta, x * sinTheta + y * cosTheta, z);
  };
  Vector.prototype.dot = function dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
  };
  Vector.prototype.normSquared = function normSquared() {
    return this.dot(this);
  };
  Vector.prototype.norm = function norm() {
    return Math.sqrt(this.normSquared());
  };
  Vector.prototype.normalize = function normalize(length) {
    if (arguments.length === 0)
      length = 1;
    var norm = this.norm();
    if (norm > 1e-7)
      return _setFromVector.call(_register, this.mult(length / norm));
    else
      return _setXYZ.call(_register, length, 0, 0);
  };
  Vector.prototype.clone = function clone() {
    return new Vector(this);
  };
  Vector.prototype.isZero = function isZero() {
    return !(this.x || this.y || this.z);
  };
  function _setXYZ(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  function _setFromArray(v) {
    return _setXYZ.call(this, v[0], v[1], v[2] || 0);
  }
  function _setFromVector(v) {
    return _setXYZ.call(this, v.x, v.y, v.z);
  }
  function _setFromNumber(x) {
    return _setXYZ.call(this, x, 0, 0);
  }
  Vector.prototype.set = function set(v) {
    if (v instanceof Array)
      return _setFromArray.call(this, v);
    if (typeof v === 'number')
      return _setFromNumber.call(this, v);
    return _setFromVector.call(this, v);
  };
  Vector.prototype.setXYZ = function(x, y, z) {
    return _setXYZ.apply(this, arguments);
  };
  Vector.prototype.set1D = function(x) {
    return _setFromNumber.call(this, x);
  };
  Vector.prototype.put = function put(v) {
    if (this === _register)
      _setFromVector.call(v, _register);
    else
      _setFromVector.call(v, this);
  };
  Vector.prototype.clear = function clear() {
    return _setXYZ.call(this, 0, 0, 0);
  };
  Vector.prototype.cap = function cap(cap) {
    if (cap === Infinity)
      return _setFromVector.call(_register, this);
    var norm = this.norm();
    if (norm > cap)
      return _setFromVector.call(_register, this.mult(cap / norm));
    else
      return _setFromVector.call(_register, this);
  };
  Vector.prototype.project = function project(n) {
    return n.mult(this.dot(n));
  };
  Vector.prototype.reflectAcross = function reflectAcross(n) {
    n.normalize().put(n);
    return _setFromVector(_register, this.sub(this.project(n).mult(2)));
  };
  Vector.prototype.get = function get() {
    return [this.x, this.y, this.z];
  };
  Vector.prototype.get1D = function() {
    return this.x;
  };
  module.exports = Vector;
});

})();
(function() {
var define = $__System.amdDefine;
define("196", ["require", "exports", "module", "19d", "194"], function(require, exports, module) {
  var Force = require('19d');
  var Vector = require('194');
  function Spring(options) {
    Force.call(this);
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
      this.setOptions(options);
    this.disp = new Vector(0, 0, 0);
    _init.call(this);
  }
  Spring.prototype = Object.create(Force.prototype);
  Spring.prototype.constructor = Spring;
  var pi = Math.PI;
  var MIN_PERIOD = 150;
  Spring.FORCE_FUNCTIONS = {
    FENE: function(dist, rMax) {
      var rMaxSmall = rMax * .99;
      var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);
      return r / (1 - r * r / (rMax * rMax));
    },
    HOOK: function(dist) {
      return dist;
    }
  };
  Spring.DEFAULT_OPTIONS = {
    period: 300,
    dampingRatio: 0.1,
    length: 0,
    maxLength: Infinity,
    anchor: undefined,
    forceFunction: Spring.FORCE_FUNCTIONS.HOOK
  };
  function _calcStiffness() {
    var options = this.options;
    options.stiffness = Math.pow(2 * pi / options.period, 2);
  }
  function _calcDamping() {
    var options = this.options;
    options.damping = 4 * pi * options.dampingRatio / options.period;
  }
  function _init() {
    _calcStiffness.call(this);
    _calcDamping.call(this);
  }
  Spring.prototype.setOptions = function setOptions(options) {
    if (options.anchor !== undefined) {
      if (options.anchor.position instanceof Vector)
        this.options.anchor = options.anchor.position;
      if (options.anchor instanceof Vector)
        this.options.anchor = options.anchor;
      if (options.anchor instanceof Array)
        this.options.anchor = new Vector(options.anchor);
    }
    if (options.period !== undefined) {
      if (options.period < MIN_PERIOD) {
        options.period = MIN_PERIOD;
        console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
      }
      this.options.period = options.period;
    }
    if (options.dampingRatio !== undefined)
      this.options.dampingRatio = options.dampingRatio;
    if (options.length !== undefined)
      this.options.length = options.length;
    if (options.forceFunction !== undefined)
      this.options.forceFunction = options.forceFunction;
    if (options.maxLength !== undefined)
      this.options.maxLength = options.maxLength;
    _init.call(this);
    Force.prototype.setOptions.call(this, options);
  };
  Spring.prototype.applyForce = function applyForce(targets, source) {
    var force = this.force;
    var disp = this.disp;
    var options = this.options;
    var stiffness = options.stiffness;
    var damping = options.damping;
    var restLength = options.length;
    var maxLength = options.maxLength;
    var anchor = options.anchor || source.position;
    var forceFunction = options.forceFunction;
    var i;
    var target;
    var p2;
    var v2;
    var dist;
    var m;
    for (i = 0; i < targets.length; i++) {
      target = targets[i];
      p2 = target.position;
      v2 = target.velocity;
      anchor.sub(p2).put(disp);
      dist = disp.norm() - restLength;
      if (dist === 0)
        return;
      m = target.mass;
      stiffness *= m;
      damping *= m;
      disp.normalize(stiffness * forceFunction(dist, maxLength)).put(force);
      if (damping)
        if (source)
          force.add(v2.sub(source.velocity).mult(-damping)).put(force);
        else
          force.add(v2.mult(-damping)).put(force);
      target.applyForce(force);
      if (source)
        source.applyForce(force.mult(-1));
    }
  };
  Spring.prototype.getEnergy = function getEnergy(targets, source) {
    var options = this.options;
    var restLength = options.length;
    var anchor = (source) ? source.position : options.anchor;
    var strength = options.stiffness;
    var energy = 0.0;
    for (var i = 0; i < targets.length; i++) {
      var target = targets[i];
      var dist = anchor.sub(target.position).norm() - restLength;
      energy += 0.5 * strength * dist * dist;
    }
    return energy;
  };
  module.exports = Spring;
});

})();
(function() {
var define = $__System.amdDefine;
define("159", ["require", "exports", "module"], function(require, exports, module) {
  var entities = [];
  function get(id) {
    return entities[id];
  }
  function set(id, entity) {
    entities[id] = entity;
  }
  function register(entity) {
    var id = entities.length;
    set(id, entity);
    return id;
  }
  function unregister(id) {
    set(id, null);
  }
  module.exports = {
    register: register,
    unregister: unregister,
    get: get,
    set: set
  };
});

})();
(function() {
var define = $__System.amdDefine;
define("19e", ["require", "exports", "module", "139"], function(require, exports, module) {
  var Transform = require('139');
  function SpecParser() {
    this.result = {};
  }
  SpecParser._instance = new SpecParser();
  SpecParser.parse = function parse(spec, context) {
    return SpecParser._instance.parse(spec, context);
  };
  SpecParser.prototype.parse = function parse(spec, context) {
    this.reset();
    this._parseSpec(spec, context, Transform.identity);
    return this.result;
  };
  SpecParser.prototype.reset = function reset() {
    this.result = {};
  };
  function _vecInContext(v, m) {
    return [v[0] * m[0] + v[1] * m[4] + v[2] * m[8], v[0] * m[1] + v[1] * m[5] + v[2] * m[9], v[0] * m[2] + v[1] * m[6] + v[2] * m[10]];
  }
  var _zeroZero = [0, 0];
  SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {
    var id;
    var target;
    var transform;
    var opacity;
    var origin;
    var align;
    var size;
    if (typeof spec === 'number') {
      id = spec;
      transform = parentContext.transform;
      align = parentContext.align || _zeroZero;
      if (parentContext.size && align && (align[0] || align[1])) {
        var alignAdjust = [align[0] * parentContext.size[0], align[1] * parentContext.size[1], 0];
        transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));
      }
      this.result[id] = {
        transform: transform,
        opacity: parentContext.opacity,
        origin: parentContext.origin || _zeroZero,
        align: parentContext.align || _zeroZero,
        size: parentContext.size
      };
    } else if (!spec) {
      return;
    } else if (spec instanceof Array) {
      for (var i = 0; i < spec.length; i++) {
        this._parseSpec(spec[i], parentContext, sizeContext);
      }
    } else {
      target = spec.target;
      transform = parentContext.transform;
      opacity = parentContext.opacity;
      origin = parentContext.origin;
      align = parentContext.align;
      size = parentContext.size;
      var nextSizeContext = sizeContext;
      if (spec.opacity !== undefined)
        opacity = parentContext.opacity * spec.opacity;
      if (spec.transform)
        transform = Transform.multiply(parentContext.transform, spec.transform);
      if (spec.origin) {
        origin = spec.origin;
        nextSizeContext = parentContext.transform;
      }
      if (spec.align)
        align = spec.align;
      if (spec.size || spec.proportions) {
        var parentSize = size;
        size = [size[0], size[1]];
        if (spec.size) {
          if (spec.size[0] !== undefined)
            size[0] = spec.size[0];
          if (spec.size[1] !== undefined)
            size[1] = spec.size[1];
        }
        if (spec.proportions) {
          if (spec.proportions[0] !== undefined)
            size[0] = size[0] * spec.proportions[0];
          if (spec.proportions[1] !== undefined)
            size[1] = size[1] * spec.proportions[1];
        }
        if (parentSize) {
          if (align && (align[0] || align[1]))
            transform = Transform.thenMove(transform, _vecInContext([align[0] * parentSize[0], align[1] * parentSize[1], 0], sizeContext));
          if (origin && (origin[0] || origin[1]))
            transform = Transform.moveThen([-origin[0] * size[0], -origin[1] * size[1], 0], transform);
        }
        nextSizeContext = parentContext.transform;
        origin = null;
        align = null;
      }
      this._parseSpec(target, {
        transform: transform,
        opacity: opacity,
        origin: origin,
        align: align,
        size: size
      }, nextSizeContext);
    }
  };
  module.exports = SpecParser;
});

})();
(function() {
var define = $__System.amdDefine;
define("13f", ["require", "exports", "module", "159", "19e"], function(require, exports, module) {
  var Entity = require('159');
  var SpecParser = require('19e');
  function RenderNode(object) {
    this._object = null;
    this._child = null;
    this._hasMultipleChildren = false;
    this._isRenderable = false;
    this._isModifier = false;
    this._resultCache = {};
    this._prevResults = {};
    this._childResult = null;
    if (object)
      this.set(object);
  }
  RenderNode.prototype.add = function add(child) {
    var childNode = (child instanceof RenderNode) ? child : new RenderNode(child);
    if (this._child instanceof Array)
      this._child.push(childNode);
    else if (this._child) {
      this._child = [this._child, childNode];
      this._hasMultipleChildren = true;
      this._childResult = [];
    } else
      this._child = childNode;
    return childNode;
  };
  RenderNode.prototype.get = function get() {
    return this._object || (this._hasMultipleChildren ? null : (this._child ? this._child.get() : null));
  };
  RenderNode.prototype.set = function set(child) {
    this._childResult = null;
    this._hasMultipleChildren = false;
    this._isRenderable = child.render ? true : false;
    this._isModifier = child.modify ? true : false;
    this._object = child;
    this._child = null;
    if (child instanceof RenderNode)
      return child;
    else
      return this;
  };
  RenderNode.prototype.getSize = function getSize() {
    var result = null;
    var target = this.get();
    if (target && target.getSize)
      result = target.getSize();
    if (!result && this._child && this._child.getSize)
      result = this._child.getSize();
    return result;
  };
  function _applyCommit(spec, context, cacheStorage) {
    var result = SpecParser.parse(spec, context);
    var keys = Object.keys(result);
    for (var i = 0; i < keys.length; i++) {
      var id = keys[i];
      var childNode = Entity.get(id);
      var commitParams = result[id];
      commitParams.allocator = context.allocator;
      var commitResult = childNode.commit(commitParams);
      if (commitResult)
        _applyCommit(commitResult, context, cacheStorage);
      else
        cacheStorage[id] = commitParams;
    }
  }
  RenderNode.prototype.commit = function commit(context) {
    var prevKeys = Object.keys(this._prevResults);
    for (var i = 0; i < prevKeys.length; i++) {
      var id = prevKeys[i];
      if (this._resultCache[id] === undefined) {
        var object = Entity.get(id);
        if (object.cleanup)
          object.cleanup(context.allocator);
      }
    }
    this._prevResults = this._resultCache;
    this._resultCache = {};
    _applyCommit(this.render(), context, this._resultCache);
  };
  RenderNode.prototype.render = function render() {
    if (this._isRenderable)
      return this._object.render();
    var result = null;
    if (this._hasMultipleChildren) {
      result = this._childResult;
      var children = this._child;
      for (var i = 0; i < children.length; i++) {
        result[i] = children[i].render();
      }
    } else if (this._child)
      result = this._child.render();
    return this._isModifier ? this._object.modify(result) : result;
  };
  module.exports = RenderNode;
});

})();
(function() {
var define = $__System.amdDefine;
define("19f", ["require", "exports", "module"], function(require, exports, module) {
  function ElementAllocator(container) {
    if (!container)
      container = document.createDocumentFragment();
    this.container = container;
    this.detachedNodes = {};
    this.nodeCount = 0;
  }
  ElementAllocator.prototype.migrate = function migrate(container) {
    var oldContainer = this.container;
    if (container === oldContainer)
      return;
    if (oldContainer instanceof DocumentFragment) {
      container.appendChild(oldContainer);
    } else {
      while (oldContainer.hasChildNodes()) {
        container.appendChild(oldContainer.firstChild);
      }
    }
    this.container = container;
  };
  ElementAllocator.prototype.allocate = function allocate(type) {
    type = type.toLowerCase();
    if (!(type in this.detachedNodes))
      this.detachedNodes[type] = [];
    var nodeStore = this.detachedNodes[type];
    var result;
    if (nodeStore.length > 0) {
      result = nodeStore.pop();
    } else {
      result = document.createElement(type);
      this.container.appendChild(result);
    }
    this.nodeCount++;
    return result;
  };
  ElementAllocator.prototype.deallocate = function deallocate(element) {
    var nodeType = element.nodeName.toLowerCase();
    var nodeStore = this.detachedNodes[nodeType];
    nodeStore.push(element);
    this.nodeCount--;
  };
  ElementAllocator.prototype.getNodeCount = function getNodeCount() {
    return this.nodeCount;
  };
  module.exports = ElementAllocator;
});

})();
(function() {
var define = $__System.amdDefine;
define("139", ["require", "exports", "module"], function(require, exports, module) {
  var Transform = {};
  Transform.precision = 1e-6;
  Transform.identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  Transform.multiply4x4 = function multiply4x4(a, b) {
    return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3], a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3], a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3], a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3], a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7], a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7], a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7], a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7], a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11], a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11], a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11], a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11], a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15], a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]];
  };
  Transform.multiply = function multiply(a, b) {
    return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2], a[1] * b[0] + a[5] * b[1] + a[9] * b[2], a[2] * b[0] + a[6] * b[1] + a[10] * b[2], 0, a[0] * b[4] + a[4] * b[5] + a[8] * b[6], a[1] * b[4] + a[5] * b[5] + a[9] * b[6], a[2] * b[4] + a[6] * b[5] + a[10] * b[6], 0, a[0] * b[8] + a[4] * b[9] + a[8] * b[10], a[1] * b[8] + a[5] * b[9] + a[9] * b[10], a[2] * b[8] + a[6] * b[9] + a[10] * b[10], 0, a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14], 1];
  };
  Transform.thenMove = function thenMove(m, t) {
    if (!t[2])
      t[2] = 0;
    return [m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, m[12] + t[0], m[13] + t[1], m[14] + t[2], 1];
  };
  Transform.moveThen = function moveThen(v, m) {
    if (!v[2])
      v[2] = 0;
    var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];
    var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];
    var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];
    return Transform.thenMove(m, [t0, t1, t2]);
  };
  Transform.translate = function translate(x, y, z) {
    if (z === undefined)
      z = 0;
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];
  };
  Transform.thenScale = function thenScale(m, s) {
    return [s[0] * m[0], s[1] * m[1], s[2] * m[2], 0, s[0] * m[4], s[1] * m[5], s[2] * m[6], 0, s[0] * m[8], s[1] * m[9], s[2] * m[10], 0, s[0] * m[12], s[1] * m[13], s[2] * m[14], 1];
  };
  Transform.scale = function scale(x, y, z) {
    if (z === undefined)
      z = 1;
    if (y === undefined)
      y = x;
    return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];
  };
  Transform.rotateX = function rotateX(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [1, 0, 0, 0, 0, cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1];
  };
  Transform.rotateY = function rotateY(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [cosTheta, 0, -sinTheta, 0, 0, 1, 0, 0, sinTheta, 0, cosTheta, 0, 0, 0, 0, 1];
  };
  Transform.rotateZ = function rotateZ(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  };
  Transform.rotate = function rotate(phi, theta, psi) {
    var cosPhi = Math.cos(phi);
    var sinPhi = Math.sin(phi);
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    var cosPsi = Math.cos(psi);
    var sinPsi = Math.sin(psi);
    var result = [cosTheta * cosPsi, cosPhi * sinPsi + sinPhi * sinTheta * cosPsi, sinPhi * sinPsi - cosPhi * sinTheta * cosPsi, 0, -cosTheta * sinPsi, cosPhi * cosPsi - sinPhi * sinTheta * sinPsi, sinPhi * cosPsi + cosPhi * sinTheta * sinPsi, 0, sinTheta, -sinPhi * cosTheta, cosPhi * cosTheta, 0, 0, 0, 0, 1];
    return result;
  };
  Transform.rotateAxis = function rotateAxis(v, theta) {
    var sinTheta = Math.sin(theta);
    var cosTheta = Math.cos(theta);
    var verTheta = 1 - cosTheta;
    var xxV = v[0] * v[0] * verTheta;
    var xyV = v[0] * v[1] * verTheta;
    var xzV = v[0] * v[2] * verTheta;
    var yyV = v[1] * v[1] * verTheta;
    var yzV = v[1] * v[2] * verTheta;
    var zzV = v[2] * v[2] * verTheta;
    var xs = v[0] * sinTheta;
    var ys = v[1] * sinTheta;
    var zs = v[2] * sinTheta;
    var result = [xxV + cosTheta, xyV + zs, xzV - ys, 0, xyV - zs, yyV + cosTheta, yzV + xs, 0, xzV + ys, yzV - xs, zzV + cosTheta, 0, 0, 0, 0, 1];
    return result;
  };
  Transform.aboutOrigin = function aboutOrigin(v, m) {
    var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);
    var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);
    var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);
    return Transform.thenMove(m, [t0, t1, t2]);
  };
  Transform.skew = function skew(phi, theta, psi) {
    return [1, Math.tan(theta), 0, 0, Math.tan(psi), 1, 0, 0, 0, Math.tan(phi), 1, 0, 0, 0, 0, 1];
  };
  Transform.skewX = function skewX(angle) {
    return [1, 0, 0, 0, Math.tan(angle), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  };
  Transform.skewY = function skewY(angle) {
    return [1, Math.tan(angle), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  };
  Transform.perspective = function perspective(focusZ) {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1 / focusZ, 0, 0, 0, 1];
  };
  Transform.getTranslate = function getTranslate(m) {
    return [m[12], m[13], m[14]];
  };
  Transform.inverse = function inverse(m) {
    var c0 = m[5] * m[10] - m[6] * m[9];
    var c1 = m[4] * m[10] - m[6] * m[8];
    var c2 = m[4] * m[9] - m[5] * m[8];
    var c4 = m[1] * m[10] - m[2] * m[9];
    var c5 = m[0] * m[10] - m[2] * m[8];
    var c6 = m[0] * m[9] - m[1] * m[8];
    var c8 = m[1] * m[6] - m[2] * m[5];
    var c9 = m[0] * m[6] - m[2] * m[4];
    var c10 = m[0] * m[5] - m[1] * m[4];
    var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;
    var invD = 1 / detM;
    var result = [invD * c0, -invD * c4, invD * c8, 0, -invD * c1, invD * c5, -invD * c9, 0, invD * c2, -invD * c6, invD * c10, 0, 0, 0, 0, 1];
    result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];
    result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];
    result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];
    return result;
  };
  Transform.transpose = function transpose(m) {
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
  };
  function _normSquared(v) {
    return (v.length === 2) ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
  }
  function _norm(v) {
    return Math.sqrt(_normSquared(v));
  }
  function _sign(n) {
    return (n < 0) ? -1 : 1;
  }
  Transform.interpret = function interpret(M) {
    var x = [M[0], M[1], M[2]];
    var sgn = _sign(x[0]);
    var xNorm = _norm(x);
    var v = [x[0] + sgn * xNorm, x[1], x[2]];
    var mult = 2 / _normSquared(v);
    if (mult >= Infinity) {
      return {
        translate: Transform.getTranslate(M),
        rotate: [0, 0, 0],
        scale: [0, 0, 0],
        skew: [0, 0, 0]
      };
    }
    var Q1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
    Q1[0] = 1 - mult * v[0] * v[0];
    Q1[5] = 1 - mult * v[1] * v[1];
    Q1[10] = 1 - mult * v[2] * v[2];
    Q1[1] = -mult * v[0] * v[1];
    Q1[2] = -mult * v[0] * v[2];
    Q1[6] = -mult * v[1] * v[2];
    Q1[4] = Q1[1];
    Q1[8] = Q1[2];
    Q1[9] = Q1[6];
    var MQ1 = Transform.multiply(Q1, M);
    var x2 = [MQ1[5], MQ1[6]];
    var sgn2 = _sign(x2[0]);
    var x2Norm = _norm(x2);
    var v2 = [x2[0] + sgn2 * x2Norm, x2[1]];
    var mult2 = 2 / _normSquared(v2);
    var Q2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
    Q2[5] = 1 - mult2 * v2[0] * v2[0];
    Q2[10] = 1 - mult2 * v2[1] * v2[1];
    Q2[6] = -mult2 * v2[0] * v2[1];
    Q2[9] = Q2[6];
    var Q = Transform.multiply(Q2, Q1);
    var R = Transform.multiply(Q, M);
    var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);
    R = Transform.multiply(R, remover);
    Q = Transform.multiply(remover, Q);
    var result = {};
    result.translate = Transform.getTranslate(M);
    result.rotate = [Math.atan2(-Q[6], Q[10]), Math.asin(Q[2]), Math.atan2(-Q[1], Q[0])];
    if (!result.rotate[0]) {
      result.rotate[0] = 0;
      result.rotate[2] = Math.atan2(Q[4], Q[5]);
    }
    result.scale = [R[0], R[5], R[10]];
    result.skew = [Math.atan2(R[9], result.scale[2]), Math.atan2(R[8], result.scale[2]), Math.atan2(R[4], result.scale[0])];
    if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {
      result.rotate[1] = Math.PI - result.rotate[1];
      if (result.rotate[1] > Math.PI)
        result.rotate[1] -= 2 * Math.PI;
      if (result.rotate[1] < -Math.PI)
        result.rotate[1] += 2 * Math.PI;
      if (result.rotate[0] < 0)
        result.rotate[0] += Math.PI;
      else
        result.rotate[0] -= Math.PI;
      if (result.rotate[2] < 0)
        result.rotate[2] += Math.PI;
      else
        result.rotate[2] -= Math.PI;
    }
    return result;
  };
  Transform.average = function average(M1, M2, t) {
    t = (t === undefined) ? 0.5 : t;
    var specM1 = Transform.interpret(M1);
    var specM2 = Transform.interpret(M2);
    var specAvg = {
      translate: [0, 0, 0],
      rotate: [0, 0, 0],
      scale: [0, 0, 0],
      skew: [0, 0, 0]
    };
    for (var i = 0; i < 3; i++) {
      specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];
      specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];
      specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];
      specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];
    }
    return Transform.build(specAvg);
  };
  Transform.build = function build(spec) {
    var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);
    var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);
    var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);
    return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
  };
  Transform.equals = function equals(a, b) {
    return !Transform.notEquals(a, b);
  };
  Transform.notEquals = function notEquals(a, b) {
    if (a === b)
      return false;
    return !(a && b) || a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] || a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] || a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] || a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];
  };
  Transform.normalizeRotation = function normalizeRotation(rotation) {
    var result = rotation.slice(0);
    if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {
      result[0] = -result[0];
      result[1] = Math.PI - result[1];
      result[2] -= Math.PI;
    }
    if (result[0] > Math.PI * 0.5) {
      result[0] = result[0] - Math.PI;
      result[1] = Math.PI - result[1];
      result[2] -= Math.PI;
    }
    if (result[0] < -Math.PI * 0.5) {
      result[0] = result[0] + Math.PI;
      result[1] = -Math.PI - result[1];
      result[2] -= Math.PI;
    }
    while (result[1] < -Math.PI)
      result[1] += 2 * Math.PI;
    while (result[1] >= Math.PI)
      result[1] -= 2 * Math.PI;
    while (result[2] < -Math.PI)
      result[2] += 2 * Math.PI;
    while (result[2] >= Math.PI)
      result[2] -= 2 * Math.PI;
    return result;
  };
  Transform.inFront = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1e-3, 1];
  Transform.behind = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1e-3, 1];
  module.exports = Transform;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a0", ["require", "exports", "module", "148"], function(require, exports, module) {
  var Utility = require('148');
  function MultipleTransition(method) {
    this.method = method;
    this._instances = [];
    this.state = [];
  }
  MultipleTransition.SUPPORTS_MULTIPLE = true;
  MultipleTransition.prototype.get = function get() {
    for (var i = 0; i < this._instances.length; i++) {
      this.state[i] = this._instances[i].get();
    }
    return this.state;
  };
  MultipleTransition.prototype.set = function set(endState, transition, callback) {
    var _allCallback = Utility.after(endState.length, callback);
    for (var i = 0; i < endState.length; i++) {
      if (!this._instances[i])
        this._instances[i] = new (this.method)();
      this._instances[i].set(endState[i], transition, _allCallback);
    }
  };
  MultipleTransition.prototype.reset = function reset(startState) {
    for (var i = 0; i < startState.length; i++) {
      if (!this._instances[i])
        this._instances[i] = new (this.method)();
      this._instances[i].reset(startState[i]);
    }
  };
  module.exports = MultipleTransition;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a1", ["require", "exports", "module"], function(require, exports, module) {
  function TweenTransition(options) {
    this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);
    if (options)
      this.setOptions(options);
    this._startTime = 0;
    this._startValue = 0;
    this._updateTime = 0;
    this._endValue = 0;
    this._curve = undefined;
    this._duration = 0;
    this._active = false;
    this._callback = undefined;
    this.state = 0;
    this.velocity = undefined;
  }
  TweenTransition.Curves = {
    linear: function(t) {
      return t;
    },
    easeIn: function(t) {
      return t * t;
    },
    easeOut: function(t) {
      return t * (2 - t);
    },
    easeInOut: function(t) {
      if (t <= 0.5)
        return 2 * t * t;
      else
        return -2 * t * t + 4 * t - 1;
    },
    easeOutBounce: function(t) {
      return t * (3 - 2 * t);
    },
    spring: function(t) {
      return (1 - t) * Math.sin(6 * Math.PI * t) + t;
    }
  };
  TweenTransition.SUPPORTS_MULTIPLE = true;
  TweenTransition.DEFAULT_OPTIONS = {
    curve: TweenTransition.Curves.linear,
    duration: 500,
    speed: 0
  };
  var registeredCurves = {};
  TweenTransition.registerCurve = function registerCurve(curveName, curve) {
    if (!registeredCurves[curveName]) {
      registeredCurves[curveName] = curve;
      return true;
    } else {
      return false;
    }
  };
  TweenTransition.unregisterCurve = function unregisterCurve(curveName) {
    if (registeredCurves[curveName]) {
      delete registeredCurves[curveName];
      return true;
    } else {
      return false;
    }
  };
  TweenTransition.getCurve = function getCurve(curveName) {
    var curve = registeredCurves[curveName];
    if (curve !== undefined)
      return curve;
    else
      throw new Error('curve not registered');
  };
  TweenTransition.getCurves = function getCurves() {
    return registeredCurves;
  };
  function _interpolate(a, b, t) {
    return ((1 - t) * a) + (t * b);
  }
  function _clone(obj) {
    if (obj instanceof Object) {
      if (obj instanceof Array)
        return obj.slice(0);
      else
        return Object.create(obj);
    } else
      return obj;
  }
  function _normalize(transition, defaultTransition) {
    var result = {curve: defaultTransition.curve};
    if (defaultTransition.duration)
      result.duration = defaultTransition.duration;
    if (defaultTransition.speed)
      result.speed = defaultTransition.speed;
    if (transition instanceof Object) {
      if (transition.duration !== undefined)
        result.duration = transition.duration;
      if (transition.curve)
        result.curve = transition.curve;
      if (transition.speed)
        result.speed = transition.speed;
    }
    if (typeof result.curve === 'string')
      result.curve = TweenTransition.getCurve(result.curve);
    return result;
  }
  TweenTransition.prototype.setOptions = function setOptions(options) {
    if (options.curve !== undefined)
      this.options.curve = options.curve;
    if (options.duration !== undefined)
      this.options.duration = options.duration;
    if (options.speed !== undefined)
      this.options.speed = options.speed;
  };
  TweenTransition.prototype.set = function set(endValue, transition, callback) {
    if (!transition) {
      this.reset(endValue);
      if (callback)
        callback();
      return;
    }
    this._startValue = _clone(this.get());
    transition = _normalize(transition, this.options);
    if (transition.speed) {
      var startValue = this._startValue;
      if (startValue instanceof Object) {
        var variance = 0;
        for (var i in startValue)
          variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);
        transition.duration = Math.sqrt(variance) / transition.speed;
      } else {
        transition.duration = Math.abs(endValue - startValue) / transition.speed;
      }
    }
    this._startTime = Date.now();
    this._endValue = _clone(endValue);
    this._startVelocity = _clone(transition.velocity);
    this._duration = transition.duration;
    this._curve = transition.curve;
    this._active = true;
    this._callback = callback;
  };
  TweenTransition.prototype.reset = function reset(startValue, startVelocity) {
    if (this._callback) {
      var callback = this._callback;
      this._callback = undefined;
      callback();
    }
    this.state = _clone(startValue);
    this.velocity = _clone(startVelocity);
    this._startTime = 0;
    this._duration = 0;
    this._updateTime = 0;
    this._startValue = this.state;
    this._startVelocity = this.velocity;
    this._endValue = this.state;
    this._active = false;
  };
  TweenTransition.prototype.getVelocity = function getVelocity() {
    return this.velocity;
  };
  TweenTransition.prototype.get = function get(timestamp) {
    this.update(timestamp);
    return this.state;
  };
  function _calculateVelocity(current, start, curve, duration, t) {
    var velocity;
    var eps = 1e-7;
    var speed = (curve(t) - curve(t - eps)) / eps;
    if (current instanceof Array) {
      velocity = [];
      for (var i = 0; i < current.length; i++) {
        if (typeof current[i] === 'number')
          velocity[i] = speed * (current[i] - start[i]) / duration;
        else
          velocity[i] = 0;
      }
    } else
      velocity = speed * (current - start) / duration;
    return velocity;
  }
  function _calculateState(start, end, t) {
    var state;
    if (start instanceof Array) {
      state = [];
      for (var i = 0; i < start.length; i++) {
        if (typeof start[i] === 'number')
          state[i] = _interpolate(start[i], end[i], t);
        else
          state[i] = start[i];
      }
    } else
      state = _interpolate(start, end, t);
    return state;
  }
  TweenTransition.prototype.update = function update(timestamp) {
    if (!this._active) {
      if (this._callback) {
        var callback = this._callback;
        this._callback = undefined;
        callback();
      }
      return;
    }
    if (!timestamp)
      timestamp = Date.now();
    if (this._updateTime >= timestamp)
      return;
    this._updateTime = timestamp;
    var timeSinceStart = timestamp - this._startTime;
    if (timeSinceStart >= this._duration) {
      this.state = this._endValue;
      this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);
      this._active = false;
    } else if (timeSinceStart < 0) {
      this.state = this._startValue;
      this.velocity = this._startVelocity;
    } else {
      var t = timeSinceStart / this._duration;
      this.state = _calculateState(this._startValue, this._endValue, this._curve(t));
      this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);
    }
  };
  TweenTransition.prototype.isActive = function isActive() {
    return this._active;
  };
  TweenTransition.prototype.halt = function halt() {
    this.reset(this.get());
  };
  TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);
  TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);
  TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);
  TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);
  TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);
  TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);
  TweenTransition.customCurve = function customCurve(v1, v2) {
    v1 = v1 || 0;
    v2 = v2 || 0;
    return function(t) {
      return v1 * t + (-2 * v1 - v2 + 3) * t * t + (v1 + v2 - 2) * t * t * t;
    };
  };
  module.exports = TweenTransition;
});

})();
(function() {
var define = $__System.amdDefine;
define("13a", ["require", "exports", "module", "1a0", "1a1"], function(require, exports, module) {
  var MultipleTransition = require('1a0');
  var TweenTransition = require('1a1');
  function Transitionable(start) {
    this.currentAction = null;
    this.actionQueue = [];
    this.callbackQueue = [];
    this.state = 0;
    this.velocity = undefined;
    this._callback = undefined;
    this._engineInstance = null;
    this._currentMethod = null;
    this.set(start);
  }
  var transitionMethods = {};
  Transitionable.register = function register(methods) {
    var success = true;
    for (var method in methods) {
      if (!Transitionable.registerMethod(method, methods[method]))
        success = false;
    }
    return success;
  };
  Transitionable.registerMethod = function registerMethod(name, engineClass) {
    if (!(name in transitionMethods)) {
      transitionMethods[name] = engineClass;
      return true;
    } else
      return false;
  };
  Transitionable.unregisterMethod = function unregisterMethod(name) {
    if (name in transitionMethods) {
      delete transitionMethods[name];
      return true;
    } else
      return false;
  };
  function _loadNext() {
    if (this._callback) {
      var callback = this._callback;
      this._callback = undefined;
      callback();
    }
    if (this.actionQueue.length <= 0) {
      this.set(this.get());
      return;
    }
    this.currentAction = this.actionQueue.shift();
    this._callback = this.callbackQueue.shift();
    var method = null;
    var endValue = this.currentAction[0];
    var transition = this.currentAction[1];
    if (transition instanceof Object && transition.method) {
      method = transition.method;
      if (typeof method === 'string')
        method = transitionMethods[method];
    } else {
      method = TweenTransition;
    }
    if (this._currentMethod !== method) {
      if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
        this._engineInstance = new method();
      } else {
        this._engineInstance = new MultipleTransition(method);
      }
      this._currentMethod = method;
    }
    this._engineInstance.reset(this.state, this.velocity);
    if (this.velocity !== undefined)
      transition.velocity = this.velocity;
    this._engineInstance.set(endValue, transition, _loadNext.bind(this));
  }
  Transitionable.prototype.set = function set(endState, transition, callback) {
    if (!transition) {
      this.reset(endState);
      if (callback)
        callback();
      return this;
    }
    var action = [endState, transition];
    this.actionQueue.push(action);
    this.callbackQueue.push(callback);
    if (!this.currentAction)
      _loadNext.call(this);
    return this;
  };
  Transitionable.prototype.reset = function reset(startState, startVelocity) {
    this._currentMethod = null;
    this._engineInstance = null;
    this._callback = undefined;
    this.state = startState;
    this.velocity = startVelocity;
    this.currentAction = null;
    this.actionQueue = [];
    this.callbackQueue = [];
  };
  Transitionable.prototype.delay = function delay(duration, callback) {
    var endValue;
    if (this.actionQueue.length)
      endValue = this.actionQueue[this.actionQueue.length - 1][0];
    else if (this.currentAction)
      endValue = this.currentAction[0];
    else
      endValue = this.get();
    return this.set(endValue, {
      duration: duration,
      curve: function() {
        return 0;
      }
    }, callback);
  };
  Transitionable.prototype.get = function get(timestamp) {
    if (this._engineInstance) {
      if (this._engineInstance.getVelocity)
        this.velocity = this._engineInstance.getVelocity();
      this.state = this._engineInstance.get(timestamp);
    }
    return this.state;
  };
  Transitionable.prototype.isActive = function isActive() {
    return !!this.currentAction;
  };
  Transitionable.prototype.halt = function halt() {
    return this.set(this.get());
  };
  module.exports = Transitionable;
});

})();
(function() {
var define = $__System.amdDefine;
define("154", ["require", "exports", "module", "13f", "14a", "19f", "139", "13a"], function(require, exports, module) {
  var RenderNode = require('13f');
  var EventHandler = require('14a');
  var ElementAllocator = require('19f');
  var Transform = require('139');
  var Transitionable = require('13a');
  var _zeroZero = [0, 0];
  var usePrefix = !('perspective' in document.documentElement.style);
  function _getElementSize() {
    var element = this.container;
    return [element.clientWidth, element.clientHeight];
  }
  var _setPerspective = usePrefix ? function(element, perspective) {
    element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';
  } : function(element, perspective) {
    element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';
  };
  function Context(container) {
    this.container = container;
    this._allocator = new ElementAllocator(container);
    this._node = new RenderNode();
    this._eventOutput = new EventHandler();
    this._size = _getElementSize.call(this);
    this._perspectiveState = new Transitionable(0);
    this._perspective = undefined;
    this._nodeContext = {
      allocator: this._allocator,
      transform: Transform.identity,
      opacity: 1,
      origin: _zeroZero,
      align: _zeroZero,
      size: this._size
    };
    this._eventOutput.on('resize', function() {
      this.setSize(_getElementSize.call(this));
    }.bind(this));
  }
  Context.prototype.getAllocator = function getAllocator() {
    return this._allocator;
  };
  Context.prototype.add = function add(obj) {
    return this._node.add(obj);
  };
  Context.prototype.migrate = function migrate(container) {
    if (container === this.container)
      return;
    this.container = container;
    this._allocator.migrate(container);
  };
  Context.prototype.getSize = function getSize() {
    return this._size;
  };
  Context.prototype.setSize = function setSize(size) {
    if (!size)
      size = _getElementSize.call(this);
    this._size[0] = size[0];
    this._size[1] = size[1];
  };
  Context.prototype.update = function update(contextParameters) {
    if (contextParameters) {
      if (contextParameters.transform)
        this._nodeContext.transform = contextParameters.transform;
      if (contextParameters.opacity)
        this._nodeContext.opacity = contextParameters.opacity;
      if (contextParameters.origin)
        this._nodeContext.origin = contextParameters.origin;
      if (contextParameters.align)
        this._nodeContext.align = contextParameters.align;
      if (contextParameters.size)
        this._nodeContext.size = contextParameters.size;
    }
    var perspective = this._perspectiveState.get();
    if (perspective !== this._perspective) {
      _setPerspective(this.container, perspective);
      this._perspective = perspective;
    }
    this._node.commit(this._nodeContext);
  };
  Context.prototype.getPerspective = function getPerspective() {
    return this._perspectiveState.get();
  };
  Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {
    return this._perspectiveState.set(perspective, transition, callback);
  };
  Context.prototype.emit = function emit(type, event) {
    return this._eventOutput.emit(type, event);
  };
  Context.prototype.on = function on(type, handler) {
    return this._eventOutput.on(type, handler);
  };
  Context.prototype.removeListener = function removeListener(type, handler) {
    return this._eventOutput.removeListener(type, handler);
  };
  Context.prototype.pipe = function pipe(target) {
    return this._eventOutput.pipe(target);
  };
  Context.prototype.unpipe = function unpipe(target) {
    return this._eventOutput.unpipe(target);
  };
  module.exports = Context;
});

})();
(function() {
var define = $__System.amdDefine;
define("155", ["require", "exports", "module", "154", "14a", "14b"], function(require, exports, module) {
  var Context = require('154');
  var EventHandler = require('14a');
  var OptionsManager = require('14b');
  var Engine = {};
  var contexts = [];
  var nextTickQueue = [];
  var currentFrame = 0;
  var nextTickFrame = 0;
  var deferQueue = [];
  var lastTime = Date.now();
  var frameTime;
  var frameTimeLimit;
  var loopEnabled = true;
  var eventForwarders = {};
  var eventHandler = new EventHandler();
  var options = {
    containerType: 'div',
    containerClass: 'famous-container',
    fpsCap: undefined,
    runLoop: true,
    appMode: true
  };
  var optionsManager = new OptionsManager(options);
  var MAX_DEFER_FRAME_TIME = 10;
  Engine.step = function step() {
    currentFrame++;
    nextTickFrame = currentFrame;
    var currentTime = Date.now();
    if (frameTimeLimit && currentTime - lastTime < frameTimeLimit)
      return;
    var i = 0;
    frameTime = currentTime - lastTime;
    lastTime = currentTime;
    eventHandler.emit('prerender');
    var numFunctions = nextTickQueue.length;
    while (numFunctions--)
      (nextTickQueue.shift())(currentFrame);
    while (deferQueue.length && (Date.now() - currentTime) < MAX_DEFER_FRAME_TIME) {
      deferQueue.shift().call(this);
    }
    for (i = 0; i < contexts.length; i++)
      contexts[i].update();
    eventHandler.emit('postrender');
  };
  function loop() {
    if (options.runLoop) {
      Engine.step();
      window.requestAnimationFrame(loop);
    } else
      loopEnabled = false;
  }
  window.requestAnimationFrame(loop);
  function handleResize(event) {
    for (var i = 0; i < contexts.length; i++) {
      contexts[i].emit('resize');
    }
    eventHandler.emit('resize');
  }
  window.addEventListener('resize', handleResize, false);
  handleResize();
  function initialize() {
    window.addEventListener('touchmove', function(event) {
      if (event.target.tagName === 'TEXTAREA') {
        return true;
      } else {
        event.preventDefault();
      }
    }, true);
    addRootClasses();
  }
  var initialized = false;
  function addRootClasses() {
    if (!document.body) {
      Engine.nextTick(addRootClasses);
      return;
    }
    document.body.classList.add('famous-root');
    document.documentElement.classList.add('famous-root');
  }
  Engine.pipe = function pipe(target) {
    if (target.subscribe instanceof Function)
      return target.subscribe(Engine);
    else
      return eventHandler.pipe(target);
  };
  Engine.unpipe = function unpipe(target) {
    if (target.unsubscribe instanceof Function)
      return target.unsubscribe(Engine);
    else
      return eventHandler.unpipe(target);
  };
  Engine.on = function on(type, handler) {
    if (!(type in eventForwarders)) {
      eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);
      addEngineListener(type, eventForwarders[type]);
    }
    return eventHandler.on(type, handler);
  };
  function addEngineListener(type, forwarder) {
    if (!document.body) {
      Engine.nextTick(addEventListener.bind(this, type, forwarder));
      return;
    }
    document.body.addEventListener(type, forwarder);
  }
  Engine.emit = function emit(type, event) {
    return eventHandler.emit(type, event);
  };
  Engine.removeListener = function removeListener(type, handler) {
    return eventHandler.removeListener(type, handler);
  };
  Engine.getFPS = function getFPS() {
    return 1000 / frameTime;
  };
  Engine.setFPSCap = function setFPSCap(fps) {
    frameTimeLimit = Math.floor(1000 / fps);
  };
  Engine.getOptions = function getOptions(key) {
    return optionsManager.getOptions(key);
  };
  Engine.setOptions = function setOptions(options) {
    return optionsManager.setOptions.apply(optionsManager, arguments);
  };
  Engine.createContext = function createContext(el) {
    if (!initialized && options.appMode)
      Engine.nextTick(initialize);
    var needMountContainer = false;
    if (!el) {
      el = document.createElement(options.containerType);
      el.classList.add(options.containerClass);
      needMountContainer = true;
    }
    var context = new Context(el);
    Engine.registerContext(context);
    if (needMountContainer)
      mount(context, el);
    return context;
  };
  function mount(context, el) {
    if (!document.body) {
      Engine.nextTick(mount.bind(this, context, el));
      return;
    }
    document.body.appendChild(el);
    context.emit('resize');
  }
  Engine.registerContext = function registerContext(context) {
    contexts.push(context);
    return context;
  };
  Engine.getContexts = function getContexts() {
    return contexts;
  };
  Engine.deregisterContext = function deregisterContext(context) {
    var i = contexts.indexOf(context);
    if (i >= 0)
      contexts.splice(i, 1);
  };
  Engine.nextTick = function nextTick(fn) {
    nextTickQueue.push(fn);
  };
  Engine.defer = function defer(fn) {
    deferQueue.push(fn);
  };
  optionsManager.on('change', function(data) {
    if (data.id === 'fpsCap')
      Engine.setFPSCap(data.value);
    else if (data.id === 'runLoop') {
      if (!loopEnabled && data.value) {
        loopEnabled = true;
        window.requestAnimationFrame(loop);
      }
    }
  });
  module.exports = Engine;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a2", ["require", "exports", "module"], function(require, exports, module) {
  function EventEmitter() {
    this.listeners = {};
    this._owner = this;
  }
  EventEmitter.prototype.emit = function emit() {
    var type = arguments[0];
    var args = [];
    for (var i = 1; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    var handlers = this.listeners[type];
    if (handlers) {
      for (var i = 0; i < handlers.length; i++) {
        handlers[i].apply(this._owner, args);
      }
    }
    return this;
  };
  EventEmitter.prototype.on = function on(type, handler) {
    if (!(type in this.listeners))
      this.listeners[type] = [];
    var index = this.listeners[type].indexOf(handler);
    if (index < 0)
      this.listeners[type].push(handler);
    return this;
  };
  EventEmitter.prototype.once = function once(type, handler) {
    return this.on(type, function onceWrapper() {
      this.removeListener(type, onceWrapper);
      handler.apply(this._owner, arguments);
    }, this);
  };
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;
  EventEmitter.prototype.removeListener = function removeListener(type, handler) {
    var listener = this.listeners[type];
    if (listener !== undefined) {
      var index = listener.indexOf(handler);
      if (index >= 0)
        listener.splice(index, 1);
    }
    return this;
  };
  EventEmitter.prototype.bindThis = function bindThis(owner) {
    this._owner = owner;
  };
  module.exports = EventEmitter;
});

})();
(function() {
var define = $__System.amdDefine;
define("14a", ["require", "exports", "module", "1a2"], function(require, exports, module) {
  var EventEmitter = require('1a2');
  function EventHandler() {
    EventEmitter.apply(this, arguments);
    this.downstream = [];
    this.downstreamFn = [];
    this.upstream = [];
    this.upstreamListeners = {};
  }
  EventHandler.prototype = Object.create(EventEmitter.prototype);
  EventHandler.prototype.constructor = EventHandler;
  EventHandler.setInputHandler = function setInputHandler(object, handler) {
    object.trigger = handler.trigger.bind(handler);
    if (handler.subscribe && handler.unsubscribe) {
      object.subscribe = handler.subscribe.bind(handler);
      object.unsubscribe = handler.unsubscribe.bind(handler);
    }
  };
  EventHandler.setOutputHandler = function setOutputHandler(object, handler) {
    if (handler instanceof EventHandler)
      handler.bindThis(object);
    object.pipe = handler.pipe.bind(handler);
    object.unpipe = handler.unpipe.bind(handler);
    object.on = handler.on.bind(handler);
    object.once = handler.once.bind(handler);
    object.addListener = object.on;
    object.removeListener = handler.removeListener.bind(handler);
  };
  EventHandler.prototype.emit = function emit(type, event) {
    EventEmitter.prototype.emit.apply(this, arguments);
    var i = 0;
    for (i = 0; i < this.downstream.length; i++) {
      if (this.downstream[i].trigger)
        this.downstream[i].trigger(type, event);
    }
    for (i = 0; i < this.downstreamFn.length; i++) {
      this.downstreamFn[i](type, event);
    }
    return this;
  };
  EventHandler.prototype.trigger = EventHandler.prototype.emit;
  EventHandler.prototype.pipe = function pipe(target) {
    if (target.subscribe instanceof Function)
      return target.subscribe(this);
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;
    var index = downstreamCtx.indexOf(target);
    if (index < 0)
      downstreamCtx.push(target);
    if (target instanceof Function)
      target('pipe', null);
    else if (target.trigger)
      target.trigger('pipe', null);
    return target;
  };
  EventHandler.prototype.unpipe = function unpipe(target) {
    if (target.unsubscribe instanceof Function)
      return target.unsubscribe(this);
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;
    var index = downstreamCtx.indexOf(target);
    if (index >= 0) {
      downstreamCtx.splice(index, 1);
      if (target instanceof Function)
        target('unpipe', null);
      else if (target.trigger)
        target.trigger('unpipe', null);
      return target;
    } else
      return false;
  };
  EventHandler.prototype.on = function on(type, handler) {
    EventEmitter.prototype.on.apply(this, arguments);
    if (!(type in this.upstreamListeners)) {
      var upstreamListener = this.trigger.bind(this, type);
      this.upstreamListeners[type] = upstreamListener;
      for (var i = 0; i < this.upstream.length; i++) {
        this.upstream[i].on(type, upstreamListener);
      }
    }
    return this;
  };
  EventHandler.prototype.once = function on(type, handler) {
    EventEmitter.prototype.once.apply(this, arguments);
    return this;
  };
  EventHandler.prototype.addListener = EventHandler.prototype.on;
  EventHandler.prototype.subscribe = function subscribe(source) {
    var index = this.upstream.indexOf(source);
    if (index < 0) {
      this.upstream.push(source);
      for (var type in this.upstreamListeners) {
        source.on(type, this.upstreamListeners[type]);
      }
    }
    return this;
  };
  EventHandler.prototype.unsubscribe = function unsubscribe(source) {
    var index = this.upstream.indexOf(source);
    if (index >= 0) {
      this.upstream.splice(index, 1);
      for (var type in this.upstreamListeners) {
        source.removeListener(type, this.upstreamListeners[type]);
      }
    }
    return this;
  };
  module.exports = EventHandler;
});

})();
(function() {
var define = $__System.amdDefine;
define("14b", ["require", "exports", "module", "14a"], function(require, exports, module) {
  var EventHandler = require('14a');
  function OptionsManager(value) {
    this._value = value;
    this.eventOutput = null;
  }
  OptionsManager.patch = function patchObject(source, data) {
    var manager = new OptionsManager(source);
    for (var i = 1; i < arguments.length; i++)
      manager.patch(arguments[i]);
    return source;
  };
  function _createEventOutput() {
    this.eventOutput = new EventHandler();
    this.eventOutput.bindThis(this);
    EventHandler.setOutputHandler(this, this.eventOutput);
  }
  OptionsManager.prototype.patch = function patch() {
    var myState = this._value;
    for (var i = 0; i < arguments.length; i++) {
      var data = arguments[i];
      for (var k in data) {
        if ((k in myState) && (data[k] && data[k].constructor === Object) && (myState[k] && myState[k].constructor === Object)) {
          if (!myState.hasOwnProperty(k))
            myState[k] = Object.create(myState[k]);
          this.key(k).patch(data[k]);
          if (this.eventOutput)
            this.eventOutput.emit('change', {
              id: k,
              value: this.key(k).value()
            });
        } else
          this.set(k, data[k]);
      }
    }
    return this;
  };
  OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;
  OptionsManager.prototype.key = function key(identifier) {
    var result = new OptionsManager(this._value[identifier]);
    if (!(result._value instanceof Object) || result._value instanceof Array)
      result._value = {};
    return result;
  };
  OptionsManager.prototype.get = function get(key) {
    return key ? this._value[key] : this._value;
  };
  OptionsManager.prototype.getOptions = OptionsManager.prototype.get;
  OptionsManager.prototype.set = function set(key, value) {
    var originalValue = this.get(key);
    this._value[key] = value;
    if (this.eventOutput && value !== originalValue)
      this.eventOutput.emit('change', {
        id: key,
        value: value
      });
    return this;
  };
  OptionsManager.prototype.on = function on() {
    _createEventOutput.call(this);
    return this.on.apply(this, arguments);
  };
  OptionsManager.prototype.removeListener = function removeListener() {
    _createEventOutput.call(this);
    return this.removeListener.apply(this, arguments);
  };
  OptionsManager.prototype.pipe = function pipe() {
    _createEventOutput.call(this);
    return this.pipe.apply(this, arguments);
  };
  OptionsManager.prototype.unpipe = function unpipe() {
    _createEventOutput.call(this);
    return this.unpipe.apply(this, arguments);
  };
  module.exports = OptionsManager;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a3", ["require", "exports", "module", "14a", "155", "14b"], function(require, exports, module) {
  var EventHandler = require('14a');
  var Engine = require('155');
  var OptionsManager = require('14b');
  function ScrollSync(options) {
    this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
      this.setOptions(options);
    this._payload = {
      delta: null,
      position: null,
      velocity: null,
      slip: true
    };
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._position = (this.options.direction === undefined) ? [0, 0] : 0;
    this._prevTime = undefined;
    this._prevVel = undefined;
    this._eventInput.on('mousewheel', _handleMove.bind(this));
    this._eventInput.on('wheel', _handleMove.bind(this));
    this._inProgress = false;
    this._loopBound = false;
  }
  ScrollSync.DEFAULT_OPTIONS = {
    direction: undefined,
    minimumEndSpeed: Infinity,
    rails: false,
    scale: 1,
    stallTime: 50,
    lineHeight: 40,
    preventDefault: true
  };
  ScrollSync.DIRECTION_X = 0;
  ScrollSync.DIRECTION_Y = 1;
  var MINIMUM_TICK_TIME = 8;
  var _now = Date.now;
  function _newFrame() {
    if (this._inProgress && (_now() - this._prevTime) > this.options.stallTime) {
      this._inProgress = false;
      var finalVel = (Math.abs(this._prevVel) >= this.options.minimumEndSpeed) ? this._prevVel : 0;
      var payload = this._payload;
      payload.position = this._position;
      payload.velocity = finalVel;
      payload.slip = true;
      this._eventOutput.emit('end', payload);
    }
  }
  function _handleMove(event) {
    if (this.options.preventDefault)
      event.preventDefault();
    if (!this._inProgress) {
      this._inProgress = true;
      this._position = (this.options.direction === undefined) ? [0, 0] : 0;
      payload = this._payload;
      payload.slip = true;
      payload.position = this._position;
      payload.clientX = event.clientX;
      payload.clientY = event.clientY;
      payload.offsetX = event.offsetX;
      payload.offsetY = event.offsetY;
      this._eventOutput.emit('start', payload);
      if (!this._loopBound) {
        Engine.on('prerender', _newFrame.bind(this));
        this._loopBound = true;
      }
    }
    var currTime = _now();
    var prevTime = this._prevTime || currTime;
    var diffX = (event.wheelDeltaX !== undefined) ? event.wheelDeltaX : -event.deltaX;
    var diffY = (event.wheelDeltaY !== undefined) ? event.wheelDeltaY : -event.deltaY;
    if (event.deltaMode === 1) {
      diffX *= this.options.lineHeight;
      diffY *= this.options.lineHeight;
    }
    if (this.options.rails) {
      if (Math.abs(diffX) > Math.abs(diffY))
        diffY = 0;
      else
        diffX = 0;
    }
    var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME);
    var velX = diffX / diffTime;
    var velY = diffY / diffTime;
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === ScrollSync.DIRECTION_X) {
      nextDelta = scale * diffX;
      nextVel = scale * velX;
      this._position += nextDelta;
    } else if (this.options.direction === ScrollSync.DIRECTION_Y) {
      nextDelta = scale * diffY;
      nextVel = scale * velY;
      this._position += nextDelta;
    } else {
      nextDelta = [scale * diffX, scale * diffY];
      nextVel = [scale * velX, scale * velY];
      this._position[0] += nextDelta[0];
      this._position[1] += nextDelta[1];
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.velocity = nextVel;
    payload.position = this._position;
    payload.slip = true;
    this._eventOutput.emit('update', payload);
    this._prevTime = currTime;
    this._prevVel = nextVel;
  }
  ScrollSync.prototype.getOptions = function getOptions() {
    return this.options;
  };
  ScrollSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
  };
  module.exports = ScrollSync;
});

})();
(function() {
var define = $__System.amdDefine;
define("15a", ["require", "exports", "module"], function(require, exports, module) {
  function assert(value, message) {
    if (!value) {
      throw new Error(message);
    }
  }
  function LinkedListViewSequence(items) {
    if (Array.isArray(items)) {
      this._ = new (this.constructor.Backing)(this);
      for (var i = 0; i < items.length; i++) {
        this.push(items[i]);
      }
    } else {
      this._ = items || new (this.constructor.Backing)(this);
    }
  }
  LinkedListViewSequence.Backing = function Backing() {
    this.length = 0;
  };
  LinkedListViewSequence.prototype.getHead = function() {
    return this._.head;
  };
  LinkedListViewSequence.prototype.getTail = function() {
    return this._.tail;
  };
  LinkedListViewSequence.prototype.getPrevious = function() {
    return this._prev;
  };
  LinkedListViewSequence.prototype.getNext = function() {
    return this._next;
  };
  LinkedListViewSequence.prototype.get = function() {
    return this._value;
  };
  LinkedListViewSequence.prototype.set = function(value) {
    this._value = value;
    return this;
  };
  LinkedListViewSequence.prototype.getIndex = function() {
    return this._value ? this.indexOf(this._value) : 0;
  };
  LinkedListViewSequence.prototype.toString = function() {
    return '' + this.getIndex();
  };
  LinkedListViewSequence.prototype.indexOf = function(item) {
    var sequence = this._.head;
    var index = 0;
    while (sequence) {
      if (sequence._value === item) {
        return index;
      }
      index++;
      sequence = sequence._next;
    }
    return -1;
  };
  LinkedListViewSequence.prototype.findByIndex = function(index) {
    index = (index === -1) ? (this._.length - 1) : index;
    if ((index < 0) || (index >= this._.length)) {
      return undefined;
    }
    var searchIndex;
    var searchSequence;
    if (index > (this._.length / 2)) {
      searchSequence = this._.tail;
      searchIndex = this._.length - 1;
      while (searchIndex > index) {
        searchSequence = searchSequence._prev;
        searchIndex--;
      }
    } else {
      searchSequence = this._.head;
      searchIndex = 0;
      while (searchIndex < index) {
        searchSequence = searchSequence._next;
        searchIndex++;
      }
    }
    return searchSequence;
  };
  LinkedListViewSequence.prototype.findByValue = function(value) {
    var sequence = this._.head;
    while (sequence) {
      if (sequence.get() === value) {
        return sequence;
      }
      sequence = sequence._next;
    }
    return undefined;
  };
  LinkedListViewSequence.prototype.insert = function(index, renderNode) {
    index = (index === -1) ? this._.length : index;
    if (!this._.length) {
      assert(index === 0, 'inserting in empty view-sequence, but not at index 0 (but ' + index + ' instead)');
      this._value = renderNode;
      this._.head = this;
      this._.tail = this;
      this._.length = 1;
      return this;
    }
    var sequence;
    if (index === 0) {
      sequence = new LinkedListViewSequence(this._);
      sequence._value = renderNode;
      sequence._next = this._.head;
      this._.head._prev = sequence;
      this._.head = sequence;
    } else if (index === this._.length) {
      sequence = new LinkedListViewSequence(this._);
      sequence._value = renderNode;
      sequence._prev = this._.tail;
      this._.tail._next = sequence;
      this._.tail = sequence;
    } else {
      var searchIndex;
      var searchSequence;
      assert((index > 0) && (index < this._.length), 'invalid insert index: ' + index + ' (length: ' + this._.length + ')');
      if (index > (this._.length / 2)) {
        searchSequence = this._.tail;
        searchIndex = this._.length - 1;
        while (searchIndex >= index) {
          searchSequence = searchSequence._prev;
          searchIndex--;
        }
      } else {
        searchSequence = this._.head;
        searchIndex = 1;
        while (searchIndex < index) {
          searchSequence = searchSequence._next;
          searchIndex++;
        }
      }
      sequence = new LinkedListViewSequence(this._);
      sequence._value = renderNode;
      sequence._prev = searchSequence;
      sequence._next = searchSequence._next;
      searchSequence._next._prev = sequence;
      searchSequence._next = sequence;
    }
    this._.length++;
    return sequence;
  };
  LinkedListViewSequence.prototype.remove = function(sequence) {
    if (sequence._prev && sequence._next) {
      sequence._prev._next = sequence._next;
      sequence._next._prev = sequence._prev;
      this._.length--;
      return (sequence === this) ? sequence._prev : this;
    } else if (!sequence._prev && !sequence._next) {
      assert(sequence === this, 'only one sequence exists, should be this one');
      assert(this._value, 'last node should have a value');
      assert(this._.head, 'head is invalid');
      assert(this._.tail, 'tail is invalid');
      assert(this._.length === 1, 'length should be 1');
      this._value = undefined;
      this._.head = undefined;
      this._.tail = undefined;
      this._.length--;
      return this;
    } else if (!sequence._prev) {
      assert(this._.head === sequence, 'head is invalid');
      sequence._next._prev = undefined;
      this._.head = sequence._next;
      this._.length--;
      return (sequence === this) ? this._.head : this;
    } else {
      assert(!sequence._next, 'next should be empty');
      assert(this._.tail === sequence, 'tail is invalid');
      sequence._prev._next = undefined;
      this._.tail = sequence._prev;
      this._.length--;
      return (sequence === this) ? this._.tail : this;
    }
  };
  LinkedListViewSequence.prototype.getLength = function() {
    return this._.length;
  };
  LinkedListViewSequence.prototype.clear = function() {
    var sequence = this;
    while (this._.length) {
      sequence = sequence.remove(this._.tail);
    }
    return sequence;
  };
  LinkedListViewSequence.prototype.unshift = function(renderNode) {
    return this.insert(0, renderNode);
  };
  LinkedListViewSequence.prototype.push = function(renderNode) {
    return this.insert(-1, renderNode);
  };
  LinkedListViewSequence.prototype.splice = function(index, remove, items) {
    if (console.error) {
      console.error('LinkedListViewSequence.splice is not supported');
    }
  };
  LinkedListViewSequence.prototype.swap = function(index, index2) {
    var sequence1 = this.findByIndex(index);
    if (!sequence1) {
      throw new Error('Invalid first index specified to swap: ' + index);
    }
    var sequence2 = this.findByIndex(index2);
    if (!sequence2) {
      throw new Error('Invalid second index specified to swap: ' + index2);
    }
    var swap = sequence1._value;
    sequence1._value = sequence2._value;
    sequence2._value = swap;
    return this;
  };
  module.exports = LinkedListViewSequence;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a4", ["require", "exports", "module", "149", "13e", "15c", "15d", "15b", "198", "139", "14a", "19a", "194", "197", "195", "19c", "196", "1a3", "15a"], function(require, exports, module) {
  var LayoutUtility = require('149');
  var LayoutController = require('13e');
  var LayoutNode = require('15c');
  var FlowLayoutNode = require('15d');
  var LayoutNodeManager = require('15b');
  var ContainerSurface = require('198');
  var Transform = require('139');
  var EventHandler = require('14a');
  var Group = require('19a');
  var Vector = require('194');
  var PhysicsEngine = require('197');
  var Particle = require('195');
  var Drag = require('19c');
  var Spring = require('196');
  var ScrollSync = require('1a3');
  var LinkedListViewSequence = require('15a');
  var Bounds = {
    NONE: 0,
    PREV: 1,
    NEXT: 2,
    BOTH: 3
  };
  var SpringSource = {
    NONE: 'none',
    NEXTBOUNDS: 'next-bounds',
    PREVBOUNDS: 'prev-bounds',
    MINSIZE: 'minimal-size',
    GOTOSEQUENCE: 'goto-sequence',
    ENSUREVISIBLE: 'ensure-visible',
    GOTOPREVDIRECTION: 'goto-prev-direction',
    GOTONEXTDIRECTION: 'goto-next-direction'
  };
  var PaginationMode = {
    PAGE: 0,
    SCROLL: 1
  };
  function ScrollController(options) {
    options = LayoutUtility.combineOptions(ScrollController.DEFAULT_OPTIONS, options);
    var layoutManager = new LayoutNodeManager(options.flow ? FlowLayoutNode : LayoutNode, _initLayoutNode.bind(this));
    LayoutController.call(this, options, layoutManager);
    this._scroll = {
      activeTouches: [],
      pe: new PhysicsEngine(this.options.scrollPhysicsEngine),
      particle: new Particle(this.options.scrollParticle),
      dragForce: new Drag(this.options.scrollDrag),
      frictionForce: new Drag(this.options.scrollFriction),
      springValue: undefined,
      springForce: new Spring(this.options.scrollSpring),
      springEndState: new Vector([0, 0, 0]),
      groupStart: 0,
      groupTranslate: [0, 0, 0],
      scrollDelta: 0,
      normalizedScrollDelta: 0,
      scrollForce: 0,
      scrollForceCount: 0,
      unnormalizedScrollOffset: 0,
      isScrolling: false
    };
    this._debug = {
      layoutCount: 0,
      commitCount: 0
    };
    this.group = new Group();
    this.group.add({render: _innerRender.bind(this)});
    this._scroll.pe.addBody(this._scroll.particle);
    if (!this.options.scrollDrag.disabled) {
      this._scroll.dragForceId = this._scroll.pe.attach(this._scroll.dragForce, this._scroll.particle);
    }
    if (!this.options.scrollFriction.disabled) {
      this._scroll.frictionForceId = this._scroll.pe.attach(this._scroll.frictionForce, this._scroll.particle);
    }
    this._scroll.springForce.setOptions({anchor: this._scroll.springEndState});
    this._eventInput.on('touchstart', _touchStart.bind(this));
    this._eventInput.on('touchmove', _touchMove.bind(this));
    this._eventInput.on('touchend', _touchEnd.bind(this));
    this._eventInput.on('touchcancel', _touchEnd.bind(this));
    this._eventInput.on('mousedown', _mouseDown.bind(this));
    this._eventInput.on('mouseup', _mouseUp.bind(this));
    this._eventInput.on('mousemove', _mouseMove.bind(this));
    this._scrollSync = new ScrollSync(this.options.scrollSync);
    this._eventInput.pipe(this._scrollSync);
    this._scrollSync.on('update', _scrollUpdate.bind(this));
    if (this.options.useContainer) {
      this.container = new ContainerSurface(this.options.container);
      this.container.add({render: function() {
          return this.id;
        }.bind(this)});
      if (!this.options.autoPipeEvents) {
        this.subscribe(this.container);
        EventHandler.setInputHandler(this.container, this);
        EventHandler.setOutputHandler(this.container, this);
      }
    }
  }
  ScrollController.prototype = Object.create(LayoutController.prototype);
  ScrollController.prototype.constructor = ScrollController;
  ScrollController.Bounds = Bounds;
  ScrollController.PaginationMode = PaginationMode;
  ScrollController.DEFAULT_OPTIONS = {
    useContainer: false,
    container: {properties: {overflow: 'hidden'}},
    scrollPhysicsEngine: {},
    scrollParticle: {},
    scrollDrag: {
      forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,
      strength: 0.001,
      disabled: true
    },
    scrollFriction: {
      forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,
      strength: 0.0025,
      disabled: false
    },
    scrollSpring: {
      dampingRatio: 1.0,
      period: 350
    },
    scrollSync: {scale: 0.2},
    overscroll: true,
    paginated: false,
    paginationMode: PaginationMode.PAGE,
    paginationEnergyThreshold: 0.01,
    alignment: 0,
    touchMoveDirectionThreshold: undefined,
    touchMoveNoVelocityDuration: 100,
    mouseMove: false,
    scrollWheelForces: false,
    scrollWheelForceStep: 120,
    enabled: true,
    layoutAll: false,
    alwaysLayout: false,
    extraBoundsSpace: [100, 100],
    debug: false
  };
  ScrollController.prototype.setOptions = function(options) {
    LayoutController.prototype.setOptions.call(this, options);
    if (options.hasOwnProperty('paginationEnergyThresshold')) {
      console.warn('option `paginationEnergyThresshold` has been deprecated, please rename to `paginationEnergyThreshold`.');
      this.setOptions({paginationEnergyThreshold: options.paginationEnergyThresshold});
    }
    if (options.hasOwnProperty('touchMoveDirectionThresshold')) {
      console.warn('option `touchMoveDirectionThresshold` has been deprecated, please rename to `touchMoveDirectionThreshold`.');
      this.setOptions({touchMoveDirectionThreshold: options.touchMoveDirectionThresshold});
    }
    if (this._scroll) {
      if (options.scrollSpring) {
        this._scroll.springForce.setOptions(options.scrollSpring);
      }
      if (options.scrollDrag) {
        this._scroll.dragForce.setOptions(options.scrollDrag);
      }
    }
    if (options.scrollSync && this._scrollSync) {
      this._scrollSync.setOptions(options.scrollSync);
    }
    return this;
  };
  function _initLayoutNode(node, spec) {
    if (!spec && this.options.flowOptions.insertSpec) {
      node.setSpec(this.options.flowOptions.insertSpec);
    }
  }
  function _isSequentiallyScrollingOptimized() {
    return !this._layout.capabilities || (this._layout.capabilities.sequentialScrollingOptimized === undefined) || this._layout.capabilities.sequentialScrollingOptimized;
  }
  function _updateSpring() {
    var springValue = this._scroll.scrollForceCount ? undefined : this._scroll.springPosition;
    if (this._scroll.springValue !== springValue) {
      this._scroll.springValue = springValue;
      if (springValue === undefined) {
        if (this._scroll.springForceId !== undefined) {
          this._scroll.pe.detach(this._scroll.springForceId);
          this._scroll.springForceId = undefined;
        }
      } else {
        if (this._scroll.springForceId === undefined) {
          this._scroll.springForceId = this._scroll.pe.attach(this._scroll.springForce, this._scroll.particle);
        }
        this._scroll.springEndState.set1D(springValue);
        this._scroll.pe.wake();
      }
    }
  }
  function _getEventTimestamp(event) {
    return event.timeStamp || Date.now();
  }
  function _mouseDown(event) {
    if (!this.options.mouseMove) {
      return;
    }
    if (this._scroll.mouseMove) {
      this.releaseScrollForce(this._scroll.mouseMove.delta);
    }
    var current = [event.clientX, event.clientY];
    var time = _getEventTimestamp(event);
    this._scroll.mouseMove = {
      delta: 0,
      start: current,
      current: current,
      prev: current,
      time: time,
      prevTime: time
    };
    this.applyScrollForce(this._scroll.mouseMove.delta);
  }
  function _mouseMove(event) {
    if (!this._scroll.mouseMove || !this.options.enabled) {
      return;
    }
    var moveDirection = Math.atan2(Math.abs(event.clientY - this._scroll.mouseMove.prev[1]), Math.abs(event.clientX - this._scroll.mouseMove.prev[0])) / (Math.PI / 2.0);
    var directionDiff = Math.abs(this._direction - moveDirection);
    if ((this.options.touchMoveDirectionThreshold === undefined) || (directionDiff <= this.options.touchMoveDirectionThreshold)) {
      this._scroll.mouseMove.prev = this._scroll.mouseMove.current;
      this._scroll.mouseMove.current = [event.clientX, event.clientY];
      this._scroll.mouseMove.prevTime = this._scroll.mouseMove.time;
      this._scroll.mouseMove.direction = moveDirection;
      this._scroll.mouseMove.time = _getEventTimestamp(event);
    }
    var delta = this._scroll.mouseMove.current[this._direction] - this._scroll.mouseMove.start[this._direction];
    this.updateScrollForce(this._scroll.mouseMove.delta, delta);
    this._scroll.mouseMove.delta = delta;
  }
  function _mouseUp(event) {
    if (!this._scroll.mouseMove) {
      return;
    }
    var velocity = 0;
    var diffTime = this._scroll.mouseMove.time - this._scroll.mouseMove.prevTime;
    if ((diffTime > 0) && ((_getEventTimestamp(event) - this._scroll.mouseMove.time) <= this.options.touchMoveNoVelocityDuration)) {
      var diffOffset = this._scroll.mouseMove.current[this._direction] - this._scroll.mouseMove.prev[this._direction];
      velocity = diffOffset / diffTime;
    }
    var swipeDirection = (Math.abs(this._scroll.mouseMove.current[0] - this._scroll.mouseMove.prev[0]) > Math.abs(this._scroll.mouseMove.current[1] - this._scroll.mouseMove.prev[1])) ? 0 : 1;
    var allowSwipes = (swipeDirection === this._direction);
    this.releaseScrollForce(this._scroll.mouseMove.delta, velocity, allowSwipes);
    this._scroll.mouseMove = undefined;
  }
  function _touchStart(event) {
    if (!this._touchEndEventListener) {
      this._touchEndEventListener = function(event2) {
        event2.target.removeEventListener('touchend', this._touchEndEventListener);
        _touchEnd.call(this, event2);
      }.bind(this);
    }
    var oldTouchesCount = this._scroll.activeTouches.length;
    var i = 0;
    var j;
    var touchFound;
    while (i < this._scroll.activeTouches.length) {
      var activeTouch = this._scroll.activeTouches[i];
      touchFound = false;
      for (j = 0; j < event.touches.length; j++) {
        var touch = event.touches[j];
        if (touch.identifier === activeTouch.id) {
          touchFound = true;
          break;
        }
      }
      if (!touchFound) {
        this._scroll.activeTouches.splice(i, 1);
      } else {
        i++;
      }
    }
    for (i = 0; i < event.touches.length; i++) {
      var changedTouch = event.touches[i];
      touchFound = false;
      for (j = 0; j < this._scroll.activeTouches.length; j++) {
        if (this._scroll.activeTouches[j].id === changedTouch.identifier) {
          touchFound = true;
          break;
        }
      }
      if (!touchFound) {
        var current = [changedTouch.clientX, changedTouch.clientY];
        var time = _getEventTimestamp(event);
        this._scroll.activeTouches.push({
          id: changedTouch.identifier,
          start: current,
          current: current,
          prev: current,
          time: time,
          prevTime: time
        });
        changedTouch.target.addEventListener('touchend', this._touchEndEventListener);
      }
    }
    if (!oldTouchesCount && this._scroll.activeTouches.length) {
      this.applyScrollForce(0);
      this._scroll.touchDelta = 0;
    }
  }
  function _touchMove(event) {
    if (!this.options.enabled) {
      return;
    }
    var primaryTouch;
    for (var i = 0; i < event.changedTouches.length; i++) {
      var changedTouch = event.changedTouches[i];
      for (var j = 0; j < this._scroll.activeTouches.length; j++) {
        var touch = this._scroll.activeTouches[j];
        if (touch.id === changedTouch.identifier) {
          var moveDirection = Math.atan2(Math.abs(changedTouch.clientY - touch.prev[1]), Math.abs(changedTouch.clientX - touch.prev[0])) / (Math.PI / 2.0);
          var directionDiff = Math.abs(this._direction - moveDirection);
          if ((this.options.touchMoveDirectionThreshold === undefined) || (directionDiff <= this.options.touchMoveDirectionThreshold)) {
            touch.prev = touch.current;
            touch.current = [changedTouch.clientX, changedTouch.clientY];
            touch.prevTime = touch.time;
            touch.direction = moveDirection;
            touch.time = _getEventTimestamp(event);
            primaryTouch = (j === 0) ? touch : undefined;
          }
        }
      }
    }
    if (primaryTouch) {
      var delta = primaryTouch.current[this._direction] - primaryTouch.start[this._direction];
      this.updateScrollForce(this._scroll.touchDelta, delta);
      this._scroll.touchDelta = delta;
    }
  }
  function _touchEnd(event) {
    var primaryTouch = this._scroll.activeTouches.length ? this._scroll.activeTouches[0] : undefined;
    for (var i = 0; i < event.changedTouches.length; i++) {
      var changedTouch = event.changedTouches[i];
      for (var j = 0; j < this._scroll.activeTouches.length; j++) {
        var touch = this._scroll.activeTouches[j];
        if (touch.id === changedTouch.identifier) {
          this._scroll.activeTouches.splice(j, 1);
          if ((j === 0) && this._scroll.activeTouches.length) {
            var newPrimaryTouch = this._scroll.activeTouches[0];
            newPrimaryTouch.start[0] = newPrimaryTouch.current[0] - (touch.current[0] - touch.start[0]);
            newPrimaryTouch.start[1] = newPrimaryTouch.current[1] - (touch.current[1] - touch.start[1]);
          }
          break;
        }
      }
    }
    if (!primaryTouch || this._scroll.activeTouches.length) {
      return;
    }
    var velocity = 0;
    var diffTime = primaryTouch.time - primaryTouch.prevTime;
    if ((diffTime > 0) && ((_getEventTimestamp(event) - primaryTouch.time) <= this.options.touchMoveNoVelocityDuration)) {
      var diffOffset = primaryTouch.current[this._direction] - primaryTouch.prev[this._direction];
      velocity = diffOffset / diffTime;
    }
    var delta = this._scroll.touchDelta;
    var swipeDirection = (Math.abs(primaryTouch.current[0] - primaryTouch.prev[0]) > Math.abs(primaryTouch.current[1] - primaryTouch.prev[1])) ? 0 : 1;
    var allowSwipes = (swipeDirection === this._direction);
    this.releaseScrollForce(delta, velocity, allowSwipes);
    this._scroll.touchDelta = 0;
  }
  function _scrollUpdate(event) {
    if (!this.options.enabled) {
      return;
    }
    var offset = Array.isArray(event.delta) ? event.delta[this._direction] : event.delta;
    if (this.options.scrollWheelForces) {
      var velocity = offset / this.options.scrollWheelForceStep;
      this.applyScrollForce(offset);
      this.releaseScrollForce(offset, velocity);
    } else {
      this.scroll(offset);
    }
  }
  function _setParticle(position, velocity, phase) {
    if (position !== undefined) {
      this._scroll.particleValue = position;
      this._scroll.particle.setPosition1D(position);
      if (this._scroll.springValue !== undefined) {
        this._scroll.pe.wake();
      }
    }
    if (velocity !== undefined) {
      var oldVelocity = this._scroll.particle.getVelocity1D();
      if (oldVelocity !== velocity) {
        this._scroll.particle.setVelocity1D(velocity);
      }
    }
  }
  function _calcScrollOffset(normalize, refreshParticle) {
    if (refreshParticle || (this._scroll.particleValue === undefined)) {
      this._scroll.particleValue = this._scroll.particle.getPosition1D();
      this._scroll.particleValue = Math.round(this._scroll.particleValue * 1000) / 1000;
    }
    var scrollOffset = this._scroll.particleValue;
    if (this._scroll.scrollDelta || this._scroll.normalizedScrollDelta) {
      scrollOffset += this._scroll.scrollDelta + this._scroll.normalizedScrollDelta;
      if (((this._scroll.boundsReached & Bounds.PREV) && (scrollOffset > this._scroll.springPosition)) || ((this._scroll.boundsReached & Bounds.NEXT) && (scrollOffset < this._scroll.springPosition)) || (this._scroll.boundsReached === Bounds.BOTH)) {
        scrollOffset = this._scroll.springPosition;
      }
      if (normalize) {
        if (!this._scroll.scrollDelta) {
          this._scroll.normalizedScrollDelta = 0;
          _setParticle.call(this, scrollOffset, undefined, '_calcScrollOffset');
        }
        this._scroll.normalizedScrollDelta += this._scroll.scrollDelta;
        this._scroll.scrollDelta = 0;
      }
    }
    if (this._scroll.scrollForceCount && this._scroll.scrollForce) {
      if (this._scroll.springPosition !== undefined) {
        scrollOffset = (scrollOffset + this._scroll.scrollForce + this._scroll.springPosition) / 2.0;
      } else {
        scrollOffset += this._scroll.scrollForce;
      }
    }
    if (!this.options.overscroll) {
      if ((this._scroll.boundsReached === Bounds.BOTH) || ((this._scroll.boundsReached === Bounds.PREV) && (scrollOffset > this._scroll.springPosition)) || ((this._scroll.boundsReached === Bounds.NEXT) && (scrollOffset < this._scroll.springPosition))) {
        scrollOffset = this._scroll.springPosition;
      }
    }
    return scrollOffset;
  }
  ScrollController.prototype._calcScrollHeight = function(next, lastNodeOnly) {
    var calcedHeight = 0;
    var node = this._nodes.getStartEnumNode(next);
    while (node) {
      if (node._invalidated) {
        if (node.trueSizeRequested) {
          calcedHeight = undefined;
          break;
        }
        if (node.scrollLength !== undefined) {
          calcedHeight = lastNodeOnly ? node.scrollLength : (calcedHeight + node.scrollLength);
          if (!next && lastNodeOnly) {
            break;
          }
        }
      }
      node = next ? node._next : node._prev;
    }
    return calcedHeight;
  };
  function _calcBounds(size, scrollOffset) {
    var prevHeight = this._calcScrollHeight(false);
    var nextHeight = this._calcScrollHeight(true);
    var enforeMinSize = _isSequentiallyScrollingOptimized.call(this);
    var totalHeight;
    if (enforeMinSize) {
      if ((nextHeight !== undefined) && (prevHeight !== undefined)) {
        totalHeight = prevHeight + nextHeight;
      }
      if ((totalHeight !== undefined) && (totalHeight <= size[this._direction])) {
        this._scroll.boundsReached = Bounds.BOTH;
        this._scroll.springPosition = this.options.alignment ? -nextHeight : prevHeight;
        this._scroll.springSource = SpringSource.MINSIZE;
        return;
      }
    }
    totalHeight = (prevHeight || 0) + (nextHeight || 0);
    if (this.options.alignment) {
      if (enforeMinSize) {
        if ((nextHeight !== undefined) && ((scrollOffset + nextHeight) <= 0)) {
          this._scroll.boundsReached = Bounds.NEXT;
          this._scroll.springPosition = -nextHeight;
          this._scroll.springSource = SpringSource.NEXTBOUNDS;
          return;
        }
      } else {
        var firstPrevItemHeight = this._calcScrollHeight(false, true);
        if ((nextHeight !== undefined) && firstPrevItemHeight && ((scrollOffset + nextHeight + size[this._direction]) <= firstPrevItemHeight)) {
          this._scroll.boundsReached = Bounds.NEXT;
          this._scroll.springPosition = nextHeight - (size[this._direction] - firstPrevItemHeight);
          this._scroll.springSource = SpringSource.NEXTBOUNDS;
          return;
        }
      }
    } else {
      if ((prevHeight !== undefined) && ((scrollOffset - prevHeight) >= 0)) {
        this._scroll.boundsReached = Bounds.PREV;
        this._scroll.springPosition = prevHeight;
        this._scroll.springSource = SpringSource.PREVBOUNDS;
        return;
      }
    }
    if (this.options.alignment) {
      if ((prevHeight !== undefined) && (totalHeight > size[this._direction]) && ((scrollOffset - prevHeight) >= -size[this._direction])) {
        this._scroll.boundsReached = Bounds.PREV;
        this._scroll.springPosition = -size[this._direction] + prevHeight;
        this._scroll.springSource = SpringSource.PREVBOUNDS;
        return;
      }
    } else {
      var nextBounds = enforeMinSize ? size[this._direction] : this._calcScrollHeight(true, true);
      if ((nextHeight !== undefined) && ((scrollOffset + nextHeight) <= nextBounds)) {
        this._scroll.boundsReached = Bounds.NEXT;
        this._scroll.springPosition = nextBounds - nextHeight;
        this._scroll.springSource = SpringSource.NEXTBOUNDS;
        return;
      }
    }
    this._scroll.boundsReached = Bounds.NONE;
    this._scroll.springPosition = undefined;
    this._scroll.springSource = SpringSource.NONE;
  }
  function _calcScrollToOffset(size, scrollOffset) {
    var scrollToRenderNode = this._scroll.scrollToRenderNode || this._scroll.ensureVisibleRenderNode;
    if (!scrollToRenderNode) {
      return;
    }
    if ((this._scroll.boundsReached === Bounds.BOTH) || (!this._scroll.scrollToDirection && (this._scroll.boundsReached === Bounds.PREV)) || (this._scroll.scrollToDirection && (this._scroll.boundsReached === Bounds.NEXT))) {
      return;
    }
    var foundNode;
    var scrollToOffset = 0;
    var node = this._nodes.getStartEnumNode(true);
    var count = 0;
    while (node) {
      count++;
      if (!node._invalidated || (node.scrollLength === undefined)) {
        break;
      }
      if (this.options.alignment) {
        scrollToOffset -= node.scrollLength;
      }
      if (node.renderNode === scrollToRenderNode) {
        foundNode = node;
        break;
      }
      if (!this.options.alignment) {
        scrollToOffset -= node.scrollLength;
      }
      node = node._next;
    }
    if (!foundNode) {
      scrollToOffset = 0;
      node = this._nodes.getStartEnumNode(false);
      while (node) {
        if (!node._invalidated || (node.scrollLength === undefined)) {
          break;
        }
        if (!this.options.alignment) {
          scrollToOffset += node.scrollLength;
        }
        if (node.renderNode === scrollToRenderNode) {
          foundNode = node;
          break;
        }
        if (this.options.alignment) {
          scrollToOffset += node.scrollLength;
        }
        node = node._prev;
      }
    }
    if (foundNode) {
      if (this._scroll.ensureVisibleRenderNode) {
        if (this.options.alignment) {
          if ((scrollToOffset - foundNode.scrollLength) < 0) {
            this._scroll.springPosition = scrollToOffset;
            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
          } else if (scrollToOffset > size[this._direction]) {
            this._scroll.springPosition = size[this._direction] - scrollToOffset;
            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
          } else {
            if (!foundNode.trueSizeRequested) {
              this._scroll.ensureVisibleRenderNode = undefined;
            }
          }
        } else {
          scrollToOffset = -scrollToOffset;
          if (scrollToOffset < 0) {
            this._scroll.springPosition = scrollToOffset;
            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
          } else if ((scrollToOffset + foundNode.scrollLength) > size[this._direction]) {
            this._scroll.springPosition = size[this._direction] - (scrollToOffset + foundNode.scrollLength);
            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
          } else {
            if (!foundNode.trueSizeRequested) {
              this._scroll.ensureVisibleRenderNode = undefined;
            }
          }
        }
      } else {
        this._scroll.springPosition = scrollToOffset;
        this._scroll.springSource = SpringSource.GOTOSEQUENCE;
      }
      return;
    }
    if (this._scroll.scrollToDirection) {
      this._scroll.springPosition = scrollOffset - size[this._direction];
      this._scroll.springSource = SpringSource.GOTONEXTDIRECTION;
    } else {
      this._scroll.springPosition = scrollOffset + size[this._direction];
      this._scroll.springSource = SpringSource.GOTOPREVDIRECTION;
    }
    if (this._viewSequence.cleanup) {
      var viewSequence = this._viewSequence;
      while (viewSequence.get() !== scrollToRenderNode) {
        viewSequence = this._scroll.scrollToDirection ? viewSequence.getNext(true) : viewSequence.getPrevious(true);
        if (!viewSequence) {
          break;
        }
      }
    }
  }
  function _snapToPage() {
    if (!this.options.paginated || this._scroll.scrollForceCount || (this._scroll.springPosition !== undefined)) {
      return;
    }
    var item;
    switch (this.options.paginationMode) {
      case PaginationMode.SCROLL:
        if (!this.options.paginationEnergyThreshold || (Math.abs(this._scroll.particle.getEnergy()) <= this.options.paginationEnergyThreshold)) {
          item = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
          if (item && item.renderNode) {
            this.goToRenderNode(item.renderNode);
          }
        }
        break;
      case PaginationMode.PAGE:
        item = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
        if (item && item.renderNode) {
          this.goToRenderNode(item.renderNode);
        }
        break;
    }
  }
  function _normalizePrevViewSequence(scrollOffset) {
    var count = 0;
    var normalizedScrollOffset = scrollOffset;
    var normalizeNextPrev = false;
    var node = this._nodes.getStartEnumNode(false);
    while (node) {
      if (!node._invalidated || !node._viewSequence) {
        break;
      }
      if (normalizeNextPrev) {
        this._viewSequence = node._viewSequence;
        normalizedScrollOffset = scrollOffset;
        normalizeNextPrev = false;
      }
      if ((node.scrollLength === undefined) || node.trueSizeRequested || (scrollOffset < 0)) {
        break;
      }
      scrollOffset -= node.scrollLength;
      count++;
      if (node.scrollLength) {
        if (this.options.alignment) {
          normalizeNextPrev = (scrollOffset >= 0);
        } else {
          if (Math.round(scrollOffset) >= 0) {
            this._viewSequence = node._viewSequence;
            normalizedScrollOffset = scrollOffset;
          }
        }
      }
      node = node._prev;
    }
    return normalizedScrollOffset;
  }
  function _normalizeNextViewSequence(scrollOffset) {
    var count = 0;
    var normalizedScrollOffset = scrollOffset;
    var node = this._nodes.getStartEnumNode(true);
    while (node) {
      if (!node._invalidated || (node.scrollLength === undefined) || node.trueSizeRequested || !node._viewSequence || ((Math.round(scrollOffset) > 0) && (!this.options.alignment || (node.scrollLength !== 0)))) {
        break;
      }
      if (this.options.alignment) {
        scrollOffset += node.scrollLength;
        count++;
      }
      if (node.scrollLength || this.options.alignment) {
        this._viewSequence = node._viewSequence;
        normalizedScrollOffset = scrollOffset;
      }
      if (!this.options.alignment) {
        scrollOffset += node.scrollLength;
        count++;
      }
      node = node._next;
    }
    return normalizedScrollOffset;
  }
  function _normalizeViewSequence(size, scrollOffset) {
    var caps = this._layout.capabilities;
    if (caps && caps.debug && (caps.debug.normalize !== undefined) && !caps.debug.normalize) {
      return scrollOffset;
    }
    if (this._scroll.scrollForceCount) {
      return scrollOffset;
    }
    var normalizedScrollOffset = scrollOffset;
    if (this.options.alignment && (scrollOffset < 0)) {
      normalizedScrollOffset = _normalizeNextViewSequence.call(this, scrollOffset);
    } else if (!this.options.alignment && (scrollOffset > 0)) {
      normalizedScrollOffset = _normalizePrevViewSequence.call(this, scrollOffset);
    }
    if (normalizedScrollOffset === scrollOffset) {
      if (this.options.alignment && (scrollOffset > 0)) {
        normalizedScrollOffset = _normalizePrevViewSequence.call(this, scrollOffset);
      } else if (!this.options.alignment && (scrollOffset < 0)) {
        normalizedScrollOffset = _normalizeNextViewSequence.call(this, scrollOffset);
      }
    }
    if (normalizedScrollOffset !== scrollOffset) {
      var delta = normalizedScrollOffset - scrollOffset;
      var particleValue = this._scroll.particle.getPosition1D();
      _setParticle.call(this, particleValue + delta, undefined, 'normalize');
      if (this._scroll.springPosition !== undefined) {
        this._scroll.springPosition += delta;
      }
      if (_isSequentiallyScrollingOptimized.call(this)) {
        this._scroll.groupStart -= delta;
      }
    }
    return normalizedScrollOffset;
  }
  ScrollController.prototype.getVisibleItems = function() {
    var size = this._contextSizeCache;
    var scrollOffset = this.options.alignment ? (this._scroll.unnormalizedScrollOffset + size[this._direction]) : this._scroll.unnormalizedScrollOffset;
    var result = [];
    var node = this._nodes.getStartEnumNode(true);
    while (node) {
      if (!node._invalidated || (node.scrollLength === undefined) || (scrollOffset > size[this._direction])) {
        break;
      }
      scrollOffset += node.scrollLength;
      if ((scrollOffset >= 0) && node._viewSequence) {
        result.push({
          index: node._viewSequence.getIndex(),
          viewSequence: node._viewSequence,
          renderNode: node.renderNode,
          visiblePerc: node.scrollLength ? ((Math.min(scrollOffset, size[this._direction]) - Math.max(scrollOffset - node.scrollLength, 0)) / node.scrollLength) : 1,
          scrollOffset: scrollOffset - node.scrollLength,
          scrollLength: node.scrollLength,
          _node: node
        });
      }
      node = node._next;
    }
    scrollOffset = this.options.alignment ? (this._scroll.unnormalizedScrollOffset + size[this._direction]) : this._scroll.unnormalizedScrollOffset;
    node = this._nodes.getStartEnumNode(false);
    while (node) {
      if (!node._invalidated || (node.scrollLength === undefined) || (scrollOffset < 0)) {
        break;
      }
      scrollOffset -= node.scrollLength;
      if ((scrollOffset < size[this._direction]) && node._viewSequence) {
        result.unshift({
          index: node._viewSequence.getIndex(),
          viewSequence: node._viewSequence,
          renderNode: node.renderNode,
          visiblePerc: node.scrollLength ? ((Math.min(scrollOffset + node.scrollLength, size[this._direction]) - Math.max(scrollOffset, 0)) / node.scrollLength) : 1,
          scrollOffset: scrollOffset,
          scrollLength: node.scrollLength,
          _node: node
        });
      }
      node = node._prev;
    }
    return result;
  };
  function _getVisibleItem(first) {
    var result = {};
    var diff;
    var prevDiff = 10000000;
    var diffDelta = (first && this.options.alignment) ? -this._contextSizeCache[this._direction] : ((!first && !this.options.alignment) ? this._contextSizeCache[this._direction] : 0);
    var scrollOffset = this._scroll.unnormalizedScrollOffset;
    var node = this._nodes.getStartEnumNode(true);
    while (node) {
      if (!node._invalidated || (node.scrollLength === undefined)) {
        break;
      }
      if (node._viewSequence) {
        diff = Math.abs(diffDelta - (scrollOffset + (!first ? node.scrollLength : 0)));
        if (diff >= prevDiff) {
          break;
        }
        prevDiff = diff;
        result.scrollOffset = scrollOffset;
        result._node = node;
        scrollOffset += node.scrollLength;
      }
      node = node._next;
    }
    scrollOffset = this._scroll.unnormalizedScrollOffset;
    node = this._nodes.getStartEnumNode(false);
    while (node) {
      if (!node._invalidated || (node.scrollLength === undefined)) {
        break;
      }
      if (node._viewSequence) {
        scrollOffset -= node.scrollLength;
        diff = Math.abs(diffDelta - (scrollOffset + (!first ? node.scrollLength : 0)));
        if (diff >= prevDiff) {
          break;
        }
        prevDiff = diff;
        result.scrollOffset = scrollOffset;
        result._node = node;
      }
      node = node._prev;
    }
    if (!result._node) {
      return undefined;
    }
    result.scrollLength = result._node.scrollLength;
    if (this.options.alignment) {
      result.visiblePerc = (Math.min(result.scrollOffset + result.scrollLength, 0) - Math.max(result.scrollOffset, -this._contextSizeCache[this._direction])) / result.scrollLength;
    } else {
      result.visiblePerc = (Math.min(result.scrollOffset + result.scrollLength, this._contextSizeCache[this._direction]) - Math.max(result.scrollOffset, 0)) / result.scrollLength;
    }
    result.index = result._node._viewSequence.getIndex();
    result.viewSequence = result._node._viewSequence;
    result.renderNode = result._node.renderNode;
    return result;
  }
  ScrollController.prototype.getFirstVisibleItem = function() {
    return _getVisibleItem.call(this, true);
  };
  ScrollController.prototype.reLayout = function() {
    return this._reLayout = true;
  };
  ScrollController.prototype.getLastVisibleItem = function() {
    return _getVisibleItem.call(this, false);
  };
  function _goToSequence(viewSequence, next, noAnimation) {
    if (noAnimation) {
      this._viewSequence = viewSequence;
      this._scroll.springPosition = undefined;
      _updateSpring.call(this);
      this.halt();
      this._scroll.scrollDelta = 0;
      _setParticle.call(this, 0, 0, '_goToSequence');
      this._scroll.scrollDirty = true;
    } else {
      this._scroll.scrollToSequence = viewSequence;
      this._scroll.scrollToRenderNode = viewSequence.get();
      this._scroll.ensureVisibleRenderNode = undefined;
      this._scroll.scrollToDirection = next;
      this._scroll.scrollDirty = true;
    }
  }
  function _ensureVisibleSequence(viewSequence, next) {
    this._scroll.scrollToSequence = undefined;
    this._scroll.scrollToRenderNode = undefined;
    this._scroll.ensureVisibleRenderNode = viewSequence.get();
    this._scroll.scrollToDirection = next;
    this._scroll.scrollDirty = true;
  }
  function _goToPage(amount, noAnimation) {
    var viewSequence = (!noAnimation ? this._scroll.scrollToSequence : undefined) || this._viewSequence;
    if (!this._scroll.scrollToSequence && !noAnimation) {
      var firstVisibleItem = this.getFirstVisibleItem();
      if (firstVisibleItem) {
        viewSequence = firstVisibleItem.viewSequence;
        if (((amount < 0) && (firstVisibleItem.scrollOffset < 0)) || ((amount > 0) && (firstVisibleItem.scrollOffset > 0))) {
          amount = 0;
        }
      }
    }
    if (!viewSequence) {
      return;
    }
    for (var i = 0; i < Math.abs(amount); i++) {
      var nextViewSequence = (amount > 0) ? viewSequence.getNext() : viewSequence.getPrevious();
      if (nextViewSequence) {
        viewSequence = nextViewSequence;
      } else {
        break;
      }
    }
    _goToSequence.call(this, viewSequence, amount >= 0, noAnimation);
  }
  ScrollController.prototype.goToFirstPage = function(noAnimation) {
    if (!this._viewSequence) {
      return this;
    }
    if (this._viewSequence._ && this._viewSequence._.loop) {
      LayoutUtility.error('Unable to go to first item of looped ViewSequence');
      return this;
    }
    var viewSequence = this._viewSequence;
    while (viewSequence) {
      var prev = viewSequence.getPrevious();
      if (prev && prev.get()) {
        viewSequence = prev;
      } else {
        break;
      }
    }
    _goToSequence.call(this, viewSequence, false, noAnimation);
    return this;
  };
  ScrollController.prototype.goToPreviousPage = function(noAnimation) {
    _goToPage.call(this, -1, noAnimation);
    return this;
  };
  ScrollController.prototype.goToNextPage = function(noAnimation) {
    _goToPage.call(this, 1, noAnimation);
    return this;
  };
  ScrollController.prototype.goToLastPage = function(noAnimation) {
    if (!this._viewSequence) {
      return this;
    }
    if (this._viewSequence._ && this._viewSequence._.loop) {
      LayoutUtility.error('Unable to go to last item of looped ViewSequence');
      return this;
    }
    var viewSequence = this._viewSequence;
    while (viewSequence) {
      var next = viewSequence.getNext();
      if (next && next.get()) {
        viewSequence = next;
      } else {
        break;
      }
    }
    _goToSequence.call(this, viewSequence, true, noAnimation);
    return this;
  };
  ScrollController.prototype.goToRenderNode = function(node, noAnimation) {
    if (!this._viewSequence || !node) {
      return this;
    }
    if (this._viewSequence.get() === node) {
      var next = _calcScrollOffset.call(this) >= 0;
      _goToSequence.call(this, this._viewSequence, next, noAnimation);
      return this;
    }
    var nextSequence = this._viewSequence.getNext();
    var prevSequence = this._viewSequence.getPrevious();
    while ((nextSequence || prevSequence) && (nextSequence !== this._viewSequence)) {
      var nextNode = nextSequence ? nextSequence.get() : undefined;
      if (nextNode === node) {
        _goToSequence.call(this, nextSequence, true, noAnimation);
        break;
      }
      var prevNode = prevSequence ? prevSequence.get() : undefined;
      if (prevNode === node) {
        _goToSequence.call(this, prevSequence, false, noAnimation);
        break;
      }
      nextSequence = nextNode ? nextSequence.getNext() : undefined;
      prevSequence = prevNode ? prevSequence.getPrevious() : undefined;
    }
    return this;
  };
  ScrollController.prototype.ensureVisible = function(node) {
    if (node instanceof LinkedListViewSequence) {
      node = node.get();
    } else if ((node instanceof Number) || (typeof node === 'number')) {
      var viewSequence = this._viewSequence;
      while (viewSequence.getIndex() < node) {
        viewSequence = viewSequence.getNext();
        if (!viewSequence) {
          return this;
        }
      }
      while (viewSequence.getIndex() > node) {
        viewSequence = viewSequence.getPrevious();
        if (!viewSequence) {
          return this;
        }
      }
    }
    if (this._viewSequence.get() === node) {
      var next = _calcScrollOffset.call(this) >= 0;
      _ensureVisibleSequence.call(this, this._viewSequence, next);
      return this;
    }
    var nextSequence = this._viewSequence.getNext();
    var prevSequence = this._viewSequence.getPrevious();
    while ((nextSequence || prevSequence) && (nextSequence !== this._viewSequence)) {
      var nextNode = nextSequence ? nextSequence.get() : undefined;
      if (nextNode === node) {
        _ensureVisibleSequence.call(this, nextSequence, true);
        break;
      }
      var prevNode = prevSequence ? prevSequence.get() : undefined;
      if (prevNode === node) {
        _ensureVisibleSequence.call(this, prevSequence, false);
        break;
      }
      nextSequence = nextNode ? nextSequence.getNext() : undefined;
      prevSequence = prevNode ? prevSequence.getPrevious() : undefined;
    }
    return this;
  };
  ScrollController.prototype.scroll = function(delta) {
    this.halt();
    this._scroll.scrollDelta += delta;
    return this;
  };
  ScrollController.prototype.canScroll = function(delta) {
    var scrollOffset = _calcScrollOffset.call(this);
    var prevHeight = this._calcScrollHeight(false);
    var nextHeight = this._calcScrollHeight(true);
    var totalHeight;
    if ((nextHeight !== undefined) && (prevHeight !== undefined)) {
      totalHeight = prevHeight + nextHeight;
    }
    if ((totalHeight !== undefined) && (totalHeight <= this._contextSizeCache[this._direction])) {
      return 0;
    }
    if ((delta < 0) && (nextHeight !== undefined)) {
      var nextOffset = this._contextSizeCache[this._direction] - (scrollOffset + nextHeight);
      return Math.max(nextOffset, delta);
    } else if ((delta > 0) && (prevHeight !== undefined)) {
      var prevOffset = -(scrollOffset - prevHeight);
      return Math.min(prevOffset, delta);
    }
    return delta;
  };
  ScrollController.prototype.halt = function() {
    this._scroll.scrollToSequence = undefined;
    this._scroll.scrollToRenderNode = undefined;
    this._scroll.ensureVisibleRenderNode = undefined;
    _setParticle.call(this, undefined, 0, 'halt');
    return this;
  };
  ScrollController.prototype.isScrolling = function() {
    return this._scroll.isScrolling;
  };
  ScrollController.prototype.isTouching = function() {
    return this._scroll.activeTouches.length > 0;
  };
  ScrollController.prototype.getBoundsReached = function() {
    return this._scroll.boundsReached;
  };
  ScrollController.prototype.getVelocity = function() {
    return this._scroll.particle.getVelocity1D();
  };
  ScrollController.prototype.getEnergy = function() {
    return this._scroll.particle.getEnergy();
  };
  ScrollController.prototype.setVelocity = function(velocity) {
    return this._scroll.particle.setVelocity1D(velocity);
  };
  ScrollController.prototype.applyScrollForce = function(delta) {
    this.halt();
    if (this._scroll.scrollForceCount === 0) {
      this._scroll.scrollForceStartItem = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
    }
    this._scroll.scrollForceCount++;
    this._scroll.scrollForce += delta;
    this._eventOutput.emit((this._scroll.scrollForceCount === 1) ? 'swipestart' : 'swipeupdate', {
      target: this,
      total: this._scroll.scrollForce,
      delta: delta
    });
    return this;
  };
  ScrollController.prototype.updateScrollForce = function(prevDelta, newDelta) {
    this.halt();
    newDelta -= prevDelta;
    this._scroll.scrollForce += newDelta;
    this._eventOutput.emit('swipeupdate', {
      target: this,
      total: this._scroll.scrollForce,
      delta: newDelta
    });
    return this;
  };
  ScrollController.prototype.releaseScrollForce = function(delta, velocity, detectSwipes) {
    this.halt();
    if (this._scroll.scrollForceCount === 1) {
      var scrollOffset = _calcScrollOffset.call(this);
      _setParticle.call(this, scrollOffset, velocity, 'releaseScrollForce');
      this._scroll.pe.wake();
      this._scroll.scrollForce = 0;
      this._scroll.scrollDirty = true;
      if (this._scroll.scrollForceStartItem && this.options.paginated && (this.options.paginationMode === PaginationMode.PAGE)) {
        var item = this.options.alignment ? this.getLastVisibleItem(true) : this.getFirstVisibleItem(true);
        if (item) {
          if (item.renderNode !== this._scroll.scrollForceStartItem.renderNode) {
            this.goToRenderNode(item.renderNode);
          } else if (detectSwipes && this.options.paginationEnergyThreshold && (Math.abs(this._scroll.particle.getEnergy()) >= this.options.paginationEnergyThreshold)) {
            velocity = velocity || 0;
            if ((velocity < 0) && item._node._next && item._node._next.renderNode) {
              this.goToRenderNode(item._node._next.renderNode);
            } else if ((velocity >= 0) && item._node._prev && item._node._prev.renderNode) {
              this.goToRenderNode(item._node._prev.renderNode);
            }
          } else {
            this.goToRenderNode(item.renderNode);
          }
        }
      }
      this._scroll.scrollForceStartItem = undefined;
      this._scroll.scrollForceCount--;
      this._eventOutput.emit('swipeend', {
        target: this,
        total: delta,
        delta: 0,
        velocity: velocity
      });
    } else {
      this._scroll.scrollForce -= delta;
      this._scroll.scrollForceCount--;
      this._eventOutput.emit('swipeupdate', {
        target: this,
        total: this._scroll.scrollForce,
        delta: delta
      });
    }
    return this;
  };
  ScrollController.prototype.getSpec = function(node, normalize) {
    var spec = LayoutController.prototype.getSpec.apply(this, arguments);
    if (spec && _isSequentiallyScrollingOptimized.call(this)) {
      spec = {
        origin: spec.origin,
        align: spec.align,
        opacity: spec.opacity,
        size: spec.size,
        renderNode: spec.renderNode,
        transform: spec.transform
      };
      var translate = [0, 0, 0];
      translate[this._direction] = this._scrollOffsetCache + this._scroll.groupStart;
      spec.transform = Transform.thenMove(spec.transform, translate);
    }
    return spec;
  };
  function _layout(size, scrollOffset, nested) {
    this._debug.layoutCount++;
    var scrollStart = 0 - Math.max(this.options.extraBoundsSpace[0], 1);
    var scrollEnd = size[this._direction] + Math.max(this.options.extraBoundsSpace[1], 1);
    if (this.options.paginated && (this.options.paginationMode === PaginationMode.PAGE)) {
      scrollStart = scrollOffset - this.options.extraBoundsSpace[0];
      scrollEnd = scrollOffset + size[this._direction] + this.options.extraBoundsSpace[1];
      if ((scrollOffset + size[this._direction]) < 0) {
        scrollStart += size[this._direction];
        scrollEnd += size[this._direction];
      } else if ((scrollOffset - size[this._direction]) > 0) {
        scrollStart -= size[this._direction];
        scrollEnd -= size[this._direction];
      }
    }
    if (this.options.layoutAll) {
      scrollStart = -1000000;
      scrollEnd = 1000000;
    }
    var layoutContext = this._nodes.prepareForLayout(this._viewSequence, this._nodesById, {
      size: size,
      direction: this._direction,
      reverse: this.options.alignment ? true : false,
      scrollOffset: this.options.alignment ? (scrollOffset + size[this._direction]) : scrollOffset,
      scrollStart: scrollStart,
      scrollEnd: scrollEnd
    });
    if (this._layout._function) {
      this._layout._function(layoutContext, this._layout.options);
    }
    this._scroll.unnormalizedScrollOffset = scrollOffset;
    if (this._postLayout) {
      this._postLayout(size, scrollOffset);
    }
    this._nodes.removeNonInvalidatedNodes(this.options.flowOptions.removeSpec);
    _calcBounds.call(this, size, scrollOffset);
    _calcScrollToOffset.call(this, size, scrollOffset);
    _snapToPage.call(this);
    scrollOffset = _normalizeViewSequence.call(this, size, scrollOffset);
    var newScrollOffset = _calcScrollOffset.call(this, true);
    if (!nested && (newScrollOffset !== scrollOffset)) {
      return _layout.call(this, size, newScrollOffset, true);
    }
    _updateSpring.call(this);
    this._nodes.removeVirtualViewSequenceNodes();
    if (this.options.size && (this.options.size[this._direction] === true)) {
      var scrollLength = 0;
      var node = this._nodes.getStartEnumNode();
      while (node) {
        if (node._invalidated && node.scrollLength) {
          scrollLength += node.scrollLength;
        }
        node = node._next;
      }
      this._size = this._size || [0, 0];
      this._size[0] = this.options.size[0];
      this._size[1] = this.options.size[1];
      this._size[this._direction] = scrollLength;
    }
    return scrollOffset;
  }
  function _innerRender() {
    var specs = this._specs;
    for (var i3 = 0,
        j3 = specs.length; i3 < j3; i3++) {
      if (specs[i3].renderNode) {
        specs[i3].target = specs[i3].renderNode.render();
      }
    }
    if (!specs.length || (specs[specs.length - 1] !== this._cleanupRegistration)) {
      specs.push(this._cleanupRegistration);
    }
    return specs;
  }
  ScrollController.prototype.commit = function commit(context) {
    var size = context.size;
    this._debug.commitCount++;
    if (this._resetFlowState) {
      this._resetFlowState = false;
      this._isDirty = true;
      this._nodes.removeAll();
    }
    var scrollOffset = _calcScrollOffset.call(this, true, true);
    if (this._scrollOffsetCache === undefined) {
      this._scrollOffsetCache = scrollOffset;
    }
    var emitEndScrollingEvent = false;
    var emitScrollEvent = false;
    var eventData;
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || this._isDirty || this._reLayout || this._scroll.scrollDirty || this._nodes._trueSizeRequested || this.options.alwaysLayout || this._scrollOffsetCache !== scrollOffset) {
      if (this._reLayout) {
        this._reLayout = false;
      }
      eventData = {
        target: this,
        oldSize: this._contextSizeCache,
        size: size,
        oldScrollOffset: -(this._scrollOffsetCache + this._scroll.groupStart),
        scrollOffset: -(scrollOffset + this._scroll.groupStart)
      };
      if (this._scrollOffsetCache !== scrollOffset) {
        if (!this._scroll.isScrolling) {
          this._scroll.isScrolling = true;
          this._eventOutput.emit('scrollstart', eventData);
        }
        emitScrollEvent = true;
      } else if (this._scroll.isScrolling && !this._scroll.scrollForceCount) {
        emitEndScrollingEvent = true;
      }
      this._eventOutput.emit('layoutstart', eventData);
      this._contextSizeCache[0] = size[0];
      this._contextSizeCache[1] = size[1];
      scrollOffset = _layout.call(this, size, scrollOffset);
      this._scrollOffsetCache = scrollOffset;
      if (this._dirtyRenderables.length) {
        this._isDirty = !this._dirtyRenderables.every(function(dirtyRenderable) {
          return !this._nodes.isNodeInCurrentBuild(dirtyRenderable);
        }.bind(this));
        this._dirtyRenderables = [];
      }
      if (this.options.flow && (this._isDirty || (this.options.flowOptions.reflowOnResize && ((size[0] !== this._contextSizeCache[0]) || (size[1] !== this._contextSizeCache[1]))))) {
        var node = this._nodes.getStartEnumNode();
        while (node) {
          node.releaseLock(true);
          node = node._next;
        }
      }
      this._isDirty = false;
      this._scroll.scrollDirty = false;
      eventData.scrollOffset = -(this._scrollOffsetCache + this._scroll.groupStart);
    } else {
      if (this._scroll.isScrolling && !this._scroll.scrollForceCount) {
        emitEndScrollingEvent = true;
      }
      this._scroll.ensureVisibleRenderNode = undefined;
    }
    var groupTranslate = this._scroll.groupTranslate;
    groupTranslate[0] = 0;
    groupTranslate[1] = 0;
    groupTranslate[2] = 0;
    groupTranslate[this._direction] = -this._scroll.groupStart - scrollOffset;
    var sequentialScrollingOptimized = _isSequentiallyScrollingOptimized.call(this);
    var result = this._nodes.buildSpecAndDestroyUnrenderedNodes(sequentialScrollingOptimized ? groupTranslate : undefined);
    this._specs = result.specs;
    if (!this._specs.length) {
      this._scroll.groupStart = 0;
    }
    if (eventData) {
      this._eventOutput.emit('layoutend', eventData);
    }
    if (result.modified) {
      this._eventOutput.emit('reflow', {target: this});
    }
    if (emitScrollEvent) {
      this._eventOutput.emit('scroll', eventData);
    }
    if (eventData) {
      var visibleItem = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
      if ((visibleItem && !this._visibleItemCache) || (!visibleItem && this._visibleItemCache) || (visibleItem && this._visibleItemCache && (visibleItem.renderNode !== this._visibleItemCache.renderNode))) {
        this._eventOutput.emit('pagechange', {
          target: this,
          oldViewSequence: this._visibleItemCache ? this._visibleItemCache.viewSequence : undefined,
          viewSequence: visibleItem ? visibleItem.viewSequence : undefined,
          oldIndex: this._visibleItemCache ? this._visibleItemCache.index : undefined,
          index: visibleItem ? visibleItem.index : undefined,
          renderNode: visibleItem ? visibleItem.renderNode : undefined,
          oldRenderNode: this._visibleItemCache ? this._visibleItemCache.renderNode : undefined
        });
        this._visibleItemCache = visibleItem;
      }
    }
    if (emitEndScrollingEvent) {
      this._scroll.isScrolling = false;
      this._scroll.scrollDirty = true;
      eventData = {
        target: this,
        oldSize: size,
        size: size,
        oldScrollOffset: -(this._scroll.groupStart + scrollOffset),
        scrollOffset: -(this._scroll.groupStart + scrollOffset)
      };
      this._eventOutput.emit('scrollend', eventData);
    }
    var transform = context.transform;
    if (sequentialScrollingOptimized) {
      var windowOffset = scrollOffset + this._scroll.groupStart;
      var translate = [0, 0, 0];
      translate[this._direction] = windowOffset;
      transform = Transform.thenMove(transform, translate);
    }
    return {
      transform: transform,
      size: size,
      opacity: context.opacity,
      origin: context.origin,
      target: this.group.render()
    };
  };
  ScrollController.prototype.replace = function(indexOrId, renderable, noAnimation) {
    var sequence;
    if (!this._nodesById) {
      sequence = this._viewSequence.findByIndex(indexOrId);
      var oldRenderable = sequence.get();
      if (oldRenderable !== renderable && noAnimation && oldRenderable && (this._scroll.ensureVisibleRenderNode === oldRenderable)) {
        this._scroll.ensureVisibleRenderNode = renderable;
      }
    }
    return LayoutController.prototype.replace.call(this, indexOrId, renderable, noAnimation, sequence);
  };
  ScrollController.prototype.render = function render() {
    if (this.container) {
      return this.container.render.apply(this.container, arguments);
    } else {
      return this.id;
    }
  };
  module.exports = ScrollController;
});

})();
(function() {
var define = $__System.amdDefine;
define("148", ["require", "exports", "module"], function(require, exports, module) {
  var Utility = {};
  Utility.Direction = {
    X: 0,
    Y: 1,
    Z: 2
  };
  Utility.after = function after(count, callback) {
    var counter = count;
    return function() {
      counter--;
      if (counter === 0)
        callback.apply(this, arguments);
    };
  };
  Utility.loadURL = function loadURL(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function onreadystatechange() {
      if (this.readyState === 4) {
        if (callback)
          callback(this.responseText);
      }
    };
    xhr.open('GET', url);
    xhr.send();
  };
  Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {
    var element = document.createElement('div');
    element.innerHTML = html;
    var result = document.createDocumentFragment();
    while (element.hasChildNodes())
      result.appendChild(element.firstChild);
    return result;
  };
  Utility.clone = function clone(b) {
    var a;
    if (typeof b === 'object') {
      a = (b instanceof Array) ? [] : {};
      for (var key in b) {
        if (typeof b[key] === 'object' && b[key] !== null) {
          if (b[key] instanceof Array) {
            a[key] = new Array(b[key].length);
            for (var i = 0; i < b[key].length; i++) {
              a[key][i] = Utility.clone(b[key][i]);
            }
          } else {
            a[key] = Utility.clone(b[key]);
          }
        } else {
          a[key] = b[key];
        }
      }
    } else {
      a = b;
    }
    return a;
  };
  module.exports = Utility;
});

})();
(function() {
var define = $__System.amdDefine;
define("149", ["require", "exports", "module", "148"], function(require, exports, module) {
  var Utility = require('148');
  function LayoutUtility() {}
  LayoutUtility.registeredHelpers = {};
  var Capabilities = {
    SEQUENCE: 1,
    DIRECTION_X: 2,
    DIRECTION_Y: 4,
    SCROLLING: 8
  };
  LayoutUtility.Capabilities = Capabilities;
  LayoutUtility.normalizeMargins = function(margins) {
    if (!margins) {
      return [0, 0, 0, 0];
    } else if (!Array.isArray(margins)) {
      return [margins, margins, margins, margins];
    } else if (margins.length === 0) {
      return [0, 0, 0, 0];
    } else if (margins.length === 1) {
      return [margins[0], margins[0], margins[0], margins[0]];
    } else if (margins.length === 2) {
      return [margins[0], margins[1], margins[0], margins[1]];
    } else {
      return margins;
    }
  };
  LayoutUtility.cloneSpec = function(spec) {
    var clone = {};
    if (spec.opacity !== undefined) {
      clone.opacity = spec.opacity;
    }
    if (spec.size !== undefined) {
      clone.size = spec.size.slice(0);
    }
    if (spec.transform !== undefined) {
      clone.transform = spec.transform.slice(0);
    }
    if (spec.origin !== undefined) {
      clone.origin = spec.origin.slice(0);
    }
    if (spec.align !== undefined) {
      clone.align = spec.align.slice(0);
    }
    return clone;
  };
  function _isEqualArray(a, b) {
    if (a === b) {
      return true;
    }
    if ((a === undefined) || (b === undefined)) {
      return false;
    }
    var i = a.length;
    if (i !== b.length) {
      return false;
    }
    while (i--) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  LayoutUtility.isEqualSpec = function(spec1, spec2) {
    if (spec1.opacity !== spec2.opacity) {
      return false;
    }
    if (!_isEqualArray(spec1.size, spec2.size)) {
      return false;
    }
    if (!_isEqualArray(spec1.transform, spec2.transform)) {
      return false;
    }
    if (!_isEqualArray(spec1.origin, spec2.origin)) {
      return false;
    }
    if (!_isEqualArray(spec1.align, spec2.align)) {
      return false;
    }
    return true;
  };
  LayoutUtility.getSpecDiffText = function(spec1, spec2) {
    var result = 'spec diff:';
    if (spec1.opacity !== spec2.opacity) {
      result += '\nopacity: ' + spec1.opacity + ' != ' + spec2.opacity;
    }
    if (!_isEqualArray(spec1.size, spec2.size)) {
      result += '\nsize: ' + JSON.stringify(spec1.size) + ' != ' + JSON.stringify(spec2.size);
    }
    if (!_isEqualArray(spec1.transform, spec2.transform)) {
      result += '\ntransform: ' + JSON.stringify(spec1.transform) + ' != ' + JSON.stringify(spec2.transform);
    }
    if (!_isEqualArray(spec1.origin, spec2.origin)) {
      result += '\norigin: ' + JSON.stringify(spec1.origin) + ' != ' + JSON.stringify(spec2.origin);
    }
    if (!_isEqualArray(spec1.align, spec2.align)) {
      result += '\nalign: ' + JSON.stringify(spec1.align) + ' != ' + JSON.stringify(spec2.align);
    }
    return result;
  };
  LayoutUtility.error = function(message) {
    console.log('ERROR: ' + message);
    throw message;
  };
  LayoutUtility.warning = function(message) {
    console.log('WARNING: ' + message);
  };
  LayoutUtility.log = function(args) {
    var message = '';
    for (var i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      if ((arg instanceof Object) || (arg instanceof Array)) {
        message += JSON.stringify(arg);
      } else {
        message += arg;
      }
    }
    console.log(message);
  };
  LayoutUtility.combineOptions = function(options1, options2, forceClone) {
    if (options1 && !options2 && !forceClone) {
      return options1;
    } else if (!options1 && options2 && !forceClone) {
      return options2;
    }
    var options = Utility.clone(options1 || {});
    if (options2) {
      for (var key in options2) {
        options[key] = options2[key];
      }
    }
    return options;
  };
  LayoutUtility.registerHelper = function(name, Helper) {
    if (!Helper.prototype.parse) {
      LayoutUtility.error('The layout-helper for name "' + name + '" is required to support the "parse" method');
    }
    if (this.registeredHelpers[name] !== undefined) {
      LayoutUtility.warning('A layout-helper with the name "' + name + '" is already registered and will be overwritten');
    }
    this.registeredHelpers[name] = Helper;
  };
  LayoutUtility.unregisterHelper = function(name) {
    delete this.registeredHelpers[name];
  };
  LayoutUtility.getRegisteredHelper = function(name) {
    return this.registeredHelpers[name];
  };
  module.exports = LayoutUtility;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a5", ["require", "exports", "module", "148", "149"], function(require, exports, module) {
  var Utility = require('148');
  var LayoutUtility = require('149');
  var capabilities = {
    sequence: true,
    direction: [Utility.Direction.Y, Utility.Direction.X],
    scrolling: true,
    trueSize: true,
    sequentialScrollingOptimized: true
  };
  var set = {
    size: [0, 0],
    translate: [0, 0, 0],
    scrollLength: undefined
  };
  var margin = [0, 0];
  function ListLayout(context, options) {
    var size = context.size;
    var direction = context.direction;
    var alignment = context.alignment;
    var revDirection = direction ? 0 : 1;
    var offset;
    var margins = LayoutUtility.normalizeMargins(options.margins);
    var spacing = options.spacing || 0;
    var node;
    var nodeSize;
    var itemSize;
    var getItemSize;
    var lastSectionBeforeVisibleCell;
    var lastSectionBeforeVisibleCellOffset;
    var lastSectionBeforeVisibleCellLength;
    var lastSectionBeforeVisibleCellScrollLength;
    var lastSectionBeforeVisibleCellTopReached;
    var firstVisibleCell;
    var lastNode;
    var lastCellOffsetInFirstVisibleSection;
    var isSectionCallback = options.isSectionCallback;
    var bound;
    if (spacing && typeof spacing !== 'number') {
      console.log('Famous-flex warning: ListLayout was initialized with a non-numeric spacing option. ' + 'The CollectionLayout supports an array spacing argument, but the ListLayout does not.');
    }
    set.size[0] = size[0];
    set.size[1] = size[1];
    set.size[revDirection] -= (margins[1 - revDirection] + margins[3 - revDirection]);
    set.translate[0] = 0;
    set.translate[1] = 0;
    set.translate[2] = 0;
    set.translate[revDirection] = margins[direction ? 3 : 0];
    if ((options.itemSize === true) || !options.hasOwnProperty('itemSize')) {
      itemSize = true;
    } else if (options.itemSize instanceof Function) {
      getItemSize = options.itemSize;
    } else {
      itemSize = (options.itemSize === undefined) ? size[direction] : options.itemSize;
    }
    margin[0] = margins[direction ? 0 : 3];
    margin[1] = -margins[direction ? 2 : 1];
    offset = context.scrollOffset + margin[alignment];
    bound = context.scrollEnd + margin[alignment];
    while (offset < (bound + spacing)) {
      lastNode = node;
      node = context.next();
      if (!node) {
        break;
      }
      nodeSize = getItemSize ? getItemSize(node.renderNode, context.size) : itemSize;
      nodeSize = (nodeSize === true) ? context.resolveSize(node, size)[direction] : nodeSize;
      set.size[direction] = nodeSize;
      set.translate[direction] = offset + (alignment ? spacing : 0);
      set.scrollLength = nodeSize + spacing;
      context.set(node, set);
      offset += set.scrollLength;
      if (isSectionCallback && isSectionCallback(node.renderNode)) {
        if ((set.translate[direction] <= margin[0]) && !lastSectionBeforeVisibleCellTopReached) {
          lastSectionBeforeVisibleCellTopReached = true;
          set.translate[direction] = margin[0];
          context.set(node, set);
        }
        if (!firstVisibleCell) {
          lastSectionBeforeVisibleCell = node;
          lastSectionBeforeVisibleCellOffset = offset - nodeSize;
          lastSectionBeforeVisibleCellLength = nodeSize;
          lastSectionBeforeVisibleCellScrollLength = nodeSize;
        } else if (lastCellOffsetInFirstVisibleSection === undefined) {
          lastCellOffsetInFirstVisibleSection = offset - nodeSize;
        }
      } else if (!firstVisibleCell && (offset >= 0)) {
        firstVisibleCell = node;
      }
    }
    if (lastNode && !node && !alignment) {
      set.scrollLength = nodeSize + margin[0] + -margin[1];
      context.set(lastNode, set);
    }
    lastNode = undefined;
    node = undefined;
    offset = context.scrollOffset + margin[alignment];
    bound = context.scrollStart + margin[alignment];
    while (offset > (bound - spacing)) {
      lastNode = node;
      node = context.prev();
      if (!node) {
        break;
      }
      nodeSize = getItemSize ? getItemSize(node.renderNode, context.size) : itemSize;
      nodeSize = (nodeSize === true) ? context.resolveSize(node, size)[direction] : nodeSize;
      set.scrollLength = nodeSize + spacing;
      offset -= set.scrollLength;
      set.size[direction] = nodeSize;
      set.translate[direction] = offset + (alignment ? spacing : 0);
      context.set(node, set);
      if (isSectionCallback && isSectionCallback(node.renderNode)) {
        if ((set.translate[direction] <= margin[0]) && !lastSectionBeforeVisibleCellTopReached) {
          lastSectionBeforeVisibleCellTopReached = true;
          set.translate[direction] = margin[0];
          context.set(node, set);
        }
        if (!lastSectionBeforeVisibleCell) {
          lastSectionBeforeVisibleCell = node;
          lastSectionBeforeVisibleCellOffset = offset;
          lastSectionBeforeVisibleCellLength = nodeSize;
          lastSectionBeforeVisibleCellScrollLength = set.scrollLength;
        }
      } else if ((offset + nodeSize) >= 0) {
        firstVisibleCell = node;
        if (lastSectionBeforeVisibleCell) {
          lastCellOffsetInFirstVisibleSection = offset + nodeSize;
        }
        lastSectionBeforeVisibleCell = undefined;
      }
    }
    if (lastNode && !node && alignment) {
      set.scrollLength = nodeSize + margin[0] + -margin[1];
      context.set(lastNode, set);
      if (lastSectionBeforeVisibleCell === lastNode) {
        lastSectionBeforeVisibleCellScrollLength = set.scrollLength;
      }
    }
    if (isSectionCallback && !lastSectionBeforeVisibleCell) {
      node = context.prev();
      while (node) {
        if (isSectionCallback(node.renderNode)) {
          lastSectionBeforeVisibleCell = node;
          nodeSize = options.itemSize || context.resolveSize(node, size)[direction];
          lastSectionBeforeVisibleCellOffset = offset - nodeSize;
          lastSectionBeforeVisibleCellLength = nodeSize;
          lastSectionBeforeVisibleCellScrollLength = undefined;
          break;
        } else {
          node = context.prev();
        }
      }
    }
    if (lastSectionBeforeVisibleCell) {
      var correctedOffset = Math.max(margin[0], lastSectionBeforeVisibleCellOffset);
      if ((lastCellOffsetInFirstVisibleSection !== undefined) && (lastSectionBeforeVisibleCellLength > (lastCellOffsetInFirstVisibleSection - margin[0]))) {
        correctedOffset = ((lastCellOffsetInFirstVisibleSection - lastSectionBeforeVisibleCellLength));
      }
      set.size[direction] = lastSectionBeforeVisibleCellLength;
      set.translate[direction] = correctedOffset;
      set.scrollLength = lastSectionBeforeVisibleCellScrollLength;
      context.set(lastSectionBeforeVisibleCell, set);
    }
  }
  ListLayout.Capabilities = capabilities;
  ListLayout.Name = 'ListLayout';
  ListLayout.Description = 'List-layout with margins, spacing and sticky headers';
  module.exports = ListLayout;
});

})();
(function() {
var define = $__System.amdDefine;
define("1a6", ["require", "exports", "module", "149", "1a4", "1a5"], function(require, exports, module) {
  var LayoutUtility = require('149');
  var ScrollController = require('1a4');
  var ListLayout = require('1a5');
  var PullToRefreshState = {
    HIDDEN: 0,
    PULLING: 1,
    ACTIVE: 2,
    COMPLETED: 3,
    HIDDING: 4
  };
  function FlexScrollView(options) {
    ScrollController.call(this, LayoutUtility.combineOptions(FlexScrollView.DEFAULT_OPTIONS, options));
    this._thisScrollViewDelta = 0;
    this._leadingScrollViewDelta = 0;
    this._trailingScrollViewDelta = 0;
  }
  FlexScrollView.prototype = Object.create(ScrollController.prototype);
  FlexScrollView.prototype.constructor = FlexScrollView;
  FlexScrollView.PullToRefreshState = PullToRefreshState;
  FlexScrollView.Bounds = ScrollController.Bounds;
  FlexScrollView.PaginationMode = ScrollController.PaginationMode;
  FlexScrollView.DEFAULT_OPTIONS = {
    layout: ListLayout,
    direction: undefined,
    paginated: false,
    alignment: 0,
    flow: false,
    mouseMove: false,
    useContainer: false,
    visibleItemThresshold: 0.5,
    pullToRefreshHeader: undefined,
    pullToRefreshFooter: undefined,
    leadingScrollView: undefined,
    trailingScrollView: undefined
  };
  FlexScrollView.prototype.setOptions = function(options) {
    ScrollController.prototype.setOptions.call(this, options);
    if (options.pullToRefreshHeader || options.pullToRefreshFooter || this._pullToRefresh) {
      if (options.pullToRefreshHeader) {
        this._pullToRefresh = this._pullToRefresh || [undefined, undefined];
        if (!this._pullToRefresh[0]) {
          this._pullToRefresh[0] = {
            state: PullToRefreshState.HIDDEN,
            prevState: PullToRefreshState.HIDDEN,
            footer: false
          };
        }
        this._pullToRefresh[0].node = options.pullToRefreshHeader;
      } else if (!this.options.pullToRefreshHeader && this._pullToRefresh) {
        this._pullToRefresh[0] = undefined;
      }
      if (options.pullToRefreshFooter) {
        this._pullToRefresh = this._pullToRefresh || [undefined, undefined];
        if (!this._pullToRefresh[1]) {
          this._pullToRefresh[1] = {
            state: PullToRefreshState.HIDDEN,
            prevState: PullToRefreshState.HIDDEN,
            footer: true
          };
        }
        this._pullToRefresh[1].node = options.pullToRefreshFooter;
      } else if (!this.options.pullToRefreshFooter && this._pullToRefresh) {
        this._pullToRefresh[1] = undefined;
      }
      if (this._pullToRefresh && !this._pullToRefresh[0] && !this._pullToRefresh[1]) {
        this._pullToRefresh = undefined;
      }
    }
    return this;
  };
  FlexScrollView.prototype.sequenceFrom = function(node) {
    return this.setDataSource(node);
  };
  FlexScrollView.prototype.getCurrentIndex = function() {
    var item = this.getFirstVisibleItem();
    return item ? item.viewSequence.getIndex() : -1;
  };
  FlexScrollView.prototype.goToPage = function(index, noAnimation) {
    var viewSequence = this._viewSequence;
    if (!viewSequence) {
      return this;
    }
    while (viewSequence.getIndex() < index) {
      viewSequence = viewSequence.getNext();
      if (!viewSequence) {
        return this;
      }
    }
    while (viewSequence.getIndex() > index) {
      viewSequence = viewSequence.getPrevious();
      if (!viewSequence) {
        return this;
      }
    }
    this.goToRenderNode(viewSequence.get(), noAnimation);
    return this;
  };
  FlexScrollView.prototype.getOffset = function() {
    return this._scrollOffsetCache;
  };
  FlexScrollView.prototype.getPosition = FlexScrollView.prototype.getOffset;
  FlexScrollView.prototype.getAbsolutePosition = function() {
    return -(this._scrollOffsetCache + this._scroll.groupStart);
  };
  function _setPullToRefreshState(pullToRefresh, state) {
    if (pullToRefresh.state !== state) {
      pullToRefresh.state = state;
      if (pullToRefresh.node && pullToRefresh.node.setPullToRefreshStatus) {
        pullToRefresh.node.setPullToRefreshStatus(state);
      }
    }
  }
  function _getPullToRefresh(footer) {
    return this._pullToRefresh ? this._pullToRefresh[footer ? 1 : 0] : undefined;
  }
  FlexScrollView.prototype._postLayout = function(size, scrollOffset) {
    if (!this._pullToRefresh) {
      return;
    }
    if (this.options.alignment) {
      scrollOffset += size[this._direction];
    }
    var prevHeight;
    var nextHeight;
    var totalHeight;
    for (var i = 0; i < 2; i++) {
      var pullToRefresh = this._pullToRefresh[i];
      if (pullToRefresh) {
        var length = pullToRefresh.node.getSize()[this._direction];
        var pullLength = pullToRefresh.node.getPullToRefreshSize ? pullToRefresh.node.getPullToRefreshSize()[this._direction] : length;
        var offset;
        if (!pullToRefresh.footer) {
          prevHeight = this._calcScrollHeight(false);
          prevHeight = (prevHeight === undefined) ? -1 : prevHeight;
          offset = (prevHeight >= 0) ? (scrollOffset - prevHeight) : prevHeight;
          if (this.options.alignment) {
            nextHeight = this._calcScrollHeight(true);
            nextHeight = (nextHeight === undefined) ? -1 : nextHeight;
            totalHeight = ((prevHeight >= 0) && (nextHeight >= 0)) ? (prevHeight + nextHeight) : -1;
            if ((totalHeight >= 0) && (totalHeight < size[this._direction])) {
              offset = Math.round((scrollOffset - size[this._direction]) + nextHeight);
            }
          }
        } else {
          nextHeight = (nextHeight === undefined) ? nextHeight = this._calcScrollHeight(true) : nextHeight;
          nextHeight = (nextHeight === undefined) ? -1 : nextHeight;
          offset = (nextHeight >= 0) ? (scrollOffset + nextHeight) : (size[this._direction] + 1);
          if (!this.options.alignment) {
            prevHeight = (prevHeight === undefined) ? this._calcScrollHeight(false) : prevHeight;
            prevHeight = (prevHeight === undefined) ? -1 : prevHeight;
            totalHeight = ((prevHeight >= 0) && (nextHeight >= 0)) ? (prevHeight + nextHeight) : -1;
            if ((totalHeight >= 0) && (totalHeight < size[this._direction])) {
              offset = Math.round((scrollOffset - prevHeight) + size[this._direction]);
            }
          }
          offset = -(offset - size[this._direction]);
        }
        var visiblePerc = Math.max(Math.min(offset / pullLength, 1), 0);
        switch (pullToRefresh.state) {
          case PullToRefreshState.HIDDEN:
            if (this._scroll.scrollForceCount) {
              if (visiblePerc >= 1) {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
              } else if (offset >= 0.2) {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.PULLING);
              }
            }
            break;
          case PullToRefreshState.PULLING:
            if (this._scroll.scrollForceCount && (visiblePerc >= 1)) {
              _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
            } else if (offset < 0.2) {
              _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
            }
            break;
          case PullToRefreshState.ACTIVE:
            break;
          case PullToRefreshState.COMPLETED:
            if (!this._scroll.scrollForceCount) {
              if (offset >= 0.2) {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDING);
              } else {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
              }
            }
            break;
          case PullToRefreshState.HIDDING:
            if (offset < 0.2) {
              _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
            }
            break;
        }
        if (pullToRefresh.state !== PullToRefreshState.HIDDEN) {
          var contextNode = {
            renderNode: pullToRefresh.node,
            prev: !pullToRefresh.footer,
            next: pullToRefresh.footer,
            index: !pullToRefresh.footer ? --this._nodes._contextState.prevGetIndex : ++this._nodes._contextState.nextGetIndex
          };
          var scrollLength;
          if (pullToRefresh.state === PullToRefreshState.ACTIVE) {
            scrollLength = length;
          } else if (this._scroll.scrollForceCount) {
            scrollLength = Math.min(offset, length);
          }
          var set = {
            size: [size[0], size[1]],
            translate: [0, 0, -1e-3],
            scrollLength: scrollLength
          };
          set.size[this._direction] = Math.max(Math.min(offset, pullLength), 0);
          set.translate[this._direction] = pullToRefresh.footer ? (size[this._direction] - length) : 0;
          this._nodes._context.set(contextNode, set);
        }
      }
    }
  };
  FlexScrollView.prototype.showPullToRefresh = function(footer) {
    var pullToRefresh = _getPullToRefresh.call(this, footer);
    if (pullToRefresh) {
      _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
      this._scroll.scrollDirty = true;
    }
  };
  FlexScrollView.prototype.hidePullToRefresh = function(footer) {
    var pullToRefresh = _getPullToRefresh.call(this, footer);
    if (pullToRefresh && (pullToRefresh.state === PullToRefreshState.ACTIVE)) {
      _setPullToRefreshState(pullToRefresh, PullToRefreshState.COMPLETED);
      this._scroll.scrollDirty = true;
    }
    return this;
  };
  FlexScrollView.prototype.isPullToRefreshVisible = function(footer) {
    var pullToRefresh = _getPullToRefresh.call(this, footer);
    return pullToRefresh ? (pullToRefresh.state === PullToRefreshState.ACTIVE) : false;
  };
  FlexScrollView.prototype.applyScrollForce = function(delta) {
    var leadingScrollView = this.options.leadingScrollView;
    var trailingScrollView = this.options.trailingScrollView;
    if (!leadingScrollView && !trailingScrollView) {
      return ScrollController.prototype.applyScrollForce.call(this, delta);
    }
    var partialDelta;
    if (delta < 0) {
      if (leadingScrollView) {
        partialDelta = leadingScrollView.canScroll(delta);
        this._leadingScrollViewDelta += partialDelta;
        leadingScrollView.applyScrollForce(partialDelta);
        delta -= partialDelta;
      }
      if (trailingScrollView) {
        partialDelta = this.canScroll(delta);
        ScrollController.prototype.applyScrollForce.call(this, partialDelta);
        this._thisScrollViewDelta += partialDelta;
        delta -= partialDelta;
        trailingScrollView.applyScrollForce(delta);
        this._trailingScrollViewDelta += delta;
      } else {
        ScrollController.prototype.applyScrollForce.call(this, delta);
        this._thisScrollViewDelta += delta;
      }
    } else {
      if (trailingScrollView) {
        partialDelta = trailingScrollView.canScroll(delta);
        trailingScrollView.applyScrollForce(partialDelta);
        this._trailingScrollViewDelta += partialDelta;
        delta -= partialDelta;
      }
      if (leadingScrollView) {
        partialDelta = this.canScroll(delta);
        ScrollController.prototype.applyScrollForce.call(this, partialDelta);
        this._thisScrollViewDelta += partialDelta;
        delta -= partialDelta;
        leadingScrollView.applyScrollForce(delta);
        this._leadingScrollViewDelta += delta;
      } else {
        ScrollController.prototype.applyScrollForce.call(this, delta);
        this._thisScrollViewDelta += delta;
      }
    }
    return this;
  };
  FlexScrollView.prototype.updateScrollForce = function(prevDelta, newDelta) {
    var leadingScrollView = this.options.leadingScrollView;
    var trailingScrollView = this.options.trailingScrollView;
    if (!leadingScrollView && !trailingScrollView) {
      return ScrollController.prototype.updateScrollForce.call(this, prevDelta, newDelta);
    }
    var partialDelta;
    var delta = newDelta - prevDelta;
    if (delta < 0) {
      if (leadingScrollView) {
        partialDelta = leadingScrollView.canScroll(delta);
        leadingScrollView.updateScrollForce(this._leadingScrollViewDelta, this._leadingScrollViewDelta + partialDelta);
        this._leadingScrollViewDelta += partialDelta;
        delta -= partialDelta;
      }
      if (trailingScrollView && delta) {
        partialDelta = this.canScroll(delta);
        ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + partialDelta);
        this._thisScrollViewDelta += partialDelta;
        delta -= partialDelta;
        this._trailingScrollViewDelta += delta;
        trailingScrollView.updateScrollForce(this._trailingScrollViewDelta, this._trailingScrollViewDelta + delta);
      } else if (delta) {
        ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + delta);
        this._thisScrollViewDelta += delta;
      }
    } else {
      if (trailingScrollView) {
        partialDelta = trailingScrollView.canScroll(delta);
        trailingScrollView.updateScrollForce(this._trailingScrollViewDelta, this._trailingScrollViewDelta + partialDelta);
        this._trailingScrollViewDelta += partialDelta;
        delta -= partialDelta;
      }
      if (leadingScrollView) {
        partialDelta = this.canScroll(delta);
        ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + partialDelta);
        this._thisScrollViewDelta += partialDelta;
        delta -= partialDelta;
        leadingScrollView.updateScrollForce(this._leadingScrollViewDelta, this._leadingScrollViewDelta + delta);
        this._leadingScrollViewDelta += delta;
      } else {
        ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + delta);
        this._thisScrollViewDelta += delta;
      }
    }
    return this;
  };
  FlexScrollView.prototype.releaseScrollForce = function(delta, velocity, detectSwipes) {
    var leadingScrollView = this.options.leadingScrollView;
    var trailingScrollView = this.options.trailingScrollView;
    if (!leadingScrollView && !trailingScrollView) {
      return ScrollController.prototype.releaseScrollForce.call(this, delta, velocity, detectSwipes);
    }
    var partialDelta;
    if (delta < 0) {
      if (leadingScrollView) {
        partialDelta = Math.max(this._leadingScrollViewDelta, delta);
        this._leadingScrollViewDelta -= partialDelta;
        delta -= partialDelta;
        leadingScrollView.releaseScrollForce(this._leadingScrollViewDelta, delta ? 0 : velocity, detectSwipes);
      }
      if (trailingScrollView) {
        partialDelta = Math.max(this._thisScrollViewDelta, delta);
        this._thisScrollViewDelta -= partialDelta;
        delta -= partialDelta;
        ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? 0 : velocity, detectSwipes);
        this._trailingScrollViewDelta -= delta;
        trailingScrollView.releaseScrollForce(this._trailingScrollViewDelta, delta ? velocity : 0, detectSwipes);
      } else {
        this._thisScrollViewDelta -= delta;
        ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? velocity : 0, detectSwipes);
      }
    } else {
      if (trailingScrollView) {
        partialDelta = Math.min(this._trailingScrollViewDelta, delta);
        this._trailingScrollViewDelta -= partialDelta;
        delta -= partialDelta;
        trailingScrollView.releaseScrollForce(this._trailingScrollViewDelta, delta ? 0 : velocity, detectSwipes);
      }
      if (leadingScrollView) {
        partialDelta = Math.min(this._thisScrollViewDelta, delta);
        this._thisScrollViewDelta -= partialDelta;
        delta -= partialDelta;
        ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? 0 : velocity, detectSwipes);
        this._leadingScrollViewDelta -= delta;
        leadingScrollView.releaseScrollForce(this._leadingScrollViewDelta, delta ? velocity : 0, detectSwipes);
      } else {
        this._thisScrollViewDelta -= delta;
        ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, delta ? velocity : 0, detectSwipes);
      }
    }
    return this;
  };
  FlexScrollView.prototype.commit = function(context) {
    var result = ScrollController.prototype.commit.call(this, context);
    if (this._pullToRefresh) {
      for (var i = 0; i < 2; i++) {
        var pullToRefresh = this._pullToRefresh[i];
        if (pullToRefresh) {
          if ((pullToRefresh.state === PullToRefreshState.ACTIVE) && (pullToRefresh.prevState !== PullToRefreshState.ACTIVE)) {
            this._eventOutput.emit('refresh', {
              target: this,
              footer: pullToRefresh.footer
            });
          }
          pullToRefresh.prevState = pullToRefresh.state;
        }
      }
    }
    return result;
  };
  module.exports = FlexScrollView;
});

})();
$__System.register('1', ['12a', '12b', '12e', '12f', '130', '131', '132', '133', '199', '134', '135', '136', '155', '154', '13c', '143', '141', '144', '142', '12c', '12d', '146', '13d', '13e', '14c', '149', '14d', '13a', '14f', '153', '139', '140', '150', '151', '152', '13f', '138', '1a6', '145', '147'], function (_export, _context3) {
    "use strict";

    var firebase, _, camelCase, ElementOutput, Bowser, hash, FastClick, Engine, Context, AnimationController, EventEmitter, Easing, Surface, FamousView, LayoutController, ImageSurface, LayoutUtility, OrderedHashMap, Transitionable, Draggable, ContainerSurface, Transform, Timer, GenericSync, MouseSync, TouchSync, RenderNode, Modifier, FlexScrollView, InputSurface, CollectionLayout, _classCallCheck, _createClass, _possibleConstructorReturn, _inherits, DataSource, ObjectHelper, ownKeys, SuperConstructor, TransientScope, Inject, Provide, ClassProvider, FactoryProvider, _slicedToArray, _dec, _class$1, FirebaseDataSource, browser, EmptyFunction, ClassProvider$1, FactoryProvider$1, Injector, _class$2, _temp$1, Injection, Router, _dec$2, _class$4, ArvaRouter, _dec$1, _class$3, _class2, _temp$2, _dec2, _class3, App$1, FamousContextSingleton, NewAnimationController, _dec$3, _class$5, Controller, _regeneratorRuntime, _asyncToGenerator, Utils, SizeResolver, _extends, BaseLayoutHelper, DockedLayoutHelper, FullSizeLayoutHelper, TraditionalLayoutHelper, Throttler, RenderableHelper, ReflowingScrollView, View, layout$1, flow, _get, DataBoundScrollView, PrioritisedArray, PrioritisedObject, Model, ChatMessage, ChatMessages, _dec$4, _dec2$1, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class$6, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, HomeView, HomeController, _class, _temp, App$$1;

    // A bunch of helper functions.

    function isUpperCase(char) {
        return char.toUpperCase() === char;
    }

    function isFunction(value) {
        return typeof value === 'function';
    }

    function isObject(value) {
        return typeof value === 'object';
    }

    function toString$1(token) {
        if (typeof token === 'string') {
            return token;
        }

        if (token === undefined || token === null) {
            return '' + token;
        }

        if (token.name) {
            return token.name;
        }

        return token.toString();
    }

    // HELPERS

    // Append annotation on a function or class.
    // This can be helpful when not using ES6+.


    function annotate(fn, annotation) {
        fn.annotations = fn.annotations || [];
        fn.annotations.push(annotation);
    }

    // Read annotations on a function or class and return whether given annotation is present.
    function hasAnnotation(fn, annotationClass) {
        if (!fn.annotations || fn.annotations.length === 0) {
            return false;
        }

        for (var _iterator = fn.annotations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var annotation = _ref;

            if (annotation instanceof annotationClass) {
                return true;
            }
        }

        return false;
    }

    // Read annotations on a function or class and collect "interesting" metadata:
    function readAnnotations(fn) {
        var collectedAnnotations = {
            // Description of the provided value.
            provide: {
                token: null
            },

            // List of parameter descriptions.
            // A parameter description is an object with properties:
            // - token (anything)
            params: []
        };

        if (fn.annotations && fn.annotations.length) {
            for (var _iterator2 = fn.annotations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var annotation = _ref2;

                if (annotation instanceof Inject) {
                    annotation.tokens.forEach(function (token) {
                        collectedAnnotations.params.push({
                            token: token
                        });
                    });
                }

                if (annotation instanceof Provide) {
                    collectedAnnotations.provide.token = annotation.token;
                }
            }
        }

        // Read annotations for individual parameters.
        if (fn.parameters) {
            fn.parameters.forEach(function (param, idx) {
                for (var _iterator3 = param, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var paramAnnotation = _ref3;

                    // Type annotation.
                    if (isFunction(paramAnnotation) && !collectedAnnotations.params[idx]) {
                        collectedAnnotations.params[idx] = {
                            token: paramAnnotation
                        };
                    } else if (paramAnnotation instanceof Inject) {
                        collectedAnnotations.params[idx] = {
                            token: paramAnnotation.tokens[0]
                        };
                    }
                }
            });
        }

        return collectedAnnotations;
    }

    function inject() {
        for (var _len3 = arguments.length, tokens = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            tokens[_key3] = arguments[_key3];
        }

        return function (fn) {
            annotate(fn, new (Function.prototype.bind.apply(Inject, [null].concat(tokens)))());
        };
    }

    function provide() {
        for (var _len4 = arguments.length, tokens = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            tokens[_key4] = arguments[_key4];
        }

        return function (fn) {
            annotate(fn, new (Function.prototype.bind.apply(Provide, [null].concat(tokens)))());
        };
    }

    /**
     @author: Karl Lundfall (lundfall)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
     */

    function famousMerge(defaultParam, specifiedParam) {
        if (Array.isArray(defaultParam) && Array.isArray(specifiedParam)) {
            var i = void 0,
                results = [];
            for (i = 0; i < specifiedParam.length; i++) {
                var defaultElement = defaultParam[i];
                var specifiedElement = specifiedParam[i];

                /* This is one special case that we want to take into account,
                 (more spcecifically, we want to be able to set the size to undefined) */
                if (specifiedElement === undefined) {
                    results.push(specifiedElement);
                } else {
                    var resultingElement = void 0;
                    if (typeof specifiedElement !== 'object' || typeof resultingElement !== 'object') {
                        resultingElement = specifiedElement;
                    } else {
                        resultingElement = _.mergeWith(defaultElement, specifiedElement, famousMerge);
                    }
                    results.push(resultingElement);
                }
            }
            for (; i < defaultParam.length; i++) {
                results.push(defaultParam[i]);
            }
            return results;
        }

        var _arr = [specifiedParam, defaultParam];
        for (var _i = 0; _i < _arr.length; _i++) {
            var param = _arr[_i];
            if (!Array.isArray(param)) {

                if (typeof param === 'object' && !!param) {

                    /*
                     * Make sure that we don't merge instances of classes. You _could_ trick this system by specifying an object
                     * with the parameter constructor {name: 'Object'} or specifying a class named Object (don't)
                     */
                    if (param.constructor.name !== 'Object') {
                        return specifiedParam;
                    }

                    if (_.isEmpty(param)) {
                        return param === specifiedParam ? defaultParam : specifiedParam;
                    }
                }
            }
        }
        var hasDashProperty = false;
        /*
         * Style parameters can be specified with dash-case or camelCase, which we correct here
         */
        var shallowParamCopies = [{}, {}];
        var _arr2 = [[specifiedParam, shallowParamCopies[0]], [defaultParam, shallowParamCopies[1]]];
        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var _arr2$_i = _slicedToArray(_arr2[_i2], 2);

            var _param = _arr2$_i[0];
            var shallowCopy = _arr2$_i[1];

            for (var key in _param) {
                var value = _param[key];
                if (~key.indexOf('-')) {
                    hasDashProperty = true;
                    key = camelCase(key);
                }
                shallowCopy[key] = value;
            }
        }
        if (hasDashProperty) {
            return _.mergeWith(shallowParamCopies[1], shallowParamCopies[0], famousMerge);
        } else {
            return undefined;
        }
    }

    /**
     * Helper function used to clone without cloning class instances
     * @param value
     * @returns {*}
     */
    function dontCloneClassInstances(value) {
        if (typeof value === 'object' && !!value && !Array.isArray(value) && value.constructor.name !== 'Object') {
            return value;
        }
    }

    /**
     *
     * @param defaultOptions
     * @param options
     * @returns {*}
     */
    function combineOptions(defaultOptions, options) {
        var clonedDefaultOptions = _.cloneDeepWith(defaultOptions, dontCloneClassInstances);
        return _.mergeWith({ root: clonedDefaultOptions }, { root: options }, famousMerge).root;
    }

    function duplicateZIndex() {
        var oldCommit = ElementOutput.prototype.commit;
        ElementOutput.prototype.commit = function (context) {
            oldCommit.call(this, context);
            if (this._element) {
                var zIndex = this._matrix[14];
                if (this._element.style.zIndex !== zIndex) {
                    this._element.style.zIndex = zIndex;
                }
            }
        };
    }

    function removeSurfacePreserve3D() {
        debugger;
        var styleSheets = window.document.styleSheets;
        for (var sheetIndex in styleSheets) {
            var sheet = styleSheets[sheetIndex];
            if (sheet && sheet.href && sheet.href.indexOf('famous.css') !== -1) {
                for (var ruleIndex in sheet.cssRules) {
                    var rule = sheet.cssRules[ruleIndex];
                    if (rule && rule.selectorText === '.famous-surface') {
                        rule.style.removeProperty('transform-style');
                        rule.style.removeProperty('-moz-transform-style');
                        rule.style.removeProperty('-webkit-transform-style');
                    }
                }
            }
        }
    }

    /**
     * Created by tom on 21/01/16.
     */

    /* */
    function isClass(clsOrFunction) {

        if (hasAnnotation(clsOrFunction, ClassProvider)) {
            return true;
        } else if (hasAnnotation(clsOrFunction, FactoryProvider)) {
            return false;
        }
        /* When code is minified, class names are no longer upper case, so we skip this check
         * if the name is oddly short (which happens during minification). */
        else if (clsOrFunction.name && clsOrFunction.name.length && clsOrFunction.name.length > 3) {
                return isUpperCase(clsOrFunction.name.charAt(0));
            } else {
                return ownKeys(clsOrFunction.prototype).length > 0;
            }
    }

    // Provider is responsible for creating instances.
    //
    // responsibilities:
    // - create instances
    //
    // communication:
    // - exposes `create()` which creates an instance of something
    // - exposes `params` (information about which arguments it requires to be passed into `create()`)
    //
    // Injector reads `provider.params` first, create these dependencies (however it wants),
    // then calls `provider.create(args)`, passing in these arguments.

    function createProviderFromFnOrClass(fnOrClass, annotations) {
        if (isClass(fnOrClass)) {
            return new ClassProvider$1(fnOrClass, annotations.params);
        }

        return new FactoryProvider$1(fnOrClass, annotations.params);
    }

    /* */

    function constructResolvingMessage(resolving, token) {
        // If a token is passed in, add it into the resolving array.
        // We need to check arguments.length because it can be null/undefined.
        if (arguments.length > 1) {
            resolving.push(token);
        }

        if (resolving.length > 1) {
            return ' (' + resolving.map(toString$1).join(' -> ') + ')';
        }

        return '';
    }

    // Injector encapsulate a life scope.
    // There is exactly one instance for given token in given injector.
    //
    // All the state is immutable, the only state changes is the cache. There is however no way to produce different instance under given token. In that sense it is immutable.
    //
    // Injector is responsible for:
    // - resolving tokens into
    //   - provider
    //   - value (cache/calling provider)
    // - loading different "providers" and modules

    /**
     @author: Tom Clement (tjclement)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
    
     */

    function limit(min, value, max) {
        return Math.min(Math.max(min, value), max);
    }

    /**
     * Created by lundfall on 01/09/16.
     */

    /**
     @author: Karl Lundfall (lundfall)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
    
     Adapted version of the LayoutDockHelper made by Hein Rutjes in famous-flex
     */

    /**
     * @class
     * @param {LayoutContext} context layout-context
     * @param {Object} [options] additional options
     * @param {Object} [options.margins] margins to start out with (default: 0px)
     * @param {Number} [options.translateZ] z-index to use when translating objects (default: 0)
     * @alias module:LayoutDockHelper
     */
    function TrueSizedLayoutDockHelper(context, options) {
        var size = context.size;
        this._size = size;
        this._context = context;
        this._options = options;
        this._data = {
            z: options && options.translateZ ? options.translateZ : 0
        };
        var margins = [0, 0, 0, 0];
        if (options && options.margins) {
            margins = LayoutUtility.normalizeMargins(options.margins);
        }
        this._initialData = {
            left: margins[3],
            top: margins[0],
            right: size[0] - margins[1],
            bottom: size[1] - margins[2]
        };
        this._data.left = this._initialData.left;
        this._data.top = this._initialData.top;
        this._data.right = this._initialData.right;
        this._data.bottom = this._initialData.bottom;
    }

    /**
     * Parses the layout-rules based on a JSON data object.
     *
     * **Example:**
     *
     * ```JSON
     * [
     *   ['top', 'header', 50],
     *   ['bottom', 'footer', 50, 10], // z-index: 10
     *   ['margins', [10, 5]], // marginate remaining space: 10px top/bottom, 5px left/right
     *   ['fill', 'content']
     * ]
     * ```
     *
     * @param {Object} data JSON object
     */


    /**
     * Created by tom on 22/08/16.
     */

    function waitMilliseconds(milliseconds) {
        return new Promise(function (resolve) {
            return Timer.setTimeout(resolve, milliseconds);
        });
    }

    /**
     * Created by lundfall on 02/09/16.
     */

    /**
    
    
     @author: Hans van den Akker (mysim1)
     @license NPOSL-3.0
     @copyright Bizboard, 2016
    
     */
    function prepDecoratedRenderable(viewOrRenderable, renderableName, descriptor) {
        /* This function can also be called as prepDecoratedRenderable(renderable) */
        if (!renderableName && !descriptor) {
            var renderable = viewOrRenderable;
            renderable.decorations = renderable.decorations || {};
            return renderable;
        }
        var view = viewOrRenderable;

        if (!view.renderableConstructors) {
            view.renderableConstructors = new Map();
        }

        var constructors = view.renderableConstructors;

        /* Because the inherited views share the same prototype, we'll have to split it up depending on which subclass we're referring out */
        var specificRenderableConstructors = constructors.get(view.constructor);
        if (!specificRenderableConstructors) {
            specificRenderableConstructors = constructors.set(view.constructor, {}).get(view.constructor);
        }

        if (!specificRenderableConstructors[renderableName]) {
            /* Getters have a get() method on the descriptor, class properties have an initializer method.
             * get myRenderable(){ return new Surface() } => descriptor.get();
             * myRenderable = new Surface(); => descriptor.initializer();
             */
            if (descriptor.get) {
                specificRenderableConstructors[renderableName] = descriptor.get;
            } else if (descriptor.initializer) {
                specificRenderableConstructors[renderableName] = descriptor.initializer;
            }
        }
        var constructor = specificRenderableConstructors[renderableName];
        if (!constructor.decorations) {
            constructor.decorations = { descriptor: descriptor };
        }

        return constructor;
    }

    /**
     * Extracts a decorations object
     *
     * @param {View} prototype
     * @returns {Object} The decorations for the prototype
     */
    function prepPrototypeDecorations(prototype) {

        /* To prevent inherited classes from taking each others class-level decorators, we need to store these decorations in
         * a map, similarly to function preparing a decorated renderable
         */
        if (!prototype.decorationsMap) {
            prototype.decorationsMap = new Map();
        }

        var decorationsMap = prototype.decorationsMap;

        var decorations = decorationsMap.get(prototype.constructor);
        if (!decorations) {
            decorations = decorationsMap.set(prototype.constructor, {}).get(prototype.constructor);
        }

        /* Return the class' prototype, so it can be extended by the decorator */
        return decorations;
    }

    function _extendableBuiltin(cls) {
        function ExtendableBuiltin() {
            cls.apply(this, arguments);
        }

        ExtendableBuiltin.prototype = Object.create(cls.prototype, {
            constructor: {
                value: cls,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });

        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(ExtendableBuiltin, cls);
        } else {
            ExtendableBuiltin.__proto__ = cls;
        }

        return ExtendableBuiltin;
    }

    /**
    
    
    
     @author: Tom Clement (tjclement)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
    
     */

    function _initDefineProp(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    return {
        setters: [function (_a) {}, function (_b) {
            firebase = _b.default;
        }, function (_e2) {
            _ = _e2.default;
        }, function (_f) {
            camelCase = _f.default;
        }, function (_2) {}, function (_3) {}, function (_4) {}, function (_5) {}, function (_6) {
            ElementOutput = _6.default;
        }, function (_7) {
            Bowser = _7.default;
        }, function (_8) {
            hash = _8.default;
        }, function (_9) {
            FastClick = _9.default;
        }, function (_10) {
            Engine = _10.default;
        }, function (_11) {
            Context = _11.default;
        }, function (_c) {
            AnimationController = _c.default;
        }, function (_12) {
            EventEmitter = _12.default;
        }, function (_13) {
            Easing = _13.default;
        }, function (_14) {}, function (_15) {}, function (_c2) {}, function (_d2) {}, function (_16) {
            Surface = _16.default;
        }, function (_d3) {
            FamousView = _d3.default;
        }, function (_e3) {
            LayoutController = _e3.default;
        }, function (_c3) {
            ImageSurface = _c3.default;
        }, function (_17) {
            LayoutUtility = _17.default;
        }, function (_d4) {
            OrderedHashMap = _d4.default;
        }, function (_a2) {
            Transitionable = _a2.default;
        }, function (_f2) {
            Draggable = _f2.default;
        }, function (_18) {
            ContainerSurface = _18.default;
        }, function (_19) {
            Transform = _19.default;
        }, function (_20) {
            Timer = _20.default;
        }, function (_21) {
            GenericSync = _21.default;
        }, function (_22) {
            MouseSync = _22.default;
        }, function (_23) {
            TouchSync = _23.default;
        }, function (_f3) {
            RenderNode = _f3.default;
        }, function (_24) {
            Modifier = _24.default;
        }, function (_a3) {
            FlexScrollView = _a3.default;
        }, function (_25) {
            InputSurface = _25.default;
        }, function (_26) {
            CollectionLayout = _26.CollectionLayout;
        }],
        execute: function () {
            _classCallCheck = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };

            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _possibleConstructorReturn = function (self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return call && (typeof call === "object" || typeof call === "function") ? call : self;
            };

            _inherits = function (subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            };

            DataSource = function () {

                /**
                 * @param {String} path Full path to resource in remote data storage.
                 * @return {DataSource} DataSource instance.
                 **/

                function DataSource(path) {
                    _classCallCheck(this, DataSource);

                    this._dataReference = null;
                }

                /**
                 * Indicate that the DataSource can be inherited when instantiating a list of models. By
                 * default we indicate false, which should trigger data model instantiation to create unique
                 * DataSource references to each model either in array or directly.
                 *
                 * If set to false, model updates trigger creation of a new DataSource instance. (default)
                 *
                 * @returns {Boolean} Whether the DataSource is inheritable.
                 */

                _createClass(DataSource, [{
                    key: "toString",

                    /**
                     * Returns the full path to this dataSource's source on the remote storage provider.
                     * @returns {String} Full resource path.
                     */
                    value: function toString() {}

                    /**
                     * Returns a dataSource reference to the given child branch of the current dataSource.
                     * @param {String} childName Child branch name.
                     * @param {Object} options Optional: additional options to pass to new DataSource instance.
                     * @returns {DataSource} New dataSource instance pointing to the given child branch.
                     */

                }, {
                    key: "child",
                    value: function child(childName) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    }

                    /**
                     * Returns the full URL to the path on the dataSource. Functionally identical to toString().
                     * @returns {String} Full resource path.
                     */

                }, {
                    key: "path",
                    value: function path() {}

                    /**
                     * Returns the name of the current branch in the path on the dataSource.
                     * @returns {String} Current branch name.
                     */

                }, {
                    key: "key",
                    value: function key() {}

                    /**
                     * Writes newData to the path this dataSource was constructed with.
                     * @param {Object} newData Data to write to dataSource.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: "set",
                    value: function set(newData) {
                        return Promise.resolve();
                    }

                    /**
                     * Removes the object and all underlying children that this dataSource points to.
                     * @returns {void}
                     */

                }, {
                    key: "remove",
                    value: function remove() {}

                    /**
                     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
                     * the dataSource.
                     * @param {Object} newData New data to append to dataSource.
                     * @returns {void}
                     */

                }, {
                    key: "push",
                    value: function push(newData) {}

                    /**
                     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
                     * @param {Object} newData New data to set.
                     * @param {String|Number} priority Priority value by which the data should be ordered.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: "setWithPriority",
                    value: function setWithPriority(newData, priority) {
                        return Promise.resolve();
                    }

                    /**
                     * Sets the priority (ordering) of an object on a given dataSource.
                     * @param {String|Number} newPriority New priority value to order data by.
                     * @returns {void}
                     */

                }, {
                    key: "setPriority",
                    value: function setPriority(newPriority) {}

                    /**
                     * Orders the DataSource's childs by the value in child[key].
                     * @param {String} childKey Key of the field to order by.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByChild",
                    value: function orderByChild(childKey) {}

                    /**
                     * Orders the DataSource's childs by their key names, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByKey",
                    value: function orderByKey() {}

                    /**
                     * Orders the DataSource's childs by their values, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByValue",
                    value: function orderByValue() {}

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "limitToFirst",
                    value: function limitToFirst(amount) {}

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "limitToLast",
                    value: function limitToLast(amount) {}

                    /**
                     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.
                     * @param {String} provider google, facebook, github, or twitter
                     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithOAuthToken",
                    value: function authWithOAuthToken(provider, credentials, onComplete, options) {}

                    /**
                     * Authenticates all instances of this DataSource with a custom auth token or secret.
                     * @param {String} authToken Authentication token or secret.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithCustomToken",
                    value: function authWithCustomToken(authToken, onComplete, options) {}

                    /**
                     * Authenticates all instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithPassword",
                    value: function authWithPassword(credentials, onComplete, options) {}

                    /**
                     * Authenticates all instances of this DataSource as an anonymous user.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authAnonymously",
                    value: function authAnonymously(onComplete, options) {}

                    /**
                     * Fetches the current user's authentication state.
                     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.
                     * If the user is not authenticated, returns null.
                     * @returns {Object|null} User auth object.
                     */

                }, {
                    key: "getAuth",
                    value: function getAuth() {}

                    /**
                     * Logs out from the datasource, allowing to re-authenticate at a later time.
                     * @returns {void}
                     */

                }, {
                    key: "unauth",
                    value: function unauth() {}

                    /**
                     * Subscribe to an event emitted by the DataSource.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     */

                }, {
                    key: "on",
                    value: function on(event, handler, context) {}

                    /**
                     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     */

                }, {
                    key: "once",
                    value: function once(event, handler, context) {}

                    /**
                     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Optional: Function that was used in previous subscription.
                     */

                }, {
                    key: "off",
                    value: function off(event, handler) {}

                    /**
                     * Sets the callback triggered when dataSource updates the data.
                     * @param {Function} callback Callback function to call when the subscribed data value changes.
                     * @returns {void}
                     **/

                }, {
                    key: "setValueChangedCallback",
                    value: function setValueChangedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource updates the data.
                     * @returns {void}
                     **/

                }, {
                    key: "removeValueChangedCallback",
                    value: function removeValueChangedCallback() {}

                    /**
                     * Set the callback triggered when dataSource adds a data element.
                     * @param {Function} callback Callback function to call when a new data child is added.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildAddedCallback",
                    value: function setChildAddedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource adds a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildAddedCallback",
                    value: function removeChildAddedCallback() {}

                    /**
                     * Set the callback triggered when dataSource changes a data element.
                     * @param {Function} callback Callback function to call when a child is changed.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildChangedCallback",
                    value: function setChildChangedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource changes a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildChangedCallback",
                    value: function removeChildChangedCallback() {}

                    /**
                     * Set the callback triggered when dataSource moves a data element.
                     * @param {Function} callback Callback function to call when a child is moved.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildMovedCallback",
                    value: function setChildMovedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource moves a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildMovedCallback",
                    value: function removeChildMovedCallback() {}

                    /**
                     * Set the callback triggered when dataSource removes a data element.
                     * @param {Function} callback Callback function to call when a child is removed.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildRemovedCallback",
                    value: function setChildRemovedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource removes a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildRemovedCallback",
                    value: function removeChildRemovedCallback() {}

                    /**
                     * Resolves when the DataSource is synchronized to the server
                     * @returns {Promise} Resolves when the DataSource is synchronized
                     */

                }, {
                    key: "synced",
                    value: function synced() {}
                }, {
                    key: "inheritable",
                    get: function get() {
                        return false;
                    }
                }]);

                return DataSource;
            }();

            ObjectHelper = function () {
                function ObjectHelper() {
                    _classCallCheck(this, ObjectHelper);
                }

                _createClass(ObjectHelper, null, [{
                    key: 'hideMethodsAndPrivatePropertiesFromObject',

                    /* Sets enumerability of methods and all properties starting with '_' on an object to false,
                     * effectively hiding them from for(x in object) loops.   */
                    value: function hideMethodsAndPrivatePropertiesFromObject(object) {
                        for (var propName in object) {

                            var prototype = Object.getPrototypeOf(object);
                            var descriptor = prototype ? Object.getOwnPropertyDescriptor(prototype, propName) : undefined;
                            if (descriptor && (descriptor.get || descriptor.set) && !propName.startsWith('_')) {
                                /* This is a public getter/setter, so we can skip it */
                                continue;
                            }

                            var property = object[propName];
                            if (typeof property === 'function' || propName.startsWith('_')) {
                                ObjectHelper.hidePropertyFromObject(object, propName);
                            }
                        }
                    }

                    /* Sets enumerability of methods on an object to false,
                     * effectively hiding them from for(x in object) loops.   */

                }, {
                    key: 'hideMethodsFromObject',
                    value: function hideMethodsFromObject(object) {
                        for (var propName in object) {
                            var property = object[propName];
                            if (typeof property === 'function') {
                                ObjectHelper.hidePropertyFromObject(object, propName);
                            }
                        }
                    }

                    /* Sets enumerability of an object's property to false,
                     * effectively hiding it from for(x in object) loops.   */

                }, {
                    key: 'hidePropertyFromObject',
                    value: function hidePropertyFromObject(object, propName) {
                        var prototype = object;
                        var descriptor = Object.getOwnPropertyDescriptor(object, propName);
                        while (!descriptor) {
                            prototype = Object.getPrototypeOf(prototype);

                            if (prototype.constructor.name === 'Object' || prototype.constructor.name === 'Array') {
                                return;
                            }

                            descriptor = Object.getOwnPropertyDescriptor(prototype, propName);
                        }
                        descriptor.enumerable = false;
                        Object.defineProperty(prototype, propName, descriptor);
                        Object.defineProperty(object, propName, descriptor);
                    }

                    /* Sets enumerability of all of an object's properties (including methods) to false,
                     * effectively hiding them from for(x in object) loops.   */

                }, {
                    key: 'hideAllPropertiesFromObject',
                    value: function hideAllPropertiesFromObject(object) {
                        for (var propName in object) {
                            ObjectHelper.hidePropertyFromObject(object, propName);
                        }
                    }

                    /* Adds a property with enumerable: false to object */

                }, {
                    key: 'addHiddenPropertyToObject',
                    value: function addHiddenPropertyToObject(object, propName, prop) {
                        var writable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var useAccessors = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];

                        return ObjectHelper.addPropertyToObject(object, propName, prop, false, writable, undefined, useAccessors);
                    }

                    /* Adds a property with given enumerability and writability to object. If writable, uses a hidden object.shadow
                     * property to save the actual data state, and object[propName] with gettter/setter to the shadow. Allows for a
                     * callback to be triggered upon every set.   */

                }, {
                    key: 'addPropertyToObject',
                    value: function addPropertyToObject(object, propName, prop) {
                        var enumerable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var writable = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
                        var setCallback = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];
                        var useAccessors = arguments.length <= 6 || arguments[6] === undefined ? true : arguments[6];

                        /* If property is non-writable, we won't need a shadowed prop for the getters/setters */
                        if (!writable || !useAccessors) {
                            var descriptor = {
                                enumerable: enumerable,
                                writable: writable,
                                value: prop
                            };
                            Object.defineProperty(object, propName, descriptor);
                        } else {
                            ObjectHelper.addGetSetPropertyWithShadow(object, propName, prop, enumerable, writable, setCallback);
                        }
                    }

                    /* Adds given property to the object with get() and set() accessors, and saves actual data in object.shadow */

                }, {
                    key: 'addGetSetPropertyWithShadow',
                    value: function addGetSetPropertyWithShadow(object, propName, prop) {
                        var enumerable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var writable = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
                        var setCallback = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];

                        ObjectHelper.buildPropertyShadow(object, propName, prop);
                        ObjectHelper.buildGetSetProperty(object, propName, enumerable, writable, setCallback);
                    }

                    /* Creates or extends object.shadow to contain a property with name propName */

                }, {
                    key: 'buildPropertyShadow',
                    value: function buildPropertyShadow(object, propName, prop) {
                        var shadow = {};

                        try {
                            /* If a shadow property already exists, we should extend instead of overwriting it. */
                            if ('shadow' in object) {
                                shadow = object.shadow;
                            }
                        } catch (error) {
                            return;
                        }

                        shadow[propName] = prop;
                        Object.defineProperty(object, 'shadow', {
                            writable: true,
                            configurable: true,
                            enumerable: false,
                            value: shadow
                        });
                    }

                    /* Creates a property on object that has a getter that fetches from object.shadow,
                     * and a setter that sets object.shadow as well as triggers setCallback() if set.   */

                }, {
                    key: 'buildGetSetProperty',
                    value: function buildGetSetProperty(object, propName) {
                        var enumerable = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                        var writable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var setCallback = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

                        var descriptor = {
                            enumerable: enumerable,
                            configurable: true,
                            get: function get() {
                                return object.shadow[propName];
                            },
                            set: function set(value) {
                                if (writable) {
                                    object.shadow[propName] = value;
                                    if (setCallback && typeof setCallback === 'function') {
                                        setCallback({
                                            propertyName: propName,
                                            newValue: value
                                        });
                                    }
                                } else {
                                    throw new ReferenceError('Attempted to write to non-writable property ' + propName + '.');
                                }
                            }
                        };

                        Object.defineProperty(object, propName, descriptor);
                    }

                    /* Calls object['functionName'].bind(bindTarget) on all of object's functions. */

                }, {
                    key: 'bindAllMethods',
                    value: function bindAllMethods(object, bindTarget) {

                        /* Bind all current object's methods to bindTarget. */
                        var methodDescriptors = ObjectHelper.getMethodDescriptors(object);
                        for (var methodName in methodDescriptors) {
                            /* Skip the constructor as it serves as no purpose and it breaks the minification */
                            if (methodName === 'constructor') {
                                continue;
                            }
                            var propertyDescriptor = methodDescriptors[methodName];
                            if (propertyDescriptor && propertyDescriptor.get) {
                                propertyDescriptor.get = propertyDescriptor.get.bind(bindTarget);
                            } else if (propertyDescriptor.set) {
                                propertyDescriptor.set = propertyDescriptor.set.bind(bindTarget);
                            } else if (propertyDescriptor.writable) {
                                propertyDescriptor.value = propertyDescriptor.value.bind(bindTarget);
                            }
                            Object.defineProperty(object, methodName, propertyDescriptor);
                        }
                    }
                }, {
                    key: 'getMethodDescriptors',
                    value: function getMethodDescriptors(object) {

                        var methodDescriptors = {};

                        for (var _iterator = Object.getOwnPropertyNames(object), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var propertyName = _ref;

                            var propertyDescriptor = Object.getOwnPropertyDescriptor(object, propertyName) || {};
                            /* Initializers can be ignored since they are bound anyways */
                            if (!propertyDescriptor.initializer && (propertyDescriptor.get || typeof object[propertyName] === 'function')) {
                                methodDescriptors[propertyName] = propertyDescriptor;
                            }
                        }

                        /* Recursively find prototype's methods until we hit the Object prototype. */
                        var prototype = Object.getPrototypeOf(object);
                        if (prototype.constructor.name !== 'Object' && prototype.constructor.name !== 'Array') {
                            methodDescriptors = _.extend(ObjectHelper.getMethodDescriptors(prototype), methodDescriptors);
                        }

                        return methodDescriptors;
                    }

                    /* Returns a new object with all enumerable properties of the given object */

                }, {
                    key: 'getEnumerableProperties',
                    value: function getEnumerableProperties(object) {

                        return ObjectHelper.getPrototypeEnumerableProperties(object, object);
                    }
                }, {
                    key: 'getPrototypeEnumerableProperties',
                    value: function getPrototypeEnumerableProperties(rootObject, prototype) {
                        var result = {};

                        /* Collect all propertise in the prototype's keys() enumerable */
                        var propNames = Object.keys(prototype);
                        for (var _iterator2 = propNames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var name = _ref2;

                            var value = rootObject[name];

                            /* Value must be a non-null primitive or object to be pushable to a dataSource */
                            if (value !== null && value !== undefined && typeof value !== 'function') {
                                if (typeof value === 'object' && !(value instanceof Array)) {
                                    result[name] = ObjectHelper.getEnumerableProperties(value);
                                } else {
                                    result[name] = value;
                                }
                            }
                        }

                        /* Collect all properties with accessors (getters/setters) that are enumerable, too */
                        var descriptorNames = Object.getOwnPropertyNames(prototype);
                        descriptorNames = descriptorNames.filter(function (name) {
                            return propNames.indexOf(name) < 0;
                        });
                        for (var _iterator3 = descriptorNames, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var _name = _ref3;

                            var descriptor = Object.getOwnPropertyDescriptor(prototype, _name);
                            if (descriptor && descriptor.enumerable) {
                                var _value = rootObject[_name];

                                /* Value must be a non-null primitive or object to be pushable to a dataSource */
                                if (_value !== null && _value !== undefined && typeof _value !== 'function') {
                                    if (typeof _value === 'object' && !(_value instanceof Array)) {
                                        result[_name] = ObjectHelper.getEnumerableProperties(_value);
                                    } else {
                                        result[_name] = _value;
                                    }
                                }
                            }
                        }

                        /* Collect all enumerable properties in the prototype's prototype as well */
                        var superPrototype = Object.getPrototypeOf(prototype);
                        var ignorableTypes = ['Object', 'Array', 'EventEmitter'];
                        if (ignorableTypes.indexOf(superPrototype.constructor.name) === -1) {
                            var prototypeEnumerables = ObjectHelper.getPrototypeEnumerableProperties(rootObject, superPrototype);
                            _.merge(result, prototypeEnumerables);
                        }

                        return result;
                    }
                }]);

                return ObjectHelper;
            }();

            ownKeys = undefined && undefined.Reflect && Reflect.ownKeys ? Reflect.ownKeys : function ownKeys(O) {
                var keys = Object.getOwnPropertyNames(O);
                if (Object.getOwnPropertySymbols) return keys.concat(Object.getOwnPropertySymbols(O));
                return keys;
            };

            SuperConstructor = function SuperConstructor() {
                _classCallCheck(this, SuperConstructor);
            };

            TransientScope = function TransientScope() {
                _classCallCheck(this, TransientScope);
            };

            Inject = function Inject() {
                _classCallCheck(this, Inject);

                for (var _len = arguments.length, tokens = Array(_len), _key = 0; _key < _len; _key++) {
                    tokens[_key] = arguments[_key];
                }

                this.tokens = tokens;
            };

            Provide = function Provide(token) {
                _classCallCheck(this, Provide);

                this.token = token;
            };

            ClassProvider = function ClassProvider() {
                _classCallCheck(this, ClassProvider);
            };

            FactoryProvider = function FactoryProvider() {
                _classCallCheck(this, FactoryProvider);
            };

            _slicedToArray = function () {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;

                    try {
                        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);

                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }

                    return _arr;
                }

                return function (arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();

            FirebaseDataSource = (_dec = provide(DataSource), _dec(_class$1 = function (_DataSource) {
                _inherits(FirebaseDataSource, _DataSource);

                _createClass(FirebaseDataSource, [{
                    key: 'dataReference',
                    get: function get() {
                        return this._orderedDataReference;
                    },
                    set: function set(value) {
                        this._orderedDataReference = value;
                    }

                    /**
                     * @param {String} path Full path to resource in remote data storage.
                     * @return {FirebaseDataSource} FirebaseDataSource instance.
                     * @param {Object} options Optional: options to construct the DataSource with.
                     * @param {String} [options.orderBy] Optional, order all items received through the dataSource.
                     *                                   Options are: '.priority', '.value', or a string containing the child key to order by (e.g. 'MyModelProperty')
                     * @param {Number} [options.limitToFirst] Optional, only subscribe to the first amount of entries.
                     * @param {Number} [options.limitToLast] Optional, only subscribe to the last amount of entries.
                     * @param {Promise} [options.synced] Optional, a promise to tell the data source that it is only synchronized after this promise is resolved
                     **/

                }]);

                function FirebaseDataSource(path) {
                    var options = arguments.length <= 1 || arguments[1] === undefined ? { orderBy: '.priority' } : arguments[1];

                    _classCallCheck(this, FirebaseDataSource);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FirebaseDataSource).call(this, path));

                    _this._onValueCallback = null;
                    _this._onAddCallback = null;
                    _this._onChangeCallback = null;
                    _this._onMoveCallback = null;
                    _this._onRemoveCallback = null;
                    _this._dataReference = firebase.database().ref(path);
                    _this.handlers = {};
                    _this.options = combineOptions({ synced: Promise.resolve() }, options);
                    _this._synced = _this.options.synced;

                    /* Populate the orderedReference, which is the standard Firebase reference with an optional ordering
                     * defined. This needs to be saved seperately, because methods like child() and key() can't be called
                     * from the ordered reference, and must instead be performed on the standard reference. */

                    if (_this.options.orderBy && _this.options.orderBy === '.priority') {
                        _this._orderedDataReference = _this._dataReference.orderByPriority();
                    } else if (_this.options.orderBy && _this.options.orderBy === '.value') {
                        _this._orderedDataReference = _this._dataReference.orderByValue();
                    } else if (_this.options.orderBy && _this.options.orderBy !== '') {
                        _this._orderedDataReference = _this._dataReference.orderByChild(_this.options.orderBy);
                    } else {
                        _this._orderedDataReference = _this._dataReference;
                    }

                    if (_this.options.limitToFirst !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.limitToFirst(_this.options.limitToFirst);
                    } else if (_this.options.limitToLast !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.limitToLast(_this.options.limitToLast);
                    }

                    /* Bind all local methods to the current object instance, so we can refer to "this"
                     * in the methods as expected, even when they're called from event handlers. */
                    ObjectHelper.bindAllMethods(_this, _this);
                    return _this;
                }

                /**
                 * Returns the full path to this dataSource's source on the remote storage provider.
                 * @returns {String} Full resource path.
                 */

                _createClass(FirebaseDataSource, [{
                    key: 'toString',
                    value: function toString() {
                        return this._dataReference.toString();
                    }

                    /**
                     * Resolves when the DataSource is synchronized to the server
                     * @returns {Promise} Resolves when the DataSource is synchronized
                     */

                }, {
                    key: 'synced',
                    value: function synced() {
                        return this._synced;
                    }

                    /**
                     * Returns a dataSource reference to the given child branch of the current datasource.
                     * @param {String} childName Child branch name.
                     * @param {Object} options Optional: additional options to pass to new DataSource instance.
                     * @returns {DataSource} New dataSource instance pointing to the given child branch.
                     */

                }, {
                    key: 'child',
                    value: function child(childName) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        return new FirebaseDataSource(this.path() + '/' + childName, options);
                    }

                    /**
                     * Returns the full URL to the path on the dataSource. Functionally identical to toString().
                     * @returns {String} Full resource path.
                     */

                }, {
                    key: 'path',
                    value: function path() {
                        var rootUrl = this.root();
                        var parentUrl = this.parent();

                        var relativePath = parentUrl.replace(rootUrl, '');
                        return relativePath + '/' + this.key();
                    }

                    /**
                     * Returns the name of the current branch in the path on the dataSource.
                     * @returns {String} Current branch name.
                     */

                }, {
                    key: 'key',
                    value: function key() {
                        return (this._dataReference.key || '').toString();
                    }

                    /**
                     * Returns the full URL to the parent of the current branch on the dataSource.
                     * @returns {String} Full resource path of parent.
                     */

                }, {
                    key: 'parent',
                    value: function parent() {
                        return (this._dataReference.parent || '').toString();
                    }

                    /**
                     * Returns the full URL to the root on the dataSource.
                     * @returns {String} Full resource path of root.
                     */

                }, {
                    key: 'root',
                    value: function root() {
                        return (this._dataReference.root || '').toString();
                    }

                    /**
                     * Writes newData to the path this dataSource was constructed with.
                     * @param {Object} newData Data to write to dataSource.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: 'set',
                    value: function set(newData) {
                        var completionPromise = this._dataReference.set(newData);
                        /* Append another promise to the chain to keep track of whether it's still synchronized */
                        this._synced = this._synced.then(function () {
                            return completionPromise;
                        });
                        return completionPromise;
                    }

                    /**
                     * Removes the object and all underlying children that this dataSource points to.
                     * @returns {void}
                     */

                }, {
                    key: 'remove',
                    value: function remove() {
                        return this._dataReference.remove();
                    }

                    /**
                     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
                     * the dataSource.
                     * @param {Object} newData New data to append to dataSource.
                     * @returns {FirebaseDataSource} A new FirebaseDataSource pointing to the injected data.
                     */

                }, {
                    key: 'push',
                    value: function push(newData) {
                        var pushResult = this._dataReference.push(newData);
                        return new FirebaseDataSource(this.path() + '/' + pushResult.key, { synced: pushResult });
                    }

                    /**
                     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
                     * @param {Object} newData New data to set.
                     * @param {String|Number} priority Priority value by which the data should be ordered.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: 'setWithPriority',
                    value: function setWithPriority(newData, priority) {
                        var completionPromise = this.dataReference.setWithPriority(newData, priority);
                        /* Append another promise to the chain to keep track of whether it's still synchronized */
                        this._synced = this._synced.then(function () {
                            return completionPromise;
                        });
                        return completionPromise;
                    }

                    /**
                     * Sets the priority (ordering) of an object on a given dataSource.
                     * @param {String|Number} newPriority New priority value to order data by.
                     * @returns {void}
                     */

                }, {
                    key: 'setPriority',
                    value: function setPriority(newPriority) {
                        return this.dataReference.setPriority(newPriority);
                    }

                    /**
                     * Orders the DataSource's childs by the value in child[key].
                     * @param {String} childKey Key of the field to order by.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByChild',
                    value: function orderByChild(childKey) {
                        return new FirebaseDataSource(this.path(), _.merge({}, this.options, { orderBy: childKey }));
                    }

                    /**
                     * Orders the DataSource's childs by their key names, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByKey',
                    value: function orderByKey() {
                        return new FirebaseDataSource(this.path(), _.merge({}, this.options, { orderBy: '.key' }));
                    }

                    /**
                     * Orders the DataSource's childs by their values, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByValue',
                    value: function orderByValue() {
                        return new FirebaseDataSource(this.path(), _.merge({}, this.options, { orderBy: '.value' }));
                    }

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'limitToFirst',
                    value: function limitToFirst(amount) {
                        return new FirebaseDataSource(this.path(), _.merge({}, this.options, { limitToFirst: amount }));
                    }

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'limitToLast',
                    value: function limitToLast(amount) {
                        return new FirebaseDataSource(this.path(), _.merge({}, this.options, { limitToLast: amount }));
                    }

                    /**
                     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.
                     * @param {String} provider google, facebook, github, or twitter
                     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithOAuthToken',
                    value: function authWithOAuthToken(provider, credentials, onComplete) {
                        credentials.provider = provider;
                        return firebase.auth().signInWithCredential(credentials).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Authenticates all instances of this DataSource with a custom auth token or secret.
                     * @param {String} authToken Authentication token or secret.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithCustomToken',
                    value: function authWithCustomToken(authToken, onComplete) {
                        return firebase.auth().signInWithCustomToken(authToken).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Authenticates all instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithPassword',
                    value: function authWithPassword(credentials, onComplete) {
                        return firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Authenticates all instances of this DataSource as an anonymous user.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authAnonymously',
                    value: function authAnonymously(options) {
                        return firebase.auth().signInAnonymously();
                    }

                    /**
                     * Fetches the current user's authentication state.
                     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.
                     * If the user is not authenticated, returns null.
                     * @returns {Object|null} User auth object.
                     */

                }, {
                    key: 'getAuth',
                    value: function getAuth() {
                        var _this2 = this;

                        var firebaseAuth = firebase.auth();
                        var currentUser = firebaseAuth.currentUser;

                        if (!this._authDataPresent) {
                            if (currentUser) {
                                this._authDataPresent = true;
                                return Promise.resolve(currentUser);
                            } else {
                                return new Promise(function (resolve) {
                                    firebaseAuth.onAuthStateChanged(function (newUser) {
                                        _this2._authDataPresent = true;
                                        resolve(newUser);
                                    });
                                });
                            }
                        } else {
                            return Promise.resolve(currentUser);
                        }
                    }

                    /**
                     * Logs out from the datasource, allowing to re-authenticate at a later time.
                     * @returns {void}
                     */

                }, {
                    key: 'unauth',
                    value: function unauth() {
                        return firebase.auth().signOut();
                    }

                    /**
                     * Subscribe to an event emitted by the DataSource.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     * @returns {void}
                     */

                }, {
                    key: 'on',
                    value: function on(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        var boundHandler = this.handlers[handler] = handler.bind(this);
                        this._orderedDataReference.on(event, boundHandler);
                    }

                    /**
                     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe again once it has been emitted a single time.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     * @returns {void}
                     */

                }, {
                    key: 'once',
                    value: function once(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        function onceWrapper() {
                            handler.call.apply(handler, [context].concat(Array.prototype.slice.call(arguments)));
                            this.off(event, onceWrapper);
                        }

                        return this.on(event, onceWrapper, this);
                    }

                    /**
                     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Optional: Function that was used in previous subscription.
                     * @returns {void}
                     */

                }, {
                    key: 'off',
                    value: function off(event, handler) {
                        var boundHandler = this.handlers[handler];
                        this._orderedDataReference.off(event, boundHandler);
                    }

                    /**
                     * Sets the callback triggered when dataSource updates the data.
                     * @param {Function} callback Callback function to call when the subscribed data value changes.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setValueChangedCallback',
                    value: function setValueChangedCallback(callback) {
                        this._onValueCallback = callback;
                        this.on('value', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource updates the data.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeValueChangedCallback',
                    value: function removeValueChangedCallback() {
                        if (this._onValueCallback) {
                            this.off('value', this._onValueCallback);
                            this._onValueCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource adds a data element.
                     * @param {Function} callback Callback function to call when a new data child is added.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildAddedCallback',
                    value: function setChildAddedCallback(callback) {
                        this._onAddCallback = callback;
                        this.on('child_added', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource adds a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildAddedCallback',
                    value: function removeChildAddedCallback() {
                        if (this._onAddCallback) {
                            this.off('child_added', this._onAddCallback);
                            this._onAddCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource changes a data element.
                     * @param {Function} callback Callback function to call when a child is changed.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildChangedCallback',
                    value: function setChildChangedCallback(callback) {
                        this._onChangeCallback = callback;
                        this.on('child_changed', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource changes a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildChangedCallback',
                    value: function removeChildChangedCallback() {
                        if (this._onChangeCallback) {
                            this.off('child_changed', this._onChangeCallback);
                            this._onChangeCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource moves a data element.
                     * @param {Function} callback Callback function to call when a child is moved.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildMovedCallback',
                    value: function setChildMovedCallback(callback) {
                        this._onMoveCallback = callback;
                        this.on('child_moved', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource moves a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildMovedCallback',
                    value: function removeChildMovedCallback() {
                        if (this._onMoveCallback) {
                            this.off('child_moved', this._onMoveCallback);
                            this._onMoveCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource removes a data element.
                     * @param {Function} callback Callback function to call when a child is removed.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildRemovedCallback',
                    value: function setChildRemovedCallback(callback) {
                        this._onRemoveCallback = callback;
                        this.on('child_removed', this._onRemoveCallback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource removes a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildRemovedCallback',
                    value: function removeChildRemovedCallback() {
                        if (this._onRemoveCallback) {
                            this.off('child_removed', this._onRemoveCallback);
                            this._onRemoveCallback = null;
                        }
                    }
                }]);

                return FirebaseDataSource;
            }(DataSource)) || _class$1);
            browser = Bowser;


            if ((browser.msie || browser.msedge) && parseFloat(browser.version) <= 11 || browser.chrome && parseFloat(browser.version) >= 53) {
                duplicateZIndex();
                //TODO: Check if it's still broken in v54
            } else if (browser.firefox && parseFloat(browser.version) <= 53) {
                removeSurfacePreserve3D();
            }EmptyFunction = Object.getPrototypeOf(Function);

            ClassProvider$1 = function () {
                function ClassProvider$$1(clazz, params) {
                    _classCallCheck(this, ClassProvider$$1);

                    // TODO(vojta): can we hide this.provider? (only used for hasAnnotation(provider.provider))
                    this.provider = clazz;

                    this.params = [];
                    this._constructors = [];

                    this._flattenParams(clazz, params);
                    this._constructors.unshift([clazz, 0, this.params.length - 1]);
                }

                // Normalize params for all the constructors (in the case of inheritance),
                // into a single flat array of DependencyDescriptors.
                // So that the injector does not have to worry about inheritance.
                //
                // This function mutates `this.params` and `this._constructors`,
                // but it is only called during the constructor.
                // TODO(vojta): remove the annotations argument?


                _createClass(ClassProvider$$1, [{
                    key: '_flattenParams',
                    value: function _flattenParams(constructor, params) {
                        var SuperConstructor$$1;
                        var constructorInfo;

                        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var param = _ref;

                            if (param.token === SuperConstructor) {
                                SuperConstructor$$1 = Object.getPrototypeOf(constructor);

                                if (SuperConstructor$$1 === EmptyFunction) {
                                    throw new Error(toString$1(constructor) + ' does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!');
                                }

                                constructorInfo = [SuperConstructor$$1, this.params.length];
                                this._constructors.push(constructorInfo);
                                this._flattenParams(SuperConstructor$$1, readAnnotations(SuperConstructor$$1).params);
                                constructorInfo.push(this.params.length - 1);
                            } else {
                                this.params.push(param);
                            }
                        }
                    }

                    // Basically the reverse process to `this._flattenParams`:
                    // We get arguments for all the constructors as a single flat array.
                    // This method generates pre-bound "superConstructor" wrapper with correctly passing arguments.

                }, {
                    key: '_createConstructor',
                    value: function _createConstructor(currentConstructorIdx, context, allArguments) {
                        var constructorInfo = this._constructors[currentConstructorIdx];
                        var nextConstructorInfo = this._constructors[currentConstructorIdx + 1];
                        var argsForCurrentConstructor;

                        if (nextConstructorInfo) {
                            argsForCurrentConstructor = allArguments.slice(constructorInfo[1], nextConstructorInfo[1]).concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)]).concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1));
                        } else {
                            argsForCurrentConstructor = allArguments;
                            /*.slice(constructorInfo[1], constructorInfo[2] + 1);*/
                        }

                        return function InjectedAndBoundSuperConstructor() {
                            // TODO(vojta): throw if arguments given
                            return constructorInfo[0].apply(context, argsForCurrentConstructor);
                        };
                    }

                    // It is called by injector to create an instance.

                }, {
                    key: 'create',
                    value: function create(args) {
                        var context = Object.create(this.provider.prototype);
                        var constructor = this._createConstructor(0, context, args);
                        var returnedValue = constructor();

                        if (isFunction(returnedValue) || isObject(returnedValue)) {
                            return returnedValue;
                        }

                        return context;
                    }
                }]);

                return ClassProvider$$1;
            }();

            FactoryProvider$1 = function () {
                function FactoryProvider$$1(factoryFunction, params) {
                    _classCallCheck(this, FactoryProvider$$1);

                    this.provider = factoryFunction;
                    this.params = params;

                    for (var _iterator2 = params, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                        var _ref2;

                        if (_isArray2) {
                            if (_i2 >= _iterator2.length) break;
                            _ref2 = _iterator2[_i2++];
                        } else {
                            _i2 = _iterator2.next();
                            if (_i2.done) break;
                            _ref2 = _i2.value;
                        }

                        var param = _ref2;

                        if (param.token === SuperConstructor) {
                            throw new Error(toString$1(factoryFunction) + ' is not a class. Only classes with a parent can ask for SuperConstructor!');
                        }
                    }
                }

                _createClass(FactoryProvider$$1, [{
                    key: 'create',
                    value: function create(args) {
                        return this.provider.apply(undefined, args);
                    }
                }]);

                return FactoryProvider$$1;
            }();

            Injector = function () {
                function Injector() {
                    var modules = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
                    var parentInjector = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    var providers = arguments.length <= 2 || arguments[2] === undefined ? new Map() : arguments[2];
                    var scopes = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];

                    _classCallCheck(this, Injector);

                    this._cache = new Map();
                    this._providers = providers;
                    this._parent = parentInjector;
                    this._scopes = scopes;

                    this._tokenCache = new Map();

                    this._loadModules(modules);
                }

                _createClass(Injector, [{
                    key: '_retrieveToken',
                    value: function _retrieveToken(classConstructor) {
                        var constructionParams = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        if (!this._tokenCache.has(classConstructor)) {
                            this._tokenCache.set(classConstructor, new Map());
                        }

                        var paramsHash = hash(constructionParams);
                        var cachedClass = this._tokenCache.get(classConstructor);
                        if (!cachedClass.has(paramsHash)) {
                            /* Generate a new token */
                            cachedClass.set(paramsHash, '' + Date.now() + Math.random());
                        }

                        var foundHash = cachedClass.get(paramsHash);
                        return classConstructor.name ? classConstructor.name + '-' + foundHash : foundHash;
                    }

                    // Collect all registered providers that has given annotation.
                    // Including providers defined in parent injectors.

                }, {
                    key: '_collectProvidersWithAnnotation',
                    value: function _collectProvidersWithAnnotation(annotationClass, collectedProviders) {
                        this._providers.forEach(function (provider, token) {
                            if (!collectedProviders.has(token) && hasAnnotation(provider.provider, annotationClass)) {
                                collectedProviders.set(token, provider);
                            }
                        });

                        if (this._parent) {
                            this._parent._collectProvidersWithAnnotation(annotationClass, collectedProviders);
                        }
                    }

                    // Load modules/function/classes.
                    // This mutates `this._providers`, but it is only called during the constructor.

                }, {
                    key: '_loadModules',
                    value: function _loadModules(modules) {
                        for (var _iterator = modules, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var module = _ref;

                            // A single provider (class or function).
                            if (isFunction(module)) {
                                this._loadFnOrClass(module);
                                continue;
                            }

                            throw new Error('Invalid module!');
                        }
                    }

                    // Load a function or class.
                    // This mutates `this._providers`, but it is only called during the constructor.

                }, {
                    key: '_loadFnOrClass',
                    value: function _loadFnOrClass(classConstructor) {
                        var constructionParams = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        var annotations = readAnnotations(classConstructor);
                        var token = this._retrieveToken(annotations.provide.token || classConstructor, constructionParams);
                        var provider = createProviderFromFnOrClass(classConstructor, annotations);

                        this._providers.set(token, provider);
                    }

                    // Returns true if there is any provider registered for given token.
                    // Including parent injectors.

                }, {
                    key: '_hasProviderFor',
                    value: function _hasProviderFor(token) {
                        if (this._providers.has(token)) {
                            return true;
                        }

                        if (this._parent) {
                            return this._parent._hasProviderFor(token);
                        }

                        return false;
                    }

                    // Find the correct injector where the default provider should be instantiated and cached.

                }, {
                    key: '_instantiateDefaultProvider',
                    value: function _instantiateDefaultProvider(provider, token, classConstructor, constructionParams, resolving) {
                        // In root injector, instantiate here.
                        if (!this._parent) {
                            this._providers.set(token, provider);
                            return this.get(classConstructor, constructionParams, resolving);
                        }

                        // Check if this injector forces new instance of this provider.
                        for (var _iterator2 = this._scopes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var ScopeClass = _ref2;

                            if (hasAnnotation(provider.provider, ScopeClass)) {
                                this._providers.set(token, provider);
                                return this.get(token, resolving);
                            }
                        }

                        // Otherwise ask parent injector.
                        return this._parent._instantiateDefaultProvider(provider, token, resolving);
                    }

                    // Return an instance for given token.

                }, {
                    key: 'get',
                    value: function get(classConstructor) {
                        var _this = this;

                        var constructionParams = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                        var resolving = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

                        var resolvingMsg = '';
                        var provider;
                        var instance;
                        var token = this._retrieveToken(classConstructor, constructionParams);

                        if (token === null || token === undefined) {
                            resolvingMsg = constructResolvingMessage(resolving, token);
                            throw new Error('Invalid token "' + token + '" requested!' + resolvingMsg);
                        }

                        // Special case, return itself.
                        if (token === Injector) {
                            return this;
                        }

                        // Check if there is a cached instance already.
                        if (this._cache.has(token)) {
                            instance = this._cache.get(token);
                            provider = this._providers.get(token);
                            return instance;
                        }

                        provider = this._providers.get(token);

                        // No provider defined (overridden), use the default provider (token).
                        if (!provider && isFunction(classConstructor) && !this._hasProviderFor(token)) {
                            provider = createProviderFromFnOrClass(classConstructor, readAnnotations(classConstructor));
                            return this._instantiateDefaultProvider(provider, token, classConstructor, constructionParams, resolving);
                        }

                        if (!provider) {
                            if (!this._parent) {
                                resolvingMsg = constructResolvingMessage(resolving, token);
                                throw new Error('No provider for ' + toString$1(token) + '!' + resolvingMsg);
                            }

                            return this._parent.get(token, resolving);
                        }

                        if (resolving.indexOf(token) !== -1) {
                            resolvingMsg = constructResolvingMessage(resolving, token);
                            throw new Error('Cannot instantiate cyclic dependency!' + resolvingMsg);
                        }

                        resolving.push(token);

                        var args = provider.params.map(function (param) {
                            return _this.get(param.token, undefined, resolving);
                        });

                        /* Add custom construction parameters to construction */
                        args = args.concat(constructionParams);

                        try {
                            instance = provider.create(args);
                        } catch (e) {
                            resolvingMsg = constructResolvingMessage(resolving);
                            var originalMsg = 'ORIGINAL ERROR: ' + e.message;
                            e.message = 'Error during instantiation of ' + toString$1(token) + '!' + resolvingMsg + '\n' + originalMsg;
                            throw e;
                        }

                        if (!hasAnnotation(provider.provider, TransientScope)) {
                            this._cache.set(token, instance);
                        }

                        resolving.pop();

                        return instance;
                    }

                    // Create a child injector, which encapsulate shorter life scope.
                    // It is possible to add additional providers and also force new instances of existing providers.

                }, {
                    key: 'createChild',
                    value: function createChild() {
                        var modules = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
                        var forceNewInstancesOf = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        var forcedProviders = new Map();

                        // Always force new instance of TransientScope.
                        forceNewInstancesOf.push(TransientScope);

                        for (var _iterator3 = forceNewInstancesOf, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var annotation = _ref3;

                            this._collectProvidersWithAnnotation(annotation, forcedProviders);
                        }

                        return new Injector(modules, this, forcedProviders, forceNewInstancesOf);
                    }
                }]);

                return Injector;
            }();

            Injection = (_temp$1 = _class$2 = function () {
                function Injection() {
                    _classCallCheck(this, Injection);
                }

                _createClass(Injection, null, [{
                    key: 'get',

                    /**
                     * Requests an instance of the given class from the DI engine. If an instance
                     * of that class with the same construction parameters already exists, a reference
                     * to it is returned. Otherwise a new instance is created.
                     *
                     * Example usage:
                     * get(HomeController, param1, param2);
                     *
                     * @param {Function} classConstructor The class of which an instance is wanted
                     * @param {*} constructionParams A list of parameters to be passed to the class constructor
                     * @returns {Object} Instance of the given class
                     */
                    value: function get(classConstructor) {
                        for (var _len = arguments.length, constructionParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            constructionParams[_key - 1] = arguments[_key];
                        }

                        return this.injector.get(classConstructor, constructionParams);
                    }

                    /**
                     * Requests instances of multiple classes at once.
                     *
                     * Example usage:
                     * let instances = getAll(ArvaRouter, [HomeController, [param1, param2]], App);
                     *
                     * @param {*} classContructorArray Array of classes to instantiate.
                     * May also be an array where each item is an array containing the class as
                     * its first element, and an array of parameters as its second element.
                     *
                     * @returns {Array} An array of instances of the requested classes
                     */

                }, {
                    key: 'getAll',
                    value: function getAll() {
                        var results = [];

                        for (var _len2 = arguments.length, classContructorArray = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            classContructorArray[_key2] = arguments[_key2];
                        }

                        for (var _iterator = classContructorArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var entry = _ref;

                            var _ref2 = entry instanceof Array ? [entry[0], entry[1]] : [entry, []];

                            var _ref3 = _slicedToArray(_ref2, 2);

                            var _constructor = _ref3[0];
                            var params = _ref3[1];

                            results.push(this.get.apply(this, [_constructor].concat(params)));
                        }
                        return results;
                    }

                    /**
                     * Registers classes as the default provider for their Provide annotation (set by @provide decorator).
                     *
                     * Example usage:
                     * addProviders(ArvaRouter, FamousContext);
                     *
                     * @param {*} classConstructors
                     * @returns {void}
                     */

                }, {
                    key: 'addProviders',
                    value: function addProviders() {
                        for (var _len3 = arguments.length, classConstructors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                            classConstructors[_key3] = arguments[_key3];
                        }

                        for (var _iterator2 = classConstructors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref4;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref4 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref4 = _i2.value;
                            }

                            var _constructor2 = _ref4;

                            this.injector._loadFnOrClass(_constructor2);
                        }
                    }
                }]);

                return Injection;
            }(), _class$2.injector = new Injector(), _temp$1);

            Router = function (_EventEmitter) {
                _inherits(Router, _EventEmitter);

                function Router() {
                    _classCallCheck(this, Router);

                    // make classes behave like context bound

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Router).call(this));

                    ObjectHelper.bindAllMethods(_this, _this);

                    // make the router aware of controllers active in the application
                    // each controller will need to subscribe itself to this container.
                    _this.controllers = [];

                    // when a default controller is designated. The router will map every route without a
                    // controller reference to the HomeController.
                    _this.defaultController = 'Home';

                    // when a default method is designated. the router map will every route without a
                    // method reference to the HomeController's method.
                    _this.defaultMethod = 'Index';
                    return _this;
                }

                /**
                 * On a route change, calls the corresponding controller method with the given parameter values.
                 * @returns {Boolean} Whether the current route was successfully ran.
                 */

                _createClass(Router, [{
                    key: 'run',
                    value: function run() {}

                    /**
                     * Sets the initial controller and method to be activated whenever the controllers are activated.
                     * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.
                     * @param {String} method Default method to call in given controller.
                     * @returns {void}
                     */

                }, {
                    key: 'setDefault',
                    value: function setDefault(controller, method) {}

                    /**
                     * Registers a single controller.
                     * @param {String} route Route to trigger handler on.
                     * @param {Function} handler Method to call on given route.
                     * @returns {void}
                     */

                }, {
                    key: 'add',
                    value: function add(route, handler) {}

                    /**
                     * Triggers navigation to one of the controllers
                     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.
                     * @param {String} method The method to call in given controller.
                     * @param {Object} params Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: "yes"})
                     * @returns {void}
                     */

                }, {
                    key: 'go',
                    value: function go(controller, method, params) {}

                    /**
                     * Executes the controller handler associated with a given route, passing the route as a parameter.
                     * @param {Object} rule Rule handler to execute.
                     * @param {Object} route Route object to pass as parameter.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeRoute',
                    value: function _executeRoute(rule, route) {}
                }]);

                return Router;
            }(EventEmitter);

            ArvaRouter = (_dec$2 = provide(Router), _dec$2(_class$4 = function (_Router) {
                _inherits(ArvaRouter, _Router);

                function ArvaRouter() {
                    _classCallCheck(this, ArvaRouter);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ArvaRouter).call(this));

                    _this.routes = {};
                    _this.history = [];
                    _this.decode = decodeURIComponent;
                    _this.defaultController = 'Home';
                    _this.defaultMethod = 'Index';

                    if (window == null) {
                        return _possibleConstructorReturn(_this);
                    }
                    window.addEventListener('hashchange', _this.run);

                    if (window == null) {
                        return _possibleConstructorReturn(_this);
                    }

                    _this.routes = {};
                    _this.history = [];
                    _this.decode = decodeURIComponent;

                    window.addEventListener('hashchange', _this.run);
                    _this._setupNativeBackButtonListener();
                    return _this;
                }

                /**
                 * Sets the initial controller and method to be activated whenever the controllers are activated.
                 * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.
                 * @param {String} method Default method to call in given controller.
                 * @returns {void}
                 */

                _createClass(ArvaRouter, [{
                    key: 'setDefault',
                    value: function setDefault(controller) {
                        var method = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        this.defaultController = this._getControllerName(controller);

                        if (method != null) {
                            this.defaultMethod = method;
                        }
                    }

                    /**
                     * Sets the animation specs object for use by the famous-flex AnimationController.
                     * @param {Object} specs Animation specs, keyed by target controller.
                     * @returns {void}
                     */

                }, {
                    key: 'setControllerSpecs',
                    value: function setControllerSpecs(specs) {
                        this.specs = specs;
                    }

                    /**
                     * Triggers navigation to one of the controllers
                     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.
                     * @param {String} method The method to call in given controller.
                     * @param {Object} params Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: "yes"})
                     * @returns {void}
                     */

                }, {
                    key: 'go',
                    value: function go(controller, method) {
                        var params = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

                        var controllerName = this._getControllerName(controller);

                        var routeRoot = controllerName.replace(this.defaultController, '').replace('Controller', '');

                        var hash$$1 = '#' + (routeRoot.length > 0 ? '/' + routeRoot : '') + ('/' + method);
                        if (params !== null) {
                            for (var i = 0; i < Object.keys(params).length; i++) {
                                var key = Object.keys(params)[i];
                                hash$$1 += i == 0 ? '?' : '&';
                                hash$$1 += key + '=' + params[key];
                            }
                        }

                        if (history.pushState) {
                            history.pushState(null, null, hash$$1);
                        }

                        this.run();
                    }

                    /**
                     * Registers a single controller.
                     * @param {String} route Route to trigger handler on.
                     * @param {Object} handlers
                     * @param {Function} handler.enter Method to call on entering a route.
                     * @param {Function} handler.leave Method to call on when leaving a route.
                     * @returns {void}
                     */

                }, {
                    key: 'add',
                    value: function add(route, _ref, controller) {
                        var enter = _ref.enter;
                        var leave = _ref.leave;

                        var pieces = route.split('/'),
                            rules = this.routes;

                        for (var i = 0; i < pieces.length; ++i) {
                            var piece = pieces[i],
                                name = piece[0] === ':' ? ':' : piece;

                            rules = rules[name] || (rules[name] = {});

                            if (name === ':') {
                                rules['@name'] = piece.slice(1);
                            }
                        }

                        rules['enter'] = enter;
                        rules['leave'] = leave;
                        rules['controller'] = controller;
                    }

                    /**
                     * On a route change, calls the corresponding controller method with the given parameter values.
                     * @returns {Boolean} Whether the current route was successfully ran.
                     */

                }, {
                    key: 'run',
                    value: function run() {
                        var url = window.location.hash.replace('#', '');

                        if (url !== '') {
                            url = url.replace('/?', '?');
                            url[0] === '/' && (url = url.slice(1));
                            url.slice(-1) === '/' && (url = url.slice(0, -1));
                        }

                        var rules = this.routes,
                            querySplit = url.split('?'),
                            pieces = querySplit[0].split('/'),
                            values = [],
                            keys = [],
                            method = '';
                        for (var piece in pieces) {
                            if (pieces[piece].indexOf('=') > -1) {
                                var splitted = pieces[piece].split('=');
                                pieces[piece] = splitted[0];
                                querySplit.push(pieces[piece] + '=' + splitted[1]);
                            }
                        }

                        var rule = null;
                        var controller = void 0;

                        // if there is no controller reference, assume we have hit the default Controller
                        if (pieces.length === 1 && pieces[0].length === 0) {
                            pieces[0] = this.defaultController;
                            pieces.push(this.defaultMethod);
                        } else if (pieces.length === 1 && pieces[0].length > 0) {
                            pieces.unshift(this.defaultController);
                        }

                        controller = pieces[0];

                        // Parse the non-query portion of the URL...
                        for (var i = 0; i < pieces.length && rules; ++i) {
                            var _piece = this.decode(pieces[i]);
                            rule = rules[_piece];

                            if (!rule && (rule = rules[':'])) {
                                method = _piece;
                            }

                            rules = rules[_piece];
                        }

                        (function parseQuery(q) {
                            var query = q.split('&');

                            for (var _i = 0; _i < query.length; ++_i) {
                                var nameValue = query[_i].split('=');

                                if (nameValue.length > 1) {
                                    keys.push(nameValue[0]);
                                    values.push(this.decode(nameValue[1]));
                                }
                            }
                        }).call(this, querySplit.length > 1 ? querySplit[1] : '');

                        if (rule && rule['enter']) {

                            /* Push current route to the history stack for later use */
                            var previousRoute = this.history.length ? this.history[this.history.length - 1] : undefined;
                            var currentRoute = {
                                url: url,
                                controller: controller,
                                controllerObject: rule['controller'],
                                method: method,
                                keys: keys,
                                values: values
                            };

                            if (previousRoute) {
                                if (currentRoute.controllerObject !== previousRoute.controllerObject) {
                                    this.routes[previousRoute.controller][':']['leave'](currentRoute);
                                }
                            }
                            currentRoute.spec = previousRoute ? this._getAnimationSpec(previousRoute, currentRoute) : this._initialSpec || {};
                            this._setHistory(currentRoute);

                            this._executeRoute(rule, currentRoute);

                            return true;
                        } else {
                            console.log('Controller doesn\'t exist!');
                        }

                        return false;
                    }
                }, {
                    key: 'setInitialSpec',
                    value: function setInitialSpec(spec) {
                        this._initialSpec = spec;
                    }
                }, {
                    key: 'setBackButtonEnabled',
                    value: function setBackButtonEnabled(enabled) {
                        this._backButtonEnabled = enabled;
                    }
                }, {
                    key: 'isBackButtonEnabled',
                    value: function isBackButtonEnabled() {
                        return this._backButtonEnabled;
                    }
                }, {
                    key: 'goBackInHistory',
                    value: function goBackInHistory() {
                        /* Default behaviour: go back in history in the arva router */
                        var history = this.history;

                        if (history.length > 1) {
                            var _history = history[history.length - 2];
                            var controller = _history.controller;
                            var method = _history.method;
                            var keys = _history.keys;
                            var values = _history.values;

                            var inputObject = {};
                            for (var i = 0; i < keys.length; i++) {
                                inputObject[keys[i]] = values[i];
                            }
                            this.go(controller, method, inputObject);
                        } else {
                            this.go(this.defaultController, this.defaultMethod);
                        }
                    }
                }, {
                    key: '_setupNativeBackButtonListener',
                    value: function _setupNativeBackButtonListener() {
                        var _this2 = this;

                        this._backButtonEnabled = true;
                        document.addEventListener("backbutton", function (e) {
                            if (!_this2._backButtonEnabled) {
                                e.preventDefault();
                            } else {
                                _this2.goBackInHistory();
                            }
                        }, false);
                    }

                    /**
                     * Executes the controller handler associated with a given route, passing the route as a parameter.
                     * @param {Object} rule Rule handler to execute.
                     * @param {Object} route Route object to pass as parameter.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeRoute',
                    value: function _executeRoute(rule, route) {
                        /* Make the controller active for current scope */
                        if (rule['enter'](route)) {
                            this.emit('routechange', route);
                        }
                    }

                    /**
                     * Checks if the current route is already present in the history stack, and if so removes all entries after
                     * and including the first occurrence. It will then append the current route to the history stack.
                     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_setHistory',
                    value: function _setHistory(currentRoute) {
                        for (var i = 0; i < this.history.length; i++) {
                            var previousRoute = this.history[i];
                            if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && _.isEqual(currentRoute.values, previousRoute.values)) {
                                this.history.splice(i, this.history.length - i);
                                break;
                            }
                        }

                        this.history.push(currentRoute);
                    }

                    /**
                     * CheckS whether a route is already present in the history stack.
                     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.
                     * @returns {Boolean} Whether the route has been visited previously.
                     * @private
                     */

                }, {
                    key: '_hasVisited',
                    value: function _hasVisited(currentRoute) {
                        for (var i = 0; i < this.history.length; i++) {
                            var previousRoute = this.history[i];
                            if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && _.isEqual(currentRoute.values, previousRoute.values)) {
                                return true;
                            }
                        }

                        return false;
                    }

                    /**
                     * Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in
                     * router.setControllerSpecs(), which is called from the app constructor.
                     * @param {Object} previousRoute Previous route object containing url, controller, method, keys, and values.
                     * @param {Object} currentRoute Current route object containing url, controller, method, keys, and values.
                     * @returns {Object} A spec object if one is found, or an empty object otherwise.
                     * @private
                     */

                }, {
                    key: '_getAnimationSpec',
                    value: function _getAnimationSpec(previousRoute, currentRoute) {
                        var fromController = previousRoute.controller;
                        var toController = currentRoute.controller;

                        if (fromController.indexOf('Controller') === -1) {
                            fromController += 'Controller';
                        }
                        if (toController.indexOf('Controller') === -1) {
                            toController += 'Controller';
                        }

                        /* We're on exactly the same page as before */
                        if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && _.isEqual(currentRoute.values, previousRoute.values)) {
                            return {};
                        }

                        /* Same controller, different method or different parameters */
                        if (currentRoute.controller === previousRoute.controller) {

                            var direction = this._hasVisited(currentRoute) ? 'previous' : 'next';
                            if (this.specs && this.specs[fromController] && this.specs[fromController].methods) {
                                return this.specs[fromController].methods[direction];
                            }

                            /* Default method-to-method animations, used only if not overridden in app's controllers spec. */
                            var defaults = {
                                'previous': {
                                    transition: { duration: 400, curve: Easing.outBack },
                                    animation: AnimationController.Animation.Slide.Right
                                },
                                'next': {
                                    transition: { duration: 400, curve: Easing.outBack },
                                    animation: AnimationController.Animation.Slide.Left
                                }
                            };
                            return defaults[direction];
                        }

                        /* Different controller */
                        if (this.specs && this.specs.hasOwnProperty(toController) && this.specs[toController].controllers) {
                            var controllerSpecs = this.specs[toController].controllers;
                            for (var specIndex in controllerSpecs) {
                                var spec = controllerSpecs[specIndex];
                                if (spec.activeFrom && spec.activeFrom.indexOf(fromController) !== -1) {
                                    return spec;
                                }
                            }
                        }

                        console.log('No spec defined from ' + fromController + ' to ' + toController + '. Please check router.setControllerSpecs() in your app constructor.');
                    }

                    /**
                     * Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.
                     * E.g. _getControllerName(HomeController) -> 'Home'.
                     * @param {Function|Object|String} controller String, constructor, or controller instance.
                     * @returns {String} Name of the controller
                     * @private
                     */

                }, {
                    key: '_getControllerName',
                    value: function _getControllerName(controller) {
                        if (typeof controller === 'string') {
                            return controller.replace('Controller', '');
                        } else if (typeof controller === 'function' && Object.getPrototypeOf(controller).constructor.name == 'Function') {
                            /* The _name property is set by babel-plugin-transform-runtime-constructor-name.
                             * This is done so Controller class names remain available in minimised code. */
                            var controllerName = controller._name || controller.name;
                            return controllerName.replace('Controller', '');
                        } else {
                            return typeof controller === 'object' ? Object.getPrototypeOf(controller).constructor.name.replace('Controller', '') : typeof controller;
                        }
                    }
                }]);

                return ArvaRouter;
            }(Router)) || _class$4);

            App$1 = function () {

                /**
                 * Have the router check check which route is active and fire the Controller
                 * @param {Router} router The router instance to use in the app.
                 * @param {Context} context The data context instance to use in the app.
                 * @returns {App} App instance
                 */

                function App() {
                    _classCallCheck(this, App);

                    /* Options are defined as a static property on the class that extends this App */
                    var options = this.constructor.options || {};
                    var controllers = this.constructor.controllers || [];
                    var defaultRouter = this.constructor.router || ArvaRouter;
                    var defaultDataSource = this.constructor.defaultDataSource;

                    /* Allow user taps to emit immediately as click events,
                     * instead of having the default 300ms delay. */
                    FastClick(document.body);

                    /* Add default class providers to DI engine */
                    Injection.addProviders(defaultDataSource, defaultRouter, FamousContextSingleton, NewAnimationController);

                    /* Request instances of a Router and a Famous Context. */

                    var _Injection$getAll = Injection.getAll(Router, Context);

                    var _Injection$getAll2 = _slicedToArray(_Injection$getAll, 2);

                    var router = _Injection$getAll2[0];
                    var context = _Injection$getAll2[1];

                    if (this.constructor.loaded && typeof this.constructor.loaded === 'function') {
                        try {
                            this.constructor.loaded();
                        } catch (error) {
                            console.log('Caught exception in App.loaded():', error);
                        }
                    }

                    /* Load controllers */
                    this.controllers = Injection.getAll.apply(Injection, controllers);

                    this.router = router;
                    this.context = context;
                    this.router.run();

                    /* Hide splash screen */
                    if (navigator && navigator.splashscreen && !options.keepSplashScreen) {
                        navigator.splashscreen.hide();
                    }

                    var done = this.constructor.done;

                    if (done && typeof done === 'function') {
                        try {
                            done.call(this.constructor);
                        } catch (error) {
                            console.log('Caught exception in App.done():', error);
                        }
                    }
                }

                _createClass(App, null, [{
                    key: 'start',
                    value: function start() {
                        /* Instantiate this App, which also instantiates the other components. */
                        this.references.app = Injection.get(this);
                    }
                }]);

                return App;
            }();

            FamousContextSingleton = (_dec$1 = provide(Context), _dec$1(_class$3 = (_temp$2 = _class2 = function FamousContextSingleton() {
                _classCallCheck(this, FamousContextSingleton);

                return FamousContextSingleton.famousContext || (FamousContextSingleton.famousContext = Engine.createContext(null));
            }, _class2.famousContext = null, _temp$2)) || _class$3);
            NewAnimationController = (_dec2 = provide(AnimationController), _dec2(_class3 = function NewAnimationController() {
                _classCallCheck(this, NewAnimationController);

                var context = new FamousContextSingleton();
                var controller = new AnimationController();

                context.add(controller);
                return controller;
            }) || _class3);
            Controller = (_dec$3 = inject(Router, AnimationController), _dec$3(_class$5 = function (_EventEmitter) {
                _inherits(Controller, _EventEmitter);

                function Controller(router, context, spec) {
                    _classCallCheck(this, Controller);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Controller).call(this));

                    _this.spec = spec;
                    _this.router = router;
                    _this.context = context;
                    /* The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.
                     * This allows Arva code to be minified and mangled without losing automated route creation.
                     * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name.*/
                    var controllerName = _this.constructor._name || Object.getPrototypeOf(_this).constructor.name;

                    ObjectHelper.bindAllMethods(_this, _this);

                    /* Add the controller route to the router. */
                    var routeName = controllerName.replace('Controller', '');
                    routeName += '/:method';

                    /* handle router url changes and execute the appropiate controller method. */
                    _this.router.add(routeName, { enter: _this.onRouteCalled, leave: _this.onLeave }, _this);
                    return _this;
                }

                /**
                 * Called to notify the Controller that the route is changed
                 * @param newRoute
                 */

                _createClass(Controller, [{
                    key: 'onLeave',
                    value: function onLeave(newRoute) {
                        this.isActive = false;
                    }

                    /**
                     * Called by the Router when this controller instance is being navigated to. Calls the controller's method in the given route,
                     * and triggers a famous-flex AnimationController show() with the View instance that the method returns. Is also capable of receiving
                     * a Promise from the method, in which case the show() is called after the promise is resolved.
                     * @param {Object} route Route object generated by the Router. Contains a method name to call, and a render spec for passing to the AnimationController.
                     * @returns {Boolean} success Whether the controller method was fully executed, and the Router should emit a routechange event.
                     */

                }, {
                    key: 'onRouteCalled',
                    value: function onRouteCalled(route) {
                        var _this2 = this;

                        this.isActive = true;
                        if (typeof this[route.method] === 'function') {
                            var result = this[route.method].apply(this, route.values);

                            if (result) {
                                this.emit('renderstart', route.method);

                                if (result instanceof Promise) {
                                    /* We can assume the method called was asynchronous from nature, therefore we await the result. */
                                    result.then(function (delegatedresult) {
                                        /* Assemble a callback based on the execution scope and have that called when rendering is completed. */
                                        _this2.context.show(delegatedresult, _.extend(route.spec, _this2.spec), function () {
                                            _this2.emit('renderend', route.method);
                                        });
                                        _this2.emit('rendering', route.method);
                                    });
                                } else {
                                    /* Assemble a callback based on the execution scope and have that called when rendering is completed. */
                                    this.context.show(result, _.extend(route.spec, this.spec), function () {
                                        _this2.emit('renderend', route.method);
                                    });
                                    this.emit('rendering', route.method);
                                }
                                return true;
                            } else {
                                console.log('Method did not return a View or a Promise instance.');
                                return false;
                            }
                        } else {
                            console.log('Route does not exist!');
                            return false;
                        }
                    }
                }]);

                return Controller;
            }(EventEmitter)) || _class$5);

            _regeneratorRuntime = function (module) {
                /**
                 * Copyright (c) 2014, Facebook, Inc.
                 * All rights reserved.
                 *
                 * This source code is licensed under the BSD-style license found in the
                 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
                 * additional grant of patent rights can be found in the PATENTS file in
                 * the same directory.
                 */

                !function (global) {
                    "use strict";

                    var hasOwn = Object.prototype.hasOwnProperty;
                    var undefined; // More compressible than void 0.
                    var $Symbol = typeof Symbol === "function" ? Symbol : {};
                    var iteratorSymbol = $Symbol.iterator || "@@iterator";
                    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                    var inModule = typeof module === "object";
                    var runtime = global.regeneratorRuntime;
                    if (runtime) {
                        if (inModule) {
                            // If regeneratorRuntime is defined globally and we're in a module,
                            // make the exports object identical to regeneratorRuntime.
                            module.exports = runtime;
                        }
                        // Don't bother evaluating the rest of this file if the runtime was
                        // already defined globally.
                        return;
                    }

                    // Define the runtime globally (as expected by generated code) as either
                    // module.exports (if we're in a module) or a new, empty object.
                    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                    function wrap(innerFn, outerFn, self, tryLocsList) {
                        // If outerFn provided, then outerFn.prototype instanceof Generator.
                        var generator = Object.create((outerFn || Generator).prototype);
                        var context = new Context$$1(tryLocsList || []);

                        // The ._invoke method unifies the implementations of the .next,
                        // .throw, and .return methods.
                        generator._invoke = makeInvokeMethod(innerFn, self, context);

                        return generator;
                    }
                    runtime.wrap = wrap;

                    // Try/catch helper to minimize deoptimizations. Returns a completion
                    // record like context.tryEntries[i].completion. This interface could
                    // have been (and was previously) designed to take a closure to be
                    // invoked without arguments, but in all the cases we care about we
                    // already have an existing method we want to call, so there's no need
                    // to create a new function object. We can even get away with assuming
                    // the method takes exactly one argument, since that happens to be true
                    // in every case, so we don't have to touch the arguments object. The
                    // only additional allocation required is the completion record, which
                    // has a stable shape and so hopefully should be cheap to allocate.
                    function tryCatch(fn, obj, arg) {
                        try {
                            return { type: "normal", arg: fn.call(obj, arg) };
                        } catch (err) {
                            return { type: "throw", arg: err };
                        }
                    }

                    var GenStateSuspendedStart = "suspendedStart";
                    var GenStateSuspendedYield = "suspendedYield";
                    var GenStateExecuting = "executing";
                    var GenStateCompleted = "completed";

                    // Returning this object from the innerFn has the same effect as
                    // breaking out of the dispatch switch statement.
                    var ContinueSentinel = {};

                    // Dummy constructor functions that we use as the .constructor and
                    // .constructor.prototype properties for functions that return Generator
                    // objects. For full spec compliance, you may wish to configure your
                    // minifier not to mangle the names of these two functions.
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}

                    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
                    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                    GeneratorFunctionPrototype.constructor = GeneratorFunction;
                    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

                    // Helper for defining the .next, .throw, and .return methods of the
                    // Iterator interface in terms of a single ._invoke method.
                    function defineIteratorMethods(prototype) {
                        ["next", "throw", "return"].forEach(function (method) {
                            prototype[method] = function (arg) {
                                return this._invoke(method, arg);
                            };
                        });
                    }

                    runtime.isGeneratorFunction = function (genFun) {
                        var ctor = typeof genFun === "function" && genFun.constructor;
                        return ctor ? ctor === GeneratorFunction ||
                        // For the native GeneratorFunction constructor, the best we can
                        // do is to check its .name property.
                        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                    };

                    runtime.mark = function (genFun) {
                        if (Object.setPrototypeOf) {
                            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                        } else {
                            genFun.__proto__ = GeneratorFunctionPrototype;
                            if (!(toStringTagSymbol in genFun)) {
                                genFun[toStringTagSymbol] = "GeneratorFunction";
                            }
                        }
                        genFun.prototype = Object.create(Gp);
                        return genFun;
                    };

                    // Within the body of any async function, `await x` is transformed to
                    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                    // `value instanceof AwaitArgument` to determine if the yielded value is
                    // meant to be awaited. Some may consider the name of this method too
                    // cutesy, but they are curmudgeons.
                    runtime.awrap = function (arg) {
                        return new AwaitArgument(arg);
                    };

                    function AwaitArgument(arg) {
                        this.arg = arg;
                    }

                    function AsyncIterator(generator) {
                        function invoke(method, arg, resolve, reject) {
                            var record = tryCatch(generator[method], generator, arg);
                            if (record.type === "throw") {
                                reject(record.arg);
                            } else {
                                var result = record.arg;
                                var value = result.value;
                                if (value instanceof AwaitArgument) {
                                    return Promise.resolve(value.arg).then(function (value) {
                                        invoke("next", value, resolve, reject);
                                    }, function (err) {
                                        invoke("throw", err, resolve, reject);
                                    });
                                }

                                return Promise.resolve(value).then(function (unwrapped) {
                                    // When a yielded Promise is resolved, its final value becomes
                                    // the .value of the Promise<{value,done}> result for the
                                    // current iteration. If the Promise is rejected, however, the
                                    // result for this iteration will be rejected with the same
                                    // reason. Note that rejections of yielded Promises are not
                                    // thrown back into the generator function, as is the case
                                    // when an awaited Promise is rejected. This difference in
                                    // behavior between yield and await is important, because it
                                    // allows the consumer to decide what to do with the yielded
                                    // rejection (swallow it and continue, manually .throw it back
                                    // into the generator, abandon iteration, whatever). With
                                    // await, by contrast, there is no opportunity to examine the
                                    // rejection reason outside the generator function, so the
                                    // only option is to throw it from the await expression, and
                                    // let the generator function handle the exception.
                                    result.value = unwrapped;
                                    resolve(result);
                                }, reject);
                            }
                        }

                        if (typeof process === "object" && process.domain) {
                            invoke = process.domain.bind(invoke);
                        }

                        var previousPromise;

                        function enqueue(method, arg) {
                            function callInvokeWithMethodAndArg() {
                                return new Promise(function (resolve, reject) {
                                    invoke(method, arg, resolve, reject);
                                });
                            }

                            return previousPromise =
                            // If enqueue has been called before, then we want to wait until
                            // all previous Promises have been resolved before calling invoke,
                            // so that results are always delivered in the correct order. If
                            // enqueue has not been called before, then it is important to
                            // call invoke immediately, without waiting on a callback to fire,
                            // so that the async generator function has the opportunity to do
                            // any necessary setup in a predictable way. This predictability
                            // is why the Promise constructor synchronously invokes its
                            // executor callback, and why async functions synchronously
                            // execute code before the first await. Since we implement simple
                            // async functions in terms of async generators, it is especially
                            // important to get this right, even though it requires care.
                            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
                            // Avoid propagating failures to Promises returned by later
                            // invocations of the iterator.
                            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                        }

                        // Define the unified helper method that is used to implement .next,
                        // .throw, and .return (see defineIteratorMethods).
                        this._invoke = enqueue;
                    }

                    defineIteratorMethods(AsyncIterator.prototype);

                    // Note that simple async functions are implemented on top of
                    // AsyncIterator objects; they just return a Promise for the value of
                    // the final result produced by the iterator.
                    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

                        return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                        : iter.next().then(function (result) {
                            return result.done ? result.value : iter.next();
                        });
                    };

                    function makeInvokeMethod(innerFn, self, context) {
                        var state = GenStateSuspendedStart;

                        return function invoke(method, arg) {
                            if (state === GenStateExecuting) {
                                throw new Error("Generator is already running");
                            }

                            if (state === GenStateCompleted) {
                                if (method === "throw") {
                                    throw arg;
                                }

                                // Be forgiving, per 25.3.3.3.3 of the spec:
                                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                return doneResult();
                            }

                            while (true) {
                                var delegate = context.delegate;
                                if (delegate) {
                                    if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                                        // A return or throw (when the delegate iterator has no throw
                                        // method) always terminates the yield* loop.
                                        context.delegate = null;

                                        // If the delegate iterator has a return method, give it a
                                        // chance to clean up.
                                        var returnMethod = delegate.iterator["return"];
                                        if (returnMethod) {
                                            var record = tryCatch(returnMethod, delegate.iterator, arg);
                                            if (record.type === "throw") {
                                                // If the return method threw an exception, let that
                                                // exception prevail over the original return or throw.
                                                method = "throw";
                                                arg = record.arg;
                                                continue;
                                            }
                                        }

                                        if (method === "return") {
                                            // Continue with the outer return, now that the delegate
                                            // iterator has been terminated.
                                            continue;
                                        }
                                    }

                                    var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

                                    if (record.type === "throw") {
                                        context.delegate = null;

                                        // Like returning generator.throw(uncaught), but without the
                                        // overhead of an extra function call.
                                        method = "throw";
                                        arg = record.arg;
                                        continue;
                                    }

                                    // Delegate generator ran and handled its own exceptions so
                                    // regardless of what the method was, we continue as if it is
                                    // "next" with an undefined arg.
                                    method = "next";
                                    arg = undefined;

                                    var info = record.arg;
                                    if (info.done) {
                                        context[delegate.resultName] = info.value;
                                        context.next = delegate.nextLoc;
                                    } else {
                                        state = GenStateSuspendedYield;
                                        return info;
                                    }

                                    context.delegate = null;
                                }

                                if (method === "next") {
                                    // Setting context._sent for legacy support of Babel's
                                    // function.sent implementation.
                                    context.sent = context._sent = arg;
                                } else if (method === "throw") {
                                    if (state === GenStateSuspendedStart) {
                                        state = GenStateCompleted;
                                        throw arg;
                                    }

                                    if (context.dispatchException(arg)) {
                                        // If the dispatched exception was caught by a catch block,
                                        // then let that catch block handle the exception normally.
                                        method = "next";
                                        arg = undefined;
                                    }
                                } else if (method === "return") {
                                    context.abrupt("return", arg);
                                }

                                state = GenStateExecuting;

                                var record = tryCatch(innerFn, self, context);
                                if (record.type === "normal") {
                                    // If an exception is thrown from innerFn, we leave state ===
                                    // GenStateExecuting and loop back for another invocation.
                                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                                    var info = {
                                        value: record.arg,
                                        done: context.done
                                    };

                                    if (record.arg === ContinueSentinel) {
                                        if (context.delegate && method === "next") {
                                            // Deliberately forget the last sent value so that we don't
                                            // accidentally pass it on to the delegate.
                                            arg = undefined;
                                        }
                                    } else {
                                        return info;
                                    }
                                } else if (record.type === "throw") {
                                    state = GenStateCompleted;
                                    // Dispatch the exception by looping back around to the
                                    // context.dispatchException(arg) call above.
                                    method = "throw";
                                    arg = record.arg;
                                }
                            }
                        };
                    }

                    // Define Generator.prototype.{next,throw,return} in terms of the
                    // unified ._invoke helper method.
                    defineIteratorMethods(Gp);

                    Gp[iteratorSymbol] = function () {
                        return this;
                    };

                    Gp[toStringTagSymbol] = "Generator";

                    Gp.toString = function () {
                        return "[object Generator]";
                    };

                    function pushTryEntry(locs) {
                        var entry = { tryLoc: locs[0] };

                        if (1 in locs) {
                            entry.catchLoc = locs[1];
                        }

                        if (2 in locs) {
                            entry.finallyLoc = locs[2];
                            entry.afterLoc = locs[3];
                        }

                        this.tryEntries.push(entry);
                    }

                    function resetTryEntry(entry) {
                        var record = entry.completion || {};
                        record.type = "normal";
                        delete record.arg;
                        entry.completion = record;
                    }

                    function Context$$1(tryLocsList) {
                        // The root entry object (effectively a try statement without a catch
                        // or a finally block) gives us a place to store values thrown from
                        // locations where there is no enclosing try statement.
                        this.tryEntries = [{ tryLoc: "root" }];
                        tryLocsList.forEach(pushTryEntry, this);
                        this.reset(true);
                    }

                    runtime.keys = function (object) {
                        var keys = [];
                        for (var key in object) {
                            keys.push(key);
                        }
                        keys.reverse();

                        // Rather than returning an object with a next method, we keep
                        // things simple and return the next function itself.
                        return function next() {
                            while (keys.length) {
                                var key = keys.pop();
                                if (key in object) {
                                    next.value = key;
                                    next.done = false;
                                    return next;
                                }
                            }

                            // To avoid creating an additional object, we just hang the .value
                            // and .done properties off the next function object itself. This
                            // also ensures that the minifier will not anonymize the function.
                            next.done = true;
                            return next;
                        };
                    };

                    function values(iterable) {
                        if (iterable) {
                            var iteratorMethod = iterable[iteratorSymbol];
                            if (iteratorMethod) {
                                return iteratorMethod.call(iterable);
                            }

                            if (typeof iterable.next === "function") {
                                return iterable;
                            }

                            if (!isNaN(iterable.length)) {
                                var i = -1,
                                    next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next;
                                        }
                                    }

                                    next.value = undefined;
                                    next.done = true;

                                    return next;
                                };

                                return next.next = next;
                            }
                        }

                        // Return an iterator with no values.
                        return { next: doneResult };
                    }
                    runtime.values = values;

                    function doneResult() {
                        return { value: undefined, done: true };
                    }

                    Context$$1.prototype = {
                        constructor: Context$$1,

                        reset: function reset(skipTempReset) {
                            this.prev = 0;
                            this.next = 0;
                            // Resetting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            this.sent = this._sent = undefined;
                            this.done = false;
                            this.delegate = null;

                            this.tryEntries.forEach(resetTryEntry);

                            if (!skipTempReset) {
                                for (var name in this) {
                                    // Not sure about the optimal order of these conditions:
                                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                        this[name] = undefined;
                                    }
                                }
                            }
                        },

                        stop: function stop() {
                            this.done = true;

                            var rootEntry = this.tryEntries[0];
                            var rootRecord = rootEntry.completion;
                            if (rootRecord.type === "throw") {
                                throw rootRecord.arg;
                            }

                            return this.rval;
                        },

                        dispatchException: function dispatchException(exception) {
                            if (this.done) {
                                throw exception;
                            }

                            var context = this;
                            function handle(loc, caught) {
                                record.type = "throw";
                                record.arg = exception;
                                context.next = loc;
                                return !!caught;
                            }

                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                var record = entry.completion;

                                if (entry.tryLoc === "root") {
                                    // Exception thrown outside of any try block that could handle
                                    // it, so set the completion value of the entire function to
                                    // throw the exception.
                                    return handle("end");
                                }

                                if (entry.tryLoc <= this.prev) {
                                    var hasCatch = hasOwn.call(entry, "catchLoc");
                                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                                    if (hasCatch && hasFinally) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        } else if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else if (hasCatch) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        }
                                    } else if (hasFinally) {
                                        if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else {
                                        throw new Error("try statement without catch or finally");
                                    }
                                }
                            }
                        },

                        abrupt: function abrupt(type, arg) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                    var finallyEntry = entry;
                                    break;
                                }
                            }

                            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                                // Ignore the finally entry if control is not jumping to a
                                // location outside the try/catch block.
                                finallyEntry = null;
                            }

                            var record = finallyEntry ? finallyEntry.completion : {};
                            record.type = type;
                            record.arg = arg;

                            if (finallyEntry) {
                                this.next = finallyEntry.finallyLoc;
                            } else {
                                this.complete(record);
                            }

                            return ContinueSentinel;
                        },

                        complete: function complete(record, afterLoc) {
                            if (record.type === "throw") {
                                throw record.arg;
                            }

                            if (record.type === "break" || record.type === "continue") {
                                this.next = record.arg;
                            } else if (record.type === "return") {
                                this.rval = record.arg;
                                this.next = "end";
                            } else if (record.type === "normal" && afterLoc) {
                                this.next = afterLoc;
                            }
                        },

                        finish: function finish(finallyLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.finallyLoc === finallyLoc) {
                                    this.complete(entry.completion, entry.afterLoc);
                                    resetTryEntry(entry);
                                    return ContinueSentinel;
                                }
                            }
                        },

                        "catch": function _catch(tryLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc === tryLoc) {
                                    var record = entry.completion;
                                    if (record.type === "throw") {
                                        var thrown = record.arg;
                                        resetTryEntry(entry);
                                    }
                                    return thrown;
                                }
                            }

                            // The context.catch method must only be called with a location
                            // argument that corresponds to a known catch block.
                            throw new Error("illegal catch attempt");
                        },

                        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                            this.delegate = {
                                iterator: values(iterable),
                                resultName: resultName,
                                nextLoc: nextLoc
                            };

                            return ContinueSentinel;
                        }
                    };
                }(
                // Among the various tricks for obtaining a reference to the global
                // object, this seems to be the most reliable technique that does not
                // use indirect eval (which violates Content Security Policy).
                typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
                return module.exports;
            }({ exports: {} });

            _asyncToGenerator = function (fn) {
                return function () {
                    var gen = fn.apply(this, arguments);
                    return new Promise(function (resolve, reject) {
                        function step(key, arg) {
                            try {
                                var info = gen[key](arg);
                                var value = info.value;
                            } catch (error) {
                                reject(error);
                                return;
                            }

                            if (info.done) {
                                resolve(value);
                            } else {
                                return Promise.resolve(value).then(function (value) {
                                    return step("next", value);
                                }, function (err) {
                                    return step("throw", err);
                                });
                            }
                        }

                        return step("next");
                    });
                };
            };

            Utils = function () {
                function Utils() {
                    _classCallCheck(this, Utils);
                }

                _createClass(Utils, null, [{
                    key: 'renderableIsSurface',
                    value: function renderableIsSurface(renderable) {
                        return renderable instanceof Surface || renderable instanceof ImageSurface;
                    }

                    /**
                     * Returns tru if the object is not a class but still an object
                     * @param object
                     * @returns {boolean}
                     * @private
                     */

                }, {
                    key: 'isPlainObject',
                    value: function isPlainObject(object) {
                        return typeof object == 'object' && object.constructor.name == 'Object';
                    }

                    /**
                     * Adds to translations returns the result.
                     * @param translate1
                     * @param translate2
                     * @returns {Array}
                     */

                }, {
                    key: 'addTranslations',
                    value: function addTranslations(translate1, translate2) {
                        return [translate1[0] + translate2[0], translate1[1] + translate2[1], translate1[2] + translate2[2]];
                    }
                    /**
                     * Returns true if the renderable is complex and its size can be determined. Returns false if it is a surface
                     * or something else that doesn't have a getSize function specified
                     * @param renderable
                     * @private
                     */

                }, {
                    key: 'renderableIsComposite',
                    value: function renderableIsComposite(renderable) {
                        return renderable.getSize && !Utils.renderableIsSurface(renderable);
                    }

                    /**
                     * Uses either console.warn() or console.log() to log a mildly serious issue, depending on the user agent's availability.
                     * @param {String|Object} message
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: 'warn',
                    value: function warn(message) {
                        if (console.warn) {
                            console.warn(message);
                        } else {
                            console.log(message);
                        }
                    }

                    /**
                     * Specifying origin for true sized renderables doesn't work. Therefore we do a quick fix to adjust the
                     * translation according to the current faulty behaviour of famous.
                     * @param {Renderable}renderable The renderable of which we should correct
                     * @param {Array|Number} size  The size of this renderable
                     * @param {Array|Number} origin The origin
                     * @param {Array|Number} translate The current translation
                     * @param {SizeResolver} A size resolver that is keeping bookkeeping of the renderable
                     * @returns {*[]} The new translation taking this the current famous implementation into account
                     * @private
                     */

                }, {
                    key: 'adjustPlacementForTrueSize',
                    value: function adjustPlacementForTrueSize(renderable, size, origin, translate, sizeResolver) {
                        var newTranslation = [translate[0], translate[1], translate[2]];
                        for (var i = 0; i < 2; i++) {
                            if (size[i] === true && origin[i] !== 0) {
                                /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel
                                 *  to make up for this.
                                 */
                                newTranslation[i] -= sizeResolver.getResolvedSize(renderable)[i] * origin[i] - 1;
                            }
                        }
                        return newTranslation;
                    }
                }, {
                    key: 'getRenderableGroupName',
                    value: function getRenderableGroupName(renderable) {
                        var decorations = renderable.decorations;

                        if (!!decorations.dock) {
                            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */
                            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';
                        } else if (!!decorations.fullSize) {
                            return 'fullSize';
                        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {
                            return 'traditional';
                        } else {
                            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */
                            return 'ignored';
                        }
                    }
                }]);

                return Utils;
            }();

            SizeResolver = function (_EventEmitter) {
                _inherits(SizeResolver, _EventEmitter);

                function SizeResolver() {
                    _classCallCheck(this, SizeResolver);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SizeResolver).call(this));

                    _this._resolvedSizesCache = new Map();
                    _this._trueSizedSurfaceInfo = new Map();
                    return _this;
                }

                /**
                 * Determines the decorated size. If there is true sizing involved, then it will not return the resolved true size.
                 * Instead, this can be accessed through getResolvedSize()
                 * @param {Renderable} renderable. The renderable for which we need the size
                 * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                 * @param {Object} context. The context, with a specified size. The size can be set to NaN in order to return NaN
                 * @param {Array} specifiedSize. The size to use which is specified as a decorator
                 * @returns {*}
                 */

                _createClass(SizeResolver, [{
                    key: 'settleDecoratedSize',
                    value: function settleDecoratedSize(renderable, renderableCounterpart, context) {
                        var specifiedSize = arguments.length <= 3 || arguments[3] === undefined ? [undefined, undefined] : arguments[3];

                        var size = [];
                        var cacheResolvedSize = [];
                        for (var dimension = 0; dimension < 2; dimension++) {
                            size[dimension] = this.resolveSingleSize(specifiedSize[dimension], context.size, dimension);
                            if (this.isValueTrueSized(size[dimension])) {
                                cacheResolvedSize[dimension] = this._resolveSingleTrueSizedRenderable(renderable, size, dimension, renderableCounterpart);
                                if (Utils.renderableIsSurface(renderable)) {
                                    size[dimension] = true;
                                } else {
                                    size[dimension] = cacheResolvedSize[dimension];
                                }
                            } else {
                                size[dimension] = size[dimension] === undefined ? context.size[dimension] || size[dimension] : size[dimension];
                                cacheResolvedSize[dimension] = size[dimension];
                            }
                        }

                        this._resolvedSizesCache.set(renderable, [cacheResolvedSize[0], cacheResolvedSize[1]]);

                        return size[0] !== null && size[1] !== null ? size : null;
                    }

                    /**
                     * Resolves a single dimension (i.e. x or y) size of a renderable.
                     * @param {Number|Boolean|Object|Undefined|Function} renderableSize Renderable's single dimension size.
                     * @param {Array.Number} contextSize The context size
                     * @param {Number} dimension The dimension of the size that is being evaluated (e.g. 1 or 0)
                     * @returns {Number} The resulting size
                     * @private
                     */

                }, {
                    key: 'resolveSingleSize',
                    value: function resolveSingleSize(renderableSize, contextSize, dimension) {
                        switch (typeof renderableSize) {
                            case 'function':
                                return this.resolveSingleSize(renderableSize.apply(undefined, contextSize), contextSize, dimension);
                            case 'number':
                                /* If 0 < renderableSize < 1, we interpret renderableSize as a fraction of the contextSize */
                                return renderableSize < 1 && renderableSize > 0 ? renderableSize * Math.max(contextSize[dimension], 0) : renderableSize;
                            default:
                                /* renderableSize can be true/false, undefined, or 'auto' for example. */
                                return renderableSize;
                        }
                    }

                    /**
                     * Resolves a true size to an actual size of a truesized renderable. size[dim] must be negative or true.
                     * @param {Renderable} renderable the renderable
                     * @param {Array} size the size as specified
                     * @param dim the dimensions e.g. 0,1 that should be processed
                     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                     * @returns {Number} size[dim] will be returned with a non-truesized value
                     * @private
                     */

                }, {
                    key: '_resolveSingleTrueSizedRenderable',
                    value: function _resolveSingleTrueSizedRenderable(renderable, size, dim, renderableCounterpart) {
                        if (size[dim] === -1) {
                            Utils.warn('-1 detected as set size. If you want a true sized element to take ' + 'up a proportion of your view, please define a function doing so by ' + 'using the context size');
                        }
                        /* If there is an AnimationController without content, display 0 size */
                        if (renderableCounterpart instanceof AnimationController && !renderableCounterpart._showingRenderable) {
                            return 0;
                        }
                        /* True sized element. This has been specified as ~100 where 100 is the initial size
                         * applying this operator again (e.g. ~~100) gives us the value 100 back
                         * */
                        if (Utils.renderableIsComposite(renderable)) {
                            var twoDimensionalSize = renderable.getSize();
                            if (!twoDimensionalSize) {
                                return this._specifyUndeterminedSingleHeight(renderable, size, dim);
                            } else {
                                var renderableIsView = renderable instanceof View;
                                if (size[dim] === true && twoDimensionalSize[dim] === undefined && (renderableIsView && renderable._initialised && !renderable.containsUncalculatedSurfaces() || !renderableIsView)) {
                                    Utils.warn('True sized renderable \'' + renderable.constructor.name + '\' is taking up the entire context size.');
                                    return twoDimensionalSize[dim];
                                } else {
                                    var approximatedSize = size[dim] === true ? twoDimensionalSize[dim] : ~size[dim];
                                    var resultingSize = twoDimensionalSize[dim] !== undefined ? twoDimensionalSize[dim] : approximatedSize;
                                    if (renderableIsView) {
                                        resultingSize = !renderable.containsUncalculatedSurfaces() && renderable._initialised ? resultingSize : approximatedSize;
                                    }
                                    return resultingSize;
                                }
                            }
                        } else if (Utils.renderableIsSurface(renderable)) {
                            var trueSizedSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable) || {};
                            if (trueSizedSurfaceInfo.calculateOnNext) {
                                trueSizedSurfaceInfo.calculateOnNext = false;
                                this._tryCalculateTrueSizedSurface(renderable);
                            }
                            var _trueSizedSurfaceInfo = trueSizedSurfaceInfo;
                            var isUncalculated = _trueSizedSurfaceInfo.isUncalculated;

                            if (isUncalculated === false) {
                                return trueSizedSurfaceInfo.size[dim];
                            } else {
                                if (size[dim] === true) {
                                    var defaultSize = 5;
                                    Utils.warn('No initial size set for renderable \'' + renderable.constructor.name + '\', will default to ' + defaultSize + 'px');
                                    size[dim] = ~5;
                                }
                                if (isUncalculated !== true) {
                                    /* Seems like the surface isn't properly configured, let's get that going */
                                    trueSizedSurfaceInfo = this.configureTrueSizedSurface(renderable);
                                }
                                trueSizedSurfaceInfo.trueSizedDimensions[dim] = true;
                                renderable.size[dim] = true;
                                /* Need to set the size in order to get resize notifications */
                                return ~size[dim];
                            }
                        } else {
                            return this._specifyUndeterminedSingleHeight(renderable, size, dim);
                        }
                    }

                    /**
                     * Determines if the value is true sized
                     * @param {*} value
                     * @returns {boolean} True if the value is true sized
                     * @private
                     */

                }, {
                    key: 'isValueTrueSized',
                    value: function isValueTrueSized(value) {
                        return value < 0 || value === true;
                    }
                }, {
                    key: '_specifyUndeterminedSingleHeight',
                    value: function _specifyUndeterminedSingleHeight(renderable, size, dim) {
                        var resultingSize = size[dim] < 0 ? ~size[dim] : 5;
                        Utils.warn('Cannot determine size of ' + renderable.constructor.name + ', falling back to default size or ' + resultingSize + 'px. If the renderable is using legacy declaration this.renderables = ... this isn\'t supported for true sizing.');
                        return resultingSize;
                    }
                }, {
                    key: 'containsUncalculatedSurfaces',
                    value: function containsUncalculatedSurfaces() {
                        for (var _iterator = this._trueSizedSurfaceInfo, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var _ref2 = _ref;

                            var _ref3 = _slicedToArray(_ref2, 2);

                            var surface = _ref3[0];
                            var isUncalculated = _ref3[1].isUncalculated;

                            if (isUncalculated) {
                                return true;
                            }
                        }
                        return false;
                    }

                    /**
                     * Calculates a surface size, if possible
                     * @param renderable
                     * @private
                     */

                }, {
                    key: '_tryCalculateTrueSizedSurface',
                    value: function _tryCalculateTrueSizedSurface(renderable) {
                        var renderableHtmlElement = renderable._element;
                        var trueSizedInfo = this._trueSizedSurfaceInfo.get(renderable);
                        var trueSizedDimensions = trueSizedInfo.trueSizedDimensions;

                        if (renderableHtmlElement && (renderableHtmlElement.offsetWidth && renderableHtmlElement.offsetHeight || !renderable.getContent() && !(renderable instanceof ImageSurface)) && renderableHtmlElement.innerHTML === renderable.getContent() && (!renderableHtmlElement.style.width || !trueSizedDimensions[0]) && (!renderableHtmlElement.style.height || !trueSizedDimensions[1])) {
                            var newSize = void 0;

                            newSize = [renderableHtmlElement.offsetWidth, renderableHtmlElement.offsetHeight];

                            var oldSize = trueSizedInfo.size;
                            var sizeChange = false;
                            if (oldSize) {
                                for (var i = 0; i < 2; i++) {
                                    if (trueSizedDimensions[i] && oldSize[i] !== newSize[i]) {
                                        sizeChange = true;
                                    }
                                }
                            } else {
                                sizeChange = true;
                            }

                            if (sizeChange) {
                                trueSizedInfo.size = newSize;
                                trueSizedInfo.isUncalculated = false;
                            }
                            this.requestRecursiveReflow();
                        } else {
                            this.requestReflow();
                            this.requestLayoutControllerReflow();
                        }
                    }

                    //Todo listen for these in the view

                }, {
                    key: 'requestRecursiveReflow',
                    value: function requestRecursiveReflow() {
                        this.emit('reflowRecursively');
                    }
                }, {
                    key: 'requestReflow',
                    value: function requestReflow() {
                        this.emit('reflow');
                    }
                }, {
                    key: 'requestLayoutControllerReflow',
                    value: function requestLayoutControllerReflow() {
                        this.emit('layoutControllerReflow');
                    }

                    /**
                     * Sets up a true sized surface
                     * @param renderable
                     * @returns {{isUncalculated: boolean, trueSizedDimensions: boolean[], name: *}} an entry in this._trueSizedSurfaceInfo
                     * @private
                     */

                }, {
                    key: 'configureTrueSizedSurface',
                    value: function configureTrueSizedSurface(renderable) {
                        var _this2 = this;

                        var trueSizedSurfaceInfo = { isUncalculated: true, trueSizedDimensions: [false, false] };

                        /* We assume both dimensions not to be truesized, they are set in this._resolveDecoratedSize */
                        this._trueSizedSurfaceInfo.set(renderable, trueSizedSurfaceInfo);
                        /* Need to set the size in order to get resize notifications */
                        renderable.size = [undefined, undefined];

                        renderable.on('resize', function () {
                            _this2._tryCalculateTrueSizedSurface(renderable);
                        });
                        renderable.on('deploy', function () {
                            if (!_this2._trueSizedSurfaceInfo.get(renderable).isUncalculated) {
                                _this2._tryCalculateTrueSizedSurface(renderable);
                            }
                        });

                        return trueSizedSurfaceInfo;
                    }

                    /**
                     * Gets the size used when displaying a renderable on the screen the last time the calculation was done.
                     * @param {Renderable/Name} renderableOrName The renderable or the name of the renderable of which you need the size
                     */

                }, {
                    key: 'getResolvedSize',
                    value: function getResolvedSize(renderable) {
                        return this._resolvedSizesCache.get(renderable);
                    }
                }, {
                    key: 'doTrueSizedBookkeeping',
                    value: function doTrueSizedBookkeeping() {
                        for (var _iterator2 = this._trueSizedSurfaceInfo, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref4;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref4 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref4 = _i2.value;
                            }

                            var _ref5 = _ref4;

                            var _ref6 = _slicedToArray(_ref5, 1);

                            var surface = _ref6[0];

                            /* Encourage the surfaces to check if they have been resized, which could trigger the resize event */
                            surface._trueSizeCheck = true;
                        }
                    }
                }, {
                    key: 'getSurfaceTrueSizedInfo',
                    value: function getSurfaceTrueSizedInfo(surface) {
                        return this._trueSizedSurfaceInfo.get(surface);
                    }
                }]);

                return SizeResolver;
            }(EventEmitter);

            _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }

                return target;
            };

            TrueSizedLayoutDockHelper.prototype.parse = function (data) {
                for (var i = 0; i < data.length; i++) {
                    var rule = data[i];
                    var value = rule.length >= 3 ? rule[2] : undefined;
                    if (rule[0] === 'top') {
                        this.top(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'left') {
                        this.left(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'right') {
                        this.right(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'bottom') {
                        this.bottom(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'fill') {
                        this.fill(rule[1], rule.length >= 3 ? rule[2] : undefined);
                    } else if (rule[0] === 'margins') {
                        this.margins(rule[1]);
                    }
                }
            };

            /**
             * Dock the node to the top. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.top = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime = this._setupAccordingToDimension(size, 1);

                var _setupAccordingToDime2 = _slicedToArray(_setupAccordingToDime, 2);

                var width = _setupAccordingToDime2[0];
                var height = _setupAccordingToDime2[1];

                if (this._data.top !== this._initialData.top) {
                    this._data.top += space;
                }

                this._context.set(renderableName, _extends({
                    size: innerSize || [width || this._data.right - this._data.left, this._ensureTrueSize(height)],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                /* If height was negative, then it is true sized and it needs to be tild'd to return to original */
                this._data.top += this._resolveSingleSize(height);
                return this;
            };

            /**
             * Dock the node to the left. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.left = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime3 = this._setupAccordingToDimension(size, 0);

                var _setupAccordingToDime4 = _slicedToArray(_setupAccordingToDime3, 2);

                var width = _setupAccordingToDime4[0];
                var height = _setupAccordingToDime4[1];

                if (this._data.left !== this._initialData.left) {
                    this._data.left += space;
                }
                this._context.set(renderableName, _extends({
                    size: innerSize || [this._ensureTrueSize(width), height || this._data.bottom - this._data.top],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                this._data.left += this._resolveSingleSize(width);
                return this;
            };

            /**
             * Dock the node to the bottom. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.bottom = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime5 = this._setupAccordingToDimension(size, 1);

                var _setupAccordingToDime6 = _slicedToArray(_setupAccordingToDime5, 2);

                var width = _setupAccordingToDime6[0];
                var height = _setupAccordingToDime6[1];

                if (this._data.bottom !== this._initialData.bottom) {
                    this._data.bottom -= space;
                }
                this._data.bottom -= this._resolveSingleSize(height);
                this._context.set(renderableName, _extends({
                    size: innerSize || [width || this._data.right - this._data.left, this._ensureTrueSize(height)],
                    translate: this._addTranslations([this._data.left, this._data.bottom, this._data.z], extraTranslation)
                }, otherSpecs));
                return this;
            };

            /**
             * Dock the node to the right. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [this._data.z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.right = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime7 = this._setupAccordingToDimension(size, 0);

                var _setupAccordingToDime8 = _slicedToArray(_setupAccordingToDime7, 2);

                var width = _setupAccordingToDime8[0];
                var height = _setupAccordingToDime8[1];

                if (this._data.right !== this._initialData.right) {
                    this._data.right -= space;
                }
                this._data.right -= this._resolveSingleSize(width);
                this._context.set(renderableName, _extends({
                    size: innerSize || [this._ensureTrueSize(width), height || this._data.bottom - this._data.top],
                    translate: this._addTranslations([this._data.right, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                return this;
            };

            /**
             * Fills the node to the remaining content.
             *
             * @param {LayoutNode|String} node layout-node to dock
             * @param {Number} [z] z-index to use for the node
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.fill = function (renderableName, size) {
                var translate = arguments.length <= 2 || arguments[2] === undefined ? [0, 0, 0] : arguments[2];
                var otherSpecs = arguments[3];

                this._context.set(renderableName, _extends({
                    size: [size[0] || this._data.right - this._data.left, size[1] || this._data.bottom - this._data.top],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], translate)
                }, otherSpecs));
                return this;
            };

            /**
             * Applies indent margins to the remaining content.
             *
             * @param {Number|Array} margins margins shorthand (e.g. '5', [10, 10], [5, 10, 5, 10])
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.margins = function (margins) {
                margins = LayoutUtility.normalizeMargins(margins);
                this._data.left += margins[3];
                this._data.top += margins[0];
                this._data.right -= margins[1];
                this._data.bottom -= margins[2];
                this._initialData.left = this._data.left;
                this._initialData.right = this._data.right;
                this._initialData.top = this._data.top;
                this._initialData.bottom = this._data.bottom;
                return this;
            };

            TrueSizedLayoutDockHelper.prototype._resolveSingleSize = function (size) {
                return size < 0 ? ~size : size;
            };
            TrueSizedLayoutDockHelper.prototype._addTranslations = function (translation1, translation2) {
                return [translation1[0] + translation2[0], translation1[1] + translation2[1], translation1[2] + translation2[2]];
            };
            TrueSizedLayoutDockHelper.prototype._ensureTrueSize = function (size) {
                return size < 0 ? true : size;
            };

            TrueSizedLayoutDockHelper.prototype._setupAccordingToDimension = function (size, dim) {
                var height = void 0;
                var width = void 0;
                if (size instanceof Array) {
                    var orthogonalDimension = dim ? 0 : 1;
                    var adjustedSize = [size[0], size[1]];
                    if (size[orthogonalDimension] < 0) {
                        /* If a true size was specified as an orhtogonal dimension, we just set it to true, as we don't need to save the value anywhere here */
                        adjustedSize[orthogonalDimension] = true;
                    }
                    width = adjustedSize[0];
                    height = adjustedSize[1];
                } else {
                    width = size;
                }
                return [width, height];
            };

            /**
             * Gets the current left/right/top/bottom/z bounds used by the dock-helper.
             *
             * @return {Object} `{left: x, right: x, top: x, bottom: x, z: x}`
             */
            TrueSizedLayoutDockHelper.prototype.get = function () {
                return this._data;
            };

            /**
             * Created by lundfall on 01/09/16.
             */

            BaseLayoutHelper = function () {
                function BaseLayoutHelper(sizeResolver) {
                    _classCallCheck(this, BaseLayoutHelper);

                    this._sizeResolver = sizeResolver;
                }

                _createClass(BaseLayoutHelper, [{
                    key: 'layout',
                    value: function layout() {
                        throw Error("Not implemented");
                    }
                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize() {
                        throw Error("Not implemented");
                    }

                    /**
                     * Gets the flow information from the renderable
                     * @param {Renderable} renderable
                     * @returns {{transition: Object, callback: Function}}
                     * @private
                     */

                }, {
                    key: '_getRenderableFlowInformation',
                    value: function _getRenderableFlowInformation(renderable) {
                        var decorations = renderable.decorations;

                        var flowInformation = { transition: undefined, callback: undefined };
                        var flow = decorations.flow;

                        if (flow) {
                            flowInformation.transition = flow.currentTransition || flow.defaults && flow.defaults.transition;
                            flowInformation.callback = flow.callback;
                        }
                        return flowInformation;
                    }
                }]);

                return BaseLayoutHelper;
            }();

            DockedLayoutHelper = function (_BaseLayoutHelper) {
                _inherits(DockedLayoutHelper, _BaseLayoutHelper);

                function DockedLayoutHelper() {
                    _classCallCheck(this, DockedLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(DockedLayoutHelper).apply(this, arguments));
                }

                _createClass(DockedLayoutHelper, [{
                    key: 'layout',

                    /**
                     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked.
                     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.
                     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.
                     * @param {Object} context. The famous context with a valid size proportion.
                     * @param {Object} ownDecorators The decorators that are applied to the view.
                     * @param {Array|Number} [ownDecorators.extraTranslate]. A translate to shift the entire layout with.
                     * @param {Array|Number} [ownDecorators.viewMargins] The margins to apply on the outer edges of the view.
                     * @returns {undefined}
                     * @private
                     */
                    value: function layout(dockedRenderables, filledRenderables, context, ownDecorations) {
                        var _this2 = this;

                        var extraTranslate = ownDecorations.extraTranslate;
                        var margins = ownDecorations.viewMargins;

                        var dockHelper = new TrueSizedLayoutDockHelper(context);

                        if (margins) {
                            dockHelper.margins(margins);
                        }

                        /* Process Renderables with a non-fill dock */
                        var dockedNames = dockedRenderables ? dockedRenderables.keys() : [];
                        for (var _iterator = dockedNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var renderableName = _ref;

                            var _dockedRenderables$ge = dockedRenderables.get(renderableName);

                            var _dockedRenderables$ge2 = _slicedToArray(_dockedRenderables$ge, 2);

                            var renderable = _dockedRenderables$ge2[0];
                            var renderableCounterpart = _dockedRenderables$ge2[1];

                            var _prepareForDockedRend = this._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);

                            var dockSize = _prepareForDockedRend.dockSize;
                            var translate = _prepareForDockedRend.translate;
                            var innerSize = _prepareForDockedRend.innerSize;
                            var space = _prepareForDockedRend.space;

                            var _getRenderableFlowInf = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf.callback;
                            var transition = _getRenderableFlowInf.transition;
                            var _renderable$decoratio = renderable.decorations;
                            var dock = _renderable$decoratio.dock;
                            var rotate = _renderable$decoratio.rotate;
                            var opacity = _renderable$decoratio.opacity;
                            var origin = _renderable$decoratio.origin;
                            var scale = _renderable$decoratio.scale;
                            var skew = _renderable$decoratio.skew; // todo add scaling/skew

                            var dockMethod = dock.dockMethod;

                            if (dockHelper[dockMethod]) {
                                dockHelper[dockMethod](renderableName, dockSize, space, translate, innerSize, {
                                    rotate: rotate,
                                    opacity: opacity,
                                    callback: callback,
                                    transition: transition,
                                    origin: origin,
                                    scale: scale,
                                    skew: skew
                                });
                            }
                        }

                        /* Process Renderables with a fill dock (this needs to be done after non-fill docks, since order matters in LayoutDockHelper) */
                        var filledNames = filledRenderables ? filledRenderables.keys() : [];

                        var _loop = function _loop() {
                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) return 'break';
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) return 'break';
                                _ref2 = _i2.value;
                            }

                            var renderableName = _ref2;

                            var _filledRenderables$ge = filledRenderables.get(renderableName);

                            var _filledRenderables$ge2 = _slicedToArray(_filledRenderables$ge, 2);

                            var renderable = _filledRenderables$ge2[0];
                            var renderableCounterpart = _filledRenderables$ge2[1];
                            var decorations = renderable.decorations;
                            var rotate = decorations.rotate;
                            var opacity = decorations.opacity;
                            var origin = decorations.origin;

                            var _prepareForDockedRend2 = _this2._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);

                            var translate = _prepareForDockedRend2.translate;
                            var dockSize = _prepareForDockedRend2.dockSize;

                            var _getRenderableFlowInf2 = _this2._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf2.callback;
                            var transition = _getRenderableFlowInf2.transition;
                            /* Special case for undefined size, since it's treated differently by the dockhelper, and should be kept to undefined if specified */

                            var dimensionHasUndefinedSize = function dimensionHasUndefinedSize(dimension) {
                                return [decorations.dock.size, decorations.size].every(function (size) {
                                    return !size || size[dimension] === undefined;
                                });
                            };
                            dockSize = dockSize.map(function (fallbackSize, dimension) {
                                return dimensionHasUndefinedSize(dimension) ? undefined : fallbackSize;
                            });
                            dockHelper.fill(renderableName, dockSize, translate, { rotate: rotate, opacity: opacity, origin: origin, callback: callback, transition: transition });
                        };

                        for (var _iterator2 = filledNames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            var _ret = _loop();

                            if (_ret === 'break') break;
                        }
                    }

                    /**
                     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked
                     * @param {Renderable} renderable The renderable that is going to be docked
                     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                     * @param {Object} context. The famous context with a valid size proportion
                     * @param {Array|Number} extraTranslate. A translate to shift the entire layout with
                     * @param {Array|Nuimber} margins The margins to apply on the outer edges of the view
                     * @returns {{dockSize: (Array|Object), translate, innerSize: (Array|Number), inUseDockSize: (Array|Number}}
                     * @private
                     */

                }, {
                    key: '_prepareForDockedRenderable',
                    value: function _prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate) {
                        var _this3 = this;

                        var margins = arguments.length <= 4 || arguments[4] === undefined ? [0, 0, 0, 0] : arguments[4];
                        var decorations = renderable.decorations;
                        var _decorations$translat = decorations.translate;
                        var translate = _decorations$translat === undefined ? [0, 0, 0] : _decorations$translat;

                        translate = Utils.addTranslations(extraTranslate, translate);
                        var _decorations$dock = decorations.dock;
                        var dockMethod = _decorations$dock.dockMethod;
                        var space = _decorations$dock.space;

                        var horizontalMargins = margins[1] + margins[3];
                        var verticalMargins = margins[0] + margins[2];
                        var sizeWithoutMargins = [context.size[0] - horizontalMargins, context.size[1] - verticalMargins];
                        var dockSizeSpecified = !_.isEqual(decorations.dock.size, [undefined, undefined]);
                        var dockSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: sizeWithoutMargins }, dockSizeSpecified ? decorations.dock.size : decorations.size);
                        var inUseDockSize = this._sizeResolver.getResolvedSize(renderable);
                        var innerSize = void 0;
                        var origin = decorations.origin;
                        var align = decorations.align;

                        if (decorations.size || origin || align) {
                            /* If origin and align is used, we have to add this to the translate of the renderable */
                            this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: sizeWithoutMargins }, decorations.size);
                            innerSize = this._sizeResolver.getResolvedSize(renderable);
                            if (innerSize) {
                                var translateWithProportion = function translateWithProportion(proportion, size, translation, dimension, factor) {
                                    return translation[dimension] += size[dimension] ? factor * size[dimension] * proportion[dimension] : 0;
                                };
                                translate = [].concat(translate); //shallow copy the translation to prevent the translation for happening multiple times

                                /* If no docksize was specified in a certain direction, then use the context size without margins */
                                var outerDockSize = dockSize;

                                if (!dockSizeSpecified) {
                                    if (dockMethod === 'fill') {
                                        outerDockSize = [].concat(sizeWithoutMargins);
                                    } else {
                                        var dockingDirection = this.getDockType(dockMethod);
                                        outerDockSize[dockingDirection] = innerSize[dockingDirection];
                                        outerDockSize[+!dockingDirection] = sizeWithoutMargins[+!dockingDirection];
                                    }
                                }

                                if (origin && decorations.size) {
                                    decorations.size.forEach(function (size, dimension) {
                                        if (_this3._sizeResolver.isValueTrueSized(size)) {
                                            /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel
                                             *  to make up for this.
                                             */
                                            translate[dimension] += 1;
                                        }
                                    });
                                }
                                if (align) {
                                    translateWithProportion(align, outerDockSize, translate, 0, 1);
                                    translateWithProportion(align, outerDockSize, translate, 1, 1);
                                }
                            }
                        }
                        for (var i = 0; i < 2; i++) {
                            if (dockSize[i] == true) {
                                /* If a true size is used, do a tilde on it in order for the dockhelper to recognize it as true-sized */
                                dockSize[i] = ~inUseDockSize[i];
                            }
                        }
                        /* If the renderable is unrenderable due to zero height/width...*/
                        if (inUseDockSize[0] === 0 || inUseDockSize[1] === 0) {
                            /* Don't display the space if the size is 0*/
                            space = 0;
                        }
                        return { dockSize: dockSize, translate: translate, innerSize: innerSize, inUseDockSize: inUseDockSize, space: space };
                    }
                }, {
                    key: 'getDockType',
                    value: function getDockType(dockMethodToGet) {
                        var dockTypes = [['right', 'left'], ['top', 'bottom']];
                        return _.findIndex(dockTypes, function (dockMethods) {
                            return ~dockMethods.indexOf(dockMethodToGet);
                        });
                    }

                    /**
                     * Calculates the bounding box size for all the renderables passed to the function
                     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.
                     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.
                     * @param {Object} ownDecorators The decorators that are applied to the view.
                     * @returns {Array|Number} The bounding box size of all the renderables
                     */

                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize(dockedRenderables, filledRenderables, ownDecorations) {
                        var _this4 = this;

                        var fillSize = [undefined, undefined];
                        if (filledRenderables) {
                            /* We support having multiple fills */
                            fillSize = filledRenderables.reduce(function (resultingSize, _ref3, renderableName) {
                                var _ref4 = _slicedToArray(_ref3, 2);

                                var filledRenderable = _ref4[0];
                                var renderableCounterpart = _ref4[1];

                                _this4._sizeResolver.settleDecoratedSize(filledRenderable, renderableCounterpart, { size: [NaN, NaN] }, filledRenderable.decorations.size);
                                var resolvedSize = _this4._sizeResolver.getResolvedSize(filledRenderable);
                                if (resolvedSize) {
                                    for (var _iterator3 = resolvedSize.entries(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                                        var _ref5;

                                        if (_isArray3) {
                                            if (_i3 >= _iterator3.length) break;
                                            _ref5 = _iterator3[_i3++];
                                        } else {
                                            _i3 = _iterator3.next();
                                            if (_i3.done) break;
                                            _ref5 = _i3.value;
                                        }

                                        var _ref6 = _ref5;

                                        var _ref7 = _slicedToArray(_ref6, 2);

                                        var dimension = _ref7[0];
                                        var singleSize = _ref7[1];

                                        if (singleSize !== undefined && (resultingSize[dimension] === undefined || resultingSize[dimension] < singleSize)) {
                                            resultingSize[dimension] = singleSize;
                                        }
                                    }
                                }
                                return resultingSize;
                            }, [undefined, undefined]);
                        }
                        var dockSize = [].concat(fillSize);
                        if (dockedRenderables) {
                            dockSize = this._getDockedRenderablesBoundingBox(dockedRenderables);
                            if (fillSize) {
                                for (var _iterator4 = fillSize.entries(), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                    var _ref8;

                                    if (_isArray4) {
                                        if (_i4 >= _iterator4.length) break;
                                        _ref8 = _iterator4[_i4++];
                                    } else {
                                        _i4 = _iterator4.next();
                                        if (_i4.done) break;
                                        _ref8 = _i4.value;
                                    }

                                    var _ref9 = _ref8;

                                    var _ref10 = _slicedToArray(_ref9, 2);

                                    var dimension = _ref10[0];
                                    var singleFillSize = _ref10[1];

                                    if (singleFillSize !== undefined) {
                                        if (dockSize[dimension] === undefined) {
                                            dockSize[dimension] = singleFillSize;
                                        } else {
                                            dockSize[dimension] += singleFillSize;
                                        }
                                    }
                                }
                            }
                        }

                        for (var i = 0; i < 2; i++) {
                            if (Number.isNaN(dockSize[i])) {
                                dockSize[i] = undefined;
                            }
                            if (dockSize[i] !== undefined && ownDecorations.viewMargins) {
                                var viewMargins = ownDecorations.viewMargins;
                                /* if i==0 we want margin left and right, if i==1 we want margin top and bottom */

                                dockSize[i] += viewMargins[(i + 1) % 4] + viewMargins[(i + 3) % 4];
                            }
                        }
                        return dockSize;
                    }
                }, {
                    key: '_getDockedRenderablesBoundingBox',
                    value: function _getDockedRenderablesBoundingBox(dockedRenderables) {
                        var _this5 = this;

                        var dockMethod = dockedRenderables.get(dockedRenderables.keyAt(0))[0].decorations.dock.dockMethod;
                        /* Gets the dock type where, 0 is right or left (horizontal) and 1 is top or bottom (vertical) */

                        var dockType = this.getDockType(dockMethod);
                        var dockingDirection = dockType;
                        var orthogonalDirection = !dockType + 0;

                        /* Previously countered dock size for docking direction and opposite docking direction */
                        var previousDockSize = 0;
                        /* Add up the different sizes to if they are docked all in the same direction */
                        return dockedRenderables.reduce(function (result, _ref11, renderableName) {
                            var _ref12 = _slicedToArray(_ref11, 2);

                            var dockedRenderable = _ref12[0];
                            var renderableCounterpart = _ref12[1];
                            var decorations = dockedRenderable.decorations;
                            var otherDockMethod = decorations.dock.dockMethod;
                            /* If docking is done orthogonally */

                            if (_this5.getDockType(otherDockMethod) !== dockType) {
                                return [NaN, NaN];
                            } else {
                                /* Resolve both inner size and outer size */
                                _this5._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.dock.size);
                                var resolvedOuterSize = _this5._sizeResolver.getResolvedSize(dockedRenderable);

                                var resolvedInnerSize = [undefined, undefined];
                                if (dockedRenderable.decorations.size) {
                                    _this5._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.size);
                                    resolvedInnerSize = _this5._sizeResolver.getResolvedSize(dockedRenderable);
                                }

                                if (!resolvedOuterSize || !resolvedInnerSize) {
                                    return [NaN, NaN];
                                }
                                var resolvedSize = [resolvedOuterSize[0] === undefined ? resolvedInnerSize[0] : resolvedOuterSize[0], resolvedOuterSize[1] === undefined ? resolvedInnerSize[1] : resolvedOuterSize[1]];
                                var newResult = new Array(2);
                                /* If docking is done from opposite directions */
                                var dockingFromOpposite = dockMethod !== otherDockMethod;
                                if (dockingFromOpposite) {
                                    newResult[dockingDirection] = NaN;
                                } else {
                                    /* If this or the previous renderable size is 0, don't add the space */
                                    var spaceSize = resolvedSize[dockingDirection] === 0 || previousDockSize === 0 ? 0 : decorations.dock.space;
                                    newResult[dockingDirection] = resolvedSize[dockingDirection] + spaceSize + result[dockingDirection];
                                    previousDockSize = resolvedSize[dockingDirection];
                                }
                                /* If a size in the orthogonalDirection has been set... */
                                if (resolvedSize[orthogonalDirection] !== undefined && !Number.isNaN(resolvedSize[orthogonalDirection])) {
                                    /* If there is no result in the orthogonal direction specified yet... */
                                    if (result[orthogonalDirection] === undefined) {
                                        newResult[orthogonalDirection] = resolvedSize[orthogonalDirection];
                                    } else {
                                        /* get the max bounding box for the specified orthogonal direction */
                                        newResult[orthogonalDirection] = Math.max(result[orthogonalDirection], resolvedSize[orthogonalDirection]);
                                    }
                                } else {
                                    newResult[orthogonalDirection] = result[orthogonalDirection];
                                }
                                return newResult;
                            }
                        }, dockingDirection ? [undefined, 0] : [0, undefined]);
                    }
                }]);

                return DockedLayoutHelper;
            }(BaseLayoutHelper);

            FullSizeLayoutHelper = function (_BaseLayoutHelper2) {
                _inherits(FullSizeLayoutHelper, _BaseLayoutHelper2);

                function FullSizeLayoutHelper() {
                    _classCallCheck(this, FullSizeLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(FullSizeLayoutHelper).apply(this, arguments));
                }

                _createClass(FullSizeLayoutHelper, [{
                    key: 'layout',

                    /**
                     * Layouts full size renderables
                     * @param {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the full size renderables.
                     * @param {Object} context The famous-flex context with a valid size property
                     * @param {Object} ownDecorations. The decorators that are applied to the view.
                     */
                    value: function layout(fullScreenRenderables, context, ownDecorations) {
                        var extraTranslate = ownDecorations.extraTranslate;

                        var names = fullScreenRenderables ? fullScreenRenderables.keys() : [];
                        for (var _iterator5 = names, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref13;

                            if (_isArray5) {
                                if (_i5 >= _iterator5.length) break;
                                _ref13 = _iterator5[_i5++];
                            } else {
                                _i5 = _iterator5.next();
                                if (_i5.done) break;
                                _ref13 = _i5.value;
                            }

                            var renderableName = _ref13;

                            var _fullScreenRenderable = fullScreenRenderables.get(renderableName);

                            var _fullScreenRenderable2 = _slicedToArray(_fullScreenRenderable, 1);

                            var renderable = _fullScreenRenderable2[0];

                            var _getRenderableFlowInf3 = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf3.callback;
                            var transition = _getRenderableFlowInf3.transition;

                            var translate = Utils.addTranslations(extraTranslate, renderable.decorations.translate || [0, 0, 0]);
                            context.set(renderableName, {
                                translate: translate,
                                size: context.size,
                                opacity: renderable.decorations.opacity === undefined ? 1 : renderable.decorations.opacity,
                                callback: callback,
                                transition: transition
                            });
                        }
                    }
                }]);

                return FullSizeLayoutHelper;
            }(BaseLayoutHelper);

            TraditionalLayoutHelper = function (_BaseLayoutHelper3) {
                _inherits(TraditionalLayoutHelper, _BaseLayoutHelper3);

                function TraditionalLayoutHelper() {
                    _classCallCheck(this, TraditionalLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(TraditionalLayoutHelper).apply(this, arguments));
                }

                _createClass(TraditionalLayoutHelper, [{
                    key: 'layout',
                    value: function layout(traditionalRenderables, context, ownDecorations) {
                        var names = traditionalRenderables ? traditionalRenderables.keys() : [];
                        for (var _iterator6 = names, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
                            var _ref14;

                            if (_isArray6) {
                                if (_i6 >= _iterator6.length) break;
                                _ref14 = _iterator6[_i6++];
                            } else {
                                _i6 = _iterator6.next();
                                if (_i6.done) break;
                                _ref14 = _i6.value;
                            }

                            var renderableName = _ref14;

                            var _traditionalRenderabl = traditionalRenderables.get(renderableName);

                            var _traditionalRenderabl2 = _slicedToArray(_traditionalRenderabl, 2);

                            var renderable = _traditionalRenderabl2[0];
                            var renderableCounterpart = _traditionalRenderabl2[1];

                            var renderableSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, context, renderable.decorations.size) || [undefined, undefined];
                            var _renderable$decoratio2 = renderable.decorations;
                            var _renderable$decoratio3 = _renderable$decoratio2.translate;
                            var translate = _renderable$decoratio3 === undefined ? [0, 0, 0] : _renderable$decoratio3;
                            var _renderable$decoratio4 = _renderable$decoratio2.origin;
                            var origin = _renderable$decoratio4 === undefined ? [0, 0] : _renderable$decoratio4;
                            var align = _renderable$decoratio2.align;
                            var rotate = _renderable$decoratio2.rotate;
                            var _renderable$decoratio5 = _renderable$decoratio2.opacity;
                            var opacity = _renderable$decoratio5 === undefined ? 1 : _renderable$decoratio5;
                            var scale = _renderable$decoratio2.scale;
                            var skew = _renderable$decoratio2.skew;

                            translate = Utils.addTranslations(ownDecorations.extraTranslate, translate);

                            var _getRenderableFlowInf4 = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf4.callback;
                            var transition = _getRenderableFlowInf4.transition;

                            var adjustedTranslation = Utils.adjustPlacementForTrueSize(renderable, renderableSize, origin, translate, this._sizeResolver);
                            context.set(renderableName, {
                                size: renderableSize,
                                translate: adjustedTranslation,
                                origin: origin,
                                scale: scale,
                                skew: skew,
                                align: align,
                                callback: callback,
                                transition: transition,
                                rotate: rotate,
                                opacity: opacity
                            });
                        }
                    }
                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize(traditionalRenderables) {
                        var renderableNames = traditionalRenderables ? traditionalRenderables.keys() : [];
                        var totalSize = [undefined, undefined];
                        for (var _iterator7 = renderableNames, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
                            var _ref15;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref15 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref15 = _i7.value;
                            }

                            var renderableName = _ref15;

                            var _traditionalRenderabl3 = traditionalRenderables.get(renderableName);

                            var _traditionalRenderabl4 = _slicedToArray(_traditionalRenderabl3, 2);

                            var renderable = _traditionalRenderabl4[0];
                            var renderableCounterpart = _traditionalRenderabl4[1];

                            this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: [NaN, NaN] }, renderable.decorations.size);
                            var size = this._sizeResolver.getResolvedSize(renderable);

                            /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */
                            if (!size && renderable.decorations) {
                                var decoratedSize = renderable.decorations.size;
                                var isValidSize = function isValidSize(inputSize) {
                                    return typeof inputSize == 'number' && inputSize > 0;
                                };
                                if (decoratedSize && decoratedSize.every(isValidSize)) {
                                    size = decoratedSize;
                                }
                            }
                            if (!size) {
                                continue;
                            }
                            var renderableSpec = void 0;
                            renderableSpec = renderable.decorations;
                            var _renderableSpec = renderableSpec;
                            var _renderableSpec$align = _renderableSpec.align;
                            var align = _renderableSpec$align === undefined ? [0, 0] : _renderableSpec$align;

                            var translate = Utils.adjustPlacementForTrueSize(renderable, size, renderableSpec.origin || [0, 0], renderableSpec.translate || [0, 0, 0]);

                            /* If there has been an align specified, then nothing can be calculated */
                            if (!renderableSpec || !renderableSpec.size || align[0] && align[1]) {
                                continue;
                            }

                            /* If the renderable has a lower min y/x position, or a higher max y/x position, save its values */
                            for (var i = 0; i < 2; i++) {
                                /* Undefined is the same as context size */
                                if (renderable.decorations.size[i] !== undefined && size[i] !== undefined && !(align && align[i])) {
                                    var newPotentialOuterSize = translate[i] + size[i];
                                    if (newPotentialOuterSize > totalSize[i] || totalSize[i] === undefined) {
                                        totalSize[i] = newPotentialOuterSize;
                                    }
                                }
                            }
                        }
                        return totalSize;
                    }
                }]);

                return TraditionalLayoutHelper;
            }(BaseLayoutHelper);

            Throttler = function () {
                /**
                 *
                 * @param {Number} throttleDelay Minimum amount of time in between each action executed by the Throttler, in milliseconds or ticks.
                 * @param {Boolean} shouldQueue Enable if each added action should be executed consecutively, or disable if a newly
                 * added action should replace a previous one.
                 * @param {Object} actionContext Context to which the actions executed by the Throttler will be bound.
                 * @param {Boolean} useTicks whether ticks should be used instead of milliseconds
                 * @returns {Throttler} Throttler instance.
                 */

                function Throttler() {
                    var throttleDelay = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
                    var shouldQueue = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                    var actionContext = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];
                    var useTicks = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

                    _classCallCheck(this, Throttler);

                    this.delay = throttleDelay;
                    this._useTicks = useTicks;
                    this._timerFunction = useTicks ? Timer.every : Timer.setInterval;
                    this.timer = null;
                    this.shouldQueue = shouldQueue;
                    this.actionContext = actionContext;

                    this.queue = [];
                    this.executionTimer = null;

                    ObjectHelper.bindAllMethods(this, this);
                }

                /**
                 * Adds an executable action to the queue that will be executed consecutively by the Throttler.
                 * If Throttler was constructed with shouldQueue = false, adding a new action will remove the old one.
                 * @param {Function} action Function to execute.
                 * @returns {void}
                 */

                _createClass(Throttler, [{
                    key: 'add',
                    value: function add(action) {
                        /* If we're not queueing, clear the previous action if present. The new action will replace the old one. */
                        if (!this.shouldQueue) {
                            this.queue.pop();
                        }

                        this.queue.push(action);
                        if (!this.timer) {
                            this.timer = this._timerFunction(this._executeTopAction, this.delay);
                        }
                    }

                    /**
                     * Clears the Throttler's timer if it is set.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_clearTimer',
                    value: function _clearTimer() {
                        Timer.clear(this.timer);
                        this.timer = null;
                    }

                    /**
                     * Removes the top action from the Throttler's queue if any is present, and executes it with the correct binding context.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeTopAction',
                    value: function _executeTopAction() {
                        var action = this.queue.shift();
                        if (action && typeof action === 'function') {
                            action.call(this.actionContext);
                        }
                        if (!this.queue.length) {
                            this._clearTimer();
                        }
                    }
                }]);

                return Throttler;
            }();

            RenderableHelper = function () {

                /**
                 * Creates a utility for maintaining proper state of decorated renderables
                 * @param {Function} bindMethod
                 * @param {Function} pipeMethod
                 * @param {Object|Renderable} outputRenderables
                 * @param sizeResolver
                 */

                function RenderableHelper(bindMethod, pipeMethod, outputRenderables, sizeResolver) {
                    _classCallCheck(this, RenderableHelper);

                    this._bindMethod = bindMethod;
                    this._renderableCounterparts = outputRenderables;
                    this._sizeResolver = sizeResolver;
                    this._pipeToView = pipeMethod;
                    this.waitingAnimations = [];
                    this._renderables = {};
                    this._groupedRenderables = {};
                    this._pipedRenderables = {};
                    this._groupedRenderables = {};
                    this._runningFlowStates = {};
                }

                _createClass(RenderableHelper, [{
                    key: 'assignRenderable',
                    value: function assignRenderable(renderable, renderableName) {
                        this._renderables[renderableName] = renderable;
                        var renderableEquivalent = this._addDecoratedRenderable(renderable, renderableName);
                        this._renderableCounterparts[renderableName] = renderableEquivalent;
                        this._setupAllRenderableListeners(renderableName);
                    }

                    /**
                     * Setups all renderable listeners (decoration events, decoration pipes, pipe to the view)
                     * @param {String} renderableName the name of the renderable
                     * @param {Boolean} enabled set to false to unset all the events
                     * @private
                     */

                }, {
                    key: '_setupAllRenderableListeners',
                    value: function _setupAllRenderableListeners(renderableName) {
                        var enabled = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        /* If the this._renderableCounterparts equivalent doesn't have the pipe function as is the case with the draggable, then use the regular renderable */
                        var renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName);
                        if (enabled) {
                            this._pipeRenderable(renderableOrEquivalent, renderableName);
                        } else {
                            this._unpipeRenderable(renderableOrEquivalent, renderableName);
                        }
                        var decorations = this._renderables[renderableName].decorations;

                        if (decorations) {
                            this._setDecorationPipes(renderableOrEquivalent, decorations.pipes, enabled);
                            this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions, enabled);
                        }
                    }

                    /**
                     * Sets the decoration events that are specified with (among potential others) @layout.on and @layout.once
                     * @param {String} renderableName
                     * @param enable. If false, removes the events.
                     * @private
                     */

                }, {
                    key: '_setDecorationEvents',
                    value: function _setDecorationEvents(renderable, subscriptions) {
                        var enable = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

                        for (var _iterator = subscriptions || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var subscription = _ref;

                            var subscriptionType = subscription.type || 'on';
                            if (!enable) {
                                /* In famous, you remove a listener by calling removeListener, but some classes might have another event
                                 * listener that is called off
                                 */
                                subscriptionType = renderable.removeListener ? 'removeListener' : 'off';
                            }
                            var eventName = subscription.eventName;
                            var callback = subscription.callback;
                            if (subscriptionType in renderable) {
                                renderable[subscriptionType](eventName, this._bindMethod(callback));
                            }
                        }
                    }

                    /**
                     * Pipes the renderable to a list of other renderables
                     * @param {Renderable} renderable
                     * @param {Array|String} Names of renderables that have to be piped.
                     * @param {Boolean} enabled. Set to false to unpipe
                     * @private
                     */

                }, {
                    key: '_setDecorationPipes',
                    value: function _setDecorationPipes(renderable, pipes) {
                        var enabled = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

                        for (var _iterator2 = pipes || [], _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var pipeToName = _ref2;

                            var target = pipeToName ? this._renderables[pipeToName] : this;
                            var pipeFn = (enabled ? '' : 'un') + 'pipe';
                            /* In order to keep things consistent and easier to use, we pipe from the renderable equivalent */
                            if (renderable[pipeFn]) {
                                renderable[pipeFn](target);
                            }
                            if (renderable[pipeFn] && target._eventOutput) {
                                renderable[pipeFn](target._eventOutput);
                            }
                        }
                    }

                    /**
                     * Unpipes a renderables that has been piped to this view
                     * @param {String} renderableName The name of the renderable
                     * @private
                     */

                }, {
                    key: '_unpipeRenderable',
                    value: function _unpipeRenderable(renderableName) {
                        if (this._pipeToView(this._pipedRenderables[renderableName]), false) {
                            delete this._pipedRenderables[renderableName];
                        }
                    }

                    /**
                     * Pipes a renderable to this view
                     * @param {Renderable} renderable. The renderable that is going to be piped
                     * @param {String} renderableName. The name of the renderable that is going to be piped.
                     * @private
                     */

                }, {
                    key: '_pipeRenderable',
                    value: function _pipeRenderable(renderable, renderableName) {
                        /* Auto pipe events from the renderable to the view */
                        if (this._pipeToView(renderable, true)) {
                            this._pipedRenderables[renderableName] = renderable;
                        }
                    }

                    /**
                     * Determines whether the renderable counterpart (i.e. animationcontroller or containersurface) should be used 
                     * when piping, or the renderable itself
                     * @param {String} renderableName The name of the renderable
                     * @returns {Renderable} the renderable or its counterpart
                     * @private
                     */

                }, {
                    key: '_getPipeableRenderableFromName',
                    value: function _getPipeableRenderableFromName(renderableName) {
                        return this._renderableCounterparts[renderableName].pipe ? this._renderableCounterparts[renderableName] : this._renderables[renderableName];
                    }

                    /**
                     * Adds a decorated renderable to the bookkeeping of the view
                     * @param renderable
                     * @param renderableName
                     * @returns {Renderable} newRenderable The renderable that is normally stored this._renderableCounterpart[renderableName]
                     * @private
                     */

                }, {
                    key: '_addDecoratedRenderable',
                    value: function _addDecoratedRenderable(renderable, renderableName) {
                        var _renderable$decoratio = renderable.decorations;
                        var flow = _renderable$decoratio.flow;
                        var size = _renderable$decoratio.size;
                        var dock = _renderable$decoratio.dock;

                        if (size) {
                            this._bindSizeFunctions(size);
                        }
                        if (dock && dock.size) {
                            this._bindSizeFunctions(dock.size);
                        }
                        var renderableCounterpart = this._processsDecoratedRenderableCounterpart(renderable, renderableName);

                        this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName);
                        return renderableCounterpart;
                    }

                    /**
                     * Bind the size functions so that they don't have to be bound afterwards
                     * @param {Array|Number} size
                     * @private
                     */

                }, {
                    key: '_bindSizeFunctions',
                    value: function _bindSizeFunctions(size) {
                        for (var index = 0; index < 2; index++) {
                            if (typeof size[index] === 'function') {
                                size[index] = this._bindMethod(size[index]);
                            }
                        }
                    }

                    /**
                     * Returns true if there are any flowy renderables.
                     * @returns {Boolean} hasFlowyRenderables
                     */

                }, {
                    key: 'hasFlowyRenderables',
                    value: function hasFlowyRenderables() {
                        var _this = this;

                        var _loop = function _loop(groupName) {
                            var renderableGroup = _this._groupedRenderables[groupName];
                            if (!renderableGroup.keys().every(function (renderableName) {
                                return !renderableGroup.get(renderableName)[0].decorations.flow;
                            })) {
                                return {
                                    v: true
                                };
                            }
                        };

                        for (var groupName in this._groupedRenderables) {
                            var _ret = _loop(groupName);

                            if (typeof _ret === "object") return _ret.v;
                        }
                        return false;
                    }

                    /**
                     * Processes the renderable counter-part of the renderable. The counterpart is different from the renderable
                     * in @layout.draggable, @layout.swipable, @layout.animate, and others.
                     * @param {Renderable} renderable the renderable which has renderable.decorations set to determine the counter part
                     * @param {String} renderableName the name of the renderable
                     * @returns {AnimationController|ContainerSurface|RenderNode|*} The renderable counterpart
                     * @private
                     */

                }, {
                    key: '_processsDecoratedRenderableCounterpart',
                    value: function _processsDecoratedRenderableCounterpart(renderable, renderableName) {
                        var _renderable$decoratio2 = renderable.decorations;
                        var draggableOptions = _renderable$decoratio2.draggableOptions;
                        var swipableOptions = _renderable$decoratio2.swipableOptions;
                        var clip = _renderable$decoratio2.clip;
                        var animation = _renderable$decoratio2.animation;
                        var flow = _renderable$decoratio2.flow;

                        /* If we clip, then we need to create a containerSurface */

                        if (clip) {
                            var clipSize = clip.size;
                            /* Resolve clipSize specified as undefined */
                            var containerSurface = new ContainerSurface({
                                size: clipSize,
                                properties: _extends({ overflow: 'hidden' }, clip.properties)
                            });
                            containerSurface.add(renderable);
                            if (containerSurface.pipe) {
                                containerSurface.pipe(renderable._eventOutput);
                            }
                            renderable.containerSurface = containerSurface;
                        }

                        if (animation) {
                            this._processAnimatedRenderable(renderable, renderableName, animation);
                        }

                        if (swipableOptions) {
                            renderable = this._initSwipable(swipableOptions, renderable);
                        } else if (draggableOptions && !renderable.node) {
                            renderable.node = new RenderNode();
                            var draggable = new Draggable(draggableOptions);
                            renderable.draggable = draggable;
                            renderable.node.add(draggable).add(renderable);
                            renderable.pipe(draggable);
                            //TODO: We don't do an unpiping of the draggable, which might be dangerous
                            this._pipeToView(draggable);
                        }

                        if (renderable.node) {
                            /* Assign output handler */
                            renderable.node._eventOutput = renderable._eventOutput;
                        }

                        var renderableCounterpart = renderable.animationController || renderable.containerSurface || renderable.node || renderable;
                        /* If a renderable has an AnimationController used to animate it, add that to this._renderableCounterparts.
                         * If a renderable has an ContainerSurface used to clip it, add that to this._renderableCounterparts.
                         * this._renderableCounterparts is used in the LayoutController in this.layout to render this view. */
                        if (flow) {
                            renderableCounterpart.isFlowy = true;
                        }
                        return renderableCounterpart;
                    }

                    /**
                     * Pipes the output events of all items in the renderable counterparts that might have been forgotten due to legacy way of declaring
                     * renderables
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: 'pipeAllRenderables',
                    value: function pipeAllRenderables() {
                        for (var renderableName in this.renderables) {
                            if (!this._pipedRenderables[renderableName]) {
                                this._pipeRenderable(this._getPipeableRenderableFromName(renderableName), renderableName);
                            }
                        }
                    }

                    /**
                     * Initialize all animation set by @layout.animate
                     */

                }, {
                    key: 'initializeAnimations',
                    value: function initializeAnimations() {
                        var _this2 = this;

                        var _loop2 = function _loop2() {
                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) return 'break';
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) return 'break';
                                _ref3 = _i3.value;
                            }

                            var animation = _ref3;

                            var renderableToWaitFor = _this2._renderables[animation.waitFor];
                            if (renderableToWaitFor && renderableToWaitFor.on) {
                                renderableToWaitFor.on('shown', function subscription() {
                                    animation.showMethod();
                                    if ('off' in renderableToWaitFor) {
                                        renderableToWaitFor.off('shown', subscription);
                                    }
                                    if ('removeListener' in renderableToWaitFor) {
                                        renderableToWaitFor.removeListener('shown', subscription);
                                    }
                                });
                            } else {
                                Utils.warn('Attempted to delay showing renderable ' + animation.waitFor + ', which does not exist or contain an on() method.');
                            }
                        };

                        for (var _iterator3 = this.waitingAnimations || [], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            var _ret2 = _loop2();

                            if (_ret2 === 'break') break;
                        }
                    }

                    //Done
                    /**
                     * Processes an animated renderable
                     * @param renderable
                     * @param renderableName
                     * @param options
                     * @private
                     */

                }, {
                    key: '_processAnimatedRenderable',
                    value: function _processAnimatedRenderable(renderable, renderableName, options) {

                        var pipeRenderable = function pipeRenderable() {
                            if (renderable.pipe) renderable.pipe(renderable.animationController._eventOutput);
                        };

                        /* If there's already an animationcontroller present, just change the options */
                        var renderableCounterpart = this._renderableCounterparts[renderableName];
                        if (renderableCounterpart instanceof AnimationController) {
                            renderable.animationController = renderableCounterpart;
                            renderable.animationController.setOptions(options);
                            pipeRenderable();
                        } else {
                            var animationController = renderable.animationController = new AnimationController(options);
                            pipeRenderable();
                            var showMethod = this.showWithAnimationController.bind(this, animationController, renderable);

                            if (options.delay && options.delay > 0 && options.showInitially) {
                                Timer.setTimeout(showMethod, options.delay);
                            } else if (options.waitFor) {
                                this.waitingAnimations.push({ showMethod: showMethod, waitFor: options.waitFor });
                            } else if (options.showInitially) {
                                showMethod();
                            }
                        }
                    }
                    //Done
                    /**
                     * Shows a renderable using the animationController specified. When operation is complete, the renderable emits
                     * the one events 'show' or 'hide', depending on what operation that was done.
                     * @param animationController
                     * @param renderable
                     * @param show
                     * @private
                     */

                }, {
                    key: 'showWithAnimationController',
                    value: function showWithAnimationController(animationController, renderable) {
                        var show = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                        var callback = arguments[3];

                        animationController._showingRenderable = show;
                        var callbackIfExists = function callbackIfExists() {
                            if (callback) {
                                callback();
                            }
                        };
                        var emitOnFinished = function emitOnFinished() {
                            if (renderable.emit) {
                                renderable.emit(show ? 'shown' : 'hidden');
                            }
                            callbackIfExists();
                        };

                        if (show) {
                            animationController.show(renderable.containerSurface || renderable, null, emitOnFinished);
                        } else {
                            animationController.hide(null, emitOnFinished);
                        }
                    }
                    //Done

                }, {
                    key: '_addRenderableToDecoratorGroup',
                    value: function _addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName) {
                        /* Group the renderable */
                        var groupName = this._getGroupName(renderable);

                        if (groupName) {
                            if (!(groupName in this._groupedRenderables)) {
                                this._groupedRenderables[groupName] = new OrderedHashMap();
                            }
                            /* We save the both the renderable and the renderable counterpart in pairs */
                            this._groupedRenderables[groupName].set(renderableName, [renderable, renderableCounterpart]);
                        }
                    }

                    //Done

                }, {
                    key: '_getGroupName',
                    value: function _getGroupName(renderable) {
                        var decorations = renderable.decorations;

                        if (!!decorations.dock) {
                            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */
                            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';
                        } else if (!!decorations.fullSize) {
                            return 'fullSize';
                        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {
                            return 'traditional';
                        } else {
                            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */
                            return 'ignored';
                        }
                    }

                    /**
                     * Gets the renderables of a certain group
                     * @param {String} The name of the group
                     * @returns {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the renderables of the specified type.
                     */

                }, {
                    key: 'getRenderableGroup',
                    value: function getRenderableGroup(groupName) {
                        return this._groupedRenderables[groupName];
                    }
                    //Done
                    /**
                     * Removes the renderable from the view
                     * @param {String} renderableName The name of the renderable
                     */

                }, {
                    key: 'removeRenderable',
                    value: function removeRenderable(renderableName) {
                        var renderable = this._renderables[renderableName];
                        this._setDecorationPipes(renderableName, false);
                        this._setDecorationEvents(renderableName, false);
                        this._unpipeRenderable(renderableName, renderableName);
                        this._removeRenderableFromDecoratorGroup(renderable, renderableName);
                        delete this._renderableCounterparts[renderableName];
                        delete this._renderables[renderableName];
                    }
                    //Done

                }, {
                    key: '_removeRenderableFromDecoratorGroup',
                    value: function _removeRenderableFromDecoratorGroup(renderable, renderableName) {
                        var groupName = this._getGroupName(renderable);
                        this._removeRenderableFromGroupWithName(renderableName, groupName);
                    }
                    //Done

                }, {
                    key: '_removeRenderableFromGroupWithName',
                    value: function _removeRenderableFromGroupWithName(renderableName, groupName) {
                        var group = this._groupedRenderables[groupName];
                        group.remove(renderableName);
                        if (!group.count()) {
                            delete this._groupedRenderables[groupName];
                        }
                    }
                    //done
                    /**
                     * @example
                     * decorateRenderable('myRenderable',layout.size(100, 100));
                     *
                     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.
                     * @param {String} renderableName The name of the renderable
                     * @param ...decorators The decorators that should be applied
                     */

                }, {
                    key: 'decorateRenderable',
                    value: function decorateRenderable(renderableName) {
                        var renderable = this._renderables[renderableName];
                        /* Add translate and rotate to be sure that there decorators translateFrom and rotateFrom work */
                        var fakeRenderable = {
                            decorations: {
                                translate: renderable.decorations.translate || [0, 0, 0],
                                rotate: renderable.decorations.rotate || [0, 0, 0]
                            }
                        };

                        for (var _len = arguments.length, decorators = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            decorators[_key - 1] = arguments[_key];
                        }

                        if (!decorators.length) {
                            Utils.warn('No decorators specified to decorateRenderable(renderableName, ...decorators)');
                        }
                        /* There can be existing decorators already, which are preserved. We are extending the decorators object,
                         * by first creating a fake renderable that gets decorators */
                        this.applyDecoratorFunctionsToRenderable(fakeRenderable, decorators);
                        var decorations = fakeRenderable.decorations;

                        var renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName);
                        /* We might need to do extra piping */
                        this._setDecorationPipes(renderableOrEquivalent, decorations.pipes);
                        this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions);

                        /* If the renderable is surface, we need to do some special things if there is a true size being used */
                        if (Utils.renderableIsSurface(renderable)) {
                            var sizesToCheck = [];
                            var size = decorations.size;
                            var dock = decorations.dock;

                            if (size) {
                                sizesToCheck.push(size);
                            }
                            if (dock) {
                                sizesToCheck.push(dock.size);
                            }
                            var renderableSize = [undefined, undefined];
                            var trueSizedInfo = this._sizeResolver.getSurfaceTrueSizedInfo(renderable);
                            for (var _iterator4 = sizesToCheck, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                var _ref4;

                                if (_isArray4) {
                                    if (_i4 >= _iterator4.length) break;
                                    _ref4 = _iterator4[_i4++];
                                } else {
                                    _i4 = _iterator4.next();
                                    if (_i4.done) break;
                                    _ref4 = _i4.value;
                                }

                                var sizeToCheck = _ref4;
                                var _arr = [0, 1];

                                for (var _i5 = 0; _i5 < _arr.length; _i5++) {
                                    var dimension = _arr[_i5];
                                    if (this._sizeResolver.isValueTrueSized(sizeToCheck[dimension])) {
                                        if (!trueSizedInfo) {
                                            trueSizedInfo = this._sizeResolver.configureTrueSizedSurface(renderable);
                                        }
                                        trueSizedInfo.trueSizedDimensions[dimension] = true;
                                        renderableSize[dimension] = true;
                                    } else {
                                        if (trueSizedInfo) {
                                            trueSizedInfo.trueSizedDimensions[dimension] = false;
                                        }
                                    }
                                }
                            }
                            if (sizesToCheck.length) {
                                renderable.setSize(renderableSize);
                            }
                        }
                        var oldRenderableGroupName = this._getGroupName(renderable);
                        var shouldDisableDock = fakeRenderable.decorations.disableDock && renderable.decorations.dock;
                        var shouldDisableFullSize = fakeRenderable.decorations.size && renderable.decorations.fullSize;
                        if (shouldDisableDock) {
                            delete renderable.decorations.dock;
                        }
                        if (shouldDisableFullSize) {
                            delete renderable.decorations.fullSize;
                        }
                        /* Extend the object */
                        Object.assign(renderable.decorations, fakeRenderable.decorations);
                        /* See if we have to redo the grouping */
                        var needToChangeDecoratorGroup = oldRenderableGroupName !== this._getGroupName(renderable) || shouldDisableDock || shouldDisableFullSize;
                        /* Process new renderable equivalent, if that applies */
                        var renderableCounterpart = this._renderableCounterparts[renderableName] = this._processsDecoratedRenderableCounterpart(renderable, renderableName);
                        if (needToChangeDecoratorGroup) {
                            this._removeRenderableFromGroupWithName(renderableName, oldRenderableGroupName);
                            this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName);
                        }
                    }
                    //done

                }, {
                    key: 'applyDecoratorFunctionsToRenderable',
                    value: function applyDecoratorFunctionsToRenderable(renderable, decorators) {
                        for (var _iterator5 = decorators, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref5;

                            if (_isArray5) {
                                if (_i6 >= _iterator5.length) break;
                                _ref5 = _iterator5[_i6++];
                            } else {
                                _i6 = _iterator5.next();
                                if (_i6.done) break;
                                _ref5 = _i6.value;
                            }

                            var decorator = _ref5;

                            /* There can be existing decorators already, which are preserved. We are extending the decorators object,
                             * by first creating a fake renderable that gets decorators */
                            decorator(renderable);
                        }
                    }
                    //Done

                }, {
                    key: 'replaceRenderable',
                    value: function replaceRenderable(renderableName, newRenderable) {
                        var renderable = this._renderables[renderableName];
                        var renderableHasAnimationController = this._renderableCounterparts[renderableName] instanceof AnimationController;
                        /* If there isn't a renderable equivalent animationController that does the piping, then we need to redo the event piping */
                        if (!renderableHasAnimationController) {
                            this._setupAllRenderableListeners(renderableName, false);
                        }
                        newRenderable.decorations = _extends({}, newRenderable.decorations, renderable.decorations);
                        var newRenderableCounterpart = this._processsDecoratedRenderableCounterpart(newRenderable, renderableName);
                        this._groupedRenderables[this._getGroupName(renderable)].set(renderableName, [newRenderable, newRenderableCounterpart]);
                        if (!renderableHasAnimationController) {
                            this._renderableCounterparts[renderableName] = newRenderableCounterpart;
                            this._setupAllRenderableListeners(renderableName, true);
                        }
                        this._renderables[renderableName] = newRenderable;
                    }

                    //Done

                }, {
                    key: 'setRenderableFlowState',
                    value: function () {
                        var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
                            var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

                            var renderable, flowOptions, flowWasInterrupted, _iterator6, _isArray6, _i7, _ref6, _ref7, transformations, options, resolveData, emit;

                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            renderable = this._renderables[renderableName];

                                            if (!(!renderable || !renderable.decorations || !renderable.decorations.flow)) {
                                                _context.next = 3;
                                                break;
                                            }

                                            return _context.abrupt('return', Utils.warn('setRenderableFlowState called on non-existing or renderable \'' + renderableName + '\' without flowstate'));

                                        case 3:
                                            flowOptions = renderable.decorations.flow;

                                            /* Keep track of which flow state changes are running. We only allow one at a time per renderable.
                                             * The latest one is always the valid one.
                                             */

                                            flowWasInterrupted = false;

                                            flowOptions.currentState = stateName;
                                            _iterator6 = flowOptions.states[stateName].steps, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();

                                        case 7:
                                            if (!_isArray6) {
                                                _context.next = 13;
                                                break;
                                            }

                                            if (!(_i7 >= _iterator6.length)) {
                                                _context.next = 10;
                                                break;
                                            }

                                            return _context.abrupt('break', 36);

                                        case 10:
                                            _ref6 = _iterator6[_i7++];
                                            _context.next = 17;
                                            break;

                                        case 13:
                                            _i7 = _iterator6.next();

                                            if (!_i7.done) {
                                                _context.next = 16;
                                                break;
                                            }

                                            return _context.abrupt('break', 36);

                                        case 16:
                                            _ref6 = _i7.value;

                                        case 17:
                                            _ref7 = _ref6;
                                            transformations = _ref7.transformations;
                                            options = _ref7.options;

                                            flowOptions.currentTransition = options.transition;
                                            this.decorateRenderable.apply(this, [renderableName].concat(transformations));

                                            /* Make sure FlowLayoutNode.set() is called next render tick */
                                            this._sizeResolver.requestReflow();

                                            /* Set the callback of the renderable so it's passed to the flowLayoutNode */
                                            _context.next = 25;
                                            return new Promise(function (resolve) {
                                                return renderable.decorations.flow.callback = resolve;
                                            });

                                        case 25:
                                            resolveData = _context.sent;

                                            if (!options.delay) {
                                                _context.next = 29;
                                                break;
                                            }

                                            _context.next = 29;
                                            return waitMilliseconds(options.delay);

                                        case 29:
                                            if (!(resolveData.reason === 'flowInterrupted')) {
                                                _context.next = 32;
                                                break;
                                            }

                                            flowWasInterrupted = true;
                                            return _context.abrupt('break', 36);

                                        case 32:
                                            emit = (renderable._eventOutput && renderable._eventOutput.emit || renderable.emit).bind(renderable._eventOutput || renderable);

                                            emit('flowStep', { state: stateName });

                                        case 34:
                                            _context.next = 7;
                                            break;

                                        case 36:
                                            return _context.abrupt('return', !flowWasInterrupted);

                                        case 37:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function setRenderableFlowState(_x5, _x6) {
                            return ref.apply(this, arguments);
                        }

                        return setRenderableFlowState;
                    }()
                    //Done

                }, {
                    key: 'setViewFlowState',
                    value: function () {
                        var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
                            var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var flowOptions = arguments[1];

                            var steps, _iterator7, _isArray7, _i8, _ref8, step;

                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            steps = flowOptions.viewStates[stateName];

                                            /* This is intended to be overwritten by other asynchronous calls to this method, see the stateName check below. */

                                            flowOptions.currentState = stateName;

                                            _iterator7 = steps, _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();

                                        case 3:
                                            if (!_isArray7) {
                                                _context2.next = 9;
                                                break;
                                            }

                                            if (!(_i8 >= _iterator7.length)) {
                                                _context2.next = 6;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 6:
                                            _ref8 = _iterator7[_i8++];
                                            _context2.next = 13;
                                            break;

                                        case 9:
                                            _i8 = _iterator7.next();

                                            if (!_i8.done) {
                                                _context2.next = 12;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 12:
                                            _ref8 = _i8.value;

                                        case 13:
                                            step = _ref8;
                                            _context2.next = 16;
                                            return Promise.all(this.generateWaitQueueFromViewStateStep(step));

                                        case 16:
                                            if (!(flowOptions.currentState !== stateName)) {
                                                _context2.next = 18;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 18:
                                            _context2.next = 3;
                                            break;

                                        case 20:
                                            return _context2.abrupt('return', true);

                                        case 21:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        }));

                        function setViewFlowState(_x9, _x10) {
                            return ref.apply(this, arguments);
                        }

                        return setViewFlowState;
                    }()
                }, {
                    key: 'generateWaitQueueFromViewStateStep',
                    value: function generateWaitQueueFromViewStateStep(step) {
                        var waitQueue = [];
                        for (var renderableName in step) {
                            var state = step[renderableName];
                            waitQueue.push(this.setRenderableFlowState(renderableName, state));
                        }
                        return waitQueue;
                    }
                }, {
                    key: 'getRenderableFlowState',
                    value: function getRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        var renderable = this._renderables[renderableName];
                        if (!renderable || !renderable.decorations || !renderable.decorations.flow) {
                            return Utils.warn('getRenderableFlowState called on non-existing or renderable \'' + renderableName + '\' without flowstate');
                        }
                        var flowOptions = renderable.decorations.flow;
                        return flowOptions.currentState;
                    }
                }, {
                    key: 'getViewFlowState',
                    value: function getViewFlowState() {
                        var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return flowOptions.currentState;
                    }

                    /**
                     * Create the swipable and register all the event logic for a swipable renderable
                     * @private
                     */

                }, {
                    key: '_initSwipable',
                    value: function _initSwipable() {
                        var _this3 = this;

                        var swipableOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                        var renderable = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        GenericSync.register({
                            'mouse': MouseSync,
                            'touch': TouchSync
                        });

                        var sync = new GenericSync({
                            'mouse': {},
                            'touch': {}
                        });

                        renderable.pipe(sync);

                        /* Translation modifier */
                        var positionModifier = new Modifier({
                            transform: function transform() {
                                var _position$get = position.get();

                                var _position$get2 = _slicedToArray(_position$get, 2);

                                var x = _position$get2[0];
                                var y = _position$get2[1];

                                return Transform.translate(x, y, 0);
                            }
                        });

                        var position = new Transitionable([0, 0]);

                        sync.on('update', function (data) {
                            var _position$get3 = position.get();

                            var _position$get4 = _slicedToArray(_position$get3, 2);

                            var x = _position$get4[0];
                            var y = _position$get4[1];

                            x += !swipableOptions.snapX ? data.delta[0] : 0;
                            y += !swipableOptions.snapY ? data.delta[1] : 0;
                            var _swipableOptions$yRan = swipableOptions.yRange;
                            var yRange = _swipableOptions$yRan === undefined ? [0, 0] : _swipableOptions$yRan;
                            var _swipableOptions$xRan = swipableOptions.xRange;
                            var xRange = _swipableOptions$xRan === undefined ? [0, 0] : _swipableOptions$xRan;

                            y = limit(yRange[0], y, yRange[1]);
                            x = limit(xRange[0], x, xRange[1]);
                            position.set([x, y]);
                        });

                        sync.on('end', function (data) {
                            var _position$get5 = position.get();

                            var _position$get6 = _slicedToArray(_position$get5, 2);

                            var x = _position$get6[0];
                            var y = _position$get6[1];

                            data.velocity[0] = Math.abs(data.velocity[0]) < 0.5 ? data.velocity[0] * 2 : data.velocity[0];
                            var endX = swipableOptions.snapX ? 0 : x + data.delta[0] + data.velocity[0] * 175;
                            var endY = swipableOptions.snapY ? 0 : y + data.delta[1] + data.velocity[1] * 175;
                            var _swipableOptions$yRan2 = swipableOptions.yRange;
                            var yRange = _swipableOptions$yRan2 === undefined ? [0, 0] : _swipableOptions$yRan2;
                            var _swipableOptions$xRan2 = swipableOptions.xRange;
                            var xRange = _swipableOptions$xRan2 === undefined ? [0, 0] : _swipableOptions$xRan2;

                            endY = limit(yRange[0], endY, yRange[1]);
                            endX = limit(xRange[0], endX, xRange[1]);
                            position.set([endX, endY], {
                                curve: Easing.outCirc,
                                duration: 750 - Math.abs(data.velocity[0] * 150)
                            });

                            _this3._determineSwipeEvents(renderable, swipableOptions, endX, endY);
                        });

                        renderable.node = new RenderNode();
                        renderable.node.add(positionModifier).add(renderable);

                        return renderable;
                    }
                }, {
                    key: '_determineSwipeEvents',
                    value: function _determineSwipeEvents(renderable) {
                        var swipableOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var endX = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                        var endY = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

                        if (!renderable || !renderable._eventOutput) return;

                        var xThreshold = swipableOptions.xThreshold || [undefined, undefined];
                        var yThreshold = swipableOptions.yThreshold || [undefined, undefined];

                        if (xThreshold[1] && endX > xThreshold[1]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 0,
                                displacement: 'right'
                            });
                        }

                        if (xThreshold[0] && endX < xThreshold[0]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 0,
                                displacement: 'left'
                            });
                        }

                        if (yThreshold[1] && endY > yThreshold[1]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 1,
                                displacement: 'bottom'
                            });
                        }

                        if (yThreshold[0] && endY < yThreshold[0]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 1,
                                displacement: 'top'
                            });
                        }
                    }

                    /**
                     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed
                     * before 'nextRenderableName'.
                     * @param {String} renderableName
                     * @param {String} nextRenderableName
                     */

                }, {
                    key: 'prioritiseDockBefore',
                    value: function prioritiseDockBefore(renderableName, nextRenderableName) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        if (!dockedRenderables) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' before \'' + nextRenderableName + '\': no docked renderables present.');
                            return false;
                        }
                        var result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(nextRenderableName));
                        if (!result) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' before \'' + nextRenderableName + '\': could not find one of the renderables by name.\n                        The following docked renderables are present: ' + dockedRenderables.keys());
                        }
                        return result;
                    }

                    /**
                     * @param {String} renderableName
                     * @param {String} prevRenderableName
                     */

                }, {
                    key: 'prioritiseDockAfter',
                    value: function prioritiseDockAfter(renderableName, prevRenderableName) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        if (!dockedRenderables) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' after \'' + prevRenderableName + '\': no docked renderables present.');
                            return false;
                        }
                        var result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(prevRenderableName) + 1);
                        if (!result) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' after \'' + prevRenderableName + '\': could not find one of the renderables by name.\n                        The following docked renderables are present: ' + dockedRenderables.keys());
                        }
                        return result;
                    }

                    /**
                     * Helper function used by prioritiseDockBefore and prioritiseDockAfter to change order of docked renderables
                     * @param renderableName
                     * @param index
                     * @returns {boolean}
                     * @private
                     */

                }, {
                    key: '_prioritiseDockAtIndex',
                    value: function _prioritiseDockAtIndex(renderableName, index) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        var renderableToRearrange = dockedRenderables.get(renderableName);

                        if (index < 0 || !renderableToRearrange) {
                            return false;
                        }

                        dockedRenderables.remove(renderableName);
                        dockedRenderables.insert(index, renderableName, renderableToRearrange);

                        return true;
                    }
                }]);

                return RenderableHelper;
            }();

            ReflowingScrollView = function (_FlexScrollView) {
                _inherits(ReflowingScrollView, _FlexScrollView);

                function ReflowingScrollView() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, ReflowingScrollView);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReflowingScrollView).call(this, options));

                    ObjectHelper.bindAllMethods(_this, _this);
                    _this._eventInput.on('recursiveReflow', _this._reflowWhenPossible);
                    return _this;
                }

                _createClass(ReflowingScrollView, [{
                    key: '_reflowWhenPossible',
                    value: function _reflowWhenPossible() {
                        if (!this.isScrolling() && !this._nodes._reevalTrueSize || !this._didReflowOnce) {
                            this.reLayout();
                            this._didReflowOnce = true;
                        }
                    }
                }, {
                    key: '_addItem',
                    value: function _addItem() {
                        /* Views that use this ReflowingScrollView should manually subscribe to this event,
                         * since it does not automatically bubble to Arva's View.js.
                         */
                        this._eventOutput.emit('resize');
                    }
                }]);

                return ReflowingScrollView;
            }(FlexScrollView);

            View = function (_FamousView) {
                _inherits(View, _FamousView);

                function View() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, View);

                    /* Bind all local methods to the current object instance, so we can refer to 'this'
                     * in the methods as expected, even when they're called from event handlers.        */

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(View).call(this, options));

                    ObjectHelper.bindAllMethods(_this, _this);

                    _this._copyPrototypeProperties();
                    _this._initDataStructures();
                    _this._initOwnDecorations();
                    _this._initOptions(options);
                    _this._initUtils();
                    _this._constructDecoratedRenderables();

                    _this._createLayoutController();
                    _this._initTrueSizedBookkeeping();

                    return _this;
                }

                //noinspection JSUnusedGlobalSymbols
                /**
                 * Deprecated, it is no longer required to call build() from within your View instances.
                 * @deprecated
                 * @returns {void}
                 */

                _createClass(View, [{
                    key: 'build',
                    value: function build() {
                        Utils.warn('Arva: calling build() from within views is no longer necessary, any existing calls can safely be removed. Called from ' + this._name());
                    }

                    /**
                     * Reflows the layout while also informing any subscribing parents that a reflow has to take place
                     */

                }, {
                    key: 'reflowRecursively',
                    value: function reflowRecursively() {
                        this.layout.reflowLayout();
                        this._eventOutput.emit('recursiveReflow');
                    }

                    /**
                     * Gets the size used when displaying a renderable on the screen the last tick
                     * @param {Renderable/Name} renderableOrName The renderable or the name of the renderable of which you need the size
                     */

                }, {
                    key: 'getResolvedSize',
                    value: function getResolvedSize(renderableOrName) {
                        var renderable = renderableOrName;
                        if (typeof renderableOrName === 'string') {
                            renderable = this.renderables[renderableOrName];
                        }
                        var size = this._sizeResolver.getResolvedSize(renderable);

                        /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */
                        if (!size && renderable.decorations) {
                            var decoratedSize = renderable.decorations.size;
                            var isValidSize = function isValidSize(inputSize) {
                                return typeof inputSize == 'number' && inputSize > 0;
                            };
                            if (decoratedSize && decoratedSize.every(isValidSize)) {
                                size = decoratedSize;
                            }
                        }

                        return size || [undefined, undefined];
                    }

                    /**
                     * Returns true if the view contains uncalculated surfaces
                     * @returns {Boolean}
                     */

                }, {
                    key: 'containsUncalculatedSurfaces',
                    value: function containsUncalculatedSurfaces() {
                        return this._sizeResolver.containsUncalculatedSurfaces();
                    }

                    /**
                     * Adds a renderable to the layout.
                     * @param {Renderable} renderable The renderable to be added
                     * @param {String} renderableName The name (key) of the renderable
                     * @param {Decorator} Decorator Any decorator(s) to apply to the renderable
                     * @returns {Renderable} The renderable that was assigned
                     */

                }, {
                    key: 'addRenderable',
                    value: function addRenderable(renderable, renderableName) {
                        /* Due to common mistake, we check if renderableName is a string */
                        if (typeof renderableName !== 'string') {
                            Utils.warn('The second argument of addRenderable(...) was not a string. Please pass the renderable name in ' + this._name());
                        }

                        for (var _len = arguments.length, decorators = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                            decorators[_key - 2] = arguments[_key];
                        }

                        this._renderableHelper.applyDecoratorFunctionsToRenderable(renderable, decorators);
                        this._assignRenderable(renderable, renderableName);
                        this.layout.reflowLayout();
                        return renderable;
                    }

                    /**
                     * Removes the renderable from the view
                     * @param {String} renderableName The name of the renderable
                     */

                }, {
                    key: 'removeRenderable',
                    value: function removeRenderable(renderableName) {
                        this._renderableHelper.removeRenderable(renderableName);
                        this[renderableName] = undefined;
                        this.layout.reflowLayout();
                    }

                    /**
                     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed
                     * before 'nextRenderableName'.
                     * @param {String} renderableName
                     * @param {String} nextRenderableName
                     */

                }, {
                    key: 'prioritiseDockBefore',
                    value: function prioritiseDockBefore(renderableName, nextRenderableName) {
                        this.reflowRecursively();
                        return this._renderableHelper.prioritiseDockBefore(renderableName, nextRenderableName);
                    }

                    /**
                     * @param {String} renderableName
                     * @param {String} prevRenderableName
                     */

                }, {
                    key: 'prioritiseDockAfter',
                    value: function prioritiseDockAfter(renderableName, prevRenderableName) {
                        this.reflowRecursively();
                        return this._renderableHelper.prioritiseDockAfter(renderableName, prevRenderableName);
                    }

                    /**
                     *
                     * @param {String} renderableName
                     * @param {Boolean} show. Whether to show or not
                     * @returns {Promise} when the renderable has finished its animation
                     */

                }, {
                    key: 'showRenderable',
                    value: function showRenderable(renderableName) {
                        var _this2 = this;

                        var show = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        var renderable = this[renderableName];
                        if (!renderable.animationController) {
                            Utils.warn('Trying to show renderable ' + renderableName + ' which does not have an animationcontroller. Please use @layout.animate');
                            return;
                        }
                        var decoratedSize = this[renderableName].decorations.size || (this[renderableName].decorations.dock ? this[renderableName].decorations.dock.size : undefined);
                        if (decoratedSize) {
                            /* Check if animationController has a true size specified. If so a reflow needs to be performed since there is a
                             * new size to take into account. */
                            var _arr = [0, 1];
                            for (var _i = 0; _i < _arr.length; _i++) {
                                var dimension = _arr[_i];
                                if (this._sizeResolver.isValueTrueSized(this._sizeResolver.resolveSingleSize(decoratedSize[dimension], [NaN, NaN], dimension))) {
                                    this.reflowRecursively();
                                    break;
                                }
                            }
                        }

                        return new Promise(function (resolve) {
                            return _this2._renderableHelper.showWithAnimationController(_this2.renderables[renderableName], renderable, show, resolve);
                        });
                    }

                    /**
                     * @example
                     * decorateRenderable('myRenderable',layout.size(100, 100));
                     *
                     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.
                     * @param {String} renderableName The name of the renderable
                     * @param ...decorators The decorators that should be applied
                     */

                }, {
                    key: 'decorateRenderable',
                    value: function decorateRenderable(renderableName) {
                        var _renderableHelper;

                        for (var _len2 = arguments.length, decorators = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                            decorators[_key2 - 1] = arguments[_key2];
                        }

                        (_renderableHelper = this._renderableHelper).decorateRenderable.apply(_renderableHelper, [renderableName].concat(decorators));
                        this.reflowRecursively();
                    }

                    /**
                     * Sets a renderable flow state as declared in the @flow.stateStep, or @flow.defaultState
                     * @param {String} renderableName. The name of the renderable
                     * @param {String} stateName. The name of the state as declared in the first argument of the decorator
                     * @returns {*}
                     */

                }, {
                    key: 'setRenderableFlowState',
                    value: function setRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                        var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

                        return this._renderableHelper.setRenderableFlowState(renderableName, stateName);
                    }

                    /**
                     * Sets a renderable flow state as declared in the @flow.viewState
                     * @param {String} renderableName. The name of the renderable
                     * @param {String} stateName. The name of the state as declared in the first argument of the decorator
                     * @returns {*}
                     */

                }, {
                    key: 'setViewFlowState',
                    value: function setViewFlowState() {
                        var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        return this._renderableHelper.setViewFlowState(stateName, this.decorations.flow);
                    }
                }, {
                    key: 'getRenderableFlowState',
                    value: function getRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        return this._renderableHelper.getRenderableFlowState(renderableName);
                    }
                }, {
                    key: 'getViewFlowState',
                    value: function getViewFlowState() {
                        return this._renderableHelper.getViewFlowState(this.decorations.flow);
                    }

                    /**
                     * Replaces an existing decorated renderable with a new renderable, preserving all necessary state and decorations
                     * @param {String} renderableName. The name of the renderable
                     * @param newRenderable
                     */

                }, {
                    key: 'replaceRenderable',
                    value: function replaceRenderable(renderableName, newRenderable) {
                        this._renderableHelper.replaceRenderable(renderableName, newRenderable);
                        this.reflowRecursively();
                        this[renderableName] = newRenderable;
                    }

                    /**
                     * Hides a renderable that has been declared with @layout.animate
                     * @param renderableName
                     * @returns {Promise} when the renderable has finished its animation
                     */

                }, {
                    key: 'hideRenderable',
                    value: function hideRenderable(renderableName) {
                        return this.showRenderable(renderableName, false);
                    }

                    /**
                     * Inits the utils that are used as helper classes for the view
                     * @private
                     */

                }, {
                    key: '_initUtils',
                    value: function _initUtils() {
                        var _this3 = this;

                        this._sizeResolver = new SizeResolver();
                        this._sizeResolver.on('layoutControllerReflow', this._requestLayoutControllerReflow);
                        this._sizeResolver.on('reflow', function () {
                            return _this3.layout.reflowLayout();
                        });
                        this._sizeResolver.on('reflowRecursively', this.reflowRecursively);
                        this._dockedRenderablesHelper = new DockedLayoutHelper(this._sizeResolver);
                        this._fullSizeLayoutHelper = new FullSizeLayoutHelper(this._sizeResolver);
                        this._traditionalLayoutHelper = new TraditionalLayoutHelper(this._sizeResolver);
                        this._renderableHelper = new RenderableHelper(this._bindToSelf, this._setPipeToSelf, this.renderables, this._sizeResolver);
                    }

                    /** Requests for a parent LayoutController trying to resolve the size of this view
                     * @private
                     */

                }, {
                    key: '_requestLayoutControllerReflow',
                    value: function _requestLayoutControllerReflow() {
                        this._nodes = { _trueSizeRequested: true };
                        //TODO: Do we really need to emit this?
                        this._eventOutput.emit('layoutControllerReflow');
                    }
                }, {
                    key: '_getRenderableOptions',
                    value: function _getRenderableOptions(renderableName) {
                        var decorations = arguments.length <= 1 || arguments[1] === undefined ? this.renderables[renderableName] : arguments[1];

                        var decoratorOptions = decorations.constructionOptionsMethod ? decorations.constructionOptionsMethod.call(this, this.options) : {};
                        if (!Utils.isPlainObject(decoratorOptions)) {
                            Utils.warn('Invalid option \'' + decoratorOptions + '\' given to item ' + renderableName);
                        }
                        return decoratorOptions;
                    }

                    /**
                     * Construct all the renderables that have been decorated in the class.
                     * @private
                     */

                }, {
                    key: '_constructDecoratedRenderables',
                    value: function _constructDecoratedRenderables() {
                        var _this4 = this;

                        var classConstructorList = [];

                        /* Reverse the class list becaues rit makes more sense to make the renderables of the parent before the renderables
                         * of this view
                        */
                        for (var currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {
                            classConstructorList.push(currentClass.__proto__.constructor);
                        }
                        classConstructorList.reverse();

                        for (var _iterator = classConstructorList, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i2 >= _iterator.length) break;
                                _ref = _iterator[_i2++];
                            } else {
                                _i2 = _iterator.next();
                                if (_i2.done) break;
                                _ref = _i2.value;
                            }

                            var currentClassConstructor = _ref;

                            var renderableConstructors = this.renderableConstructors.get(currentClassConstructor);

                            var _loop = function _loop(renderableName) {
                                var decorations = renderableConstructors[renderableName].decorations;

                                var renderable = renderableConstructors[renderableName].call(_this4, _this4._getRenderableOptions(renderableName, decorations));

                                /* Clone the decorator properties, because otherwise every view of the same type willl share them between
                                 * the same corresponding renderable. TODO: profiling reveals that cloneDeep affects performance
                                 */
                                renderable.decorations = _.cloneDeep(_.extend({}, decorations, renderable.decorations || {}));

                                /* Since after constructor() of this View class is called, all decorated renderables will
                                 * be attempted to be initialized by Babel / the ES7 class properties spec, we'll need to
                                 * override the descriptor get/initializer to return this specific instance once.
                                 *
                                 * If we don't do this, the View will have its renderables overwritten by new renderable instances
                                 * that don't have constructor.options applied to them correctly. If we always return this specific instance
                                 * instead of only just once, any instantiation of the same View class somewhere else in the code will refer
                                 * to the renderables of this instance, which is unwanted.
                                 */
                                var descriptor = decorations.descriptor;

                                if (descriptor) {
                                    if (descriptor.get) {
                                        (function () {
                                            var originalGet = decorations.descriptor.get;
                                            descriptor.get = function () {
                                                descriptor.get = originalGet;
                                                return renderable;
                                            };
                                        })();
                                    }
                                    if (descriptor.initializer) {
                                        (function () {
                                            var originalInitializer = decorations.descriptor.initializer;
                                            descriptor.initializer = function () {
                                                descriptor.initializer = originalInitializer;
                                                return renderable;
                                            };
                                        })();
                                    }
                                }
                                _this4._assignRenderable(renderable, renderableName);
                            };

                            for (var renderableName in renderableConstructors) {
                                _loop(renderableName);
                            }
                        }
                    }

                    /**
                     * Assigns a renderable to this view, without setting this[renderableName]
                     * @param {Renderable} renderable the renderable that is going to be added
                     * @param {String} renderableName the name of the renderable
                     * @private
                     */

                }, {
                    key: '_assignRenderable',
                    value: function _assignRenderable(renderable, renderableName) {
                        this._renderableHelper.assignRenderable(renderable, renderableName);
                        /* Do add property to object because there can be a getter defined instead of a class property,
                         * in which case we have to use the ObjectHelper
                         */
                        ObjectHelper.addPropertyToObject(this, renderableName, renderable, true, true, null, false);
                    }
                }, {
                    key: '_layoutDecoratedRenderables',
                    value: function _layoutDecoratedRenderables(context, options) {
                        var dockedRenderables = this._renderableHelper;
                        this._dockedRenderablesHelper.layout(dockedRenderables.getRenderableGroup('docked'), dockedRenderables.getRenderableGroup('filled'), context, this.decorations);
                        this._fullSizeLayoutHelper.layout(dockedRenderables.getRenderableGroup('fullSize'), context, this.decorations);
                        this._traditionalLayoutHelper.layout(dockedRenderables.getRenderableGroup('traditional'), context, this.decorations);
                    }

                    /**
                     * Combines all layouts defined in subclasses of the View into a single layout for the LayoutController.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_createLayoutController',
                    value: function _createLayoutController() {
                        var _this5 = this;

                        var hasFlowyRenderables = this._renderableHelper.hasFlowyRenderables();
                        this.layout = new LayoutController({
                            flow: !!this.decorations.useFlow || hasFlowyRenderables,
                            partialFlow: !this.decorations.useFlow,
                            flowOptions: this.decorations.flowOptions || { spring: { period: 200 } },
                            layout: function (context, options) {

                                /* Because views that extend this View class first call super() and then define their renderables,
                                 * we wait until the first engine render tick to add our renderables to the layout, when the view will have declared them all.
                                 * layout.setDataSource() will automatically pipe events from the renderables to this View. */
                                if (!this._initialised) {
                                    this.layout.setDataSource(this.renderables);
                                    this._renderableHelper.pipeAllRenderables();
                                    this._renderableHelper.initializeAnimations();
                                    this._initialised = true;
                                    this.layout.reflowLayout();

                                    /*
                                     * When the data source is set, it will not be reflected in the context yet because the layout is already
                                     * prepared for the previous (empty) renderable data source. Therefore, it's a waste of resources
                                     * and mysterious bugs to continue. We will wait for the next rendering cycle. However, if views
                                     * are only having decorated renderables, then we don't have to do this whatsoever
                                     */
                                    return;
                                }

                                /* Layout all renderables that have decorators (e.g. @someDecorator) */
                                this._layoutDecoratedRenderables(context, options);
                                if (this.decorations.customLayoutFunction) {
                                    this.decorations.customLayoutFunction(context);
                                }

                                this._doTrueSizedSurfacesBookkeeping();

                                /* Legacy context.set() based layout functions */
                                if (this.layouts.length) {
                                    this._callLegacyLayoutFunctions(context, options);
                                }
                            }.bind(this)
                        });

                        this._eventInput.on('recursiveReflow', function () {
                            _this5.reflowRecursively();
                        });

                        /* Add the layoutController to this View's rendering context. */
                        this._prepareLayoutController();
                    }

                    /**
                     * Layout all renderables that have explicit context.set() calls in this View's legacy layout array.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_callLegacyLayoutFunctions',
                    value: function _callLegacyLayoutFunctions(context, options) {
                        for (var _iterator2 = this.layouts, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i3 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i3++];
                            } else {
                                _i3 = _iterator2.next();
                                if (_i3.done) break;
                                _ref2 = _i3.value;
                            }

                            var layout = _ref2;

                            try {
                                switch (typeof layout) {
                                    case 'function':
                                        layout.call(this, context, options);
                                        break;
                                    default:
                                        Utils.warn('Unrecognized layout specification in view \'' + this._name() + '\'.');
                                        break;
                                }
                            } catch (error) {
                                Utils.warn('Exception thrown in ' + this._name() + ':');
                                console.log(error);
                            }
                        }
                    }

                    /**
                     * Either adds this.layout (a LayoutController) to the current View, or a FlexScrollView containing this.layout if this view
                     * has been decorated with a @scrollable.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_prepareLayoutController',
                    value: function _prepareLayoutController() {
                        var scrollableOptions = this.decorations.scrollableOptions;

                        if (scrollableOptions) {
                            this._scrollView = new ReflowingScrollView(scrollableOptions);
                            this.layout.getSize = this.getSize;
                            this._scrollView.push(this.layout);
                            this.pipe(this._scrollView);
                            this.add(this._scrollView);
                        } else {
                            this.add(this.layout);
                        }
                    }

                    /**
                     * Gets the scroll view that was set if @layout.scrollable was used on the view
                     * @returns {ReflowingScrollView}
                     */

                }, {
                    key: 'getScrollView',
                    value: function getScrollView() {
                        return this._scrollView;
                    }

                    /**
                     * getSize() is called by this view and by layoutControllers. For lazy people that don't want to specifiy their own getSize() function,
                     * we provide a fallback. This function can be performance expensive when using non-docked renderables, but for docked renderables it
                     * is efficient and convenient]
                     * @returns {*[]}
                     */

                }, {
                    key: 'getSize',
                    value: function getSize() {
                        return this._getLayoutSize();
                    }

                    /**
                     * Calculates the total height of the View's layout when it's embedded inside a FlexScrollView (i.e. @scrollable is set on the View),
                     * by iterating over each renderable inside the View, and finding the minimum and maximum y values at which they are drawn.
                     *
                     *
                     * @returns {*[]}
                     * @private
                     */

                }, {
                    key: '_getLayoutSize',
                    value: function _getLayoutSize() {
                        var dockedRenderables = this._renderableHelper.getRenderableGroup('docked');
                        var traditionalRenderables = this._renderableHelper.getRenderableGroup('traditional');
                        var filledRenderables = this._renderableHelper.getRenderableGroup('filled');
                        if (!traditionalRenderables && !dockedRenderables) {
                            return [undefined, undefined];
                        }
                        var totalSize = [undefined, undefined];
                        if (dockedRenderables || filledRenderables) {
                            totalSize = this._dockedRenderablesHelper.boundingBoxSize(dockedRenderables, filledRenderables, this.decorations);
                        }

                        if (traditionalRenderables) {
                            var traditionalRenderablesBoundingBox = this._traditionalLayoutHelper.boundingBoxSize(traditionalRenderables);
                            for (var _iterator3 = totalSize.entries(), _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                                var _ref3;

                                if (_isArray3) {
                                    if (_i4 >= _iterator3.length) break;
                                    _ref3 = _iterator3[_i4++];
                                } else {
                                    _i4 = _iterator3.next();
                                    if (_i4.done) break;
                                    _ref3 = _i4.value;
                                }

                                var _ref4 = _ref3;

                                var _ref5 = _slicedToArray(_ref4, 2);

                                var dimension = _ref5[0];
                                var singleSize = _ref5[1];

                                var traditionalSingleSize = traditionalRenderablesBoundingBox[dimension];
                                if (traditionalSingleSize !== undefined && (singleSize === undefined || singleSize < traditionalSingleSize)) {
                                    totalSize[dimension] = traditionalSingleSize;
                                }
                            }
                        }
                        return totalSize;
                    }

                    /**
                     * Retrieves the class name of the subclass View instance.
                     * @returns {string}
                     * @private
                     */

                }, {
                    key: '_name',
                    value: function _name() {
                        return Object.getPrototypeOf(this).constructor.name;
                    }

                    /**
                     * Copies prototype properties set by decorators to this
                     * @private
                     */

                }, {
                    key: '_copyPrototypeProperties',
                    value: function _copyPrototypeProperties() {
                        var prototype = Object.getPrototypeOf(this);

                        /* Move over all renderable- and decoration information that decorators.js set to the View prototype */
                        var _arr2 = ['decorationsMap', 'renderableConstructors'];
                        for (var _i5 = 0; _i5 < _arr2.length; _i5++) {
                            var name = _arr2[_i5];
                            this[name] = _.cloneDeep(prototype[name]) || new Map();
                        }
                    }

                    /**
                     * Inits the decorations that is set on a class level
                     * @private
                     */

                }, {
                    key: '_initOwnDecorations',
                    value: function _initOwnDecorations() {
                        var _this6 = this;

                        for (var currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {
                            /* The close the decoration is to this constructor in the prototype chain, the higher the priority */
                            var _decorations = this.decorationsMap.get(currentClass.__proto__.constructor);
                            for (var property in _decorations) {
                                if (!(property in this.decorations)) {
                                    this.decorations[property] = _decorations[property];
                                }
                            }
                        }

                        if (this.decorations.dynamicDockPadding) {
                            this.onNewSize(function (size) {
                                return _this6.decorations.viewMargins = _this6.decorations.dynamicDockPadding(size);
                            });
                        }
                    }
                }, {
                    key: '_doTrueSizedSurfacesBookkeeping',
                    value: function _doTrueSizedSurfacesBookkeeping() {
                        this._nodes._trueSizeRequested = false;
                    }
                }, {
                    key: '_initTrueSizedBookkeeping',
                    value: function _initTrueSizedBookkeeping() {
                        var _this7 = this;

                        this.layout.on('layoutstart', function (_ref6) {
                            var oldSize = _ref6.oldSize;
                            var size = _ref6.size;

                            if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
                                _this7._sizeResolver.doTrueSizedBookkeeping();
                                ///
                                //TODO: Kept for legacy reasons, but remove all listeners to this function
                                _this7._eventOutput.emit('newSize', size);
                                for (var _iterator4 = _this7._onNewSizeCallbacks, _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                    var _ref7;

                                    if (_isArray4) {
                                        if (_i6 >= _iterator4.length) break;
                                        _ref7 = _iterator4[_i6++];
                                    } else {
                                        _i6 = _iterator4.next();
                                        if (_i6.done) break;
                                        _ref7 = _i6.value;
                                    }

                                    var callback = _ref7;

                                    callback(size);
                                }
                            }
                        });
                        /* Hack to make the layoutcontroller reevaluate sizes on resize of the parent */
                        this._nodes = { _trueSizedRequested: false };
                        /* This needs to be set in order for the LayoutNodeManager to be happy */
                        this.options.size = this.options.size || [true, true];
                    }
                }, {
                    key: 'onNewSize',
                    value: function onNewSize(callback) {
                        this._onNewSizeCallbacks.push(callback);
                    }
                }, {
                    key: 'onceNewSize',
                    value: function onceNewSize() {
                        var _this8 = this;

                        return new Promise(function (resolve) {
                            _this8._onNewSizeCallbacks.push(function onNewSize(size) {
                                this._onNewSizeCallbacks.splice(this._onNewSizeCallbacks.indexOf(onNewSize), 1);
                                resolve(size);
                            }.bind(_this8));
                        });
                    }
                }, {
                    key: '_initOptions',
                    value: function _initOptions(options) {
                        if (!Utils.isPlainObject(options)) {
                            Utils.warn('View ' + this._name() + ' initialized with invalid non-object arguments');
                        }
                        this.options = options;
                    }
                }, {
                    key: '_initDataStructures',
                    value: function _initDataStructures() {
                        if (!this.renderables) {
                            this.renderables = {};
                        }
                        if (!this.layouts) {
                            this.layouts = [];
                        }

                        if (!this.decorations) {
                            this.decorations = {};
                        }

                        if (!this.decorations.extraTranslate) {
                            this.decorations.extraTranslate = [0, 0, 10];
                        }
                        this._runningRepeatingFlowStates = {};
                        this._onNewSizeCallbacks = [];
                    }

                    /**
                     * Binds the method to this view. Used by the util DecoratedRenderables
                     * @param {Function} method The method that is about to be bound
                     * @returns {*}
                     * @private
                     */

                }, {
                    key: '_bindToSelf',
                    value: function _bindToSelf(method) {
                        return method.bind(this);
                    }

                    /**
                     * Pipes a renderable to this view. Used by the util DecoratedRenderables
                     * @param {Function} method The method that is about to be bound
                     * @param {Boolean} enable set to false to unpipe
                     * @returns {Boolean} true if piping was successful, otherwise false
                     * @private
                     */

                }, {
                    key: '_setPipeToSelf',
                    value: function _setPipeToSelf(renderable) {
                        var enable = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        var methodName = enable ? 'pipe' : 'unpipe';
                        /* Auto pipe events from the renderable to the view */
                        if (renderable && renderable[methodName]) {
                            /*
                             * We see it as a bit of a mystery why the piping needs to be done both to this and this._eventOutput,
                             * but they both seem to be necessary so I'm gonna leave it for now.
                             */
                            renderable[methodName](this);
                            renderable[methodName](this._eventOutput);
                            return true;
                        }
                        return false;
                    }

                    /**
                     * Repeat a certain flowState indefinitely
                     * @param renderableName
                     * @param stateName
                     * @param {Boolean} persistent. If true, then it will keep on repeating until explicitly cancelled by cancelRepeatFlowState.
                     * If false, it will be interrupted automatically by any interrput to another state. Defaults to true
                     * @returns {Promise} resolves to false if the flow state can't be repeated due to an existing running repeat
                     */

                }, {
                    key: 'repeatFlowState',
                    value: function () {
                        var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
                            var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
                            var persistent = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            if (this._runningRepeatingFlowStates[renderableName]) {
                                                _context.next = 17;
                                                break;
                                            }

                                            this._runningRepeatingFlowStates[renderableName] = { persistent: persistent };

                                        case 2:
                                            _context.t0 = this._runningRepeatingFlowStates[renderableName];

                                            if (!_context.t0) {
                                                _context.next = 10;
                                                break;
                                            }

                                            _context.next = 6;
                                            return this.setRenderableFlowState(renderableName, stateName);

                                        case 6:
                                            _context.t1 = _context.sent;

                                            if (_context.t1) {
                                                _context.next = 9;
                                                break;
                                            }

                                            _context.t1 = persistent;

                                        case 9:
                                            _context.t0 = _context.t1;

                                        case 10:
                                            if (!_context.t0) {
                                                _context.next = 13;
                                                break;
                                            }

                                            _context.next = 2;
                                            break;

                                        case 13:
                                            delete this._runningRepeatingFlowStates[renderableName];
                                            return _context.abrupt('return', true);

                                        case 17:
                                            return _context.abrupt('return', false);

                                        case 18:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function repeatFlowState(_x9, _x10, _x11) {
                            return ref.apply(this, arguments);
                        }

                        return repeatFlowState;
                    }()

                    /**
                     * Cancel a repeating renderable. This will cancel the animation for next flow-cycle, it won't interject the current animation cycle.
                     * @param renderableName
                     */

                }, {
                    key: 'cancelRepeatFlowState',
                    value: function cancelRepeatFlowState(renderableName) {
                        if (this._runningRepeatingFlowStates) {
                            delete this._runningRepeatingFlowStates[renderableName];
                        }
                    }

                    /**
                     * Initiate a renderable to a default flow state.
                     * @param renderableName
                     * @param stateName
                     */

                }, {
                    key: 'setDefaultState',
                    value: function setDefaultState(renderableName, stateName) {
                        for (var _iterator5 = this[renderableName].decorations.flow.states[stateName].steps, _isArray5 = Array.isArray(_iterator5), _i7 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref8;

                            if (_isArray5) {
                                if (_i7 >= _iterator5.length) break;
                                _ref8 = _iterator5[_i7++];
                            } else {
                                _i7 = _iterator5.next();
                                if (_i7.done) break;
                                _ref8 = _i7.value;
                            }

                            var step = _ref8;

                            this.decorateRenderable.apply(this, [renderableName].concat(step.transformations));
                        }
                    }
                }]);

                return View;
            }(FamousView);

            layout$1 = {

                /**
                 * @example
                 * @layout.renderable
                 * renderable = new Surface();
                 *
                 * Merely marks a view property as a decorated renderable, which allows it to be rendered.
                 * Use this in combination with a @layout.custom decorator on the view in which this renderable resides.
                 *
                 * @returns {Function} A decorator function
                 */
                renderable: function renderable() {
                    return function (view, renderableName, descriptor) {
                        prepDecoratedRenderable(view, renderableName, descriptor);
                    };
                },

                /**
                 * @example:
                 * @layout.fullSize()
                 * // View will have a red background
                 * background = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * Marks the renderable to cover the entire screen. Translate can also be specified on such a renderable.
                 *
                 * @returns {Function} A decorator function
                 */
                fullSize: function fullSize() {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.fullSize = true;
                    };
                },

                /**
                 * @example:
                 * // there's a 20px space before this box
                 * @layout.dockSpace(20)
                 * @layout.size(100, 100)
                 * @layout.dock.left()
                 * box = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * Specifies the space that should come before the docked renderable. Useful when not specifying the size in the
                 * layout.dock function. Note that the space does not appear if there isn't any renderable with a size greater than
                 * zero before it.
                 *
                 * @param {Number} space The space that is inserted before the renderable.
                 * @returns {Function} A decorator function
                 */
                dockSpace: function dockSpace(space) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        // Todo refactor also the z index to the dock
                        renderable.decorations.dock = renderable.decorations.dock ? _.extend(renderable.decorations.dock, { space: space }) : { space: space };
                    };
                },

                /**
                 * Internal function to do docking
                 * @param dockMethod
                 * @param size
                 * @param space
                 * @param zIndex
                 * @returns {Function}
                 */
                _dockTo: function _dockTo(dockMethod, size) {
                    var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                    var zIndex = arguments[3];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);

                        if (renderable.decorations.dock) {
                            space = space || renderable.decorations.dock.space;
                        }

                        var width = dockMethod === 'left' || dockMethod === 'right' ? size : undefined;
                        var height = dockMethod === 'top' || dockMethod === 'bottom' ? size : undefined;

                        var twoDimensionalSize = [width, height];
                        // Todo refactor also the z index to the dock, probably
                        renderable.decorations.dock = { space: space, dockMethod: dockMethod, size: twoDimensionalSize };

                        if (!renderable.decorations.translate) {
                            renderable.decorations.translate = [0, 0, 0];
                        }
                        if (zIndex) {
                            renderable.decorations.translate[2] = zIndex;
                        }
                    };
                },

                dock: {
                    /**
                     * @example:
                     * @layout.dock.left(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Docks the renderable to the left.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    left: function left() {
                        return layout$1._dockTo.apply(layout$1, ['left'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * @example:
                     * @layout.dock.right(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Docks the renderable to the right.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    right: function right() {
                        return layout$1._dockTo.apply(layout$1, ['right'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * @example:
                     * @layout.dock.top(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Docks the renderable to the top.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    top: function top() {
                        return layout$1._dockTo.apply(layout$1, ['top'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * @example:
                     * @layout.dock.bottom(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Docks the renderable to the bottom.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    bottom: function bottom() {
                        return layout$1._dockTo.apply(layout$1, ['bottom'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * @example:
                     * @layout.dock.fill()
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Fills the space that is left after the docking with this renderable.
                     *
                     * When using layout.size, it will use that size as an inner size. This works similarly to other docking, from
                     * where translate, size, origin, align, etc can be specified.
                     *
                     * @returns {Function} A decorator function
                     */
                    fill: function fill() {
                        return layout$1._dockTo.apply(layout$1, ['fill'].concat(Array.prototype.slice.call(arguments)));
                    },
                    /**
                     * @example:
                     * @layout.dock.fill()
                     * @flow.stateStep('nonFilled', layout.dock.none(), layout.size(100, 100))
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * Marks the renderable as not being docked anymore. Useful when dynamically changing decorations through
                     * this.decorateRenderable or this.setRenderableFlowState
                     *
                     * @returns {Function} A decorator function
                     */
                    none: function none() {
                        return function (view, renderableName, descriptor) {
                            var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                            renderable.decorations.disableDock = true;
                        };
                    }

                },

                /**
                 * @example
                 * @layout.draggable({xRange: [0, 100}, yRange: [0, 200]})
                 * @layout.size(100, 100)
                 * // Makes a draggable square that is red
                 * draggableRenderable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * Makes the renderable allowed to be dragged around. this.renderables[name] refers to a RenderNode containing this
                 * draggable along with the renderable itself.
                 *
                 * @param {Object} [draggableOptions]. Same options that can be passed to a Famous Draggable.
                 * @param {Number} [options.snapX] grid width for snapping during drag
                 * @param {Number} [options.snapY] grid height for snapping during drag
                 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag
                 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag
                 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion
                 * @param {Number} [options.projection] User should set to Draggable._direction.x or
                 *    Draggable._direction.y to constrain to one axis.
                 * @returns {Function}
                 */
                draggable: function draggable() {
                    var draggableOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.draggableOptions = draggableOptions;
                    };
                },

                /**
                 * @example
                 * @layout.size(100, 100)
                 * @layout.swipable({xRange: [0, 100], snapX: true})
                 * //Make a red box that can slide to the right
                 * swipable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * Makes the renderable swipable with physics-like velocity after the dragging is released. Emits event
                 * 'thresholdReached' with arguments ('x'|'y', 0|1) when any thresholds have been reached. this.renderables[name]
                 * now refers to a a RenderNode containing a positionModifier along with the renderable itself.
                 *
                 * @param {Object} options
                 * @param {Boolean} [options.snapX] Whether to snap to the x axis
                 * @param {Boolean} [options.snapY] Whether to snap to the Y axis
                 * @param {Boolean} [options.enabled] Whether the swipable should be initially enabled
                 * @param {Array.Number} [options.xThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'x' and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @param {Array.Number} [options.yThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'y'  and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @returns {Function} A decorator function
                 */
                swipable: function swipable(options) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.swipableOptions = options;
                    };
                },

                /**
                 * @example
                 * @layout.size(function(contextWidth) {return Math.max(contextWidth, this.options.maxWidth)}, ~300)
                 * // Creates a renderable where the width is equal to the text width and the height is whatever is bigger,
                 * // options.maxWidth, or the context size
                 * text = new Surface({content: 'This is some text', properties: {backgroundColor: 'red'}});
                 *
                 * Specifies the size of the renderable. For both of the parameters, sizes can be interpreted as follows:
                 *
                 * If specified as a function, then the argument passed is the context size of the specified dimension
                 * (width or height). Note that if an arrow function is used, this scoping cannot be used when inside a
                 * decorator, since the scope will be the global scope.
                 *
                 * If true is specified or a tilde with a size (e.g. ~300), then the renderable will be automatically sized.
                 * If a tilde is used to indicate the size, then the size after the tilde will be used when/if the
                 * renderable doesn't have a size, or turn into the actual size if it can be determined. This is useful when wanting
                 * to reduce the flickering of surfaces who's size cannot be determined the first render tick.
                 * Beware that true sizing of surfaces or other raw dom elements (input surfaces, image surfaces, text boxes etc)
                 * often comes with a perfomance penalty and should only be used when necessary.
                 * Also beware that any negative size will be interpreted as a tilde, since ~x = 1 - x
                 *
                 * If undefined is specified, then the size of that dimension will equal the entire context size.
                 *
                 * If a size between 0 and 1 is specified, then that will be interpreted as a proportion of the context size. For
                 * example if 0.5 is specified, then the size will be half of the context size (the parent's size). Instead of
                 * specifying 1 to cover the entire context size, use undefined instead.
                 *
                 * @param {Number|Function} x
                 * @param {Number|Function} y
                 * @returns {Function} A decorator function
                 */
                size: function size(x, y) {
                    return function (view, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify size as two arguments, and not as an array');
                        }
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.size = [x, y];
                    };
                },

                /**
                 * @example
                 * @layout.size(40,40)
                 * @layout.clip(20, 20)
                 * // Shows a quarter of a circle
                 * renderable = new Surface({properties: {backgroundColor: 'red', borderRadius: '50%'});
                 *
                 * Clips the renderable by creating another DOM-element with overflow: hidden. Internally, creates a Famous
                 * ContainerSurface.
                 * The two size parameters can either be a number or undefined (equals the context size).
                 *
                 * @param {Number} width The width of the ContainerSurface
                 * @param {Number} heigh The height of the ContainerSurface
                 * @param {Object} [properties]. Properties that will be passed to the newly created parent DOM-element.
                 * If specified, merged with {overflow: 'hidden'}
                 * @returns {Function} A decorator function
                 */
                clip: function clip(width, height) {
                    var properties = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.clip = { size: [width, height], properties: properties };
                    };
                },

                /**
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * Rotates the renderable around any of the three axes (in radians)
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotate: function rotate(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.rotate = [x, y, z];
                    };
                },

                /**
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * Rotates the renderable around any of the three axes (in radians) relatively to the current rotation
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotateFrom: function rotateFrom(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        var propertyName = 'rotate';
                        var properties = renderable.decorations[propertyName] || [0, 0, 0];
                        renderable.decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * @example
                 * @layout.opacity(0.5)
                 * @layout.size(100, 10)
                 * @layout.place.center()
                 * // Writes text that is half invisible
                 * renderable = new Surface({content: 'Half invisible'});
                 *
                 * Sets te opacity of a renderable
                 *
                 * @param {Number} The opacity, between 0 and 1
                 * @returns {Function} A decorator function
                 */
                opacity: function opacity(_opacity) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.opacity = _opacity;
                    };
                },

                _stickTo: function _stickTo(stick) {
                    return function (view, renderableName, descriptor) {
                        var origin = [0, 0],
                            align = [0, 0];
                        switch (stick) {
                            case 'center':
                                origin = align = [0.5, 0.5];
                                break;
                            case 'bottomRight':
                                origin = align = [1, 1];
                                break;
                            case 'bottomLeft':
                                origin = align = [0, 1];
                                break;
                            case 'topRight':
                                origin = align = [1, 0];
                                break;
                            case 'left':
                                origin = align = [0, 0.5];
                                break;
                            case 'right':
                                origin = align = [1, 0.5];
                                break;
                            case 'top':
                                origin = align = [0.5, 0];
                                break;
                            case 'bottom':
                                origin = align = [0.5, 1];
                                break;
                            default:
                            case 'topLeft':
                                origin = align = [0, 0];
                                break;

                        }

                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.origin = origin;
                        renderable.decorations.align = align;
                    };
                },
                /**
                 * @example
                 * @layout.size(100,~300)
                 * @layout.stick.center()
                 * renderable = new Surface({content: 'centered text'});
                 *
                 * Places the renderable by settings origin/align. If nothing is set, it will default to topleft.
                 *
                 * @param {String} stick. Can be either of 'center', 'left', 'right', 'bottom', 'top', 'bottomleft', 'bottomright',
                 * 'topright', 'topleft'
                 * @returns {Function} A decorator function
                 */
                stick: {
                    center: function center() {
                        return layout$1._stickTo('center');
                    },
                    left: function left() {
                        return layout$1._stickTo('left');
                    },
                    right: function right() {
                        return layout$1._stickTo('right');
                    },
                    top: function top() {
                        return layout$1._stickTo('top');
                    },
                    bottom: function bottom() {
                        return layout$1._stickTo('bottom');
                    },
                    bottomLeft: function bottomLeft() {
                        return layout$1._stickTo('bottomLeft');
                    },
                    bottomRight: function bottomRight() {
                        return layout$1._stickTo('bottomRight');
                    },
                    topLeft: function topLeft() {
                        return layout$1._stickTo('topLeft');
                    },
                    topRight: function topRight() {
                        return layout$1._stickTo('topRight');
                    }
                },

                /**
                 * @example
                 * @layout.origin(0.5, 0)
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box horizontically centered and displays just below the vertical mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * Sets the point where the renderable has its anchor from where rotation and translation will be done.
                 * You could consider it as translating the negative of the proportion times its size. The arguments are always
                 * between and including 0 and 1
                 *
                 * @param {Number} x. The x of the origin.
                 * @param {Number} y. The y of the origin.
                 * @returns {Function} A decorator function.
                 */
                origin: function origin(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.origin = [x, y];
                    };
                },

                /**
                 * @example
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box just below the vertical mid point and past the horizontal mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * Translates the renderable by a proportion of the context size.
                 *
                 * @param {Number} x. The proportion of the context width that is going to be translated.
                 * @param {Number} y. The proportion of the context height that is going to be translated.
                 * @returns {Function} A decorator function.
                 */
                align: function align(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.align = [x, y];
                    };
                },

                /**
                 * @example
                 * @layout.translate(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translate(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * Specifies a translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal).
                 *
                 * Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translate: function translate(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * @example
                 * @layout.translateFrom(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translateFrom(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * Specifies a relative translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal).
                 *
                 * Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translateFrom: function translateFrom(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        var properties = decorations[propertyName] || [0, 0, 0];
                        decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * @example
                 *  class myView extends View{
                 *  @layout.scale(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will scale the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * Specifies the scale of a renderable. Can be applied to every kind of renderable
                 *
                 * @param {Number} x Scales the renderable along the x axis.
                 * @param {Number} y Scales the renderable along the y axis.
                 * @param {Number} z Scales the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                scale: function scale(x) {
                    var y = arguments.length <= 1 || arguments[1] === undefined ? Utils.warn('Please specify y parameter for scaling') : arguments[1];
                    var z = arguments.length <= 2 || arguments[2] === undefined ? Utils.warn('Please specify z parameter for scaling') : arguments[2];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        var propertyName = 'scale';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * @example
                 *  class myView extends View{
                 *  @layout.skew(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will skew the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * Specifies the skew of a renderable. Can be applied to every kind of renderable
                 *
                 * @param {Number} x Skews the renderable along the x axis.
                 * @param {Number} y Skews the renderable along the y axis.
                 * @param {Number} z Skews the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                skew: function skew(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        var propertyName = 'skew';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * @example
                 * @layout.stick.center()
                 * @layout.size(100,100)
                 * @layout.animate({transition: {duration: 350}})
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 *
                 * Creates an animation controller to show/hide the renderable. Renderables can be shown by calling
                 * this.showRenderable(renderableName) and hidden using this.hideRenderable(renderableName) or
                 * this.showRenderable(renderableName, false). When a renderable has been shown, it will emit the event 'shown'.
                 *
                 * @param {Object} [options] The same as famous-flex Animation Controller, plus 2 more:
                 * @param {Boolean} [options.showInitially] Whether to show the renderable when the view is created. (Default: true).
                 * @param {String} [options.waitFor] If specified, it will wait for the renderable with the specified name to show
                 * before showing the renderable
                 * @param {Object} [options.transition] Transition options.
                 * @param {Function} [options.animation] Animation function (default: `AnimationController.Animation.FadedZoom`).
                 * @param {Number} [options.zIndexOffset] Optional z-index difference between the hiding & showing renderable (default: 0).
                 * @param {Number} [options.keepHiddenViewsInDOMCount] Keeps views in the DOM after they have been hidden (default: 0).
                 * @param {Object} [options.show] Show specific options.
                 * @param {Object} [options.show.transition] Show specific transition options.
                 * @param {Function} [options.show.animation] Show specific animation function.
                 * @param {Object} [options.hide] Hide specific options.
                 * @param {Object} [options.hide.transition] Hide specific transition options.
                 * @param {Function} [options.hide.animation] Hide specific animation function.
                 * @param {Object} [options.transfer] Transfer options.
                 * @param {Object} [options.transfer.transition] Transfer specific transition options.
                 * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating (default: 10).
                 * @param {Bool} [options.transfer.fastResize] When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true).
                 * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.
                 * @returns {Function}
                 */
                animate: function animate() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderableConstructor = prepDecoratedRenderable(view, renderableName, descriptor);
                        options = _.merge({
                            showInitially: true,
                            animation: AnimationController.Animation.FadedZoom,
                            show: { transition: options.transition || { curve: Easing.outCubic, duration: 250 } },
                            hide: { transition: options.transition || { curve: Easing.inCubic, duration: 250 } }
                        }, options);

                        renderableConstructor.decorations.animation = options;

                        constructor.decorations = renderableConstructor.decorations;
                    };
                },

                /**
                 * @example
                 * @layout.flow({spring: {dampingRatio: 0.8, period: 1000}})
                 * class myView extends View{
                 * ...
                 * }
                 *
                 * Makes the view flow.
                 * @param {Object} Options to pass as flowOptions to the LayoutController
                 * @param {Bool} [flowOptions.transition] If specified, sets the default transition to use
                 * @param {Bool} [flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).
                 * @param {Object} [flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).
                 * @param {Object} [flowOptions.properties] Properties which should be enabled or disabled for flowing.
                 * @param {Spec} [flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).
                 * @param {Spec} [flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: undefined).
                 * @returns {Function} A decorator function
                 */
                flow: function flow() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.useFlow = true;
                        decorations.flowOptions = flowOptions || {};
                        decorations.transition = flowOptions.transition || undefined;
                    };
                },

                /**
                 * @example
                 * @layout.scrollable()
                 * class myView extends View{
                 * ...
                 * }
                 *
                 * Makes the view as scrollable. This will put the entire content in a ReflowingScrollView that uses getSize on the
                 * view to determine scrolling size. If the size cannot be determined, you might consider declaring your own
                 * getSize() on the View.
                 *
                 * @returns {Function} A decorator function
                 */
                scrollable: function scrollable() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.scrollableOptions = options;
                    };
                },

                /**
                 * @example
                 * @layout.dockPadding(15)
                 * //Creates a class with 15px margin on all sides for docked renderables
                 * class myView extends View{
                 *
                 *  //Will be displayed with margin
                 *  @layout.dock.top(20)
                 *  onTop = new Surface({content: "hello world"});
                 *
                 *  //Will be displayed without margin since we're using @layout.stick
                 *  @layout.stick.bottom
                 *  onButtom = new Surface({content: "hey hey"});
                 * }
                 *
                 * Sets the margins for the docked content. This can be applied both to a child and a class. When in conflict,
                 * the parent will override the child's setting. If the margin is set on a Surface, then CSS padding will be set.
                 * margins can be 1, 2, or 4, parameters, which can be specified as shorthand in the same way
                 * as CSS does it.
                 *
                 * @param {Number} firstMargin
                 * @param {Number} [secondMargin]
                 * @param {Number} [thirdMargin]
                 * @param {Number} [fourthMargin]
                 * @returns {Function} A decorator function
                 */
                dockPadding: function dockPadding() {
                    for (var _len = arguments.length, margins = Array(_len), _key = 0; _key < _len; _key++) {
                        margins[_key] = arguments[_key];
                    }

                    return function (target) {
                        var decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        }
                        decorations.viewMargins = LayoutUtility.normalizeMargins(margins);
                    };
                },

                columnDockPadding: function columnDockPadding() {
                    var maxContentWidth = arguments.length <= 0 || arguments[0] === undefined ? 720 : arguments[0];
                    var defaultPadding = arguments.length <= 1 || arguments[1] === undefined ? [0, 16, 0, 16] : arguments[1];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        var normalisedPadding = LayoutUtility.normalizeMargins(defaultPadding);

                        /* Default to 16px dockPadding */
                        layout$1.dockPadding(normalisedPadding);

                        /* Calculate the dockPadding dynamically every time the View's size changes.
                         * The results from calling this method are further handled in View.js.
                         *
                         * The logic behind this is 16px padding by default, unless the screen is
                         * wider than 720px. In that case, the padding is increased to make the content
                         * in between be at maximum 720px. */
                        decorations.dynamicDockPadding = function (size) {
                            var sideWidth = size[0] > maxContentWidth + 32 ? (size[0] - maxContentWidth) / 2 : normalisedPadding[1];
                            return [normalisedPadding[0], sideWidth, normalisedPadding[2], sideWidth];
                        };
                    };
                },

                /**
                 * @example
                 * @layout.custom((context) => {
                 *  context.set('myRenderable', {
                 *  size: [100, 100]
                 * })
                 * class MyView extends View {
                 *  constructor(options) {
                 *      super(options);
                 *      this.renderables.myRenderable = new Surface({properties: {backgroundColor: 'red'}});
                 *  }
                 * }
                 *
                 * Adds a custom layout function to the view.
                 * This decorator works directly on the object so you shouldn't pass any arguments nor use parentheses.
                 *
                 * @param customLayoutFunction
                 * @returns {Function} A decorator function
                 */
                custom: function custom(customLayoutFunction) {
                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.customLayoutFunction = customLayoutFunction;
                    };
                }
            };
            flow = {
                defaultOptions: function defaultOptions() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        decorations.flow.defaults = _extends({}, flowOptions);
                    };
                },

                defaultState: function defaultState() {
                    for (var _len2 = arguments.length, transformations = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        transformations[_key2 - 2] = arguments[_key2];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        flow.stateStep.apply(flow, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        for (var _iterator = transformations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var transformation = _ref;

                            transformation(target, renderableName, descriptor);
                        }
                    };
                },

                stateStep: function stateStep() {
                    for (var _len3 = arguments.length, transformations = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                        transformations[_key3 - 2] = arguments[_key3];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        if (!decorations.flow.states[stateName]) {
                            decorations.flow.states[stateName] = { steps: [] };
                        }
                        decorations.flow.states[stateName].steps.unshift({ transformations: transformations, options: stateOptions });
                    };
                },

                viewStates: function viewStates() {
                    var states = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        if (!decorations.flow) {
                            decorations.flow = {};
                        }
                        decorations.flow.viewStates = states;
                    };
                },

                multipleStateStep: function multipleStateStep() {
                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                    return function (target, renderableName, descriptor) {
                        for (var _iterator2 = states, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var _ref3 = _ref2;
                            var stateOptions = _ref3.stateOptions;
                            var transformations = _ref3.transformations;

                            flow.stateStep.apply(flow, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        }
                    };
                }
            };

            _get = function get(object, property, receiver) {
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);

                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);

                    if (parent === null) {
                        return undefined;
                    } else {
                        return get(parent, property, receiver);
                    }
                } else if ("value" in desc) {
                    return desc.value;
                } else {
                    var getter = desc.get;

                    if (getter === undefined) {
                        return undefined;
                    }

                    return getter.call(receiver);
                }
            };

            DataBoundScrollView = function (_ReflowingScrollView) {
                _inherits(DataBoundScrollView, _ReflowingScrollView);

                _createClass(DataBoundScrollView, [{
                    key: 'internalDataSource',
                    get: function get() {
                        return this._internalDataSource;
                    }
                }]);

                function DataBoundScrollView() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, DataBoundScrollView);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DataBoundScrollView).call(this, combineOptions({
                        scrollFriction: {
                            strength: 0.0015
                        },
                        autoPipeEvents: true,
                        throttleDelay: 0, /* If set to 0, no delay is added in between adding items to the DataBoundScrollView. */
                        dataSource: [],
                        sortingDirection: 'ascending',
                        flow: true,
                        flowOptions: {
                            spring: { // spring-options used when transitioning between states
                                dampingRatio: 0.8, // spring damping ratio
                                period: 1000 // duration of the animation
                            },
                            insertSpec: { // render-spec used when inserting renderables
                                opacity: 0 // start opacity is 0, causing a fade-in effect,
                            }
                        },
                        dataFilter: function dataFilter() {
                            return true;
                        },
                        ensureVisible: null,
                        layoutOptions: {
                            isSectionCallback: options.stickyHeaders ? function (renderNode) {
                                return renderNode.groupId !== undefined;
                            } : undefined
                        },
                        chatScrolling: false
                    }, options)));

                    _this._internalDataSource = {};
                    _this._internalGroups = {};
                    _this.isGrouped = _this.options.groupBy != null;
                    _this.isDescending = _this.options.sortingDirection === 'descending';
                    _this.throttler = new Throttler(_this.options.throttleDelay, true, _this);

                    _this._useCustomOrdering = !!_this.options.orderBy;
                    /* If no orderBy method is set, or it is a string field name, we set our own ordering method. */
                    if (!_this.options.orderBy || typeof _this.options.orderBy === 'string') {
                        (function () {
                            var fieldName = _this.options.orderBy || 'id';
                            _this.options.orderBy = function (currentChild, _ref) {
                                var model = _ref.model;

                                if (this.isDescending) {
                                    return currentChild[fieldName] > model[fieldName];
                                } else {
                                    return currentChild[fieldName] < model[fieldName];
                                }
                            }.bind(_this);
                        })();
                    }

                    /* If present in options.headerTemplate or options.placeholderTemplate, we build the header and placeholder elements. */
                    _this.addHeader();
                    _this._addPlaceholder();

                    if (_this.options.dataStore) {
                        _this._bindDataSource(_this.options.dataStore);
                    }
                    return _this;
                }

                /**
                 * Set a template function, optionally re-renders all the dataSource' renderables
                 * @param templateFunction
                 */

                _createClass(DataBoundScrollView, [{
                    key: 'setItemTemplate',
                    value: function setItemTemplate() {
                        var templateFunction = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                        var reRender = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

                        this.options.itemTemplate = templateFunction;

                        if (reRender) {
                            this.clearDataSource();
                            this.reloadFilter(this.options.dataFilter);
                        }
                    }
                }, {
                    key: 'setGroupTemplate',
                    value: function setGroupTemplate() {
                        var templateFunction = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                        var reRender = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

                        this.options.groupTemplate = templateFunction;

                        if (reRender) {
                            this.clearDataSource();
                            this.reloadFilter(this.options.dataFilter);
                        }
                    }
                }, {
                    key: 'setDataStore',
                    value: function setDataStore(dataStore) {
                        if (this.options.dataStore) {
                            this.clearDataSource();
                        }
                        this.options.dataStore = dataStore;
                        this._bindDataSource(this.options.dataStore);
                    }
                }, {
                    key: 'getDataStore',
                    value: function getDataStore() {
                        return this.options.dataStore;
                    }

                    /**
                     * Reloads the dataFilter option of the DataBoundScrollView, and verifies whether the items in the dataStore are allowed by the new filter.
                     * It removes any currently visible items that aren't allowed anymore, and adds any non-visible ones that are allowed now.
                     * @param {Function} newFilter New filter function to verify item visibility with.
                     * @param {Boolean} reRender Boolean to rerender all childs that pass the filter function. Usefull when setting a new itemTemplate alongside reloading the filter
                     * @returns {Promise} Resolves when filter has been applied
                     */

                }, {
                    key: 'reloadFilter',
                    value: function reloadFilter(newFilter) {
                        var _this2 = this;

                        this.options.dataFilter = newFilter;

                        var filterPromises = [];

                        var _loop = function _loop() {
                            if (_isArray) {
                                if (_i >= _iterator.length) return 'break';
                                _ref2 = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) return 'break';
                                _ref2 = _i.value;
                            }

                            var entry = _ref2;

                            var alreadyExists = _this2._internalDataSource[entry.id] !== undefined;
                            var result = newFilter(entry);

                            if (result instanceof Promise) {
                                filterPromises.push(result);
                                result.then(function (shouldShow) {
                                    this._handleNewFilterResult(shouldShow, alreadyExists, entry);
                                }.bind(_this2));
                            } else {
                                _this2._handleNewFilterResult(result, alreadyExists, entry);
                            }
                        };

                        for (var _iterator = this.options.dataStore || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref2;

                            var _ret2 = _loop();

                            if (_ret2 === 'break') break;
                        }
                        return Promise.all(filterPromises);
                    }

                    /**
                     * Clears the dataSource by removing all entries
                     */

                }, {
                    key: 'clearDataSource',
                    value: function clearDataSource() {
                        for (var _iterator2 = this.options.dataStore || [], _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref3 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref3 = _i2.value;
                            }

                            var _entry = _ref3;

                            this._removeItem(_entry);
                        }
                    }

                    /**
                     * Determines whether the last element showing is the actual last element
                     * @returns {boolean} True if the last element showing is the actual last element
                     */

                }, {
                    key: 'isAtBottom',
                    value: function isAtBottom() {
                        var lastVisibleItem = this.getLastVisibleItem();
                        return lastVisibleItem && lastVisibleItem.renderNode === this._dataSource._.tail._value;
                    }

                    /**
                     * Returns the currently active group elements, or an empty object of none are present.
                     * @returns {Object}
                     */

                }, {
                    key: 'getGroups',
                    value: function getGroups() {
                        return this._internalGroups || {};
                    }
                }, {
                    key: '_handleNewFilterResult',
                    value: function _handleNewFilterResult(shouldShow, alreadyExists, entry) {
                        if (shouldShow) {
                            /* This entry should be in the view, add it if it doesn't exist yet. */
                            if (!alreadyExists) {
                                this._addItem(entry);
                            }
                        } else {
                            /* This entry should not be in the view, remove if present. */
                            if (alreadyExists) {
                                this._removeItem(entry);
                            }
                        }
                    }
                }, {
                    key: '_findGroup',
                    value: function _findGroup(groupId) {
                        return this._internalGroups[groupId] || -1;
                    }
                }, {
                    key: '_getGroupByValue',
                    value: function _getGroupByValue(child) {
                        var groupByValue = '';
                        if (typeof this.options.groupBy === 'function') {
                            groupByValue = this.options.groupBy(child);
                        } else if (typeof this.options.groupBy === 'string') {
                            groupByValue = this.options.groupBy;
                        }
                        return groupByValue;
                    }
                }, {
                    key: '_addGroupItem',
                    value: function _addGroupItem(groupByValue, insertIndex) {
                        var newSurface = this.options.groupTemplate(groupByValue);
                        newSurface.groupId = groupByValue;
                        this._internalGroups[groupByValue] = { position: insertIndex, itemsCount: 0 };
                        this.insert(insertIndex, newSurface);

                        return newSurface;
                    }
                }, {
                    key: '_getInsertIndex',
                    value: function _getInsertIndex(child) {
                        var previousSiblingID = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

                        /* By default, add item at the end if the orderBy function does not specify otherwise. */
                        var firstIndex = this._getZeroIndex();
                        var insertIndex = this._dataSource.getLength();
                        var placedWithinGroup = false;

                        if (this.isGrouped) {
                            var groupIndex = void 0;
                            var groupId = this._getGroupByValue(child);
                            var groupData = this._findGroup(groupId);
                            if (groupData) groupIndex = groupData.position;
                            if (groupIndex != undefined && groupIndex !== -1) {
                                for (insertIndex = groupIndex + 1; insertIndex <= groupIndex + groupData.itemsCount; insertIndex++) {
                                    if (this.options.orderBy) {
                                        var dataId = this._viewSequence.findByIndex(insertIndex)._value.dataId;
                                        if (dataId && this.options.orderBy(child, this._internalDataSource[dataId])) {
                                            break;
                                        }
                                    } else {
                                        insertIndex += this._internalGroups[groupId].itemsCount;
                                        break;
                                    }
                                }
                                placedWithinGroup = true;
                            }
                        }

                        if (!placedWithinGroup) {
                            /* If we have an orderBy function, find the index we should be inserting at. */
                            if (this._useCustomOrdering && this.options.orderBy && typeof this.options.orderBy === 'function' || this.isGrouped) {
                                var foundOrderedIndex = -1;
                                if (this.isGrouped) {

                                    for (var _iterator3 = _.sortBy(this._internalGroups, 'position'), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                                        var _ref4;

                                        if (_isArray3) {
                                            if (_i3 >= _iterator3.length) break;
                                            _ref4 = _iterator3[_i3++];
                                        } else {
                                            _i3 = _iterator3.next();
                                            if (_i3.done) break;
                                            _ref4 = _i3.value;
                                        }

                                        var group = _ref4;

                                        /* Check the first and last item of every group (they're sorted) */
                                        for (var _iterator4 = group.itemsCount > 1 ? [group.position + 1, group.position + group.itemsCount - 1] : [group.position + 1], _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                            var _ref5;

                                            if (_isArray4) {
                                                if (_i4 >= _iterator4.length) break;
                                                _ref5 = _iterator4[_i4++];
                                            } else {
                                                _i4 = _iterator4.next();
                                                if (_i4.done) break;
                                                _ref5 = _i4.value;
                                            }

                                            var position = _ref5;

                                            var _dataId = this._viewSequence.findByIndex(position)._value.dataId;

                                            if (this.options.orderBy(child, this._internalDataSource[_dataId])) {
                                                foundOrderedIndex = group.position;
                                                break;
                                            }
                                        }
                                        if (foundOrderedIndex > -1) {
                                            break;
                                        }
                                    }
                                } else {
                                    foundOrderedIndex = this.orderBy(child, this.options.orderBy);
                                }

                                if (foundOrderedIndex !== -1) {
                                    insertIndex = foundOrderedIndex;
                                }
                                /*
                                 There is no guarantee of order when grouping objects unless orderBy is explicitly defined
                                 */
                            } else if (previousSiblingID !== undefined && previousSiblingID != null) {
                                /* We don't have an orderBy method, but do have a previousSiblingID we can use to find the correct insertion index. */
                                var siblingIndex = this._findData(previousSiblingID).position;
                                if (siblingIndex !== -1) {
                                    insertIndex = siblingIndex + 1;
                                }
                            }
                        }

                        return insertIndex;
                    }
                }, {
                    key: '_insertGroup',
                    value: function _insertGroup(insertIndex, groupByValue) {
                        var groupIndex = this._findGroup(groupByValue);
                        if (groupByValue) {
                            var groupExists = groupIndex !== -1;
                            if (!groupExists) {
                                /* No group of this value exists yet, so we'll need to create one. */
                                this._updatePosition(insertIndex, 1);
                                var newSurface = this._addGroupItem(groupByValue, insertIndex);
                                this._insertId('group_' + groupByValue, insertIndex, newSurface, null, { groupId: groupByValue });
                                /*insertIndex++;*/
                            }
                            return !groupExists;
                        }
                        return null;
                    }
                }, {
                    key: '_addItem',
                    value: function () {
                        var ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(child) {
                            var previousSiblingID = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];
                            var insertIndex, groupByValue, newSurface, insertSpec, shouldEnsureVisibleUndefined, shouldEnsureVisible;
                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            if (!this._findData(child.id)) {
                                                _context.next = 3;
                                                break;
                                            }

                                            console.log('Child already exists ', child.id);
                                            return _context.abrupt('return');

                                        case 3:

                                            this._removePlaceholder();

                                            insertIndex = this._getInsertIndex(child, previousSiblingID);

                                            /* If we're using groups, check if we need to insert a group item before this child. */

                                            if (this.isGrouped) {
                                                groupByValue = this._getGroupByValue(child);

                                                if (this._insertGroup(insertIndex, groupByValue)) {
                                                    /* If a new group is inserted, then increase the insert index */
                                                    insertIndex++;
                                                }
                                                /* Increase the count of the number of items in the group */
                                                this._internalGroups[groupByValue].itemsCount++;
                                            }

                                            newSurface = this.options.itemTemplate(child);

                                            if (!(newSurface instanceof Promise)) {
                                                _context.next = 11;
                                                break;
                                            }

                                            _context.next = 10;
                                            return newSurface;

                                        case 10:
                                            newSurface = _context.sent;

                                        case 11:

                                            newSurface.dataId = child.id;
                                            this._subscribeToClicks(newSurface, child);

                                            /* If we're scrolling as with a chat window, then scroll to last child if we're at the bottom */
                                            if (this.options.chatScrolling && insertIndex === this._dataSource.getLength()) {
                                                if (this.isAtBottom() || !this._allChildrenAdded) {
                                                    this._lastChild = child;
                                                }
                                            }
                                            insertSpec = void 0;

                                            if (this.options.customInsertSpec) {
                                                insertSpec = this.options.customInsertSpec(child);
                                            }

                                            this.insert(insertIndex, newSurface, insertSpec);
                                            this._updatePosition(insertIndex);
                                            this._insertId(child.id, insertIndex, newSurface, child);

                                            if (this.options.ensureVisible != null || this.options.chatScrolling) {
                                                shouldEnsureVisibleUndefined = this.options.ensureVisible == null;
                                                shouldEnsureVisible = !shouldEnsureVisibleUndefined ? this.options.ensureVisible(child, newSurface, insertIndex) : false;

                                                if (this.options.chatScrolling) {
                                                    if (child === this._lastChild && (shouldEnsureVisible || shouldEnsureVisibleUndefined)) {
                                                        this.ensureVisible(newSurface);
                                                    }
                                                } else if (shouldEnsureVisible) {
                                                    this.ensureVisible(newSurface);
                                                }
                                            }

                                            _get(Object.getPrototypeOf(DataBoundScrollView.prototype), '_addItem', this).call(this, child, previousSiblingID);

                                        case 21:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function _addItem(_x7, _x8) {
                            return ref.apply(this, arguments);
                        }

                        return _addItem;
                    }()
                }, {
                    key: '_replaceItem',
                    value: function _replaceItem(child) {
                        var index = this._findData(child.id).position;

                        var newSurface = this.options.itemTemplate(child);
                        newSurface.dataId = child.id;
                        this._subscribeToClicks(newSurface, child);
                        this._insertId(child.id, index, newSurface, child);
                        this.replace(index, newSurface, true);
                    }

                    /**
                     * Patch because Hein forgot to auto pipe events when replacing
                     * @param indexOrId
                     * @param renderable
                     * @param noAnimation
                     */

                }, {
                    key: 'replace',
                    value: function replace(indexOrId, renderable, noAnimation) {
                        _get(Object.getPrototypeOf(DataBoundScrollView.prototype), 'replace', this).call(this, indexOrId, renderable, noAnimation);
                        // Auto pipe events
                        if (this.options.autoPipeEvents && renderable && renderable.pipe) {
                            renderable.pipe(this);
                            renderable.pipe(this._eventOutput);
                        }
                    }
                }, {
                    key: '_removeGroupIfNecessary',
                    value: function _removeGroupIfNecessary(groupByValue) {
                        /* Check if the group corresponding to the child is now empty */
                        var group = this._internalGroups[groupByValue];
                        if (group && group.itemsCount === 0) {
                            /* TODO: Maybe remove internalgroups[groupByValue]? (Or not?) */
                            var position = group.position;

                            this._updatePosition(position, -1);
                            this.remove(position);
                            delete this._internalGroups[groupByValue];
                            delete this._internalDataSource[groupByValue];
                        }
                    }
                }, {
                    key: '_removeItem',
                    value: function _removeItem(child) {
                        var internalChild = this.internalDataSource[child.id] || {};
                        var index = internalChild.position;
                        if (index > -1) {
                            this._updatePosition(index, -1);
                            this.remove(index);
                            delete this.internalDataSource[child.id];
                        }

                        /* If we're using groups, check if we need to remove the group that this child belonged to. */
                        if (this.isGrouped) {
                            var groupByValue = this._getGroupByValue(child);
                            var group = this._internalGroups[groupByValue];
                            if (group) {
                                group.itemsCount--;
                            }

                            this._removeGroupIfNecessary(groupByValue);
                        }

                        /* The amount of items in the dataSource is subtracted with a header if present, to get the total amount of actual items in the scrollView. */
                        var itemCount = this._dataSource.getLength() - this._getZeroIndex();
                        if (itemCount === 0) {
                            this._addPlaceholder();
                        }
                    }
                }, {
                    key: '_moveItem',
                    value: function _moveItem(oldId) {
                        var prevChildId = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        var oldData = this._findData(oldId);
                        var oldIndex = oldData.position;

                        var previousSiblingIndex = this._getNextVisibleIndex(prevChildId);
                        if (oldIndex !== previousSiblingIndex) {
                            this.move(oldIndex, previousSiblingIndex);
                            this._internalDataSource[previousSiblingIndex] = oldData;
                            this._internalDataSource[previousSiblingIndex].position = oldIndex;
                        }
                    }
                }, {
                    key: 'addHeader',
                    value: function addHeader() {
                        if (this.options.headerTemplate) {
                            this.header = this.options.headerTemplate();
                            this.header.isHeader = true;
                            this._insertId(0, 0, this.header, null, { isHeader: true });
                            this.insert(0, this.header);
                        }
                    }
                }, {
                    key: 'removeHeader',
                    value: function removeHeader() {
                        if (this.header) {
                            this.remove(0);
                            delete this.internalDataSource[0];
                            this.header = null;
                        }
                    }
                }, {
                    key: '_addPlaceholder',
                    value: function _addPlaceholder() {
                        if (this.options.placeholderTemplate && !this.placeholder) {
                            var insertIndex = this._getZeroIndex();
                            this.placeholder = this.options.placeholderTemplate();
                            this.placeholder.isPlaceholder = true;
                            this.insert(insertIndex, this.placeholder);
                        }
                    }
                }, {
                    key: '_getZeroIndex',
                    value: function _getZeroIndex() {
                        return this.header ? 1 : 0;
                    }
                }, {
                    key: '_removePlaceholder',
                    value: function _removePlaceholder() {
                        if (this.placeholder) {
                            if (this.placeholder) this.remove(this._getZeroIndex());
                            this.placeholder = null;
                        }
                    }
                }, {
                    key: '_bindDataSource',
                    value: function _bindDataSource() {
                        var _this3 = this;

                        if (!this.options.dataStore || !this.options.itemTemplate) {
                            console.log('Datasource and template should both be set.');
                            return;
                        }

                        if (!this.options.template instanceof Function) {
                            console.log('Template needs to be a function.');
                            return;
                        }
                        if (this.options.chatScrolling) {
                            this.options.dataStore.on('ready', function () {
                                return _this3._allChildrenAdded = true;
                            });
                        }

                        this.options.dataStore.on('child_added', this._onChildAdded.bind(this));
                        this.options.dataStore.on('child_changed', this._onChildChanged.bind(this));
                        this.options.dataStore.on('child_moved', this._onChildMoved.bind(this));
                        this.options.dataStore.on('child_removed', this._onChildRemoved.bind(this));
                    }
                }, {
                    key: '_onChildAdded',
                    value: function _onChildAdded(child, previousSiblingID) {
                        var _this4 = this;

                        if (this.options.dataFilter && typeof this.options.dataFilter === 'function') {

                            var _result = this.options.dataFilter(child);

                            if (_result instanceof Promise) {
                                /* If the result is a Promise, show the item when that promise resolves. */
                                _result.then(function (show) {
                                    if (show) {
                                        _this4.throttler.add(function () {
                                            _this4._addItem(child, previousSiblingID);
                                        });
                                    }
                                });
                            } else if (_result) {
                                /* The result is an item, so we can add it directly. */
                                this.throttler.add(function () {
                                    _this4._addItem(child, previousSiblingID);
                                });
                            }
                        } else {
                            /* There is no dataFilter method, so we can add this child. */
                            this.throttler.add(function () {
                                _this4._addItem(child, previousSiblingID);
                            });
                        }
                    }
                }, {
                    key: '_onChildChanged',
                    value: function _onChildChanged(child, previousSiblingID) {
                        var _this6 = this;

                        var changedItemIndex = this._getDataSourceIndex(child.id);

                        if (this._dataSource && changedItemIndex < this._dataSource.getLength()) {

                            var _result2 = this.options.dataFilter ? this.options.dataFilter(child) : true;

                            if (_result2 instanceof Promise) {
                                _result2.then(function (show) {
                                    var _this5 = this;

                                    if (show) {
                                        this.throttler.add(function () {
                                            _this5._replaceItem(child);
                                        });
                                    } else {
                                        this._removeItem(child);
                                    }
                                }.bind(this));
                            } else if (this.options.dataFilter && typeof this.options.dataFilter === 'function' && !_result2) {
                                this._removeItem(child);
                            } else {
                                if (changedItemIndex === -1) {
                                    this.throttler.add(function () {
                                        _this6._addItem(child, previousSiblingID);
                                    });
                                } else {
                                    this.throttler.add(function () {
                                        _this6._replaceItem(child);
                                        if (previousSiblingID && !_this6.isGrouped && !_this6._useCustomOrdering) {
                                            _this6._moveItem(child.id, previousSiblingID);
                                        }
                                    });
                                }
                            }
                        }
                    }
                }, {
                    key: '_onChildMoved',
                    value: function _onChildMoved(child, previousSiblingID) {
                        var _this7 = this;

                        var current = this._getDataSourceIndex(child.id);
                        this.throttler.add(function () {
                            _this7._moveItem(current, previousSiblingID);
                        });
                    }
                }, {
                    key: '_onChildRemoved',
                    value: function _onChildRemoved(child) {
                        var _this8 = this;

                        this.throttler.add(function () {
                            _this8._removeItem(child);
                        });
                    }
                }, {
                    key: '_getDataSourceIndex',
                    value: function _getDataSourceIndex(id) {
                        var data = this._findData(id);
                        return data ? data.position : -1;
                    }
                }, {
                    key: '_getNextVisibleIndex',
                    value: function _getNextVisibleIndex(id) {
                        var viewIndex = -1;
                        var viewData = this._findData(id);

                        if (viewData) {
                            viewIndex = viewData.position;
                        }

                        if (viewIndex === -1) {

                            var modelIndex = _.findIndex(this.options.dataStore, function (model) {
                                return model.id === id;
                            });

                            if (modelIndex === 0 || modelIndex === -1) {
                                return this.isDescending ? this._dataSource ? this._dataSource.getLength() - 1 : 0 : 0;
                            } else {
                                var nextModel = this.options.dataStore[this.isDescending ? modelIndex + 1 : modelIndex - 1];
                                var nextIndex = this._findData(nextModel.id).position;
                                if (nextIndex > -1) {
                                    return this.isDescending ? nextIndex === 0 ? 0 : nextIndex - 1 : this._dataSource.getLength() === nextIndex + 1 ? nextIndex : nextIndex + 1;
                                } else {
                                    return this._getNextVisibleIndex(nextModel.id);
                                }
                            }
                        } else {
                            return this.isDescending ? viewIndex === 0 ? 0 : viewIndex - 1 : this._dataSource.getLength() === viewIndex + 1 ? viewIndex : viewIndex + 1;
                        }
                    }
                }, {
                    key: 'orderBy',
                    value: function orderBy(child, orderByFunction) {
                        var item = this._dataSource._.head;
                        var index = 0;

                        while (item) {
                            if (item._value.dataId && this.internalDataSource[item._value.dataId] && orderByFunction(child, this.internalDataSource[item._value.dataId])) {
                                return index;
                            }

                            index++;
                            item = item._next;
                        }
                        return -1;
                    }
                }, {
                    key: '_updatePosition',
                    value: function _updatePosition(position) {
                        var change = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

                        if (position === undefined || position === this._dataSource.getLength() - 1) return;
                        for (var _iterator5 = Object.keys(this.internalDataSource), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref6;

                            if (_isArray5) {
                                if (_i5 >= _iterator5.length) break;
                                _ref6 = _iterator5[_i5++];
                            } else {
                                _i5 = _iterator5.next();
                                if (_i5.done) break;
                                _ref6 = _i5.value;
                            }

                            var element = _ref6;

                            var dataObject = this.internalDataSource[element];
                            if (dataObject.position >= position) {
                                dataObject.position += change;
                            }
                        }
                        if (this.isGrouped) {
                            this._updateGroupPosition(position, change);
                        }
                    }
                }, {
                    key: '_updateGroupPosition',
                    value: function _updateGroupPosition(position) {
                        var change = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

                        for (var _iterator6 = Object.keys(this._internalGroups), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
                            var _ref7;

                            if (_isArray6) {
                                if (_i6 >= _iterator6.length) break;
                                _ref7 = _iterator6[_i6++];
                            } else {
                                _i6 = _iterator6.next();
                                if (_i6.done) break;
                                _ref7 = _i6.value;
                            }

                            var element = _ref7;

                            if (this._internalGroups[element].position >= position) {
                                /* Update the position of groups coming after */
                                this._internalGroups[element].position += change;
                            }
                        }
                    }
                }, {
                    key: '_findData',
                    value: function _findData(id) {
                        var data = this.internalDataSource[id] || undefined;
                        return data;
                    }
                }, {
                    key: '_insertId',
                    value: function _insertId() {
                        var id = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
                        var position = arguments[1];
                        var renderable = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
                        var model = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
                        var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

                        if (id === undefined || id === null) return;

                        this._internalDataSource[id] = { position: position, renderable: renderable, model: model };
                        for (var _iterator7 = Object.keys(options), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
                            var _ref8;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref8 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref8 = _i7.value;
                            }

                            var element = _ref8;

                            this._internalDataSource[id][element] = options[element];
                        }
                    }
                }, {
                    key: '_subscribeToClicks',
                    value: function _subscribeToClicks(surface, model) {
                        surface.on('click', function () {
                            this._eventOutput.emit('child_click', { renderNode: surface, dataObject: model });
                        }.bind(this));
                    }
                }]);

                return DataBoundScrollView;
            }(ReflowingScrollView);

            PrioritisedArray = function (_extendableBuiltin2) {
                _inherits(PrioritisedArray, _extendableBuiltin2);

                _createClass(PrioritisedArray, [{
                    key: 'length',

                    /* Extending Array does not work fluently yet. The length property always returns 0,
                     * regardless of how many entries are in the array. We'll override the length prop to determine
                     * the amount of enumerable properties in our PrioritisedArray instead of using the built-in length property.
                     */
                    get: function get() {
                        return Object.keys(this).length;
                    },
                    set: function set(value) {
                        return value;
                    }

                    /**
                     *
                     * @param {Function} dataType DataType of the models being added to the PrioritisedArray.
                     * @param {DataSource} dataSource Optional: dataSource to load the models from. If none is given, a new DataSource is made with a path guessed from
                     * the model's DataType name.
                     * @param {Snapshot} dataSnapshot Optional: snapshot already containing model data. Prevents initial subscription on all values in the DataSource.
                     * @param {Object} options Optional: options to pass to the dataSource if none is provided and a new one is constructed.
                     * @returns {PrioritisedArray} PrioritisedArray instance.
                     */

                }]);

                function PrioritisedArray(dataType) {
                    var dataSource = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    var dataSnapshot = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
                    var options = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
                    var modelOptions = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];

                    _classCallCheck(this, PrioritisedArray);

                    /**** Callbacks ****/

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PrioritisedArray).call(this));

                    _this._valueChangedCallback = null;
                    _this._ids = {};

                    /**** Private properties ****/
                    _this._dataType = dataType;
                    _this._dataSource = dataSource;
                    _this._isBeingReordered = false;
                    _this._modelOptions = modelOptions;
                    /* Flag to determine when we're reordering so we don't listen to move updates */
                    _this._eventEmitter = new EventEmitter();
                    _this._childAddedThrottler = new Throttler(1, true, _this, true);
                    _this._overrideChildAddedForId = null;

                    /* Bind all local methods to the current object instance, so we can refer to "this"
                     * in the methods as expected, even when they're called from event handlers.        */
                    ObjectHelper.bindAllMethods(_this, _this);

                    /* Hide all private properties (starting with '_') and methods from enumeration,
                     * so when you do for( in ), only actual data properties show up. */
                    ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(_this);

                    /* Hide the priority field from enumeration, so we don't save it to the dataSource. */
                    ObjectHelper.hidePropertyFromObject(Object.getPrototypeOf(_this), 'length');

                    /* If no dataSource is given, create own one with guessed path */
                    if (!dataSource) {
                        /* The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.
                         * This allows Arva code to be minified and mangled without losing automated model name resolving.
                         * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name. */
                        var path = _this.constructor._name || Object.getPrototypeOf(_this).constructor.name;
                        /* Retrieve dataSource from the DI context */
                        dataSource = Injection.get(DataSource);

                        if (options) {
                            dataSource = dataSource.child(options.path || path, options);
                        } else {
                            dataSource = dataSource.child(path);
                        }

                        _this._dataSource = dataSource;
                    }

                    /* If a snapshot is present use it, otherwise generate one by subscribing to the dataSource one time. */
                    if (dataSnapshot) {
                        _this._buildFromSnapshot(dataSnapshot);
                    } else {
                        _this._buildFromDataSource(dataSource);
                    }
                    return _this;
                }

                /**
                 * Subscribes to events emitted by this PrioritisedArray.
                 * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                 * @param {Function} handler Function that is called when the given event type is emitted.
                 * @param {Object} context Optional: context of 'this' inside the handler function when it is called.
                 * @returns {void}
                 */

                _createClass(PrioritisedArray, [{
                    key: 'on',
                    value: function on(event, handler, context) {
                        var _this2 = this;

                        /* If we're already ready, fire immediately */
                        if ((event === 'ready' || event === 'value') && this._dataSource && this._dataSource.ready) {
                            handler.call(context, this);
                        }

                        /* If we already have children stored locally when the subscriber calls this method,
                         * fire their callback for all pre-existing children. */
                        if (event === 'child_added') {
                            var _loop = function _loop(i) {
                                _this2._childAddedThrottler.add(function () {
                                    var model = _this2[i];
                                    var previousSiblingID = i > 0 ? _this2[i - 1].id : null;
                                    handler.call(context, model, previousSiblingID);
                                });
                            };

                            for (var i = 0; i < this.length; i++) {
                                _loop(i);
                            }
                        }

                        this._eventEmitter.on(event, handler, context);
                    }

                    /**
                     * Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.
                     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                     * @param {Function} [handler] Function that is called when the given event type is emitted.
                     * @param {Object} [context] context of 'this' inside the handler function when it is called.
                     * @returns {Promise} If no callback function provided, a promise that resolves once the event has happened
                     */

                }, {
                    key: 'once',
                    value: function once(event, handler) {
                        var _this3 = this;

                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        if (!handler) {
                            return new Promise(function (resolve) {
                                return _this3.once(event, resolve, context);
                            });
                        }
                        return this.on(event, function onceWrapper() {
                            this.off(event, onceWrapper, context);
                            handler.call.apply(handler, [context].concat(Array.prototype.slice.call(arguments)));
                        }, this);
                    }

                    /**
                     * Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                     * @param {Function} handler Function to remove from event callbacks.
                     * @param {Object} context Object to bind the given callback function to.
                     * @returns {void}
                     */

                }, {
                    key: 'off',
                    value: function off(event, handler, context) {
                        if (event && (handler || context)) {
                            this._eventEmitter.removeListener(event, handler, context);
                        } else {
                            this._eventEmitter.removeAllListeners(event);
                        }
                    }

                    /**
                     * Adds a model instance to the rear of the PrioritisedArray, and emits a 'child_added' and possibly 'new_child' event after successful addition.
                     * @param {Model|Object} model Instance of a Model.
                     * @param {String} prevSiblingId ID of the model preceding the one that will be added.
                     * @returns {Object} Same model as the one originally passed as parameter.
                     */

                }, {
                    key: 'add',
                    value: function add(model) {
                        var prevSiblingId = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        if (model instanceof this._dataType) {
                            if (this.findIndexById(model.id) < 0) {

                                if (prevSiblingId) {
                                    var newPosition = this.findIndexById(prevSiblingId) + 1;
                                    this.insertAt(model, newPosition);
                                } else {
                                    this.push(model);
                                }

                                /* If we've already received an on('value') result, this child addition is
                                 * a new entry that wasn't on the dataSource before. */
                                if (this._dataSource.ready) {
                                    this._eventEmitter.emit('new_child', model, prevSiblingId);
                                }

                                this._eventEmitter.emit('child_added', model, prevSiblingId);
                                return model;
                            }
                        } else if (model instanceof Object) {
                            /* Let's try to parse the object using property reflection */
                            var options = { dataSource: this._dataSource };
                            /* Prevent child_added from being fired immediately when the model is created by creating a promise that resolves
                             * the ID that shouldn't be synced twice
                             */

                            this._overrideChildAddedForId = this.once('local_child_added');
                            var newModel = new this._dataType(null, model, _.extend({}, this._modelOptions, options));

                            this.add(newModel);
                            /* Remove lock */
                            this._eventEmitter.emit('local_child_added', newModel);
                            this._overrideChildAddedForId = null;
                            return newModel;
                        } else {
                            /* TODO: change to throw exception */
                            console.log('Tried to append an object that is not the same type as the one this PrioritisedArray was created with.');
                        }

                        /* Return model so we can do this: let newModel = PrioArray.add(new Model()); newModel.someProperty = true; */
                        return null;
                    }

                    /**
                     * Inserts a model instance at the given position of the PrioritisedArray, and recalculates the priority (position)
                     * of all models after the inserted position.
                     * @param {Model} model Subclass of Model
                     * @param {Number} position Zero-based index where to put the new model instance.
                     * @returns {Object} Same model as the one originally passed as parameter.
                     */

                }, {
                    key: 'insertAt',
                    value: function insertAt(model, position) {
                        if (model instanceof this._dataType) {
                            for (var i = position; i < this.length; i++) {
                                /* Increase the index of items further on in the prio array */
                                this._ids[this[i].id]++;
                            }
                            this.splice(position, 0, model);
                            this._ids[model._id] = position;
                        } else {
                            /* TODO: change to throw exception */
                            console.log('Tried to append an object that is not the same type as the PrioritisedArray was created with.');
                        }

                        /* Return model so we can do this: let newModel = PrioArray.add(new Model()); newModel.someProperty = true; */
                        return model;
                    }
                }, {
                    key: 'push',
                    value: function push(model) {
                        return this.insertAt(model, this.length);
                    }

                    /**
                     * Removes the model instance at the given position. Does not remove the model from the datasource, to do that
                     * call model.remove() directly, or PrioArray[index].remove().
                     * @param {Number} position Index in the PrioritisedArray of the model to remove.
                     * @returns {void}
                     */

                }, {
                    key: 'remove',
                    value: function remove(position) {
                        /*
                         * TODO: Beware, there might be hard to reproduce prone to errors going on sometimes when deleting many things at once
                         * Sometimes, there is an inconsistent state, but I haven't been able to figure out how that happens. /Karl
                         */
                        if (this.length === 1) {
                            this._ids = {};
                        } else {
                            for (var i = position; i < this.length; i++) {
                                /* Decrease the index of items further on in the prio array */
                                if (!this._ids[this[i].id] && this._ids[this[i].id] !== 0) {
                                    console.log("Internal error, decreasing index of non-existing id. For ID: " + this[i].id);
                                }
                                this._ids[this[i].id]--;
                            }
                        }
                        this.splice(position, 1);
                    }

                    /**
                     * Interprets all childs of a given snapshot as instances of the given data type for this PrioritisedArray,
                     * and attempts to instantiate new model instances based on these sub-snapshots. It adds them to the
                     * PrioritisedArray, which also assigns their priority based on their inserted position.
                     * @param {Snapshot} dataSnapshot Snapshot to build the PrioritisedArray from.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_buildFromSnapshot',
                    value: function _buildFromSnapshot(dataSnapshot) {

                        var numChildren = dataSnapshot.numChildren(),
                            currentChild = 1;

                        /* If there is no data at this point yet, fire a ready event */
                        if (numChildren === 0) {
                            this._dataSource.ready = true;
                            this._eventEmitter.emit('ready');
                            this._eventEmitter.emit('value', this);
                        }

                        dataSnapshot.forEach(function (child) {
                            this._childAddedThrottler.add(function (child) {
                                /* Create a new instance of the given data type and prefill it with the snapshot data. */
                                var options = { dataSnapshot: child };
                                var childRef = this._dataSource.child(child.key);

                                /* whenever the ref() is a datasource, we can bind that source to the model.
                                 * whenever it's not a datasource, we assume the model should instantiate a new
                                 * datasource to bind the model */

                                if (childRef instanceof DataSource) {
                                    options.dataSource = childRef;
                                } else {
                                    var rootPath = dataSnapshot.ref().root().toString();
                                    options.path = dataSnapshot.ref().toString().replace(rootPath, '/');
                                }

                                var newModel = new this._dataType(child.key, child.val(), _.extend({}, this._modelOptions, options));
                                this.add(newModel);

                                /* If this is the last child, fire a ready event */
                                if (currentChild++ === numChildren) {
                                    this._dataSource.ready = true;
                                    this._eventEmitter.emit('ready');
                                    this._eventEmitter.emit('value', this);
                                }
                            }.bind(this, child));
                        }.bind(this));
                    }

                    /**
                     * Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it
                     * to get a dataSnapshot which is used in _buildSnapshot to build our array.
                     * @param {DataSource} dataSource DataSource to subscribe to for building the PrioritisedArray.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_buildFromDataSource',
                    value: function _buildFromDataSource(dataSource) {
                        var _this4 = this;

                        dataSource.once('value', function (dataSnapshot) {
                            _this4._buildFromSnapshot(dataSnapshot);
                            _this4._registerCallbacks(dataSource);
                        });
                    }

                    /**
                     * Registers the added, moved, changed, and removed callbacks to the given DataSource.
                     * @param {DataSource} dataSource DataSource to register callbacks on.
                     * @return {void}
                     * @private
                     */

                }, {
                    key: '_registerCallbacks',
                    value: function _registerCallbacks(dataSource) {
                        dataSource.on('child_added', this._doOnceReady(this._onChildAdded));
                        dataSource.on('child_moved', this._doOnceReady(this._onChildMoved));
                        dataSource.on('child_changed', this._doOnceReady(this._onChildChanged));
                        dataSource.on('child_removed', this._doOnceReady(this._onChildRemoved));
                    }
                }, {
                    key: '_doOnceReady',
                    value: function _doOnceReady(callback) {
                        var _this5 = this;

                        return function () {
                            for (var _len = arguments.length, otherArgs = Array(_len), _key = 0; _key < _len; _key++) {
                                otherArgs[_key] = arguments[_key];
                            }

                            if (!_this5._dataSource.ready) {
                                _this5.once('ready', function () {
                                    return callback.apply(undefined, otherArgs);
                                });
                            } else {
                                return callback.apply(undefined, otherArgs);
                            }
                        };
                    }

                    /**
                     * Called by dataSource when a new child is added.
                     * @param {Snapshot} snapshot Snapshot of the added child.
                     * @param {String} prevSiblingId ID of the model preceding the added model.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onChildAdded',
                    value: function _onChildAdded(snapshot, prevSiblingId) {
                        var _this6 = this;

                        var id = snapshot.key;
                        if (this._overrideChildAddedForId) {
                            this._overrideChildAddedForId.then(function (newModel) {
                                /* If the override is concerning another id, then go ahead and make the _onChildAdded */
                                if (newModel.id !== id) {
                                    _this6._onChildAdded(snapshot, prevSiblingId);
                                }
                                /* Otherwise, don't recreate the same model twice */
                            });
                            return;
                        }

                        /* Skip addition if an item with identical ID already exists. */
                        var previousPosition = this.findIndexById(id);
                        if (previousPosition >= 0) {
                            return;
                        }

                        var model = new this._dataType(id, null, _.extend({}, this._modelOptions, {
                            dataSnapshot: snapshot
                        }));
                        this.add(model, prevSiblingId);

                        if (!this._dataSource.ready) {
                            this._dataSource.ready = true;
                            this._eventEmitter.emit('ready');
                        }
                        this._eventEmitter.emit('value', this);
                    }

                    /**
                     * Called by dataSource when a child is changed.
                     * @param {Snapshot} snapshot Snapshot of the added child.
                     * @param {String} prevSiblingId ID of the model preceding the added model.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onChildChanged',
                    value: function _onChildChanged(snapshot, prevSiblingId) {
                        var id = snapshot.key;

                        var previousPosition = this.findIndexById(id);
                        if (previousPosition < 0) {
                            /* The model doesn't exist, so we won't emit a changed event. */
                            return;
                        }

                        var model = this[previousPosition];
                        model._onChildValue(snapshot, prevSiblingId);
                        var newPosition = this.findIndexById(prevSiblingId) + 1;

                        this._moveItem(previousPosition, newPosition, model);

                        this._eventEmitter.emit('child_changed', model, prevSiblingId);
                        this._eventEmitter.emit('value', this);
                    }

                    /**
                     * Called by dataSource when a child is moved, which changes its priority.
                     * @param {Snapshot} snapshot Snapshot of the added child.
                     * @param {String} prevSiblingId ID of the model preceding the added model.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onChildMoved',
                    value: function _onChildMoved(snapshot, prevSiblingId) {
                        /* Ignore priority updates whilst we're reordering to avoid floods */
                        if (!this._isBeingReordered) {

                            var id = snapshot.key;
                            var previousPosition = this.findIndexById(id);
                            var newPosition = this.findIndexById(prevSiblingId) + 1;
                            var tempModel = this[previousPosition];
                            this._moveItem(previousPosition, newPosition, tempModel);

                            var model = this[newPosition];

                            this._eventEmitter.emit('child_moved', model, previousPosition);
                            this._eventEmitter.emit('value', this);
                        }
                    }
                }, {
                    key: '_moveItem',
                    value: function _moveItem(previousPosition, newPosition, modelToMove) {
                        this._ids[modelToMove._id] = newPosition;
                        /* Update the positions of things coming inbetween */
                        for (var positionAhead = previousPosition; positionAhead < newPosition; positionAhead++) {
                            this._ids[this[positionAhead].id]--;
                        }
                        for (var positionBefore = newPosition; positionBefore < previousPosition; positionBefore++) {
                            this._ids[this[positionBefore].id]++;
                        }

                        if (previousPosition === newPosition) {
                            this[newPosition] = modelToMove;
                        } else {
                            this.splice(previousPosition, 1);
                            this.splice(newPosition, 0, modelToMove);
                        }
                    }

                    /**
                     * Called by dataSource when a child is removed.
                     * @param {Snapshot} oldSnapshot Snapshot of the added child.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onChildRemoved',
                    value: function _onChildRemoved(oldSnapshot) {
                        /* TODO: figure out if we can use the snapshot's priority as our array index reliably, to avoid big loops. */
                        var id = oldSnapshot.key;
                        var position = this.findIndexById(id);
                        var model = this[position];

                        if (position !== -1) {
                            this.remove(position);
                            delete this._ids[id];

                            this._eventEmitter.emit('child_removed', model);
                            this._eventEmitter.emit('value', this);
                        }
                    }

                    /**
                     * Return the position of model's id, saved in an associative array
                     * @param {Number} id Id field of the model we're looking for
                     * @returns {Number} Zero-based index if found, -1 otherwise
                     * @private
                     */

                }, {
                    key: 'findIndexById',
                    value: function findIndexById(id) {
                        var position = this._ids[id];
                        return position == undefined || position == null ? -1 : position;
                    }
                }, {
                    key: 'findById',
                    value: function findById(id) {
                        return this[this.findIndexById(id)];
                    }
                }]);

                return PrioritisedArray;
            }(_extendableBuiltin(Array));

            PrioritisedObject = function (_EventEmitter) {
                _inherits(PrioritisedObject, _EventEmitter);

                _createClass(PrioritisedObject, [{
                    key: 'id',
                    get: function get() {
                        return this._id;
                    },
                    set: function set(value) {
                        this._id = value;
                    }

                    /** Priority (positioning) of the object in the dataSource */

                }, {
                    key: 'priority',
                    get: function get() {
                        return this._priority;
                    },
                    set: function set(value) {
                        if (this._priority !== value) {
                            this._priority = value;
                            this._dataSource.setPriority(value);
                        }
                    }

                    /* TODO: refactor out after we've resolved SharepointDataSource specific issue. */

                }, {
                    key: 'dataSource',
                    get: function get() {
                        return this._dataSource;
                    }
                }, {
                    key: '_inheritable',
                    get: function get() {
                        return this._dataSource ? this._dataSource.inheritable : false;
                    }

                    /**
                     * @param {DataSource} dataSource DataSource to construct this PrioritisedObject with.
                     * @param {Snapshot} dataSnapshot Optional: dataSnapshot already containing model data, so we can skip subscribing to the full data on the dataSource.
                     * @returns {PrioritisedObject} PrioritisedObject instance.
                     */

                }]);

                function PrioritisedObject(dataSource) {
                    var dataSnapshot = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                    _classCallCheck(this, PrioritisedObject);

                    /**** Callbacks ****/

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PrioritisedObject).call(this));

                    _this._valueChangedCallback = null;

                    /**** Private properties ****/
                    _this._id = dataSource ? dataSource.key() : 0;
                    _this._events = _this._events || [];
                    _this._dataSource = dataSource;
                    _this._priority = 0; // Priority of this object on remote dataSource
                    _this._isBeingWrittenByDatasource = false; // Flag to determine when dataSource is updating object

                    /* Bind all local methods to the current object instance, so we can refer to "this"
                     * in the methods as expected, even when they're called from event handlers.        */
                    ObjectHelper.bindAllMethods(_this, _this);

                    /* Hide all private properties (starting with '_') and methods from enumeration,
                     * so when you do for( in ), only actual data properties show up. */
                    ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(_this);

                    /* Hide the id field from enumeration, so we don't save it to the dataSource. */
                    ObjectHelper.hidePropertyFromObject(_this, 'id');

                    /* Hide the priority field from enumeration, so we don't save it to the dataSource. */
                    ObjectHelper.hidePropertyFromObject(_this, 'priority');

                    /* Hide the dataSource field from enumeration, so we don't save it to the dataSource. */
                    ObjectHelper.hidePropertyFromObject(_this, 'dataSource');

                    if (dataSnapshot) {
                        _this._buildFromSnapshot(dataSnapshot);
                    } else {
                        _this._buildFromDataSource(dataSource);
                    }
                    return _this;
                }

                /**
                 *  Deletes the current object from the dataSource, and clears itself to free memory.
                 *  @returns {void}
                 */

                _createClass(PrioritisedObject, [{
                    key: 'remove',
                    value: function remove() {
                        this.off();
                        this._dataSource.remove(this);
                        delete this;
                    }

                    /**
                     * Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.
                     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                     * @param {Function} handler Function that is called when the given event type is emitted.
                     * @param {Object} context Optional: context of 'this' inside the handler function when it is called.
                     * @returns {void}
                     */

                }, {
                    key: 'once',
                    value: function once(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        return this.on(event, function onceWrapper() {
                            handler.call.apply(handler, [context].concat(Array.prototype.slice.call(arguments)));
                            this.off(event, onceWrapper, context);
                        }, this);
                    }

                    /**
                     * Subscribes to events emitted by this PrioritisedArray.
                     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                     * @param {Function} handler Function that is called when the given event type is emitted.
                     * @param {Object} context Optional: context of 'this' inside the handler function when it is called.
                     * @returns {void}
                     */

                }, {
                    key: 'on',
                    value: function on(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        var haveListeners = this.listeners(event, true);
                        _get(Object.getPrototypeOf(PrioritisedObject.prototype), 'on', this).call(this, event, handler, context);

                        switch (event) {
                            case 'ready':
                                /* If we're already ready, fire immediately */
                                if (this._dataSource && this._dataSource.ready) {
                                    handler.call(context, this);
                                }
                                break;
                            case 'value':
                                if (!haveListeners) {
                                    /* Only subscribe to the dataSource if there are no previous listeners for this event type. */
                                    this._dataSource.setValueChangedCallback(this._onChildValue);
                                } else {
                                    if (this._dataSource.ready) {
                                        /* If there are previous listeners, fire the value callback once to present the subscriber with inital data. */
                                        handler.call(context, this);
                                    }
                                }
                                break;
                            case 'added':
                                if (!haveListeners) {
                                    this._dataSource.setChildAddedCallback(this._onChildAdded);
                                }
                                break;
                            case 'moved':
                                if (!haveListeners) {
                                    this._dataSource.setChildMovedCallback(this._onChildMoved);
                                }
                                break;
                            case 'removed':
                                if (!haveListeners) {
                                    this._dataSource.setChildRemovedCallback(this._onChildRemoved);
                                }
                                break;
                            default:
                                break;
                        }
                    }

                    /**
                     * Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
                     * @param {Function} handler Function to remove from event callbacks.
                     * @param {Object} context Object to bind the given callback function to.
                     * @returns {void}
                     */

                }, {
                    key: 'off',
                    value: function off(event, handler, context) {
                        if (event && (handler || context)) {
                            _get(Object.getPrototypeOf(PrioritisedObject.prototype), 'removeListener', this).call(this, event, handler, context);
                        } else {
                            _get(Object.getPrototypeOf(PrioritisedObject.prototype), 'removeAllListeners', this).call(this, event);
                        }

                        /* If we have no more listeners of this event type, remove dataSource callback. */
                        if (!this.listeners(event, true)) {
                            switch (event) {
                                case 'ready':
                                    break;
                                case 'value':
                                    this._dataSource.removeValueChangedCallback();
                                    break;
                                case 'added':
                                    this._dataSource.removeChildAddedCallback();
                                    break;
                                case 'moved':
                                    this._dataSource.removeChildMovedCallback();
                                    break;
                                case 'removed':
                                    this._dataSource.removeChildRemovedCallback();
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    /**
                     * Allows multiple modifications to be made to the model without triggering dataSource pushes and event emits for each change.
                     * Triggers a push to the dataSource after executing the given method. This push should then emit an event notifying subscribers of any changes.
                     * @param {Function} method Function in which the model can be modified.
                     * @returns {void}
                     */

                }, {
                    key: 'transaction',
                    value: function transaction(method) {
                        this.disableChangeListener();
                        method();
                        this.enableChangeListener();
                        return this._onSetterTriggered();
                    }

                    /**
                     * Disables pushes of local changes to the dataSource, and stops event emits that refer to the model's data.
                     * @returns {void}
                     */

                }, {
                    key: 'disableChangeListener',
                    value: function disableChangeListener() {
                        this._isBeingWrittenByDatasource = true;
                    }

                    /**
                     * Enables pushes of local changes to the dataSource, and enables event emits that refer to the model's data.
                     * The change listener is active by default, so you'll only need to call this method if you've previously called disableChangeListener().
                     * @returns {void}
                     */

                }, {
                    key: 'enableChangeListener',
                    value: function enableChangeListener() {
                        this._isBeingWrittenByDatasource = false;
                    }

                    /**
                     * Recursively builds getter/setter based properties on current PrioritisedObject from
                     * a given dataSnapshot. If an object value is detected, the object itself gets built as
                     * another PrioritisedObject and set to the current PrioritisedObject as a property.
                     * @param {Snapshot} dataSnapshot DataSnapshot to build the PrioritisedObject from.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_buildFromSnapshot',
                    value: function _buildFromSnapshot(dataSnapshot) {

                        /* Set root object _priority */
                        this._priority = dataSnapshot.getPriority();
                        var data = dataSnapshot.val();
                        var numChildren = dataSnapshot.numChildren();

                        if (!this._id) {
                            this._id = dataSnapshot.key;
                        }

                        if (!this._dataSource) {
                            this._dataSource = dataSnapshot.ref;
                        }

                        /* If there is no data at this point yet, fire a ready event */
                        if (numChildren === 0) {
                            this._dataSource.ready = true;
                            this.emit('ready');
                            return;
                        }

                        for (var key in data) {
                            /* Only map properties that exists on our model */
                            var ownPropertyDescriptor = Object.getOwnPropertyDescriptor(this, key);
                            if (ownPropertyDescriptor && ownPropertyDescriptor.enumerable) {
                                /* If child is a primitive, listen to changes so we can synch with Firebase */
                                ObjectHelper.addPropertyToObject(this, key, data[key], true, true, this._onSetterTriggered);
                            }
                        }

                        this._dataSource.ready = true;
                        this.emit('ready');
                    }

                    /**
                     * Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it
                     * to get a dataSnapshot which is used in _buildSnapshot to build our object.
                     * @param {DataSource} dataSource DataSource to build the PrioritisedObject from.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_buildFromDataSource',
                    value: function _buildFromDataSource(dataSource) {
                        if (!dataSource) {
                            return;
                        }
                        dataSource.once('value', this._buildFromSnapshot);
                    }

                    /**
                     * Gets called whenever a property value is set on this object.
                     * This can happen when local code modifies it, or when the dataSource updates it.
                     * We only propagate changes to the dataSource if the change was local.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onSetterTriggered',
                    value: function _onSetterTriggered() {
                        if (!this._isBeingWrittenByDatasource) {
                            return this._dataSource.setWithPriority(ObjectHelper.getEnumerableProperties(this), this._priority);
                        }
                    }

                    /**
                     * Gets called whenever the current PrioritisedObject is changed by the dataSource.
                     * @param {Snapshot} dataSnapshot Snapshot of the new object value.
                     * @param {String} previousSiblingID ID of the model preceding the current one.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_onChildValue',
                    value: function _onChildValue(dataSnapshot, previousSiblingID) {

                        /* If the new dataSource data is equal to what we have locally,
                         * this is an update triggered by a local change having been pushed
                         * to the remote dataSource. We can ignore it.
                         */
                        if (_.isEqual(ObjectHelper.getEnumerableProperties(this), dataSnapshot.val())) {
                            this.emit('value', this, previousSiblingID);
                            return;
                        }

                        /* Make sure we don't trigger pushes to dataSource whilst repopulating with new dataSource data */
                        this._isBeingWrittenByDatasource = true;
                        this._buildFromSnapshot(dataSnapshot);
                        this._isBeingWrittenByDatasource = false;

                        this.emit('value', this, previousSiblingID);
                    }

                    /* TODO: implement partial updates of model */

                }, {
                    key: '_onChildAdded',
                    value: function _onChildAdded(dataSnapshot, previousSiblingID) {
                        this.emit('added', this, previousSiblingID);
                    }
                }, {
                    key: '_onChildMoved',
                    value: function _onChildMoved(dataSnapshot, previousSiblingID) {
                        this.emit('moved', this, previousSiblingID);
                    }
                }, {
                    key: '_onChildRemoved',
                    value: function _onChildRemoved(dataSnapshot, previousSiblingID) {
                        this.emit('removed', this, previousSiblingID);
                    }
                }]);

                return PrioritisedObject;
            }(EventEmitter);

            Model = function (_PrioritisedObject) {
                _inherits(Model, _PrioritisedObject);

                /**
                 * Creates a new instance of a model.
                 * @param {String} id Optional: The identifier for this model. For a user model this might be a user ID, for example. It
                 *           is used to build the path to the dataSource. This path is <root>/<model name appended with 's'>/<id>.
                 *           If no id is given, a randomly generated one will be pushed to the dataSource. You can use this for
                 *           creating new objects in the dataSource.
                 * @param {Object} data Optional: The initial data to fill the model with. The model will be extended with any
                 *                      properties present in the data parameter.
                 * @param {Object} options Optional: Additional options. Currently used is "dataSnapshot", which if present is used
                 *                          to fetch the initial model data. If not present, the model will add a one-time
                 *                          subscription to the dataSource to fetch initial data.
                 * @returns {Model} Model Instance.
                 */

                function Model(id) {
                    var data = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    _classCallCheck(this, Model);

                    /* Retrieve dataSource from the DI context */
                    var dataSource = options.dataSource || Injection.get(DataSource);

                    /* Replace all stub data fields of any subclass of Model with databinding accessors.
                     * This causes changes to be synched to and from the dataSource. */

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Model).call(this));

                    _this._replaceModelAccessorsWithDatabinding();

                    /* Calculate path to model in dataSource, used if no dataSource or path are given.
                     *
                     * The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.
                     * This allows Arva code to be minified and mangled without losing automated model name resolving.
                     * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name. */
                    var modelName = _this.constructor._name || Object.getPrototypeOf(_this).constructor.name;

                    var pathRoot = modelName + 's';

                    var dataIsSynced = new Promise(function (resolve) {
                        return _this._dataIsSynced = resolve;
                    });
                    var dataSourceOptions = { synced: dataIsSynced };

                    if (options.dataSource && id) {
                        _this._dataSource = options.dataSource;
                    } else if (options.dataSource) {
                        /* No id is present, generate a random one by pushing a new entry to the dataSource. */
                        _this._dataSource = options.dataSource.push(data);
                    } else if (options.path && id) {
                        _this._dataSource = dataSource.child(options.path + '/' + id || '', dataSourceOptions);
                    } else if (options.dataSnapshot) {
                        _this._dataSource = dataSource.child(options.dataSnapshot.ref.path.toString(), dataSourceOptions);
                    } else if (id) {
                        /* If an id is present, use it to locate our model. */
                        _this._dataSource = dataSource.child(pathRoot + '/' + id, dataSourceOptions);
                    } else {
                        /* No id is present, generate a random one by pushing a new entry to the dataSource. */
                        if (options.path) {
                            _this._dataSource = dataSource.child(options.path).push(data);
                        } else {
                            _this._dataSource = dataSource.child(pathRoot).push(data);
                        }
                    }

                    /* Re-construct core PrioritisedObject with new dataSource */
                    if (options.dataSnapshot) {
                        _this._buildFromSnapshot(options.dataSnapshot);
                    } else {
                        _this._buildFromDataSource(_this._dataSource);
                    }

                    /* Write local data to model, if any data is present. */
                    _this._writeLocalDataToModel(data).then(_this._dataIsSynced);
                    return _this;
                }

                /**
                 * Check if the model has been synchonized with the database
                 * @returns {Promise} Resolves when the model has been synchonized with the database
                 */

                _createClass(Model, [{
                    key: 'synced',
                    value: function synced() {
                        return this._dataSource.synced();
                    }

                    /**
                     * Replaces all getters/setters defined on the model implementation with properties that trigger update events to the dataSource.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_replaceModelAccessorsWithDatabinding',
                    value: function _replaceModelAccessorsWithDatabinding() {
                        var _this2 = this;

                        var prototype = Object.getPrototypeOf(this);

                        if (~Object.getOwnPropertyNames(prototype).indexOf('id')) {
                            console.log('Don\'t define an id property to ' + prototype.constructor.name + ', as this property is internally used by the PrioritisedArray');
                        }

                        /* If the code is minified, then this.constructor._name is defined, in that case that also goes for the inheriting classes */
                        while (prototype.constructor._name || !this.constructor._name && prototype.constructor.name !== 'Model') {
                            /* Get all properties except the id and constructor of this model */
                            var propNames = _.difference(Object.getOwnPropertyNames(prototype), ['constructor', 'id']);

                            for (var _iterator = propNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var name = _ref;

                                var descriptor = Object.getOwnPropertyDescriptor(prototype, name);
                                if (descriptor && descriptor.get) {
                                    var value = this[name];
                                    delete this[name];
                                    ObjectHelper.addPropertyToObject(this, name, value, true, true, function () {
                                        _this2._onSetterTriggered();
                                    });
                                }
                            }

                            prototype = Object.getPrototypeOf(prototype);
                        }
                    }

                    /**
                     * Writes data, if present, to the Model's dataSource. Uses a transaction, meaning that only one update is triggered to the dataSource,
                     * even though multiple fields change.
                     * @param {Object} data Data to write, can be null.
                     * @returns {Promise} Resolves when the transaction is complete and synced
                     * @private
                     */

                }, {
                    key: '_writeLocalDataToModel',
                    value: function _writeLocalDataToModel(data) {
                        if (data) {
                            var isDataDifferent = false;
                            for (var name in data) {
                                if (Object.getOwnPropertyDescriptor(this, name) && this[name] !== data[name]) {
                                    isDataDifferent = true;
                                    break;
                                }
                            }

                            if (isDataDifferent) {
                                return this.transaction(function () {
                                    for (var _name in data) {

                                        // only map properties that exists on our model
                                        if (Object.getOwnPropertyDescriptor(this, _name)) {
                                            var value = data[_name];
                                            this[_name] = value;
                                        }
                                    }
                                }.bind(this));
                            }
                        }
                        return Promise.resolve();
                    }
                }]);

                return Model;
            }(PrioritisedObject);

            ChatMessage = function (_Model) {
                _inherits(ChatMessage, _Model);

                function ChatMessage() {
                    _classCallCheck(this, ChatMessage);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(ChatMessage).apply(this, arguments));
                }

                _createClass(ChatMessage, [{
                    key: 'leMessage',
                    get: function get() {}
                }], [{
                    key: '_name',
                    get: function get() {
                        return 'ChatMessage';
                    }
                }]);

                return ChatMessage;
            }(Model);

            ChatMessages = function (_PrioritisedArray) {
                _inherits(ChatMessages, _PrioritisedArray);

                function ChatMessages() {
                    _classCallCheck(this, ChatMessages);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(ChatMessages).call(this, ChatMessage));
                }

                _createClass(ChatMessages, null, [{
                    key: '_name',
                    get: function get() {
                        return 'ChatMessages';
                    }
                }]);

                return ChatMessages;
            }(PrioritisedArray);

            HomeView = (_dec$4 = layout$1.size(1000, 100), _dec2$1 = layout$1.stick.top(), _dec3 = layout$1.animate({
                animation: AnimationController.Animation.FadedZoom,
                transition: { duration: 1000 }
            }), _dec4 = layout$1.translate(0, 0, -10), _dec5 = layout$1.fullSize(), _dec6 = layout$1.translate(0, 0, -5), _dec7 = layout$1.size(500, 500), _dec8 = layout$1.stick.center(), _dec9 = layout$1.translate(0, 0, -4), _dec10 = layout$1.size(500, 500), _dec11 = layout$1.stick.center(), _dec12 = layout$1.size(500, 50), _dec13 = layout$1.dock.bottom(), _dec14 = layout$1.stick.center(), _dec15 = layout$1.size(500, 50), _dec16 = layout$1.dock.bottom(), _dec17 = layout$1.stick.center(), _dec18 = layout$1.size(500, 500), _dec19 = layout$1.stick.center(), _dec20 = layout$1.animate({
                showInitially: false,
                animation: AnimationController.Animation.FadedZoom,
                transition: { duration: 500 }
            }), _dec21 = layout$1.stick.center(), _dec22 = layout$1.size(500, 100), _dec23 = layout$1.dock.bottom(), _dec24 = layout$1.stick.center(), (_class$6 = function (_View) {
                _inherits(HomeView, _View);

                //The Message


                //Footer space

                //View messages area

                function HomeView() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, HomeView);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HomeView).call(this, options));

                    _initDefineProp(_this, 'title', _descriptor, _this);

                    _initDefineProp(_this, 'background', _descriptor2, _this);

                    _initDefineProp(_this, 'messages', _descriptor3, _this);

                    _initDefineProp(_this, 'scrollView', _descriptor4, _this);

                    _initDefineProp(_this, 'footerspace', _descriptor5, _this);

                    _initDefineProp(_this, 'sendbutton', _descriptor6, _this);

                    _initDefineProp(_this, 'submitedmessage', _descriptor7, _this);

                    _initDefineProp(_this, 'inputmessage', _descriptor8, _this);

                    return _this;
                }
                // @event.on('keyup', function(e) { if (e.keyCode == 13) { this.showRenderable('submitedmessage'); }})


                //Inputfield for chat message

                // @event.on('click', function(){ this.showRenderable('submitedmessage'); })

                //Sendbutton

                //le messages

                //Main Background Color


                return HomeView;
            }(View), (_descriptor = _applyDecoratedDescriptor(_class$6.prototype, 'title', [_dec$4, _dec2$1, _dec3], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({
                        content: 'Arva Chat Appje',
                        properties: {
                            textAlign: 'center',
                            color: 'black',
                            fontSize: '50px'
                        }
                    });
                }
            }), _descriptor2 = _applyDecoratedDescriptor(_class$6.prototype, 'background', [_dec4, _dec5], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({ properties: { backgroundColor: 'blanchedalmond' } });
                }
            }), _descriptor3 = _applyDecoratedDescriptor(_class$6.prototype, 'messages', [_dec6, _dec7, _dec8], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({
                        properties: {
                            backgroundColor: 'lightblue'
                        }
                    });
                }
            }), _descriptor4 = _applyDecoratedDescriptor(_class$6.prototype, 'scrollView', [_dec9, _dec10, _dec11], {
                enumerable: true,
                initializer: function initializer() {
                    return new DataBoundScrollView({
                        layout: CollectionLayout,
                        layoutOptions: {
                            itemSize: [undefined, 30]
                        },
                        itemTemplate: function itemTemplate(chatmessage) {
                            return new Surface({ content: '' + chatmessage.leMessage });
                        },
                        dataStore: new ChatMessages()
                    });
                }
            }), _descriptor5 = _applyDecoratedDescriptor(_class$6.prototype, 'footerspace', [_dec12, _dec13, _dec14], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({});
                }
            }), _descriptor6 = _applyDecoratedDescriptor(_class$6.prototype, 'sendbutton', [_dec15, _dec16, _dec17], {
                enumerable: true,
                initializer: function initializer() {
                    return new InputSurface({
                        value: 'Send',
                        type: 'button',
                        properties: {
                            backgroundColor: 'lightblue',
                            borderRadius: '10px',
                            marginTop: '10px'
                        }
                    });
                }
            }), _descriptor7 = _applyDecoratedDescriptor(_class$6.prototype, 'submitedmessage', [_dec18, _dec19, _dec20, _dec21], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface();
                }
            }), _descriptor8 = _applyDecoratedDescriptor(_class$6.prototype, 'inputmessage', [_dec22, _dec23, _dec24], {
                enumerable: true,
                initializer: function initializer() {
                    return new InputSurface({
                        placeholder: '... ... ...',
                        properties: {
                            textAlign: 'center',
                            color: 'black',
                            padding: '20px'
                        }
                    });
                }
            })), _class$6));

            HomeController = function (_Controller) {
                _inherits(HomeController, _Controller);

                function HomeController() {
                    _classCallCheck(this, HomeController);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(HomeController).apply(this, arguments));
                }

                _createClass(HomeController, [{
                    key: 'Index',
                    value: function Index() {
                        var _this2 = this;

                        var chatmessages = new ChatMessages();
                        var chatmessage = chatmessages.add(new ChatMessages());

                        if (!this.homeView) {
                            this.homeView = new HomeView();
                            //on enter event
                            this.homeView.inputmessage.on('keyup', function (e) {
                                if (e.keyCode == 13) {
                                    console.log('pressed enter');
                                    chatmessage.leMessage = this.homeView.inputmessage.getValue();

                                    chatmessages.on('child_added', function (chatmessage) {
                                        console.log('A new chatmessage appeared! It says ' + chatmessage.leMessage);
                                    });
                                }
                            });
                            //on click button event
                            this.homeView.sendbutton.on('click', function () {
                                console.log('clicked button');
                                chatmessage.leMessage = _this2.homeView.inputmessage.getValue();
                                _this2.homeView.inputmessage.setValue('');

                                chatmessages.on('child_added', function (chatmessage) {
                                    console.log('A new chatmessage appeared! It says ' + chatmessage.leMessage);
                                });
                            });
                        }
                        return this.homeView;
                    }
                }], [{
                    key: '_name',
                    get: function get() {
                        return 'HomeController';
                    }
                }]);

                return HomeController;
            }(Controller);

            _export('App', App$$1 = (_temp = _class = function (_ArvaApp) {
                _inherits(App$$1, _ArvaApp);

                function App$$1() {
                    _classCallCheck(this, App$$1);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(App$$1).apply(this, arguments));
                }

                _createClass(App$$1, null, [{
                    key: 'defaultDataSource',

                    /* Define which DataSource to use */

                    /* References to Dependency Injection created App and Controller instances, so they are not garbage collected. */
                    value: function defaultDataSource() {
                        /* Firebase initialization */
                        firebase.initializeApp({
                            apiKey: 'AIzaSyC-_GCWK00_FvFxqMyM-VJKDGc4HeRn2vg',
                            authDomain: 'arvachatappje.firebaseapp.com',
                            databaseURL: 'https://arvachatappje.firebaseio.com',
                            storageBucket: 'arvachatappje.appspot.com'
                        });
                        return new FirebaseDataSource('/', {});
                    }

                    /**
                     *  Called before the App is constructed and before the basic components (Router, Famous Context, Controllers,
                     *  DataSource) have loaded.
                     */

                    /* The controllers that will be used in the app. */

                }, {
                    key: 'initialize',
                    value: function initialize() {
                        /* Change initial route, view animation or something needed before we start */
                        provide(DataSource)(App$$1.defaultDataSource);
                        this.start();
                    }

                    /**
                     * Called after the Router, Famous Context, and Controllers have been instantiated,
                     * but before any Controller method is executed by the Router.
                     */

                }, {
                    key: 'loaded',
                    value: function loaded() {}
                    /* Instantiate things you need before the router is executed here. For example:
                     *
                     * this.references.menu = Injection.get(Menu); */

                    /**
                     * Called by super class after all components (routing, controllers, views, etc.) have been loaded and the
                     * app is up and running.
                     */

                }, {
                    key: 'done',
                    value: function done() {}
                }]);

                return App$$1;
            }(App$1), _class.references = {}, _class.controllers = [HomeController], _temp));

            document.addEventListener('deviceready', App$$1.initialize.bind(App$$1));

            _export('App', App$$1);
        }
    };
});
$__System.register('app/famous.css', [], false, function() {});
$__System.register('app/fonts.css', [], false, function() {});
$__System.register('github:bizboard/arva-js@1.1.1/utils/hotfixes/famouskeyboardoffset.css!github:systemjs/plugin-css@0.1.23/css.js', [], false, function() {});
(function(c){if (typeof document == 'undefined') return; var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})
(".famous-root{width:100%;height:100%;margin:0;padding:0;opacity:.999999;overflow:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}svg{position:absolute}textarea::-webkit-scrollbar{display:none}.famous-container,.famous-group{position:absolute;top:0;left:0;bottom:0;right:0;overflow:visible;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-backface-visibility:visible;backface-visibility:visible;pointer-events:none}.famous-group{width:0;height:0;margin:0;padding:0}.famous-surface{position:absolute;-webkit-transform-origin:center center;transform-origin:center center;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-tap-highlight-color:transparent;pointer-events:auto}.famous-container-group{position:relative;width:100%;height:100%}*{font-family:'Open Sans',sans-serif;font-size:16pt}.famous-root{position:absolute}");
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=bundle.js.map